{"version":3,"sources":["webpack:///./src/smart-components/common/catalog-link.js","webpack:///./src/utilities/use-query.js","webpack:///./src/presentational-components/shared/conditional-link.js","webpack:///./src/helpers/platform/platform-helper.js","webpack:///./src/redux/actions/platform-actions.js","webpack:///./src/smart-components/common/catalog-breadcrumbs.js","webpack:///./src/presentational-components/shared/card-icon.js","webpack:///./src/assets/images/card-icon-default.svg","webpack:///./src/helpers/order/order-helper.js","webpack:///./src/presentational-components/order/order-notification.js","webpack:///./src/redux/actions/order-actions.js","webpack:///./src/helpers/shared/breadcrumbs-creators.js","webpack:///./src/redux/actions/breadcrumbs-actions.js","webpack:///./src/utilities/use-breadcrumbs.js","webpack:///./src/smart-components/order/order-detail/order-detail-title.js","webpack:///./src/smart-components/order/cancel-order-modal.js","webpack:///./src/smart-components/order/order-detail/order-toolbar-actions.js","webpack:///./src/smart-components/order/order-detail/order-detail-information.js","webpack:///./src/smart-components/order/order-detail/order-detail-menu.js","webpack:///./src/smart-components/order/order-detail/order-details.js","webpack:///./src/smart-components/order/order-detail/approval-request.js","webpack:///./src/smart-components/order/order-detail/order-lifecycle.js","webpack:///./src/smart-components/order/order-detail/order-detail.js"],"names":["createSearchQuery","search","searchParams","preserveSearch","paramsQuery","Object","entries","map","key","value","join","length","CatalogLink","pathname","nav","props","useLocation","Component","NavLink","Link","to","propTypes","PropTypes","string","isRequired","shape","bool","defaultProps","useQuery","requiredParams","query","URLSearchParams","reduce","acc","curr","get","ConditionalLink","children","oneOfType","node","arrayOf","axiosInstance","getAxiosInstance","graphqlInstance","getGraphqlInstance","getPlatforms","post","SOURCES_API_BASE","then","data","application_types","sources","getPlatform","platformId","getPlatformItems","filter","options","filterQuery","TOPOLOGICAL_INVENTORY_API_BASE","limit","offset","getPlatformInventories","defaultSettings","getServiceOffering","serviceOfferingId","sourceId","Promise","all","source","source_type_id","icon_url","service","fetchPlatforms","dispatch","type","ActionTypes","PlatformHelper","payload","error","fetchPlatformItems","meta","fetchSelectedPlatform","id","fetchPlatformInventories","fetchServiceOffering","CatalogBreadcrumbs","fragments","useSelector","breadcrumbsReducer","index","title","undefined","exact","className","isActive","CardIcon","src","height","useState","isLoaded","setLoaded","isUnknown","setUnknown","platformIconMapping","platformReducer","defaultIcon","CardIconDefault","threshold","delayTime","style","onError","onLoad","object","number","module","exports","orderApi","getOrderApi","portfolioItemApi","getOrderItemApi","getPortfolioItemApi","getRequestsApi","getServicePlans","portfolioItemId","listServicePlans","getOrderItems","orderIds","CATALOG_API_BASE","orderId","getOrderPortfolioItems","itemIds","itemId","OrderNotification","onClick","clearNotifications","ORDERS_ROUTE","func","fetchServicePlans","OrderHelper","sendSubmitOrder","apiProps","a","async","service_parameters","providerControlParameters","parameters","createOrder","order","orderItem","count","provider_control_parameters","addToOrder","submitOrder","addNotification","variant","description","dismissable","cancelOrder","getState","orderDetail","orderReducer","state","approvalRequest","fetchOrders","filterType","pagination","orders","orderItems","portfolio_item_id","portfolioItems","order_id","fetchOrderDetails","params","platform","portfolio","portfolioItem","progressMessages","ENTITIES_EXTRA_PARAMS","PORTFOLIOS_ROUTE","FRAGMENT_TITLE","PORTFOLIO_ROUTE","portfolioReducer","selectedPortfolio","name","PORTFOLIO_ITEM_ROUTE","EDIT_SURVEY_ROUTE","ADD_PRODUCTS_ROUTE","PLATFORM_ROUTE","selectedPlatform","PLATFORM_SERVICE_OFFERINGS_ROUTE","serviceOffering","ORDER_ROUTE","FRAGMENT_PREFIX","PLATFORMS_ROUTE","createBreadcrumbsFromLocations","INITIALIZE_BREADCRUMBS","result","replace","split","generateTitle","forEach","useBreadcrumbs","updateTriggers","useDispatch","searchObject","useEffect","OrderDetailTitle","portfolioItemName","Title","size","CancelOrderModal","onClose","isOpen","Modal","header","headingLevel","fill","isSmall","actions","Button","isFooterLeftAligned","CANCELABLE_STATES","canCancel","includes","OrderToolbarActions","cancelModalOpen","setCancelModalOpen","ActionGroup","isDisabled","OrderDetailInformation","jobName","orderRequestDate","orderUpdateDate","owner","Split","SplitItem","Level","LevelItem","TextContent","Text","component","TextVariants","small","DateFormat","date","OrderDetailMenu","baseUrl","isFetching","navItems","link","useNavItems","Nav","NavList","activeClassName","OrderDetails","h2","TextList","TextListVariants","dl","TextListItem","TextListItemVariants","dt","dd","created_at","ApprovalRequests","request","target","rel","href","document","baseURI","approval_request_ref","reason","request_completed_at","OrderLifecycle","url","useRouteMatch","orderDetailData","external_url","OrderDetail","setIsFetching","queryValues","match","resetBreadcrumbs","insights","chrome","appNavClick","secondaryNav","keys","Stack","StackItem","updated_at","gutter","Bullseye","Spinner","path","render"],"mappings":"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","file":"js/order-detail.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, NavLink, useLocation } from 'react-router-dom';\n\nconst createSearchQuery = (search, searchParams, preserveSearch) => {\n  const paramsQuery = Object.entries(searchParams)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&');\n  return preserveSearch\n    ? `${search}${paramsQuery.length > 0 ? `&${paramsQuery}` : ''}`\n    : paramsQuery.length > 0\n    ? `?${paramsQuery}`\n    : '';\n};\n\nconst CatalogLink = ({\n  pathname,\n  searchParams,\n  nav,\n  preserveSearch,\n  ...props\n}) => {\n  const { search } = useLocation();\n  const Component = nav ? NavLink : Link;\n  const to = {\n    pathname,\n    search: createSearchQuery(search, searchParams, preserveSearch)\n  };\n  return <Component to={to} {...props} />;\n};\n\nCatalogLink.propTypes = {\n  pathname: PropTypes.string.isRequired,\n  searchParams: PropTypes.shape({\n    [PropTypes.string]: PropTypes.string\n  }),\n  nav: PropTypes.bool,\n  preserveSearch: PropTypes.bool\n};\n\nCatalogLink.defaultProps = {\n  nav: false,\n  preserveSearch: false,\n  searchParams: {}\n};\n\nexport default CatalogLink;\n","import { useLocation } from 'react-router-dom';\n\nconst useQuery = (requiredParams = []) => {\n  const { search } = useLocation();\n  const query = new URLSearchParams(search);\n  return [\n    requiredParams.reduce(\n      (acc, curr) => ({\n        ...acc,\n        [curr]: query.get(curr)\n      }),\n      {}\n    ),\n    search,\n    query\n  ];\n};\n\nexport default useQuery;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CatalogLink from '../../smart-components/common/catalog-link';\n\nconst ConditionalLink = ({ children, pathname, ...props }) =>\n  pathname ? (\n    <CatalogLink pathname={pathname} {...props}>\n      {children}\n    </CatalogLink>\n  ) : (\n    children\n  );\n\nConditionalLink.propTypes = {\n  pathname: PropTypes.string,\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node)\n  ]).isRequired\n};\n\nexport default ConditionalLink;\n","import { getAxiosInstance, getGraphqlInstance } from '../shared/user-login';\nimport {\n  TOPOLOGICAL_INVENTORY_API_BASE,\n  SOURCES_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\nconst axiosInstance = getAxiosInstance();\nconst graphqlInstance = getGraphqlInstance();\n\nconst sourcesQuery = `\nquery {\n  application_types (filter: { name: \"/insights/platform/catalog\" }) {\n    id\n    name\n    sources {\n      id\n      name\n      source_type_id\n    }\n  }\n}`;\n\nexport const getPlatforms = () => {\n  return graphqlInstance\n    .post(`${SOURCES_API_BASE}/graphql`, { query: sourcesQuery })\n    .then(({ data: { application_types } }) => application_types)\n    .then(([{ sources }]) => sources);\n};\n\nexport const getPlatform = (platformId) => {\n  return axiosInstance.get(`${SOURCES_API_BASE}/sources/${platformId}`);\n};\n\nexport const getPlatformItems = (platformId, filter, options) => {\n  const filterQuery = filter ? `&filter[name][contains_i]=${filter}` : '';\n  if (platformId) {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/sources/${platformId}/service_offerings?filter[archived_at][nil]${filterQuery}${\n        options ? `&limit=${options.limit}&offset=${options.offset}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/service_offerings`\n    );\n  }\n};\n\nexport const getPlatformInventories = (\n  platformId,\n  filter = '',\n  options = defaultSettings\n) => {\n  if (platformId) {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/sources/${platformId}/service_inventories?filter[name][contains_i]=${filter}${\n        options ? `&limit=${options.limit}&offset=${options.offset}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/service_inventories?limit=${options.limit}&offset=${options.offset}`\n    );\n  }\n};\n\nexport const getServiceOffering = (serviceOfferingId, sourceId) =>\n  Promise.all([\n    axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/service_offerings/${serviceOfferingId}`\n    ),\n    axiosInstance\n      .get(`${SOURCES_API_BASE}/sources/${sourceId}`)\n      .then((source) => {\n        return axiosInstance\n          .get(`${SOURCES_API_BASE}/source_types/${source.source_type_id}`)\n          .then(({ icon_url }) => ({\n            ...source,\n            icon_url\n          }));\n      })\n  ]).then(([service, source]) => ({\n    service,\n    source\n  }));\n","import * as ActionTypes from '../action-types';\nimport * as PlatformHelper from '../../helpers/platform/platform-helper';\n\nconst doFetchPlatforms = () => (dispatch) => {\n  dispatch({ type: `${ActionTypes.FETCH_PLATFORMS}_PENDING` });\n  return PlatformHelper.getPlatforms()\n    .then((data) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_FULFILLED`,\n        payload: data\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchPlatforms = () => (dispatch) => dispatch(doFetchPlatforms());\n\nexport const fetchPlatformItems = (platformId, filter, options) => ({\n  type: ActionTypes.FETCH_PLATFORM_ITEMS,\n  payload: PlatformHelper.getPlatformItems(platformId, filter, options),\n  meta: {\n    platformId,\n    filter,\n    ...options\n  }\n});\n\nexport const fetchMultiplePlatformItems = (platformsId) => {\n  const platformPromisses = platformsId.map((platformId) =>\n    PlatformHelper.getPlatformItems(platformId).then((data) => ({\n      [platformId]: data\n    }))\n  );\n  return {\n    type: ActionTypes.FETCH_MULTIPLE_PLATFORM_ITEMS,\n    payload: Promise.all(platformPromisses).then((data) =>\n      data.reduce(\n        (acc, curr) => ({\n          ...acc,\n          ...curr\n        }),\n        {}\n      )\n    )\n  };\n};\n\nexport const fetchSelectedPlatform = (id) => ({\n  type: ActionTypes.FETCH_PLATFORM,\n  payload: PlatformHelper.getPlatform(id)\n});\n\nexport const searchPlatformItems = (value) => ({\n  type: ActionTypes.FILTER_PLATFORM_ITEMS,\n  payload: new Promise((resolve) => {\n    resolve(value);\n  })\n});\n\nexport const fetchPlatformInventories = (platformId, filter, options) => ({\n  type: ActionTypes.FETCH_PLATFORM_INVENTORIES,\n  payload: PlatformHelper.getPlatformInventories(platformId, filter, options)\n});\n\nexport const fetchServiceOffering = (...args) => ({\n  type: ActionTypes.FETCH_SERVICE_OFFERING,\n  payload: PlatformHelper.getServiceOffering(...args)\n});\n","import React from 'react';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { useSelector } from 'react-redux';\nimport ConditionalLink from '../../presentational-components/shared/conditional-link';\n\nconst CatalogBreadcrumbs = () => {\n  const fragments = useSelector(\n    ({ breadcrumbsReducer: { fragments } }) => fragments\n  );\n  if (fragments.length <= 1) {\n    return null;\n  }\n\n  return (\n    <Breadcrumb>\n      {fragments.map(({ title, pathname, searchParams }, index) => (\n        <ConditionalLink\n          pathname={!(fragments.length === index + 1) ? pathname : undefined}\n          searchParams={searchParams}\n          nav\n          exact\n          key={pathname}\n          className=\"pf-c-breadcrumb__item\"\n        >\n          <BreadcrumbItem isActive={fragments.length === index + 1}>\n            {title}\n          </BreadcrumbItem>\n        </ConditionalLink>\n      ))}\n    </Breadcrumb>\n  );\n};\n\nexport default CatalogBreadcrumbs;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\nimport { IconPlaceholder } from './loader-placeholders';\nimport CardIconDefault from '../../assets/images/card-icon-default.svg';\n\nconst CardIcon = ({ src, height, sourceId }) => {\n  const [isLoaded, setLoaded] = useState(false);\n  const [isUnknown, setUnknown] = useState(false);\n  const platformIconMapping = useSelector(\n    ({ platformReducer: { platformIconMapping } }) => platformIconMapping\n  );\n  const defaultIcon = sourceId\n    ? platformIconMapping[sourceId]\n    : CardIconDefault;\n\n  return (\n    <div className=\"display-inline-block\">\n      {!isLoaded && <IconPlaceholder height={height} />}\n      <LazyLoadImage\n        threshold={2000}\n        delayTime={0}\n        height={isLoaded ? height : 0}\n        style={{ height: isLoaded ? height : 0 }}\n        className={`card-image ${!isLoaded ? 'hide' : ''}`}\n        onError={() => setUnknown(true)}\n        onLoad={() => setLoaded(true)}\n        src={!src || isUnknown ? defaultIcon : src}\n      />\n    </div>\n  );\n};\n\nCardIcon.propTypes = {\n  src: PropTypes.string,\n  platformId: PropTypes.string,\n  style: PropTypes.object,\n  height: PropTypes.number,\n  sourceId: PropTypes.string\n};\n\nCardIcon.defaultProps = {\n  style: {},\n  height: 40\n};\n\nexport default CardIcon;\n","module.exports = __webpack_public_path__ + \"fonts/card-icon-default.svg\";","/* eslint camelcase: 0 */\nimport {\n  getAxiosInstance,\n  getPortfolioItemApi,\n  getOrderApi,\n  getRequestsApi,\n  getOrderItemApi\n} from '../shared/user-login';\nimport { CATALOG_API_BASE, SOURCES_API_BASE } from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\n\nconst orderApi = getOrderApi();\nconst orderItemApi = getOrderItemApi();\nconst portfolioItemApi = getPortfolioItemApi();\nconst requestsApi = getRequestsApi();\nconst axiosInstance = getAxiosInstance();\n\nexport function getServicePlans(portfolioItemId) {\n  return portfolioItemApi.listServicePlans(portfolioItemId);\n}\n\nexport async function sendSubmitOrder({\n  service_parameters: { providerControlParameters, ...service_parameters },\n  ...parameters\n}) {\n  let order = await orderApi.createOrder();\n  let orderItem = {};\n  orderItem.count = 1;\n  orderItem = {\n    ...orderItem,\n    ...parameters,\n    service_parameters,\n    provider_control_parameters: providerControlParameters || {}\n  };\n  await orderApi.addToOrder(order.id, orderItem);\n  return orderApi.submitOrder(order.id);\n}\n\nexport function listRequests() {\n  return requestsApi.listRequests().then((data) => ({\n    ...data,\n    data: data.data.map(({ decision, ...item }) => ({\n      ...item,\n      state: decision\n    }))\n  }));\n}\n\nexport function cancelOrder(orderId) {\n  return orderApi.cancelOrder(orderId);\n}\n\nconst getOrderItems = (orderIds) =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/order_items?${orderIds\n      .map((orderId) => `filter[order_id][]=${orderId}`)\n      .join('&')}`\n  );\n\nconst getOrderPortfolioItems = (itemIds) =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolio_items?${itemIds\n      .map((itemId) => `filter[id][]=${itemId}`)\n      .join('&')}`\n  );\n\nexport const getOrders = (filterType, filter, pagination = defaultSettings) =>\n  axiosInstance\n    .get(\n      `${CATALOG_API_BASE}/orders?filter[${filterType}][contains_i]=${filter}&limit=${pagination.limit}&offset=${pagination.offset}`\n    ) // eslint-disable-line max-len\n    .then((orders) =>\n      getOrderItems(orders.data.map(({ id }) => id)).then((orderItems) =>\n        getOrderPortfolioItems(\n          orderItems.data.map(({ portfolio_item_id }) => portfolio_item_id)\n        ).then((portfolioItems) => {\n          return {\n            portfolioItems,\n            ...orders,\n            data: orders.data.map((order) => ({\n              ...order,\n              orderItems: orderItems.data.filter(\n                ({ order_id }) => order_id === order.id\n              )\n            }))\n          };\n        })\n      )\n    );\n\nexport function getOrderApprovalRequests(orderItemId) {\n  return orderItemApi.listApprovalRequests(orderItemId);\n}\n\nexport const getOrderDetail = (params) => {\n  return Promise.all([\n    axiosInstance.get(`${CATALOG_API_BASE}/orders/${params.order}`),\n    axiosInstance.get(\n      `${CATALOG_API_BASE}/order_items/${params['order-item']}`\n    ),\n    axiosInstance.get(\n      `${CATALOG_API_BASE}/portfolio_items/${params['portfolio-item']}`\n    ),\n    axiosInstance.get(`${SOURCES_API_BASE}/sources/${params.platform}`),\n    axiosInstance.get(\n      `${CATALOG_API_BASE}/order_items/${params['order-item']}/progress_messages`\n    ),\n    axiosInstance.get(`${CATALOG_API_BASE}/portfolios/${params.portfolio}`),\n    axiosInstance.get(\n      `${CATALOG_API_BASE}/order_items/${params['order-item']}/approval_requests`\n    )\n  ]);\n};\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications';\nimport { ORDERS_ROUTE } from '../../constants/routes';\n\nconst OrderNotification = ({ id, dispatch }) => (\n  <Fragment>\n    You can track the progress of Order # {id} in your{' '}\n    <Link onClick={() => dispatch(clearNotifications())} to={ORDERS_ROUTE}>\n      Orders\n    </Link>{' '}\n    page.\n  </Fragment>\n);\n\nOrderNotification.propTypes = {\n  id: PropTypes.string.isRequired,\n  dispatch: PropTypes.func.isRequired\n};\n\nexport default OrderNotification;\n","import React from 'react';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\n\nimport * as ActionTypes from '../action-types';\nimport * as OrderHelper from '../../helpers/order/order-helper';\nimport OrderNotification from '../../presentational-components/order/order-notification';\n\nexport const fetchServicePlans = (portfolioItemId) => ({\n  type: ActionTypes.FETCH_SERVICE_PLANS,\n  payload: OrderHelper.getServicePlans(portfolioItemId)\n});\n\nexport const updateServiceData = (data) => ({\n  type: ActionTypes.UPDATE_SERVICE_DATA,\n  payload: { serviceData: data }\n});\n\nexport const setSelectedPlan = (data) => ({\n  type: ActionTypes.SET_SELECTED_PLAN,\n  payload: data\n});\n\nexport const sendSubmitOrder = (apiProps) => (dispatch) =>\n  dispatch({\n    type: ActionTypes.SUBMIT_SERVICE_ORDER,\n    payload: OrderHelper.sendSubmitOrder(apiProps).then(({ id }) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been accepted successfully',\n          description: <OrderNotification id={id} dispatch={dispatch} />,\n          dismissable: true\n        })\n      )\n    )\n  });\n\nexport const fetchRequests = () => ({\n  type: ActionTypes.FETCH_REQUESTS,\n  payload: OrderHelper.listRequests()\n});\n\nexport const cancelOrder = (orderId) => (dispatch, getState) => {\n  dispatch({ type: `${ActionTypes.CANCEL_ORDER}_PENDING` });\n  const {\n    orderReducer: { orderDetail }\n  } = getState();\n  return OrderHelper.cancelOrder(orderId)\n    .then(() => {\n      orderDetail.order.state = 'Canceled';\n      if (\n        orderDetail.approvalRequest &&\n        orderDetail.approvalRequest.length > 0\n      ) {\n        orderDetail.approvalRequest[0].state = 'canceled';\n      }\n\n      dispatch({\n        type: ActionTypes.SET_ORDER_DETAIL,\n        payload: { ...orderDetail }\n      });\n      return orderDetail;\n    })\n    .then((orderDetail) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been canceled successfully',\n          description: `Order ${`Order #${orderDetail.order.id}`} was canceled.`,\n          dismissable: true\n        })\n      )\n    )\n    .then(() => dispatch({ type: `${ActionTypes.CANCEL_ORDER}_FULFILLED` }))\n    .catch((error) => {\n      dispatch({\n        type: `${ActionTypes.CANCEL_ORDER}_REJECTED`,\n        payload: error\n      });\n    });\n};\n\nexport const fetchOrders = (filterType, filter, pagination) => (dispatch) => {\n  dispatch({ type: `${ActionTypes.FETCH_ORDERS}_PENDING` });\n  return OrderHelper.getOrders(filterType, filter, pagination)\n    .then(({ portfolioItems, ...orders }) => {\n      dispatch({\n        type: ActionTypes.SET_PORTFOLIO_ITEMS,\n        payload: portfolioItems\n      });\n      return dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_FULFILLED`,\n        meta: { filter },\n        payload: orders\n      });\n    })\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchOrderDetails = (params) => (dispatch) => {\n  dispatch({ type: `${ActionTypes.SET_ORDER_DETAIL}_PENDING` });\n  return OrderHelper.getOrderDetail(params)\n    .then(\n      ([\n        order,\n        orderItem,\n        portfolioItem,\n        platform,\n        progressMessages,\n        portfolio,\n        approvalRequest\n      ]) =>\n        dispatch({\n          type: `${ActionTypes.SET_ORDER_DETAIL}_FULFILLED`,\n          payload: {\n            order,\n            orderItem,\n            portfolioItem,\n            platform,\n            progressMessages,\n            portfolio,\n            approvalRequest\n          }\n        })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_DETAIL}_REJECTED`,\n        payload: error\n      })\n    );\n};\n","import {\n  PORTFOLIOS_ROUTE,\n  PORTFOLIO_ROUTE,\n  PORTFOLIO_ITEM_ROUTE,\n  ORDER_ROUTE,\n  PLATFORM_ROUTE,\n  PLATFORM_SERVICE_OFFERINGS_ROUTE,\n  PLATFORMS_ROUTE,\n  ORDERS_ROUTE,\n  EDIT_SURVEY_ROUTE,\n  ADD_PRODUCTS_ROUTE\n} from '../../constants/routes';\n\nexport const BASE_PORTFOLIO_FRAGMENTS = [\n  {\n    title: 'Portfolios',\n    pathname: PORTFOLIOS_ROUTE,\n    searchParams: {}\n  }\n];\n\nexport const ENTITIES_EXTRA_PARAMS = {\n  'portfolio-item': ['source']\n};\n\nexport const FRAGMENT_TITLE = {\n  [PORTFOLIO_ROUTE]: (getState) =>\n    getState().portfolioReducer.selectedPortfolio.name,\n  [PORTFOLIO_ITEM_ROUTE]: (getState) =>\n    getState().portfolioReducer.portfolioItem.portfolioItem.name,\n  [EDIT_SURVEY_ROUTE]: () => 'Edit survey',\n  [ADD_PRODUCTS_ROUTE]: () => 'Add products',\n  [PLATFORM_ROUTE]: (getState) =>\n    getState().platformReducer.selectedPlatform.name,\n  [PLATFORM_SERVICE_OFFERINGS_ROUTE]: (getState) =>\n    getState().platformReducer.serviceOffering.service.name,\n  [ORDER_ROUTE]: (getState) => {\n    const { portfolioItem, order } = getState().orderReducer.orderDetail;\n    return `${portfolioItem.name} # ${order.id}`;\n  }\n};\n\nexport const FRAGMENT_PREFIX = {\n  [PORTFOLIO_ROUTE]: {\n    pathname: PORTFOLIOS_ROUTE,\n    title: 'Portfolios',\n    searchParams: {}\n  },\n  [PLATFORM_ROUTE]: {\n    pathname: PLATFORMS_ROUTE,\n    title: 'Platforms',\n    searchParams: {}\n  },\n  [ORDER_ROUTE]: {\n    pathname: ORDERS_ROUTE,\n    title: 'Orders',\n    searchParams: {}\n  }\n};\n","import { INITIALIZE_BREADCRUMBS } from '../action-types';\nimport {\n  FRAGMENT_TITLE,\n  ENTITIES_EXTRA_PARAMS,\n  FRAGMENT_PREFIX\n} from '../../helpers/shared/breadcrumbs-creators';\n\nexport const createBreadcrumbsFromLocations = (pathname = '', search = {}) => (\n  dispatch,\n  getState\n) => {\n  if (pathname.length === 0) {\n    return dispatch({ type: INITIALIZE_BREADCRUMBS, payload: [] });\n  }\n\n  let result = pathname\n    .replace(/^\\//, '')\n    .split('/')\n    .reduce((acc, curr, index) => {\n      const pathname = `${\n        index > 0 && acc[index - 1] ? acc[index - 1].pathname : ''\n      }/${curr}`;\n\n      const generateTitle = FRAGMENT_TITLE[pathname];\n      if (!generateTitle) {\n        return acc;\n      }\n\n      const searchParams = {\n        ...(index > 0 && acc[index - 1].searchParams),\n        ...(search[curr] ? { [curr]: search[curr] } : {})\n      };\n      if (ENTITIES_EXTRA_PARAMS[curr]) {\n        ENTITIES_EXTRA_PARAMS[curr].forEach((key) => {\n          searchParams[key] = search[key];\n        });\n      }\n\n      return [\n        ...acc,\n        {\n          pathname,\n          searchParams,\n          title: generateTitle(getState)\n        }\n      ];\n    }, []);\n  if (result.length > 0 && FRAGMENT_PREFIX[result[0].pathname]) {\n    result = [FRAGMENT_PREFIX[result[0].pathname], ...result];\n  }\n\n  return dispatch({ type: INITIALIZE_BREADCRUMBS, payload: result });\n};\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { createBreadcrumbsFromLocations } from '../redux/actions/breadcrumbs-actions';\n\nconst useBreadcrumbs = (updateTriggers = []) => {\n  const dispatch = useDispatch();\n  const { pathname, search } = useLocation();\n  if (updateTriggers.length === 0) {\n    return dispatch(createBreadcrumbsFromLocations('', {}));\n  }\n\n  const searchParams = new URLSearchParams(search);\n  const searchObject = {};\n  searchParams.forEach((value, key) => {\n    searchObject[key] = value;\n  });\n\n  useEffect(() => {\n    dispatch(createBreadcrumbsFromLocations(pathname, searchObject));\n  }, [pathname, ...updateTriggers]);\n\n  return () => dispatch(createBreadcrumbsFromLocations('', {}));\n};\n\nexport default useBreadcrumbs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Title } from '@patternfly/react-core';\n\nconst OrderDetailTitle = ({ portfolioItemName, orderId }) => (\n  <Title size=\"3xl\">\n    {portfolioItemName} # {orderId}\n  </Title>\n);\n\nOrderDetailTitle.propTypes = {\n  portfolioItemName: PropTypes.string.isRequired,\n  orderId: PropTypes.string.isRequired\n};\n\nexport default OrderDetailTitle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Title } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\n\nconst CancelOrderModal = ({ name, cancelOrder, onClose, isOpen }) => (\n  <Modal\n    isOpen={isOpen}\n    onClose={onClose}\n    title=\" \"\n    header={\n      <Title size=\"2xl\" headingLevel=\"h2\">\n        <ExclamationTriangleIcon fill=\"#F0AB00\" /> Cancel order\n      </Title>\n    }\n    isSmall\n    actions={[\n      <Button\n        onClick={cancelOrder}\n        key=\"cancel-order\"\n        id=\"cancel-order\"\n        variant=\"danger\"\n      >\n        Cancel order\n      </Button>,\n      <Button onClick={onClose} key=\"keep-order\" id=\"keep-order\" variant=\"link\">\n        Keep order\n      </Button>\n    ]}\n    isFooterLeftAligned\n  >\n    Are you sure you want to cancel {name}?\n  </Modal>\n);\n\nCancelOrderModal.propTypes = {\n  name: PropTypes.string.isRequired,\n  cancelOrder: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n  isOpen: PropTypes.bool\n};\n\nexport default CancelOrderModal;\n","import React, { useState, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\n\nimport { cancelOrder } from '../../../redux/actions/order-actions';\nimport CancelOrderModal from '../cancel-order-modal';\n\nconst CANCELABLE_STATES = ['Approval Pending'];\n\nconst canCancel = (state) => CANCELABLE_STATES.includes(state);\n\nconst OrderToolbarActions = ({ state, orderId, portfolioItemName }) => {\n  const dispatch = useDispatch();\n  const [cancelModalOpen, setCancelModalOpen] = useState(false);\n  return (\n    <Fragment>\n      <CancelOrderModal\n        onClose={() => setCancelModalOpen(false)}\n        isOpen={cancelModalOpen}\n        cancelOrder={() => dispatch(cancelOrder(orderId))}\n        name={portfolioItemName}\n      />\n      <ActionGroup>\n        <Button\n          onClick={() => setCancelModalOpen(true)}\n          isDisabled={!canCancel(state)}\n          type=\"button\"\n          className=\"pf-u-mr-md\"\n          id=\"cancel-order-action\"\n        >\n          Cancel order\n        </Button>\n        <Button isDisabled type=\"button\">\n          Reorder\n        </Button>\n      </ActionGroup>\n    </Fragment>\n  );\n};\n\nOrderToolbarActions.propTypes = {\n  state: PropTypes.string,\n  orderId: PropTypes.string.isRequired,\n  portfolioItemName: PropTypes.string.isRequired\n};\n\nexport default OrderToolbarActions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Split,\n  SplitItem,\n  LevelItem,\n  Level,\n  Title,\n  TextContent,\n  Text,\n  TextVariants\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/DateFormat';\n\nimport CardIcon from '../../../presentational-components/shared/card-icon';\nimport { CATALOG_API_BASE } from '../../../utilities/constants';\n\nconst OrderDetailInformation = ({\n  jobName,\n  state,\n  orderRequestDate,\n  orderUpdateDate,\n  owner,\n  portfolioItemId,\n  sourceId\n}) => (\n  <Split className=\"pf-u-mt-sm\">\n    <SplitItem className=\"pf-u-mr-md\">\n      <CardIcon\n        sourceId={sourceId}\n        height={60}\n        src={`${CATALOG_API_BASE}/portfolio_items/${portfolioItemId}/icon`}\n      />\n    </SplitItem>\n    <SplitItem>\n      <Level>\n        <LevelItem className=\"pf-u-mr-lg\">\n          <Title headingLevel=\"h5\" size=\"md\">\n            {jobName}\n          </Title>\n        </LevelItem>\n        <LevelItem>\n          <Title headingLevel=\"h5\" size=\"md\">\n            Status:{' '}\n            {state === 'Failed' && (\n              <ExclamationCircleIcon className=\"pf-u-mr-sm icon-danger-fill\" />\n            )}{' '}\n            {state}\n          </Title>\n        </LevelItem>\n      </Level>\n      <Level>\n        <LevelItem className=\"pf-u-mr-lg\">\n          <TextContent>\n            <Text component={TextVariants.small}>\n              Ordered&nbsp;\n              <DateFormat date={orderRequestDate} type=\"relative\" />\n            </Text>\n          </TextContent>\n        </LevelItem>\n        <LevelItem className=\"pf-u-mr-lg\">\n          <TextContent>\n            <Text component={TextVariants.small}>Ordered by {owner}</Text>\n          </TextContent>\n        </LevelItem>\n        <LevelItem>\n          <TextContent>\n            <Text component={TextVariants.small}>\n              Last updated&nbsp;\n              <DateFormat date={orderUpdateDate} type=\"relative\" />\n            </Text>\n          </TextContent>\n        </LevelItem>\n      </Level>\n    </SplitItem>\n  </Split>\n);\n\nOrderDetailInformation.propTypes = {\n  portfolioItemId: PropTypes.string.isRequired,\n  sourceId: PropTypes.string.isRequired,\n  state: PropTypes.string.isRequired,\n  jobName: PropTypes.string.isRequired,\n  orderRequestDate: PropTypes.string.isRequired,\n  orderUpdateDate: PropTypes.string.isRequired,\n  owner: PropTypes.string.isRequired\n};\n\nexport default OrderDetailInformation;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  NavList,\n  Nav\n} from '@patternfly/react-core';\nimport CatalogLink from '../../common/catalog-link';\n\nconst useNavItems = ({ state } = {}) => [\n  {\n    link: '',\n    title: 'Order details'\n  },\n  {\n    link: '/approval',\n    title: 'Approval'\n  },\n  {\n    link: '/provision',\n    title: 'Provision',\n    isDisabled: true\n  },\n  {\n    link: '/lifecycle',\n    title: 'Lifecycle',\n    isDisabled: state !== 'Completed'\n  }\n];\n\nconst OrderDetailMenu = ({ baseUrl, isFetching }) => {\n  const orderDetailData = useSelector(\n    ({ orderReducer: { orderDetail } }) => orderDetail || {}\n  );\n  const { order } = orderDetailData;\n  const navItems = useNavItems(order);\n  return (\n    <Nav>\n      <NavList className=\"orders-side-nav-list\">\n        <li className=\"pf-c-nav__item orders-nav-section-group\">\n          <TextContent>\n            <Text component={TextVariants.small}>Order steps</Text>\n          </TextContent>\n        </li>\n        {navItems.map(({ link, title, isDisabled }) => (\n          <li\n            key={link || title}\n            className={`pf-c-nav__item orders-side-nav-item orders-side-nav-category${\n              isDisabled || isFetching ? ' disabled' : ''\n            }`}\n          >\n            <CatalogLink\n              exact\n              nav\n              pathname={`${baseUrl}${link}`}\n              preserveSearch\n              className=\"pf-c-nav__link orders-side-nav-link\"\n              activeClassName=\"pf-m-active\"\n            >\n              {title}\n            </CatalogLink>\n          </li>\n        ))}\n      </NavList>\n    </Nav>\n  );\n};\n\nOrderDetailMenu.propTypes = {\n  baseUrl: PropTypes.string.isRequired,\n  isFetching: PropTypes.bool\n};\n\nexport default OrderDetailMenu;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants\n} from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/DateFormat';\n\nimport ReactJsonView from 'react-json-view';\n\nconst OrderDetails = () => {\n  const {\n    order,\n    platform,\n    progressMessages,\n    portfolio,\n    orderItem\n  } = useSelector(({ orderReducer: { orderDetail } }) => orderDetail);\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.h2}>Order details</Text>\n      <TextList component={TextListVariants.dl}>\n        <TextListItem component={TextListItemVariants.dt}>\n          Order ID\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dd}>\n          {order.id}\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dt}>Ordered</TextListItem>\n        <TextListItem component={TextListItemVariants.dd}>\n          <DateFormat date={order.created_at} variant=\"relative\" />\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dt}>\n          Portfolio\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dd}>\n          {portfolio.name}\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dt}>\n          Platform\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dd}>\n          {platform.name}\n        </TextListItem>\n      </TextList>\n      <hr className=\"pf-c-divider\" />\n      <Text component={TextVariants.h2}>Order parameters</Text>\n      <ReactJsonView src={orderItem.service_parameters} />\n      <Text component={TextVariants.h2}>Progress messages</Text>\n      <ReactJsonView src={progressMessages.data} />\n    </TextContent>\n  );\n};\n\nexport default OrderDetails;\n","import React, { Fragment } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants\n} from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/DateFormat';\n\nconst ApprovalRequests = () => {\n  const { order, approvalRequest } = useSelector(\n    ({ orderReducer: { orderDetail } }) => orderDetail\n  );\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.h2}>Approval requests</Text>\n      {approvalRequest.data.map((request) => (\n        <TextList key={request.id} component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Request ID\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href={`${document.baseURI}ansible/catalog/approval/requests/detail/${request.approval_request_ref}`}\n            >\n              {request.approval_request_ref}\n            </a>\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Request created\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            <DateFormat date={order.created_at} variant=\"relative\" />\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>State</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {request.state}\n          </TextListItem>\n          {request.reason && (\n            <Fragment>\n              <TextListItem component={TextListItemVariants.dt}>\n                Approval reason\n              </TextListItem>\n              <TextListItem component={TextListItemVariants.dd}>\n                {request.reason}\n              </TextListItem>\n            </Fragment>\n          )}\n          {request.request_completed_at && (\n            <Fragment>\n              <TextListItem component={TextListItemVariants.dt}>\n                Completed at\n              </TextListItem>\n              <TextListItem component={TextListItemVariants.dd}>\n                <DateFormat\n                  date={request.request_completed_at}\n                  variant=\"relative\"\n                />\n              </TextListItem>\n            </Fragment>\n          )}\n        </TextList>\n      ))}\n    </TextContent>\n  );\n};\n\nexport default ApprovalRequests;\n","import React from 'react';\nimport { Redirect, useRouteMatch } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport useQuery from '../../../utilities/use-query';\nimport { ORDER_ROUTE } from '../../../constants/routes';\n\nconst OrderLifecycle = () => {\n  const [, search] = useQuery([]);\n  const { url } = useRouteMatch(ORDER_ROUTE);\n  const orderDetailData = useSelector(\n    ({ orderReducer: { orderDetail } }) => orderDetail || {}\n  );\n  const { order, orderItem } = orderDetailData;\n  if (order.state !== 'Completed') {\n    return (\n      <Redirect\n        to={{\n          pathname: url,\n          search\n        }}\n      />\n    );\n  }\n\n  return (\n    <div>\n      <a\n        href={orderItem.external_url}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Manage product\n      </a>\n    </div>\n  );\n};\n\nexport default OrderLifecycle;\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { Route, Switch, useRouteMatch, Redirect } from 'react-router-dom';\nimport {\n  Stack,\n  StackItem,\n  Level,\n  LevelItem,\n  Split,\n  SplitItem,\n  Bullseye\n} from '@patternfly/react-core';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/components/Spinner';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchOrderDetails } from '../../../redux/actions/order-actions';\nimport OrderDetailTitle from './order-detail-title';\nimport OrderToolbarActions from './order-toolbar-actions';\nimport OrderDetailInformation from './order-detail-information';\nimport OrderDetailMenu from './order-detail-menu';\nimport OrderDetails from './order-details';\nimport ApprovalRequests from './approval-request';\nimport { OrderDetailToolbarPlaceholder } from '../../../presentational-components/shared/loader-placeholders';\nimport useQuery from '../../../utilities/use-query';\nimport OrderLifecycle from './order-lifecycle';\nimport CatalogBreadcrumbs from '../../common/catalog-breadcrumbs';\nimport useBreadcrumbs from '../../../utilities/use-breadcrumbs';\nimport { fetchPlatforms } from '../../../redux/actions/platform-actions';\nimport { ORDER_ROUTE, ORDERS_ROUTE } from '../../../constants/routes';\n\nconst requiredParams = [\n  'order-item',\n  'portfolio-item',\n  'platform',\n  'portfolio',\n  'order'\n];\n\nconst OrderDetail = () => {\n  const [isFetching, setIsFetching] = useState(true);\n  const [queryValues] = useQuery(requiredParams);\n  const orderDetailData = useSelector(\n    ({ orderReducer: { orderDetail } }) => orderDetail || {}\n  );\n  const match = useRouteMatch(ORDER_ROUTE);\n  const dispatch = useDispatch();\n\n  const resetBreadcrumbs = useBreadcrumbs([orderDetailData]);\n  useEffect(() => {\n    insights.chrome.appNavClick({ id: 'orders', secondaryNav: true });\n    setIsFetching(true);\n    Promise.all([\n      dispatch(fetchPlatforms()),\n      dispatch(fetchOrderDetails(queryValues))\n    ]).then(() => setIsFetching(false));\n    return () => resetBreadcrumbs();\n  }, []);\n\n  if (!isFetching && Object.keys(orderDetailData).length === 0) {\n    return <Redirect to={ORDERS_ROUTE} />;\n  }\n\n  const { order, portfolioItem, platform, orderItem } = orderDetailData;\n\n  return (\n    <Stack className=\"orders bg-fill\">\n      <StackItem className=\"orders separator pf-u-p-lg\">\n        {isFetching ? (\n          <OrderDetailToolbarPlaceholder />\n        ) : (\n          <Fragment>\n            <Level className=\"pf-u-mb-md\">\n              <CatalogBreadcrumbs />\n            </Level>\n            <Level>\n              <LevelItem>\n                <OrderDetailTitle\n                  portfolioItemName={portfolioItem.name}\n                  orderId={order.id}\n                />\n              </LevelItem>\n              <LevelItem>\n                <OrderToolbarActions\n                  portfolioItemName={portfolioItem.name}\n                  orderId={order.id}\n                  state={order.state}\n                />\n              </LevelItem>\n            </Level>\n            <Level>\n              <OrderDetailInformation\n                portfolioItemId={portfolioItem.id}\n                sourceId={platform.id}\n                state={order.state}\n                jobName={portfolioItem.name}\n                orderRequestDate={order.created_at}\n                orderUpdateDate={orderItem.updated_at}\n                owner={order.owner}\n              />\n            </Level>\n          </Fragment>\n        )}\n      </StackItem>\n      <StackItem className=\"pf-u-pt-xl\">\n        <Split gutter=\"md\" className=\"orders-nav-layout\">\n          <SplitItem className=\"order-detail-nav-cotainer\">\n            <OrderDetailMenu isFetching={isFetching} baseUrl={match.url} />\n          </SplitItem>\n          <SplitItem className=\"order-detail-content-cotainer\">\n            {isFetching ? (\n              <Bullseye>\n                <Spinner />\n              </Bullseye>\n            ) : (\n              <Switch>\n                <Route\n                  path={`${match.url}/approval`}\n                  component={ApprovalRequests}\n                />\n                <Route\n                  path={`${match.url}/provision`}\n                  render={() => <div>provision</div>}\n                />\n                <Route path={`${match.url}/lifecycle`}>\n                  <OrderLifecycle />\n                </Route>\n                <Route path={match.url} component={OrderDetails} />\n              </Switch>\n            )}\n          </SplitItem>\n        </Split>\n      </StackItem>\n    </Stack>\n  );\n};\n\nexport default OrderDetail;\n"],"sourceRoot":""}