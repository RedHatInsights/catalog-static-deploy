{"version":3,"file":"js/platform-inventories.ace565b134046c40f6cf.js","mappings":"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","sources":["webpack:///./src/presentational-components/shared/content-list.tsx","webpack:///./src/smart-components/platform/platform-inventories.js","webpack:///./src/smart-components/platform/platform-table-helpers.js"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { Fragment, useState, useEffect, ReactNode } from 'react';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableVariant,\n  IActionsResolver,\n  IAreActionsDisabled,\n  IRow,\n  ICell\n} from '@patternfly/react-table';\n\nimport { ListLoader } from './loader-placeholders';\nimport filteringMessages from '../../messages/filtering.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\n\nconst NoItems: React.ComponentType = () => {\n  const formatMessage = useFormatMessage();\n  return (\n    <Text component={TextVariants.h1}>\n      {formatMessage(filteringMessages.noItems)}\n    </Text>\n  );\n};\n\nexport interface ContentListProps {\n  data: IRow[];\n  columns: (string | ICell)[];\n  isCompact?: boolean;\n  isLoading?: boolean;\n  actionResolver?: IActionsResolver;\n  areActionsDisabled?: IAreActionsDisabled;\n  borders?: boolean;\n  routes?: () => ReactNode;\n  titlePlural?: ReactNode;\n  renderEmptyState: () => ReactNode;\n  ouiaId?: string;\n}\n\nconst ContentList: React.ComponentType<ContentListProps> = ({\n  data,\n  columns,\n  isCompact = false,\n  isLoading = false,\n  actionResolver,\n  areActionsDisabled,\n  borders = true,\n  routes = () => null,\n  titlePlural,\n  renderEmptyState,\n  ouiaId\n}) => {\n  const [rows, setRows] = useState<IRow[]>([]);\n\n  useEffect(() => {\n    setRows(data);\n  }, [data]);\n\n  return isLoading ? (\n    <ListLoader />\n  ) : (\n    <Fragment>\n      {rows.length === 0 ? (\n        renderEmptyState ? (\n          renderEmptyState()\n        ) : (\n          <NoItems />\n        )\n      ) : (\n        <Fragment>\n          {routes()}\n          <Table\n            ouiaId={ouiaId}\n            aria-label={`${titlePlural} table`}\n            variant={isCompact ? TableVariant.compact : undefined}\n            borders={borders}\n            rows={rows}\n            cells={columns}\n            actionResolver={actionResolver}\n            areActionsDisabled={areActionsDisabled}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nexport default ContentList;\n","import React, { Fragment, useEffect, useReducer, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { Section } from '@redhat-cloud-services/frontend-components/Section';\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport ToolbarRenderer from '../../toolbar/toolbar-renderer';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport { fetchPlatformInventories } from '../../redux/actions/platform-actions';\nimport { fetchPlatformInventories as fetchPlatformInventoriesS } from '../../redux/actions/platform-actions-s';\nimport { createPlatformsFilterToolbarSchema } from '../../toolbar/schemas/platforms-toolbar.schema';\nimport ContentGaleryEmptyState from '../../presentational-components/shared/content-gallery-empty-state';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport ContentList from '../../presentational-components/shared/content-list';\nimport { createRows } from './platform-table-helpers.js';\nimport AsyncPagination from '../common/async-pagination';\nimport BottomPaginationContainer from '../../presentational-components/shared/bottom-pagination-container';\nimport useQuery from '../../utilities/use-query';\nimport labelMessages from '../../messages/labels.messages';\nimport platformsMessages from '../../messages/platforms.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\n\nconst initialState = {\n  filterValue: '',\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false\n};\n\nconst debouncedFilter = asyncFormValidator(\n  (id, value, dispatch, filteringCallback, meta = defaultSettings) => {\n    filteringCallback(true);\n    dispatch(\n      window.catalog?.standalone\n        ? fetchPlatformInventoriesS(id, value, meta)\n        : fetchPlatformInventories(id, value, meta)\n    ).then(() => filteringCallback(false));\n  },\n  1000\n);\n\nconst platformInventoriesState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return { ...state, filterValue: action.payload };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst PlatformInventories = () => {\n  const formatMessage = useFormatMessage();\n  const { current: columns } = useRef([\n    formatMessage(labelMessages.name),\n    formatMessage(labelMessages.description),\n    formatMessage(labelMessages.created),\n    formatMessage(platformsMessages.workflowColumn)\n  ]);\n  const [{ filterValue, isFetching, isFiltering }, stateDispatch] = useReducer(\n    platformInventoriesState,\n    initialState\n  );\n  const { data, results, count, meta } = useSelector(\n    ({ platformReducer: { platformInventories } }) => platformInventories\n  );\n  const platform = useSelector(\n    ({ platformReducer: { selectedPlatform } }) => selectedPlatform\n  );\n  const dispatch = useDispatch();\n  const [{ platform: id }] = useQuery(['platform']);\n  const history = useHistory();\n\n  useEffect(() => {\n    dispatch(\n      window.catalog?.standalone\n        ? fetchPlatformInventoriesS(id, filterValue, defaultSettings)\n        : fetchPlatformInventories(id, filterValue, defaultSettings)\n    ).then(() => stateDispatch({ type: 'setFetching', payload: false }));\n    scrollToTop();\n  }, []);\n\n  const handleFilterChange = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      id,\n      value,\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering }),\n      {\n        ...meta,\n        offset: 0\n      }\n    );\n  };\n\n  const actionResolver = (inventoryData) => {\n    return [\n      {\n        title: 'Set approval',\n        onClick: () =>\n          history.push({\n            pathname: '/platforms/platform/platform-inventories/edit-workflow',\n            search: `?platform=${id}&inventory=${inventoryData.id}`\n          })\n      }\n    ];\n  };\n\n  const dataSet = data ? data : results;\n  const metaInfo = meta ? meta : { count };\n  const inventoryRows = dataSet ? createRows(dataSet, filterValue) : [];\n  const title = platform ? platform.name : '';\n  return (\n    <Fragment>\n      <ToolbarRenderer\n        schema={createPlatformsFilterToolbarSchema({\n          onFilterChange: handleFilterChange,\n          searchValue: filterValue,\n          filterPlaceholder: formatMessage(platformsMessages.inventoriesFilter),\n          meta: metaInfo,\n          apiRequest: (_, options) =>\n            dispatch(\n              window.catalog?.standalone\n                ? fetchPlatformInventoriesS(id, filterValue, options)\n                : fetchPlatformInventories(id, filterValue, options)\n            )\n        })}\n      />\n      <Section type=\"content\">\n        <ContentList\n          ouiaId={'PlatformsTable'}\n          title={title}\n          data={inventoryRows}\n          columns={columns}\n          isLoading={isFetching || isFiltering}\n          actionResolver={actionResolver}\n          renderEmptyState={() => (\n            <ContentGaleryEmptyState\n              title=\"No inventories\"\n              Icon={SearchIcon}\n              description={\n                filterValue === ''\n                  ? formatMessage(platformsMessages.noInventoriesDescription)\n                  : formatMessage(\n                      platformsMessages.noInventoriesFilterDescription\n                    )\n              }\n            />\n          )}\n        />\n      </Section>\n\n      {metaInfo.count > 0 && (\n        <BottomPaginationContainer>\n          <AsyncPagination\n            dropDirection=\"up\"\n            meta={metaInfo}\n            apiRequest={(_, options) =>\n              dispatch(\n                window.catalog?.standalone\n                  ? fetchPlatformInventoriesS(id, filterValue, options)\n                  : fetchPlatformInventories(id, filterValue, options)\n              )\n            }\n          />\n        </BottomPaginationContainer>\n      )}\n    </Fragment>\n  );\n};\n\nexport default PlatformInventories;\n","import React, { Fragment } from 'react';\nimport { TimeAgo } from '../../helpers/shared/helpers';\n\nexport const createRows = (data) =>\n  data.reduce(\n    (acc, { id, name, description, created_at, workflow }, key) => [\n      ...acc,\n      {\n        id,\n        key,\n        isOpen: false,\n        cells: [\n          name,\n          description,\n          <Fragment key=\"date\">\n            <TimeAgo date={created_at} />\n          </Fragment>,\n          workflow\n        ]\n      }\n    ],\n    []\n  );\n"],"names":["NoItems","formatMessage","Text","component","TextVariants","data","columns","isCompact","isLoading","actionResolver","areActionsDisabled","borders","routes","titlePlural","renderEmptyState","ouiaId","useState","rows","setRows","useEffect","Fragment","length","Table","variant","TableVariant","undefined","cells","TableHeader","TableBody","initialState","filterValue","isOpen","isFetching","isFiltering","debouncedFilter","asyncFormValidator","id","value","dispatch","filteringCallback","meta","defaultSettings","window","catalog","standalone","fetchPlatformInventoriesS","fetchPlatformInventories","then","platformInventoriesState","state","action","type","payload","useFormatMessage","useRef","labelMessages","platformsMessages","current","useReducer","stateDispatch","useSelector","platformReducer","platformInventories","results","count","platform","selectedPlatform","useDispatch","useQuery","history","useHistory","scrollToTop","dataSet","metaInfo","inventoryRows","reduce","acc","key","name","description","created_at","workflow","date","createRows","title","schema","createPlatformsFilterToolbarSchema","onFilterChange","offset","searchValue","filterPlaceholder","apiRequest","_","options","Section","inventoryData","onClick","push","pathname","search","Icon","SearchIcon","dropDirection"],"sourceRoot":""}