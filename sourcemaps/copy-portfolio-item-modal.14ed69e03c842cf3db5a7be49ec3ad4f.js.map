{"version":3,"file":"js/copy-portfolio-item-modal.1643307617167.5d6f725d3c213ec8d63d.js","mappings":"0gBAsCMA,EAAiB,SAACC,GACtB,eAAe,CAAEA,KAAI,GAAI,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,MAAK,SAACC,GACxD,OAAAA,EAAUC,KACND,EAAUC,KACPC,QACC,SAAC,GAIK,OAFyB,uCAIhCC,KAAI,SAAC,G,IAAEP,EAAI,OAAW,OAAGQ,MAAV,KAAqBC,MAAOT,MAC9C,OAGFU,EAAkB,SAACV,GACvB,eAAgB,CAAEA,KAAI,GAAI,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,MAAK,SAACC,GACzD,OAAAA,EAAUO,QACNP,EAAUO,QAAQJ,KAAI,SAAC,G,IAAEP,EAAI,OAAW,OAAGQ,MAAV,KAAqBC,MAAOT,MAC7D,OA+CFY,EAAa,SACjBC,EACAC,EACAC,GAEA,OAAAC,aAAaC,QAAQ,sBAvBH,SAClBH,EACAC,GACG,OACHG,OAAQ,CACN,CACEC,UAAW,iBACXnB,KAAM,eACNS,MAAOK,EAAc,kBACrBM,YAAY,EACZC,aAAa,OAAmBX,GAChCY,cAAc,EACdC,QAASR,EACTS,cAAc,KAWdC,CAAYX,EAAeC,GAlDb,SAClBF,EACAC,EACAC,GACG,OACHG,OAAQ,CACN,CACEC,UAAW,oBACXnB,KAAM,sBACNS,MAAOK,EAAc,UACrBD,QAAO,EACPa,SAAU,gBAEZ,CACEP,UAAW,iBACXnB,KAAM,eACNS,MAAOK,EAAc,eACrBM,YAAY,EACZC,aAAa,OAAmBtB,GAChCuB,cAAc,EACdC,QAASR,EACTS,cAAc,KA8BdG,CAAYd,EAASC,EAAeC,IAqG1C,QA3FiF,SAAC,G,IAChFa,EAAW,cACXC,EAAe,kBACfC,EAAQ,WACRC,EAAM,SACNC,EAAa,gBAEPlB,GAAgB,SAChBmB,GAAW,UACTC,GAAS,IAAAC,cAAY,KAiD7B,OACE,kBAAC,EAAAC,MAAK,CACJC,QAAM,EACNC,MAAOxB,EAAc,mBACrByB,QAAS,WACP,OAAAL,EAAK,CACHM,SAAUV,EACVC,OAAM,KAGVU,QAAQ,SAER,kBAAC,KAAY,CACXC,cAAe,CAAEC,aAAcf,GAC/BgB,OAAQhC,GAnBU,SAACgB,GACvB,OAAC,UAAsBiB,yBACrBhB,EACAD,GACmCzB,MAAK,SAAC,GAAkB,OAAP,iBAedW,EAAe,CACjD,CAAEN,MAAOoB,EAAanB,MAAOuB,KAE/Bc,SAhEW,SAAOC,GAA2B,O,OAAA,E,OAAA,E,EAAA,W,2lCAKpB,SAAMd,EAChCjB,aAAaC,QAAQ,uBAClB,QAAwB8B,EAAOJ,eAC/B,QAAuBI,EAAOJ,gB,OAIpC,OAPevC,EAAc,SAM5B,MACM,CAAP,EAAO6B,EACLjB,aAAaC,QAAQ,uBACf,QACAY,EAAe,OACVkB,GAAM,CAAE3C,UAAW2C,EAAOJ,eAC/BvC,IAEA,QACAyB,EACAkB,EACA3C,IAGLD,MAAK,SAAC,G,IAAE6C,EAAE,KAAEC,EAA2B,8BACtC,OAAAf,EAAK,CACHM,SAAU,KACVT,OAAQ,cAAcgB,EAAOJ,aAAY,mBAAmBK,EAAE,WAAWC,OAG5E9C,MACC,WACE,OAAA4C,EAAOJ,eAAiBf,GACxBK,EACEjB,aAAaC,QAAQ,uBACjB,QAAkCW,IAClC,QAAiCA,a,YArCI,K,+QAiE7CsB,SAAU,WACR,OAAAhB,EAAK,CACHM,SAAUV,EACVC,OAAM,KAGVoB,cAAe,CACbC,YAAatC,EAAc,UAC3BuC,cAAe,CAAC,aAAc","sources":["webpack:///./src/smart-components/portfolio/portfolio-item-detail/copy-portfolio-item-modal.tsx"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Modal } from '@patternfly/react-core';\n\nimport FormRenderer from '../../common/form-renderer';\nimport { getPortfolioItemApi } from '../../../helpers/shared/user-login';\nimport {\n  copyPortfolioItem,\n  fetchPortfolioItemsWithPortfolio,\n  fetchSelectedPortfolio\n} from '../../../redux/actions/portfolio-actions';\nimport {\n  copyPortfolioItem as copyPortfolioItemS,\n  fetchPortfolioItemsWithPortfolio as fetchPortfolioItemsWithPortfolioS,\n  fetchSelectedPortfolio as fetchSelectedPortfolioS\n} from '../../../redux/actions/portfolio-actions-s';\n\nimport asyncFormValidator from '../../../utilities/async-form-validator';\nimport { listPortfolios } from '../../../helpers/portfolio/portfolio-helper';\nimport { listPortfolios as listPortfoliosS } from '../../../helpers/portfolio/portfolio-helper-s';\nimport { PORTFOLIO_ITEM_ROUTE } from '../../../constants/routes';\nimport actionMessages from '../../../messages/actions.messages';\nimport labelMessages from '../../../messages/labels.messages';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport {\n  FormatMessage,\n  Full,\n  SelectOptions\n} from '../../../types/common-types';\nimport {\n  Portfolio,\n  PortfolioItem,\n  PortfolioItemNextName\n} from '@redhat-cloud-services/catalog-client';\n\nconst loadPortfolios = (name: string) =>\n  listPortfolios({ name }, { limit: 100, offset: 0 }).then((portfolio) =>\n    portfolio.data\n      ? portfolio.data\n          .filter(\n            ({\n              metadata: {\n                user_capabilities: { update }\n              }\n            }) => update\n          )\n          .map(({ name, id }) => ({ value: id, label: name }))\n      : []\n  );\n\nconst loadPortfoliosS = (name: string) =>\n  listPortfoliosS({ name }, { limit: 100, offset: 0 }).then((portfolio) =>\n    portfolio.results\n      ? portfolio.results.map(({ name, id }) => ({ value: id, label: name }))\n      : []\n  );\n\nconst copySchemaI = (\n  getName: (value: string) => Promise<string | undefined>,\n  formatMessage: FormatMessage,\n  initialOptions: SelectOptions\n) => ({\n  fields: [\n    {\n      component: 'copy-name-display',\n      name: 'portfolio_item_name',\n      label: formatMessage(labelMessages.name),\n      getName,\n      fieldSpy: 'portfolio_id'\n    },\n    {\n      component: 'initial-select',\n      name: 'portfolio_id',\n      label: formatMessage(labelMessages.portfolio),\n      isRequired: true,\n      loadOptions: asyncFormValidator(loadPortfolios),\n      isSearchable: true,\n      options: initialOptions,\n      menuIsPortal: true\n    }\n  ]\n});\n\nconst copySchemaS = (\n  formatMessage: FormatMessage,\n  initialOptions: SelectOptions\n) => ({\n  fields: [\n    {\n      component: 'initial-select',\n      name: 'portfolio_id',\n      label: formatMessage(labelMessages.to_portfolio),\n      isRequired: true,\n      loadOptions: asyncFormValidator(loadPortfoliosS),\n      isSearchable: true,\n      options: initialOptions,\n      menuIsPortal: true\n    }\n  ]\n});\n\nconst copySchema = (\n  getName: (value: string) => Promise<string | undefined>,\n  formatMessage: FormatMessage,\n  initialOptions: SelectOptions\n) =>\n  localStorage.getItem('catalog_standalone')\n    ? copySchemaS(formatMessage, initialOptions)\n    : copySchemaI(getName, formatMessage, initialOptions);\n\nexport interface CopyPortfolioItemModalProps {\n  closeUrl: string;\n  portfolioId?: string;\n  portfolioItemId: string;\n  search?: string;\n  portfolioName?: string;\n}\n\nconst CopyPortfolioItemModal: React.ComponentType<CopyPortfolioItemModalProps> = ({\n  portfolioId,\n  portfolioItemId,\n  closeUrl,\n  search,\n  portfolioName\n}) => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n\n  const onSubmit = async (values: Full<PortfolioItem>) => {\n    /**\n     * dispatch redux action to set selected portfolio in store\n     * this will ensure that correct portfolio data will be loaded after the redirect occurs\n     */\n    const { value: portfolio } = await dispatch(\n      (localStorage.getItem('catalog_standalone')\n        ? fetchSelectedPortfolioS(values.portfolio_id)\n        : fetchSelectedPortfolio(values.portfolio_id)) as Promise<{\n        value: Full<Portfolio>;\n      }>\n    );\n    return dispatch(\n      localStorage.getItem('catalog_standalone')\n        ? ((copyPortfolioItemS(\n            portfolioItemId,\n            { ...values, portfolio: values.portfolio_id },\n            portfolio\n          ) as unknown) as Promise<PortfolioItem>)\n        : ((copyPortfolioItem(\n            portfolioItemId,\n            values,\n            portfolio\n          ) as unknown) as Promise<PortfolioItem>)\n    )\n      .then(({ id, service_offering_source_ref }) =>\n        push({\n          pathname: PORTFOLIO_ITEM_ROUTE,\n          search: `?portfolio=${values.portfolio_id}&portfolio-item=${id}&source=${service_offering_source_ref}`\n        })\n      )\n      .then(\n        () =>\n          values.portfolio_id === portfolioId &&\n          dispatch(\n            localStorage.getItem('catalog_standalone')\n              ? fetchPortfolioItemsWithPortfolioS(portfolioId)\n              : fetchPortfolioItemsWithPortfolio(portfolioId)\n          )\n      );\n  };\n\n  const portfolioChange = (portfolioId: string) =>\n    (getPortfolioItemApi().getPortfolioItemNextName(\n      portfolioItemId,\n      portfolioId\n    ) as Promise<PortfolioItemNextName>).then(({ next_name }) => next_name);\n  return (\n    <Modal\n      isOpen\n      title={formatMessage(portfolioMessages.copyItemTitle) as string}\n      onClose={() =>\n        push({\n          pathname: closeUrl,\n          search\n        })\n      }\n      variant=\"small\"\n    >\n      <FormRenderer\n        initialValues={{ portfolio_id: portfolioId }}\n        schema={copySchema(portfolioChange, formatMessage, [\n          { value: portfolioId, label: portfolioName }\n        ])}\n        onSubmit={onSubmit}\n        onCancel={() =>\n          push({\n            pathname: closeUrl,\n            search\n          })\n        }\n        templateProps={{\n          submitLabel: formatMessage(actionMessages.save),\n          disableSubmit: ['validating', 'submitting']\n        }}\n      />\n    </Modal>\n  );\n};\n\nexport default CopyPortfolioItemModal;\n"],"names":["loadPortfolios","name","limit","offset","then","portfolio","data","filter","map","value","label","loadPortfoliosS","results","copySchema","getName","formatMessage","initialOptions","localStorage","getItem","fields","component","isRequired","loadOptions","isSearchable","options","menuIsPortal","copySchemaS","fieldSpy","copySchemaI","portfolioId","portfolioItemId","closeUrl","search","portfolioName","dispatch","push","useHistory","Modal","isOpen","title","onClose","pathname","variant","initialValues","portfolio_id","schema","getPortfolioItemNextName","onSubmit","values","id","service_offering_source_ref","onCancel","templateProps","submitLabel","disableSubmit"],"sourceRoot":""}