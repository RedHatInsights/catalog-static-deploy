{"version":3,"file":"js/service-offering-detail.3f8301414f007770c682.js","mappings":"kXAwBMA,EAAiB,CAAC,UAAW,YA4FnC,QA1F8B,WAC5B,IAAMC,GAAgBC,EAAAA,EAAAA,KACtB,GAAsBC,EAAAA,EAAAA,GAASH,GAAxBI,GAAP,eACA,GAAoCC,EAAAA,EAAAA,WAAS,GAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACMC,GAAWC,EAAAA,EAAAA,eACjB,GAA4BC,EAAAA,EAAAA,cAC1B,qBAAGC,gBAAmBC,mBADhBC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,OAUjB,OANAC,EAAAA,EAAAA,YAAU,WACRR,GAAc,GACdC,GAASQ,EAAAA,EAAAA,IAAqBZ,EAAYS,QAAST,EAAYa,WAC5DC,MAAK,kBAAMX,GAAc,MAD5B,OAES,kBAAMA,GAAc,QAC5B,CAACH,EAAYS,QAAST,EAAYa,WACjCX,EAEA,kBAAC,IAAD,CAASa,UAAU,mDACjB,kBAAC,KAAD,OAMJ,kBAAC,IAAD,CAASA,UAAU,yCACjB,kBAAC,IAAD,CAAMC,WAAS,EAACD,UAAU,aACxB,yBAAKA,UAAU,cACb,kBAAC,IAAD,OAEF,kBAAC,IAAD,CAAUE,GAAI,GAAIF,UAAU,cAC1B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAiBG,MAAI,EAACC,YAAU,EAACJ,UAAU,aACzC,kBAAC,IAAD,CAAUK,IAAKV,EAAOW,SAAUC,OAAQ,KACxC,kBAAC,EAAAC,YAAD,KACE,kBAAC,EAAAC,KAAD,CAAMC,UAAU,MAAMhB,EAAQiB,MAC9B,kBAAC,EAAAF,KAAD,CAAMC,UAAU,SACb5B,EAAc8B,EAAAA,EAAAA,oBAMzB,kBAAC,IAAD,CAAUC,GAAI,EAAGC,GAAI,GACnB,kBAAC,EAAAN,YAAD,KACE,kBAAC,EAAAC,KAAD,CAAMT,UAAU,WACblB,EAAciC,EAAAA,EAAAA,WAEjB,kBAAC,EAAAN,KAAD,CACEO,GAAG,SACHhB,UAAU,gBACVU,UAAWO,EAAAA,aAAAA,GAEVtB,EAAOgB,MAEV,kBAAC,EAAAF,KAAD,CAAMT,UAAU,WACblB,EAAciC,EAAAA,EAAAA,UAEjB,kBAAC,EAAAN,KAAD,CACEO,GAAG,aACHhB,UAAU,gBACVU,UAAWO,EAAAA,aAAAA,GAEX,kBAAC,IAAD,CAAYC,KAAK,WAAWC,KAAMzB,EAAQ0B,gBAIhD,kBAAC,IAAD,CAAUP,GAAI,EAAGC,GAAI,IACnB,kBAAC,EAAAN,YAAD,KACE,kBAAC,EAAAC,KAAD,CAAMT,UAAU,WAAWlB,EAAciC,EAAAA,EAAAA,OACzC,kBAAC,EAAAN,KAAD,CAAMO,GAAG,cAAcN,UAAWO,EAAAA,aAAAA,GAC/BvB,EAAQiB,MAEX,kBAAC,EAAAF,KAAD,CAAMT,UAAU,WACblB,EAAciC,EAAAA,EAAAA,cAEjB,kBAAC,EAAAN,KAAD,CAAMO,GAAG,mBAAmBN,UAAWO,EAAAA,aAAAA,GACpCvB,EAAQ2B,aAEX,wBAAIrB,UAAU,iBACd,kBAAC,EAAAS,KAAD,CAAMC,UAAU,MACb5B,EAAc8B,EAAAA,EAAAA,qBAEjB,kBAAC,IAAD,CAAeP,IAAKX,EAAQ4B","sources":["webpack:///./src/smart-components/platform/service-offering/service-offering-detail.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Grid,\n  GridItem,\n  TextContent,\n  Text,\n  TextVariants,\n  Level\n} from '@patternfly/react-core';\nimport ReactJsonView from 'react-json-view';\nimport { Section } from '@redhat-cloud-services/frontend-components/Section';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\n\nimport useQuery from '../../../utilities/use-query';\nimport { fetchServiceOffering } from '../../../redux/actions/platform-actions';\nimport { ProductLoaderPlaceholder } from '../../../presentational-components/shared/loader-placeholders';\nimport CardIcon from '../../../presentational-components/shared/card-icon';\nimport CatalogBreadcrumbs from '../../common/catalog-breadcrumbs';\nimport { StyledLevelItem } from '../../../presentational-components/styled-components/level';\nimport labelMessages from '../../../messages/labels.messages';\nimport platformsMessages from '../../../messages/platforms.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\n\nconst requiredParams = ['service', 'platform'];\n\nconst ServiceOfferingDetail = () => {\n  const formatMessage = useFormatMessage();\n  const [queryValues] = useQuery(requiredParams);\n  const [isFetching, setIsFetching] = useState(true);\n  const dispatch = useDispatch();\n  const { service, source } = useSelector(\n    ({ platformReducer: { serviceOffering } }) => serviceOffering\n  );\n\n  useEffect(() => {\n    setIsFetching(true);\n    dispatch(fetchServiceOffering(queryValues.service, queryValues.platform))\n      .then(() => setIsFetching(false))\n      .catch(() => setIsFetching(false));\n  }, [queryValues.service, queryValues.platform]);\n  if (isFetching) {\n    return (\n      <Section className=\"global-primary-background full-height pf-u-p-lg\">\n        <ProductLoaderPlaceholder />\n      </Section>\n    );\n  }\n\n  return (\n    <Section className=\"global-primary-background full-height\">\n      <Grid hasGutter className=\"pf-u-p-lg\">\n        <div className=\"pf-u-mb-sm\">\n          <CatalogBreadcrumbs />\n        </div>\n        <GridItem sm={12} className=\"pf-u-mb-md\">\n          <Level>\n            <StyledLevelItem grow alignStart className=\"pf-l-flex\">\n              <CardIcon src={source.icon_url} height={64} />\n              <TextContent>\n                <Text component=\"h1\">{service.name}</Text>\n                <Text component=\"small\">\n                  {formatMessage(platformsMessages.offeringTitle)}\n                </Text>\n              </TextContent>\n            </StyledLevelItem>\n          </Level>\n        </GridItem>\n        <GridItem md={3} lg={2}>\n          <TextContent>\n            <Text className=\"font-14\">\n              {formatMessage(labelMessages.platform)}\n            </Text>\n            <Text\n              id=\"source\"\n              className=\"overflow-wrap\"\n              component={TextVariants.p}\n            >\n              {source.name}\n            </Text>\n            <Text className=\"font-14\">\n              {formatMessage(labelMessages.created)}\n            </Text>\n            <Text\n              id=\"created_at\"\n              className=\"overflow-wrap\"\n              component={TextVariants.p}\n            >\n              <DateFormat type=\"relative\" date={service.created_at} />\n            </Text>\n          </TextContent>\n        </GridItem>\n        <GridItem md={9} lg={10}>\n          <TextContent>\n            <Text className=\"font-14\">{formatMessage(labelMessages.name)}</Text>\n            <Text id=\"description\" component={TextVariants.p}>\n              {service.name}\n            </Text>\n            <Text className=\"font-14\">\n              {formatMessage(labelMessages.description)}\n            </Text>\n            <Text id=\"long_description\" component={TextVariants.p}>\n              {service.description}\n            </Text>\n            <hr className=\"pf-c-divider\" />\n            <Text component=\"h2\">\n              {formatMessage(platformsMessages.offeringParameters)}\n            </Text>\n            <ReactJsonView src={service.extra} />\n          </TextContent>\n        </GridItem>\n      </Grid>\n    </Section>\n  );\n};\n\nexport default ServiceOfferingDetail;\n"],"names":["requiredParams","formatMessage","useFormatMessage","useQuery","queryValues","useState","isFetching","setIsFetching","dispatch","useDispatch","useSelector","platformReducer","serviceOffering","service","source","useEffect","fetchServiceOffering","platform","then","className","hasGutter","sm","grow","alignStart","src","icon_url","height","TextContent","Text","component","name","platformsMessages","md","lg","labelMessages","id","TextVariants","type","date","created_at","description","extra"],"sourceRoot":""}