{"version":3,"file":"js/share-portfolio.1643307617167.5d6f725d3c213ec8d63d.js","mappings":"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","sources":["webpack:///./src/messages/filtering.messages.ts","webpack:///./src/forms/portfolio-share-form.schema.ts","webpack:///./src/helpers/share/share-helper.ts","webpack:///./src/redux/actions/share-actions.ts","webpack:///./src/helpers/share/share-helper-s.ts","webpack:///./src/redux/actions/share-actions-s.ts","webpack:///./src/helpers/rbac/rbac-helper.ts","webpack:///./src/helpers/portfolio/share-portfolio-message.ts","webpack:///./src/smart-components/portfolio/share-portfolio-modal.tsx","webpack:///./src/helpers/rbac/rbac-helper-s.ts","webpack:///./src/utilities/use-enhanced-history.ts"],"sourcesContent":["import { defineMessages } from 'react-intl';\n\nconst filteringMessages = defineMessages({\n  noItems: {\n    id: 'common.filtering.noItems',\n    defaultMessage: 'No items found'\n  },\n  filterByProduct: {\n    id: 'common.filtering.filterByProduct',\n    defaultMessage: 'Filter by product'\n  },\n  noResults: {\n    id: 'common.filtering.noResults',\n    defaultMessage: 'No results found'\n  },\n  noResultsDescription: {\n    id: 'common.filtering.noResultsDescription',\n    defaultMessage:\n      'No results match the filter criteria. Remove all filters or clear all filters to show results.'\n  },\n  clearFilters: {\n    id: 'common.filtering.clear-filters',\n    defaultMessage: 'Clear all filters'\n  },\n  noProducts: {\n    id: 'common.filtering.no-products',\n    defaultMessage: 'No products yet'\n  },\n  noRecords: {\n    id: 'commonMessages.noRecords',\n    defaultMessage: 'No records'\n  },\n  filterByTitle: {\n    id: 'tableToolbar.filterByTitle',\n    defaultMessage: 'Filter by {title}'\n  },\n  noResultsFound: {\n    id: 'tableToolbar.noResultsFound',\n    defaultMessage: 'No results found'\n  },\n  noResult: {\n    id: 'tableToolbar.noResult',\n    defaultMessage: 'No {results}'\n  },\n  unknown: {\n    id: 'commonMessages.unknown',\n    defaultMessage: 'Unknown'\n  }\n});\n\nexport default filteringMessages;\n","import Field from '@data-driven-forms/react-form-renderer/common-types/field';\nimport Schema from '@data-driven-forms/react-form-renderer/common-types/schema';\nimport { SelectOptions } from '../types/common-types';\n\n/**\n * Creates a data-driven-form schema for sharing/un-sharing portfolio\n */\nconst newShareSchema = (\n  loadGroupOptions: (inputValue?: string) => Promise<SelectOptions>,\n  permissionVerbs: SelectOptions\n): Field[] => [\n  {\n    component: 'sub-form',\n    description: 'share.new.description',\n    name: 'new_share',\n    key: '1',\n    fields: [\n      {\n        name: 'group-selection',\n        component: 'share-group-select',\n        loadOptions: loadGroupOptions,\n        isSearchable: true,\n        permissions: permissionVerbs\n      }\n    ]\n  }\n];\n\nconst groupShareSchema = (permissionVerbs: SelectOptions): Field[] => [\n  {\n    component: 'sub-form',\n    name: 'current-groups-sub-form',\n    fields: [\n      {\n        name: 'shared-groups',\n        permissionVerbs,\n        component: 'share-group-edit'\n      }\n    ]\n  }\n];\n\nexport const createPortfolioShareSchema = (\n  loadGroupOptions: (inputValue?: string) => Promise<SelectOptions>,\n  permissionVerbs: SelectOptions,\n  canShare: boolean,\n  canUnshare: boolean\n): Schema => {\n  const portfolioSchema = {\n    fields: [\n      ...(canShare ? newShareSchema(loadGroupOptions, permissionVerbs) : []),\n      ...(canUnshare ? groupShareSchema(permissionVerbs) : [])\n    ]\n  };\n  return portfolioSchema;\n};\n","import { getAxiosInstance, getPortfolioApi } from '../shared/user-login';\nimport { CATALOG_API_BASE } from '../../utilities/constants';\nimport {\n  ShareInfo,\n  SharePolicy,\n  SharePolicyPermissionsEnum,\n  UnsharePolicyPermissionsEnum,\n  UnsharePolicy\n} from '@redhat-cloud-services/catalog-client';\n\nconst axiosInstance = getAxiosInstance();\nconst userApi = getPortfolioApi();\n\nexport const getShareInfo = (portfolioId: string): Promise<ShareInfo> =>\n  axiosInstance.get(`${CATALOG_API_BASE}/portfolios/${portfolioId}/share_info`);\n\nexport interface ShareData<T = SharePolicyPermissionsEnum> {\n  permissions: T;\n  group_uuid: string;\n  id: string;\n}\nexport const sharePortfolio = (data: ShareData): Promise<void> => {\n  const policy: SharePolicy = {\n    permissions: data.permissions.split(',') as SharePolicyPermissionsEnum[],\n    group_uuids: [data.group_uuid]\n  };\n  return (userApi.sharePortfolio(data.id, policy) as unknown) as Promise<void>;\n};\n\nexport const unsharePortfolio = (\n  data: ShareData<UnsharePolicyPermissionsEnum[]>\n): Promise<void> => {\n  const policy: UnsharePolicy = {\n    permissions: data.permissions,\n    group_uuids: [data.group_uuid]\n  };\n  return (userApi.unsharePortfolio(data.id, policy) as unknown) as Promise<\n    void\n  >;\n};\n","import {\n  ShareInfo,\n  UnsharePolicyPermissionsEnum\n} from '@redhat-cloud-services/catalog-client';\nimport * as ShareHelper from '../../helpers/share/share-helper';\nimport { AsyncMiddlewareAction } from '../../types/redux';\nimport * as ActionTypes from '../action-types';\n\nexport const fetchShareInfo = (\n  portfolioId: string\n): AsyncMiddlewareAction<ShareInfo> => ({\n  type: ActionTypes.QUERY_PORTFOLIO,\n  payload: ShareHelper.getShareInfo(portfolioId)\n});\n\nexport const sharePortfolio = (\n  portfolioData: ShareHelper.ShareData\n): AsyncMiddlewareAction<void> => ({\n  type: ActionTypes.SHARE_PORTFOLIO,\n  payload: ShareHelper.sharePortfolio({\n    ...portfolioData\n  })\n});\n\nexport const unsharePortfolio = (\n  portfolioData: ShareHelper.ShareData<UnsharePolicyPermissionsEnum[]>\n): AsyncMiddlewareAction<void> => ({\n  type: ActionTypes.UNSHARE_PORTFOLIO,\n  payload: ShareHelper.unsharePortfolio({\n    ...portfolioData\n  })\n});\n","import { getAxiosInstance, getPortfolioApi } from '../shared/user-login';\nimport { CATALOG_API_BASE } from '../../utilities/constants';\nimport {\n  ShareInfo,\n  SharePolicyPermissionsEnum,\n  UnsharePolicyPermissionsEnum\n} from '@redhat-cloud-services/catalog-client';\n\nconst axiosInstance = getAxiosInstance();\nconst userApi = getPortfolioApi();\n\nexport interface SharePolicy {\n  permissions: Array<SharePolicyPermissionsEnum>;\n  groups: Array<string>;\n}\n\nexport interface UnsharePolicy {\n  permissions: Array<UnsharePolicyPermissionsEnum>;\n  groups?: Array<string>;\n}\n\nexport const getShareInfo = (portfolioId: string): Promise<ShareInfo> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolios/${portfolioId}/share_info/`\n  );\n\nexport interface ShareData<T = SharePolicyPermissionsEnum> {\n  permissions: T;\n  group_uuid: string;\n  id: string;\n}\nexport const sharePortfolio = (data: ShareData): Promise<void> => {\n  const policy: SharePolicy = {\n    permissions: data.permissions.split(',') as SharePolicyPermissionsEnum[],\n    groups: [data.group_uuid]\n  };\n  return axiosInstance.post(\n    `${CATALOG_API_BASE}/portfolios/${data.id}/share/`,\n    policy\n  );\n};\n\nexport const unsharePortfolio = (\n  data: ShareData<UnsharePolicyPermissionsEnum[]>\n): Promise<void> => {\n  const policy: UnsharePolicy = {\n    permissions: data.permissions,\n    groups: [data.group_uuid]\n  };\n  return axiosInstance.post(\n    `${CATALOG_API_BASE}/portfolios/${data.id}/unshare/`,\n    policy\n  );\n};\n","import {\n  ShareInfo,\n  UnsharePolicyPermissionsEnum\n} from '@redhat-cloud-services/catalog-client';\nimport * as ShareHelper from '../../helpers/share/share-helper-s';\nimport { AsyncMiddlewareAction } from '../../types/redux';\nimport * as ActionTypes from '../action-types';\n\nexport const fetchShareInfo = (\n  portfolioId: string\n): AsyncMiddlewareAction<ShareInfo> => ({\n  type: ActionTypes.QUERY_PORTFOLIO,\n  payload: ShareHelper.getShareInfo(portfolioId)\n});\n\nexport const sharePortfolio = (\n  portfolioData: ShareHelper.ShareData\n): AsyncMiddlewareAction<void> => ({\n  type: ActionTypes.SHARE_PORTFOLIO,\n  payload: ShareHelper.sharePortfolio({\n    ...portfolioData\n  })\n});\n\nexport const unsharePortfolio = (\n  portfolioData: ShareHelper.ShareData<UnsharePolicyPermissionsEnum[]>\n): AsyncMiddlewareAction<void> => ({\n  type: ActionTypes.UNSHARE_PORTFOLIO,\n  payload: ShareHelper.unsharePortfolio({\n    ...portfolioData\n  })\n});\n","import { getAxiosInstance, getRbacGroupApi } from '../shared/user-login';\nimport { RBAC_API_BASE } from '../../utilities/constants';\nimport { GroupPagination } from '@redhat-cloud-services/rbac-client';\nimport { SelectOptions } from '../../types/common-types';\n\nconst api = getRbacGroupApi();\n\nexport const getRbacGroups = (): Promise<GroupPagination> =>\n  (api.listGroups() as unknown) as Promise<GroupPagination>;\n\nexport const fetchFilterGroups = (filterValue = ''): Promise<SelectOptions> =>\n  getAxiosInstance()\n    .get(\n      `${RBAC_API_BASE}/groups/${\n        filterValue.length > 0 ? `?name=${filterValue}` : ''\n      }`\n    )\n    .then(({ data }: GroupPagination) =>\n      data.map(({ uuid, name }) => ({ label: name, value: uuid }))\n    );\n","import portfolioMessages from '../../messages/portfolio.messages';\nimport { Bold } from '../../presentational-components/shared/intl-rich-text-components';\nimport { ReactNode } from 'react';\nimport { MessageDescriptor } from 'react-intl';\nimport { AnyObject } from '../../types/common-types';\n\nconst groupMessage = (\n  groupNames: string[],\n  formatMessage: (message: MessageDescriptor, values?: AnyObject) => ReactNode\n) => {\n  switch (groupNames.length) {\n    case 1:\n      return groupNames[0];\n    case 2:\n      return formatMessage(portfolioMessages.shareSuccessTwoGroup, {\n        group1: groupNames[0],\n        group2: groupNames[1]\n      });\n    default:\n      return formatMessage(portfolioMessages.shareSuccessMultipleGroups, {\n        count: groupNames.length\n      });\n  }\n};\n\n// TODO This will be the form type\nexport interface SharePortfolioData {\n  id?: string;\n  group_uuid: string;\n  permissions: string;\n  groupName: string;\n}\nconst sharePorfolioMessage = ({\n  shareData,\n  initialGroups,\n  removedGroups,\n  newGroups,\n  formatMessage,\n  portfolioName\n}: {\n  shareData: SharePortfolioData[];\n  initialGroups: SharePortfolioData[];\n  removedGroups: SharePortfolioData[];\n  newGroups: SharePortfolioData[];\n  formatMessage: (message: MessageDescriptor, values?: AnyObject) => ReactNode;\n  portfolioName: (...args: any[]) => string | undefined;\n}): { title: ReactNode; description: ReactNode } => {\n  let title = formatMessage(portfolioMessages.shareSuccessTitle);\n  let description;\n\n  const changedPermissions = shareData.filter(({ permissions, group_uuid }) => {\n    const originalGroup = initialGroups.find(\n      (group) => group.group_uuid === group_uuid\n    );\n\n    return (\n      originalGroup &&\n      permissions?.split(',').length !==\n        originalGroup.permissions?.split(',').length\n    );\n  });\n  const unshared =\n    removedGroups.filter(\n      ({ group_uuid }) =>\n        !changedPermissions.find((group) => group.group_uuid === group_uuid)\n    ).length > 0;\n  const shared =\n    newGroups.filter(\n      ({ group_uuid }) =>\n        !initialGroups.find((group) => group.group_uuid === group_uuid)\n    ).length > 0;\n\n  if (unshared && !shared && changedPermissions.length === 0) {\n    title = formatMessage(portfolioMessages.shareSuccessTitleOnlyUnsharing);\n    description = formatMessage(\n      portfolioMessages.shareSuccessDescriptionOnlyUnsharing,\n      {\n        name: portfolioName(),\n        group: groupMessage(\n          removedGroups.map(({ groupName }) => groupName),\n          formatMessage\n        ),\n        b: Bold\n      }\n    );\n  }\n\n  if (!unshared && shared && changedPermissions.length === 0) {\n    title = formatMessage(portfolioMessages.shareSuccessTitleOnlySharing);\n    description = formatMessage(\n      portfolioMessages.shareSuccessDescriptionOnlySharing,\n      {\n        name: portfolioName(),\n        group: groupMessage(\n          newGroups.map(({ groupName }) => groupName),\n          formatMessage\n        ),\n        b: Bold\n      }\n    );\n  }\n\n  if (!unshared && !shared && changedPermissions.length > 0) {\n    title = formatMessage(\n      portfolioMessages.shareSuccessTitleOnlyChaningPermissions\n    );\n    description = formatMessage(\n      portfolioMessages.shareSuccessDescriptionOnlyChaningPermissions,\n      {\n        group: groupMessage(\n          changedPermissions.map(({ groupName }) => groupName),\n          formatMessage\n        ),\n        b: Bold\n      }\n    );\n  }\n\n  return { title, description };\n};\n\nexport default sharePorfolioMessage;\n","/* eslint-disable react/prop-types */\nimport React, { ReactNode, useEffect, useState } from 'react';\nimport FormRenderer from '../common/form-renderer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport isEqual from 'lodash/isEqual';\nimport {\n  Modal,\n  TextContent,\n  Text,\n  Stack,\n  StackItem\n} from '@patternfly/react-core';\nimport { createPortfolioShareSchema } from '../../forms/portfolio-share-form.schema';\nimport {\n  fetchPortfolios,\n  resetSelectedPortfolio\n} from '../../redux/actions/portfolio-actions';\nimport {\n  fetchPortfolios as fetchPortfoliosS,\n  resetSelectedPortfolio as resetSelectedPortfolioS\n} from '../../redux/actions/portfolio-actions-s';\nimport {\n  fetchShareInfo,\n  sharePortfolio,\n  unsharePortfolio\n} from '../../redux/actions/share-actions';\nimport {\n  fetchShareInfo as fetchShareInfoS,\n  sharePortfolio as sharePortfolioS,\n  unsharePortfolio as unsharePortfolioS\n} from '../../redux/actions/share-actions-s';\nimport { ShareLoader } from '../../presentational-components/shared/loader-placeholders';\nimport { permissionOptions, permissionValues } from '../../utilities/constants';\nimport { fetchFilterGroups } from '../../helpers/rbac/rbac-helper';\nimport { fetchFilterGroups as fetchFilterGroupsS } from '../../helpers/rbac/rbac-helper-s';\nimport useQuery from '../../utilities/use-query';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\nimport { UnauthorizedRedirect } from '../error-pages/error-redirects';\nimport portfolioMessages from '../../messages/portfolio.messages';\nimport { ADD_NOTIFICATION } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport filteringMessages from '../../messages/filtering.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport sharePorfolioMessage, {\n  SharePortfolioData\n} from '../../helpers/portfolio/share-portfolio-message';\nimport { CatalogRootState } from '../../types/redux';\nimport {\n  ShareInfo,\n  SharePolicyPermissionsEnum,\n  UnsharePolicyPermissionsEnum\n} from '@redhat-cloud-services/catalog-client';\nimport { FormApi, Full, InternalPortfolio } from '../../types/common-types';\n\nexport type UniversalSharePolicy =\n  | (UnsharePolicyPermissionsEnum[] & SharePolicyPermissionsEnum.Read)\n  | (UnsharePolicyPermissionsEnum[] & SharePolicyPermissionsEnum.Update)\n  | (UnsharePolicyPermissionsEnum[] & SharePolicyPermissionsEnum.Delete)\n  | (UnsharePolicyPermissionsEnum[] & SharePolicyPermissionsEnum.Order);\n\nexport interface SharePortfolioModalProps {\n  closeUrl: string;\n  removeSearch?: boolean;\n  portfolioName?: (portfolio: string) => string | undefined;\n  viewState?: {\n    count: number;\n    limit: number;\n    offset: number;\n    filter: string;\n  };\n}\nconst SharePortfolioModal: React.ComponentType<SharePortfolioModalProps> = ({\n  closeUrl,\n  removeSearch,\n  viewState,\n  portfolioName = () => ''\n}) => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const { push } = useEnhancedHistory({ removeSearch, keepHash: true });\n  const [{ portfolio }, search] = useQuery(['portfolio']);\n  const [isFetching, setFetching] = useState(true);\n\n  const { selectedPortfolio: initialValues, isLoading } = useSelector<\n    CatalogRootState,\n    {\n      selectedPortfolio: InternalPortfolio;\n      isLoading: boolean;\n    }\n  >(({ portfolioReducer: { selectedPortfolio, isLoading } }) => ({\n    selectedPortfolio: selectedPortfolio as InternalPortfolio,\n    isLoading\n  }));\n\n  const { shareInfo } = useSelector<\n    CatalogRootState,\n    {\n      shareInfo: ShareInfo[];\n    }\n  >(({ shareReducer: { shareInfo } }) => ({\n    shareInfo\n  }));\n  useEffect(() => {\n    setFetching(true);\n    dispatch(\n      (localStorage.getItem('catalog_standalone')\n        ? fetchShareInfoS(portfolio)\n        : fetchShareInfo(portfolio)) as Promise<any>\n    )\n      .then(() => setFetching(false))\n      .catch(() => setFetching(false));\n  }, []);\n\n  const onCancel = () => {\n    dispatch(\n      localStorage.getItem('catalog_standalone')\n        ? resetSelectedPortfolioS()\n        : resetSelectedPortfolio()\n    );\n    push({ pathname: closeUrl, search });\n  };\n\n  const initialShares = () => {\n    const initialGroupShareList = (shareInfo as Full<ShareInfo>[]).map(\n      (group) => {\n        const groupPermissions = group.permissions.filter(\n          (permission) => permissionValues.indexOf(permission) > -1\n        );\n        const groupName = group.group_name;\n        const options = permissionOptions.find(\n          (perm) => perm.value === groupPermissions.sort().join(',')\n        );\n        return {\n          groupName,\n          group_uuid: localStorage.getItem('catalog_standalone')\n            ? // @ts-ignore\n              group.group\n            : group.group_uuid,\n          permissions: options\n            ? options.value\n            : formatMessage(filteringMessages.unknown)\n        };\n      }\n    );\n    return initialGroupShareList;\n  };\n\n  const loadGroupOptions = (inputValue?: string) =>\n    localStorage.getItem('catalog_standalone')\n      ? fetchFilterGroupsS(inputValue)\n      : fetchFilterGroups(inputValue);\n\n  const onSubmit = (\n    data: { 'shared-groups': SharePortfolioData[] },\n    formApi: FormApi\n  ) => {\n    const shareData = data['shared-groups'];\n    const newGroups: SharePortfolioData[] = [];\n    const initialGroups: SharePortfolioData[] = formApi.getState()\n      .initialValues['shared-groups'];\n    const removedGroups = initialGroups\n      .filter(\n        (group) =>\n          !shareData.find((item) => item.group_uuid === group.group_uuid)\n      )\n      .map(({ permissions, ...group }) => ({\n        ...group,\n        permissions: permissions.split(',')\n      }));\n    shareData.forEach((group) => {\n      const initialEntry = initialGroups.find(\n        (item) => item.group_uuid === group.group_uuid\n      );\n      if (initialEntry && !isEqual(initialEntry, group)) {\n        if (initialEntry.permissions!.length > group.permissions.length) {\n          removedGroups.push({\n            id: portfolio,\n            permissions: ['update'],\n            group_uuid: group.group_uuid,\n            groupName: group.groupName\n          });\n        } else {\n          newGroups.push(group);\n        }\n      }\n\n      if (!initialEntry) {\n        newGroups.push(group);\n      }\n    });\n    const createSharePromise = (group: SharePortfolioData, unshare = false) => {\n      let action = unshare ? unsharePortfolio : sharePortfolio;\n      if (localStorage.getItem('catalog_standalone')) {\n        action = unshare ? unsharePortfolioS : sharePortfolioS;\n      }\n\n      return dispatch(\n        action({\n          id: portfolio,\n          permissions: (group.permissions as unknown) as UniversalSharePolicy,\n          group_uuid: group.group_uuid\n        })\n      );\n    };\n\n    const sharePromises = [\n      ...newGroups.map((group) => createSharePromise(group)),\n      ...removedGroups.map((group) =>\n        createSharePromise((group as unknown) as Full<SharePortfolioData>, true)\n      )\n    ];\n\n    onCancel();\n\n    const { title, description } = sharePorfolioMessage({\n      shareData,\n      initialGroups,\n      removedGroups: removedGroups.map(({ permissions, ...rest }) => ({\n        ...rest,\n        permissions: permissions.join(',')\n      })),\n      newGroups,\n      formatMessage,\n      portfolioName\n    });\n\n    return Promise.all(sharePromises).then(() => {\n      dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          dismissable: true,\n          variant: 'success',\n          title,\n          description\n        }\n      });\n      return dispatch(\n        localStorage.getItem('catalog_standalone')\n          ? fetchPortfoliosS(viewState)\n          : fetchPortfolios(viewState)\n      );\n    });\n  };\n\n  if (\n    initialValues?.metadata?.user_capabilities?.share === false &&\n    initialValues?.metadata?.user_capabilities?.unshare === false\n  ) {\n    return <UnauthorizedRedirect />;\n  }\n\n  const validateShares = (values: {\n    group_uuid?: string;\n    permissions?: string[];\n  }) => {\n    const errors: {\n      permissions?: ReactNode;\n      group_uuid?: ReactNode;\n    } = {};\n    if (values.group_uuid && !values.permissions) {\n      errors.permissions = formatMessage(\n        portfolioMessages.portfolioSharePermissions\n      );\n    }\n\n    if (values.permissions && !values.group_uuid) {\n      errors.group_uuid = formatMessage(portfolioMessages.portfolioShareGroups);\n    }\n\n    return errors;\n  };\n\n  const isLoadingFinal = isFetching || isLoading;\n\n  return (\n    <Modal\n      title={formatMessage(portfolioMessages.portfolioShareTitle) as string}\n      isOpen\n      variant=\"small\"\n      onClose={onCancel}\n    >\n      {isLoadingFinal && <ShareLoader />}\n      {!isLoadingFinal && (\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              <Text>\n                {formatMessage(portfolioMessages.portfolioShareDescription, {\n                  name: portfolioName(portfolio),\n                  // eslint-disable-next-line react/display-name\n                  strong: (chunks: ReactNode) => (\n                    <strong key=\"strong\">{chunks}</strong>\n                  )\n                })}\n              </Text>\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <FormRenderer\n              schema={createPortfolioShareSchema(\n                loadGroupOptions,\n                permissionOptions,\n                initialValues?.metadata?.user_capabilities?.share !== false,\n                initialValues?.metadata?.user_capabilities?.unshare !== false\n              )}\n              onSubmit={onSubmit}\n              onCancel={onCancel}\n              validate={validateShares}\n              initialValues={{\n                ...initialValues,\n                'shared-groups': initialShares()\n              }}\n              templateProps={{\n                disableSubmit: ['pristine', 'validating'],\n                submitLabel: formatMessage(\n                  portfolioMessages.portfolioShareApply\n                )\n              }}\n            />\n          </StackItem>\n        </Stack>\n      )}\n    </Modal>\n  );\n};\n\nexport default SharePortfolioModal;\n","import { getAxiosInstance, getRbacGroupApi } from '../shared/user-login';\nimport { RBAC_API_BASE } from '../../utilities/constants';\nimport { SelectOptions } from '../../types/common-types';\n\nexport interface GroupOut {\n  name: string;\n  description?: string;\n  id: string;\n  created: string;\n  modified: string;\n  principalCount?: number;\n  roleCount?: number;\n  system?: boolean;\n  platform_default?: boolean;\n}\n\nexport interface GroupPagination {\n  results: Array<GroupOut>;\n}\n\nexport const getRbacGroups = (): Promise<GroupPagination> =>\n  getAxiosInstance().get(`${RBAC_API_BASE}/groups/`) as Promise<\n    GroupPagination\n  >;\n\nexport const fetchFilterGroups = (filterValue = ''): Promise<SelectOptions> =>\n  getAxiosInstance()\n    .get(\n      `${RBAC_API_BASE}/groups/${\n        filterValue.length > 0 ? `?name=${filterValue}` : ''\n      }`\n    )\n    .then(({ results }: GroupPagination) => {\n      return results.map(({ id, name }) => ({ label: name, value: id }));\n    });\n","import { useHistory } from 'react-router-dom';\nimport { History, Path } from 'history';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\n\nexport type EnhancedHistoryPushtarget =\n  | Path\n  | { pathname: string; hash?: string; search?: string; state?: AnyObject };\n\nconst removeSearchQuery = (target: EnhancedHistoryPushtarget) => {\n  if (typeof target === 'string') {\n    return target.split('?')[0];\n  }\n\n  if (typeof target === 'object') {\n    return {\n      ...target,\n      search: undefined\n    };\n  }\n\n  return target;\n};\n\n/**\n * Wrapper around useHistory hook which adds aditional settings to standard history methods\n * @param {Boolean} removeSearch if true, using history navigation methods will remove search string from path\n * @param {Boolean} keepHash if true, using history navigation methods will not remove hash from URL\n */\nconst useEnhancedHistory = ({\n  removeSearch,\n  keepHash\n}: {\n  removeSearch?: boolean;\n  keepHash?: boolean;\n} = {}): History<History.UnknownFacade> => {\n  const history = useHistory();\n  return {\n    ...history,\n    push: (target: EnhancedHistoryPushtarget) => {\n      let internalTarget = target;\n      if (keepHash && history.location.hash.length > 0) {\n        internalTarget =\n          typeof internalTarget === 'object'\n            ? { ...internalTarget, hash: history.location.hash }\n            : `${internalTarget}${history.location.hash}`;\n      }\n\n      if (removeSearch) {\n        return history.push(removeSearchQuery(internalTarget));\n      }\n\n      return history.push(internalTarget);\n    }\n  };\n};\n\nexport default useEnhancedHistory;\n"],"names":["noItems","id","defaultMessage","filterByProduct","noResults","noResultsDescription","clearFilters","noProducts","noRecords","filterByTitle","noResultsFound","noResult","unknown","newShareSchema","loadGroupOptions","permissionVerbs","component","description","name","key","fields","loadOptions","isSearchable","permissions","groupShareSchema","axiosInstance","userApi","getShareInfo","portfolioId","get","portfolioData","type","payload","data","policy","split","group_uuids","group_uuid","sharePortfolio","unsharePortfolio","groups","post","groupMessage","groupNames","formatMessage","length","group1","group2","count","closeUrl","removeSearch","viewState","portfolioName","dispatch","push","keepHash","portfolio","search","useState","isFetching","setFetching","portfolioReducer","selectedPortfolio","isLoading","initialValues","shareInfo","useEffect","localStorage","getItem","fetchShareInfo","then","catch","onCancel","pathname","metadata","user_capabilities","share","unshare","canShare","canUnshare","isLoadingFinal","Modal","title","isOpen","variant","onClose","Stack","hasGutter","StackItem","TextContent","Text","strong","chunks","schema","inputValue","filterValue","map","label","value","uuid","fetchFilterGroups","onSubmit","formApi","shareData","newGroups","initialGroups","getState","removedGroups","filter","group","find","item","forEach","initialEntry","groupName","createSharePromise","action","sharePromises","changedPermissions","originalGroup","unshared","shared","b","rest","join","Promise","all","dismissable","validate","values","errors","groupPermissions","permission","group_name","options","perm","sort","templateProps","disableSubmit","submitLabel","history","useHistory","target","internalTarget","location","hash","undefined","removeSearchQuery"],"sourceRoot":""}