{"version":3,"file":"js/order-processes.0763dd91ba44cba8b154.js","mappings":"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","sources":["webpack:///./src/smart-components/order-process/order-process-table-context.js","webpack:///./src/smart-components/order-process/order-process-table-helpers.js","webpack:///./src/presentational-components/shared/table-toolbar-view.tsx","webpack:///./src/presentational-components/shared/table-empty-state.tsx","webpack:///./src/forms/name-async-validator.ts","webpack:///./src/forms/set-portfolio-item.schema.ts","webpack:///./src/forms/create-order-process.schema.ts","webpack:///./src/utilities/use-order-process.ts","webpack:///./src/smart-components/order-process/add-order-process-modal.tsx","webpack:///./src/smart-components/order-process/remove-order-process-modal.js","webpack:///./src/smart-components/order-process/order-processes.js"],"sourcesContent":["import { createContext } from 'react';\n\nconst OrderProcessTableContext = createContext({ selectedOrderProcesses: [] });\n\nexport default OrderProcessTableContext;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox } from '@patternfly/react-core';\nimport { TimeAgo } from '../../helpers/shared/helpers';\nimport OrderProcessTableContext from './order-process-table-context';\n\nexport const SelectBox = ({ id }) => {\n  const { selectedOrderProcesses, setSelectedOrderProcesses } = useContext(\n    OrderProcessTableContext\n  );\n\n  return (\n    <Checkbox\n      id={`select-${id}`}\n      isChecked={selectedOrderProcesses.includes(id)}\n      onChange={() => setSelectedOrderProcesses(id)}\n    />\n  );\n};\n\nSelectBox.propTypes = {\n  id: PropTypes.string.isRequired\n};\n\nexport const createRows = (data) =>\n  data.map(({ id, name, description, created_at }) => ({\n    id,\n    'data-ouia-component-id': `test-${id}`,\n    cells: [\n      <div key={`${id}-checkbox`} ouiaId={`${id}-checkbox`}>\n        <SelectBox id={id} />\n      </div>,\n      <div key={`${id}-${name}`} ouiaId={`${id}-${name}`}>\n        {name}\n      </div>,\n      description,\n      <React.Fragment key={id}>\n        <TimeAgo date={created_at} />\n      </React.Fragment>\n    ]\n  }));\n","/* eslint-disable react/prop-types */\nimport React, { Fragment, ReactNode } from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  IActionsResolver,\n  ISortBy,\n  OnSort,\n  IRow,\n  ICell\n} from '@patternfly/react-table';\nimport {\n  defaultSettings,\n  getCurrentPage,\n  getNewPage,\n  PaginationConfiguration\n} from '../../helpers/shared/pagination';\nimport { ListLoader } from './loader-placeholders';\nimport { useIntl } from 'react-intl';\nimport { Section } from '@redhat-cloud-services/frontend-components/Section';\nimport {\n  PrimaryToolbar,\n  ActiveFiltersConfig,\n  FilterItem\n} from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport orderProcessesMessages from '../../messages/order-processes.messages';\n\nexport interface TableToolbarViewProps {\n  columns: ICell[];\n  toolbarButtons?: () => ReactNode;\n  fetchData: (pagination: PaginationConfiguration) => Promise<any | void>;\n  pagination?: PaginationConfiguration;\n  plural?: string;\n  singular?: string;\n  routes?: () => ReactNode;\n  actionResolver?: IActionsResolver;\n  filterValue?: string;\n  onFilterChange: (value?: string) => void;\n  isLoading?: boolean;\n  renderEmptyState?: () => ReactNode;\n  sortBy?: ISortBy;\n  onSort?: OnSort;\n  activeFiltersConfig?: ActiveFiltersConfig;\n  filterConfig?: FilterItem[];\n  rows: IRow[];\n  ouiaId?: string;\n}\nexport const TableToolbarView: React.ComponentType<TableToolbarViewProps> = ({\n  columns,\n  fetchData,\n  toolbarButtons,\n  actionResolver,\n  routes = () => null,\n  plural,\n  pagination = defaultSettings,\n  filterValue,\n  onFilterChange,\n  isLoading = false,\n  renderEmptyState = () => null,\n  sortBy,\n  onSort,\n  activeFiltersConfig,\n  filterConfig = [],\n  rows,\n  ouiaId\n}) => {\n  const intl = useIntl();\n\n  const paginationConfig = {\n    itemCount: pagination.count,\n    page: getCurrentPage(pagination.limit, pagination.offset),\n    perPage: pagination.limit,\n    onSetPage: (_e: React.MouseEvent, page: number) =>\n      fetchData({ ...pagination, offset: getNewPage(page, pagination.limit) }),\n    onPerPageSelect: (_e: React.MouseEvent, size: number) =>\n      fetchData({ ...pagination, limit: size }),\n    isDisabled: isLoading\n  };\n\n  const renderToolbar = () => (\n    <PrimaryToolbar\n      className=\"pf-u-p-lg\"\n      pagination={paginationConfig}\n      {...(toolbarButtons && {\n        actionsConfig: {\n          dropdownProps: {\n            position: 'right'\n          },\n          actions: [toolbarButtons()]\n        }\n      })}\n      filterConfig={{\n        items: [\n          {\n            label: intl.formatMessage({\n              id: 'name',\n              defaultMessage: 'Name'\n            }),\n            filterValues: {\n              id: 'filter-by-name',\n              placeholder: intl.formatMessage(\n                orderProcessesMessages.orderProcessesFilter\n              ),\n              'aria-label': intl.formatMessage(\n                orderProcessesMessages.orderProcessesFilter\n              ),\n              onChange: (\n                _event: React.SyntheticEvent<Element, Event>,\n                value?: string\n              ) => onFilterChange(value),\n              value: filterValue\n            }\n          },\n          ...filterConfig\n        ]\n      }}\n      activeFiltersConfig={activeFiltersConfig}\n    />\n  );\n\n  return (\n    <Section type=\"content\" page-type={`tab-${plural}`} id={`tab-${plural}`}>\n      {routes()}\n      {renderToolbar()}\n      {isLoading && <ListLoader />}\n      {!isLoading && rows.length === 0 ? (\n        renderEmptyState()\n      ) : (\n        <Fragment>\n          {!isLoading && (\n            <Table\n              aria-label={`${plural} table`}\n              rows={rows}\n              cells={columns}\n              actionResolver={actionResolver}\n              className=\"pf-u-pt-0\"\n              sortBy={sortBy}\n              onSort={onSort}\n              ouiaId={ouiaId}\n            >\n              <TableHeader />\n              <TableBody />\n            </Table>\n          )}\n          {pagination.count! > 0 && (\n            <PrimaryToolbar\n              className=\"pf-u-pl-lg pf-u-pr-lg\"\n              pagination={{\n                ...paginationConfig,\n                dropDirection: 'up',\n                variant: 'bottom',\n                isCompact: false,\n                className: 'pf-u-pr-0'\n              }}\n            />\n          )}\n        </Fragment>\n      )}\n    </Section>\n  );\n};\n","import React, { ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  Text,\n  TextContent,\n  TextVariants\n} from '@patternfly/react-core';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\n\nexport interface TableEmptyState {\n  title: ReactNode;\n  Icon: React.ComponentType;\n  description: ReactNode;\n  PrimaryAction?: React.ElementType;\n  renderDescription?: () => ReactNode;\n}\nconst TableEmptyState: React.ComponentType<TableEmptyState> = ({\n  title,\n  Icon,\n  description,\n  PrimaryAction,\n  renderDescription\n}) => (\n  <EmptyTable centered aria-label=\"No records\">\n    <EmptyState className=\"pf-u-ml-auto pf-u-mr-auto\">\n      <EmptyStateIcon icon={Icon} />\n      <TextContent>\n        <Text component={TextVariants.h1}>{title}</Text>\n      </TextContent>\n      <EmptyStateBody>\n        {description}\n        {renderDescription && renderDescription()}\n      </EmptyStateBody>\n      <EmptyStateSecondaryActions>\n        {PrimaryAction && <PrimaryAction />}\n      </EmptyStateSecondaryActions>\n    </EmptyState>\n  </EmptyTable>\n);\n\nTableEmptyState.propTypes = {\n  title: PropTypes.string.isRequired,\n  Icon: PropTypes.any.isRequired,\n  description: PropTypes.string.isRequired,\n  PrimaryAction: PropTypes.any,\n  renderDescription: PropTypes.func\n};\n\nexport default TableEmptyState;\n","import { IntlShape } from 'react-intl';\nimport { fetchOrderProcessByName } from '../helpers/order-process/order-process-helper';\nimport asyncFormValidator from '../utilities/async-form-validator';\nimport formsMessages from '../messages/forms.messages';\n\nconst validateName = (name: string, id: string, intl: IntlShape) =>\n  fetchOrderProcessByName(name).then(({ data }) => {\n    const order_process = id\n      ? data.find((op) => name === op.name && id !== op.id)\n      : data.find((op) => name === op.name);\n\n    if (order_process) {\n      throw intl.formatMessage(formsMessages.nameTaken);\n    }\n  });\n\nexport default asyncFormValidator(validateName);\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Field from '@data-driven-forms/react-form-renderer/common-types/field';\n\nimport formMessages from '../messages/forms.messages';\nimport { BEFORE_TYPE, AFTER_TYPE } from '../utilities/constants';\nimport { IntlShape } from 'react-intl';\nimport asyncFormValidator from '../utilities/async-form-validator';\nimport { loadProductOptions } from '../helpers/order-process/order-process-helper';\n\nconst setItemsSelectSchema = (\n  type: 'before' | 'after' | 'return',\n  intl: IntlShape,\n  condition: { when: string; is: string }\n): Field[] => [\n  {\n    component: componentTypes.SELECT,\n    name: `${type}_portfolio_item_id`,\n    id: `${type}_portfolio_item_id`,\n    label: ((item_type) => {\n      let label;\n      switch (item_type) {\n        case BEFORE_TYPE:\n          label = intl.formatMessage(formMessages.beforeProvision);\n          break;\n        case AFTER_TYPE:\n          label = intl.formatMessage(formMessages.afterProvision);\n          break;\n        default:\n          label = intl.formatMessage(formMessages.returnProvision);\n      }\n\n      return label;\n    })(type),\n    loadOptions: asyncFormValidator(loadProductOptions),\n    initialValue: '',\n    noValueUpdates: true,\n    isSearchable: true,\n    isClearable: true,\n    condition\n  }\n];\n\nexport default setItemsSelectSchema;\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nimport labelMessages from '../messages/labels.messages';\nimport debouncedValidatorName from './name-async-validator';\nimport orderProcessesMessages from '../messages/order-processes.messages';\nimport setItemsSelectSchema from './set-portfolio-item.schema';\nimport { BEFORE_TYPE, AFTER_TYPE, RETURN_TYPE } from '../utilities/constants';\nimport { IntlShape } from 'react-intl';\nimport Schema from '@data-driven-forms/react-form-renderer/common-types/schema';\n\n/**\n * Creates a data-driven-form schema for adding an order processes\n * @param {object} intl React.intl with formatMessage function\n * @param {string} id Id of order process (when editing)\n */\nconst createOrderProcessSchema = (intl: IntlShape, id: string): Schema => {\n  return {\n    fields: [\n      {\n        component: componentTypes.RADIO,\n        name: 'order_process_type',\n        id: 'order-process-type',\n        label: intl.formatMessage(orderProcessesMessages.orderProcessType),\n        options: [\n          {\n            label: 'ITSM',\n            value: 'itsm'\n          },\n          {\n            label: 'Return',\n            value: 'return'\n          }\n        ]\n      },\n      {\n        component: componentTypes.TEXT_FIELD,\n        name: 'name',\n        isRequired: true,\n        id: 'order-process-name',\n        label: intl.formatMessage(orderProcessesMessages.orderProcessName),\n        validate: [\n          (value: string) => debouncedValidatorName(value, id, intl),\n          {\n            type: validatorTypes.REQUIRED,\n            message: intl.formatMessage(\n              orderProcessesMessages.enterOrderProcessName\n            )\n          }\n        ]\n      },\n      {\n        component: componentTypes.TEXTAREA,\n        name: 'description',\n        id: 'order-process-description',\n        label: intl.formatMessage(labelMessages.description)\n      },\n      ...setItemsSelectSchema(BEFORE_TYPE, intl, {\n        when: 'order_process_type',\n        is: 'itsm'\n      }),\n      ...setItemsSelectSchema(AFTER_TYPE, intl, {\n        when: 'order_process_type',\n        is: 'itsm'\n      }),\n      ...setItemsSelectSchema(RETURN_TYPE, intl, {\n        when: 'order_process_type',\n        is: 'return'\n      })\n    ]\n  };\n};\n\nexport default createOrderProcessSchema;\n","import { shallowEqual, useSelector } from 'react-redux';\nimport { ApiCollectionResponse } from '../types/common-types';\nimport { CatalogRootState } from '../types/redux';\nimport { OrderProcess } from '@redhat-cloud-services/catalog-client';\n\nconst useOrderProcess = (id: string): OrderProcess | undefined => {\n  const orderProcesses = useSelector<\n    CatalogRootState,\n    ApiCollectionResponse<OrderProcess>\n  >(\n    ({ orderProcessReducer: { orderProcesses } }) => orderProcesses,\n    shallowEqual\n  );\n\n  return orderProcesses?.data?.find((op) => op.id === id);\n};\n\nexport default useOrderProcess;\n","/* eslint-disable react/prop-types */\nimport React, { useReducer, useEffect, Reducer } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { Modal } from '@patternfly/react-core';\n\nimport { ORDER_PROCESSES_ROUTE } from '../../constants/routes';\nimport createOrderProcessSchema from '../../forms/create-order-process.schema';\nimport {\n  addOrderProcess,\n  fetchOrderProcesses,\n  updateOrderProcess\n} from '../../redux/actions/order-process-actions';\nimport FormRenderer from '../common/form-renderer';\nimport labelMessages from '../../messages/labels.messages';\nimport useQuery from '../../utilities/use-query';\nimport orderProcessesMessages from '../../messages/order-processes.messages';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\nimport useOrderProcess from '../../utilities/use-order-process';\nimport { Schema } from '@data-driven-forms/react-form-renderer';\nimport { CatalogRootState } from '../../types/redux';\nimport { OrderProcess } from '@redhat-cloud-services/catalog-client';\nimport { fetchOrderProcess } from '../../helpers/order-process/order-process-helper';\n\nexport interface OrderProcessWithType extends OrderProcess {\n  order_process_type: string;\n}\n\ninterface OrderProcessModalState {\n  initialValues?: Partial<OrderProcessWithType>;\n  schema?: Schema;\n  isLoading: boolean;\n}\n\ninterface OrderProcessModalStateAction {\n  type: 'loaded';\n  initialValues: Partial<OrderProcessWithType>;\n  schema: Schema;\n}\nconst reducer = (\n  state: OrderProcessModalState,\n  { type, initialValues, schema }: OrderProcessModalStateAction\n) => {\n  switch (type) {\n    case 'loaded':\n      return {\n        ...state,\n        initialValues,\n        schema,\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n};\n\nexport interface AddOrderProcessProps {\n  edit?: boolean;\n}\nconst AddOrderProcess: React.ComponentType<AddOrderProcessProps> = ({\n  edit = false\n}) => {\n  const dispatch = useDispatch();\n  const [{ order_process }] = useQuery(['order_process']);\n  const data = useSelector<CatalogRootState, Partial<OrderProcess> | undefined>(\n    ({\n      orderProcessReducer: {\n        orderProcesses: { data }\n      }\n    }) => (edit ? data?.find(({ id }) => id === order_process) : {})\n  );\n  const { push } = useEnhancedHistory({ keepHash: true });\n  const intl = useIntl();\n  const loadedProcess = useOrderProcess(order_process);\n\n  const [{ initialValues }, stateDispatch] = useReducer<\n    Reducer<OrderProcessModalState, OrderProcessModalStateAction>\n  >(reducer, {\n    isLoading: true\n  });\n\n  useEffect(() => {\n    if (!loadedProcess && order_process) {\n      fetchOrderProcess(order_process).then((data) => {\n        return stateDispatch({\n          type: 'loaded',\n          initialValues: {\n            ...data,\n            order_process_type: (data as OrderProcess).return_portfolio_item_id\n              ? 'return'\n              : 'itsm'\n          },\n          schema: createOrderProcessSchema(\n            intl,\n\n            (data as OrderProcess).id || ''\n          )\n        });\n      });\n    } else if (typeof loadedProcess !== 'undefined') {\n      stateDispatch({\n        type: 'loaded',\n        initialValues: {\n          ...loadedProcess,\n          order_process_type: loadedProcess.return_portfolio_item_id\n            ? 'return'\n            : 'itsm'\n        },\n        schema: createOrderProcessSchema(intl, loadedProcess.id!)\n      });\n    }\n  }, []);\n\n  const onCancel = () => push(ORDER_PROCESSES_ROUTE);\n\n  const onSave = (values: Partial<OrderProcess>) => {\n    const submitAction = edit\n      ? () =>\n          updateOrderProcess(\n            order_process,\n            data,\n            { name: '', description: '', ...values },\n            intl\n          )\n      : () => addOrderProcess(values, intl);\n    onCancel();\n\n    return dispatch(submitAction() as Promise<void>).then(() =>\n      dispatch(fetchOrderProcesses())\n    );\n  };\n\n  if (edit && !data) {\n    return null;\n  }\n\n  return (\n    <Modal\n      isOpen\n      onClose={onCancel}\n      title={intl.formatMessage(\n        edit\n          ? orderProcessesMessages.updateOrderProcess\n          : orderProcessesMessages.createOrderProcess\n      )}\n      variant=\"small\"\n    >\n      <FormRenderer\n        onSubmit={onSave}\n        onCancel={onCancel}\n        schema={createOrderProcessSchema(intl, order_process)}\n        initialValues={initialValues}\n        templateProps={{\n          submitLabel: edit\n            ? intl.formatMessage(labelMessages.save)\n            : intl.formatMessage(labelMessages.create),\n          disableSubmit: ['validating', 'pristine']\n        }}\n      />\n    </Modal>\n  );\n};\n\nexport default AddOrderProcess;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport {\n  Modal,\n  Button,\n  Text,\n  TextContent,\n  TextVariants,\n  Spinner,\n  Title\n} from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  removeOrderProcess,\n  removeOrderProcesses,\n  fetchOrderProcess\n} from '../../redux/actions/order-process-actions';\nimport useQuery from '../../utilities/use-query';\nimport { ORDER_PROCESSES_ROUTE } from '../../constants/routes';\nimport useOrderProcess from '../../utilities/use-order-process';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport orderProcessMessages from '../../messages/order-processes.messages';\nimport actionMessages from '../../messages/actions.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\n\nconst RemoveOrderProcessModal = ({\n  ids = [],\n  fetchData,\n  resetSelectedOrderProcesses\n}) => {\n  const dispatch = useDispatch();\n  const [fetchedOrderProcess, setFetchedOrderProcess] = useState();\n  const [submitting, setSubmitting] = useState(false);\n  const { push } = useEnhancedHistory({ keepHash: true });\n  const [{ order_process: orderProcessId }] = useQuery(['order_process']);\n\n  const finalId = orderProcessId || (ids.length === 1 && ids[0]);\n\n  const intl = useIntl();\n  const orderProcess = useOrderProcess(finalId);\n\n  useEffect(() => {\n    if (finalId && !orderProcess) {\n      dispatch(fetchOrderProcess(finalId))\n        .then(({ value }) => setFetchedOrderProcess(value))\n        .catch(() => push(ORDER_PROCESSES_ROUTE));\n    }\n  }, []);\n\n  if (!finalId && ids.length === 0) {\n    return null;\n  }\n\n  const removeProcesses = () =>\n    (finalId\n      ? dispatch(removeOrderProcess(finalId, intl))\n      : dispatch(removeOrderProcesses(ids, intl))\n    )\n      .catch(() => setSubmitting(false))\n      .then(() => push(ORDER_PROCESSES_ROUTE))\n      .then(() => resetSelectedOrderProcesses())\n      .then(() => fetchData());\n\n  const onCancel = () => push(ORDER_PROCESSES_ROUTE);\n\n  const onSubmit = () => {\n    setSubmitting(true);\n    return removeProcesses();\n  };\n\n  const name = (\n    <b key=\"remove-key\">\n      {finalId ? (\n        (fetchedOrderProcess && fetchedOrderProcess.name) ||\n        (orderProcess && orderProcess.name)\n      ) : (\n        <React.Fragment>\n          {ids.length} {intl.formatMessage(orderProcessMessages.orderProcesses)}\n        </React.Fragment>\n      )}\n    </b>\n  );\n\n  const isLoading = finalId && !orderProcess && !fetchedOrderProcess;\n\n  return (\n    <Modal\n      isOpen\n      variant=\"small\"\n      aria-label={intl.formatMessage(\n        orderProcessMessages.removeProcessAriaLabel,\n        { count: finalId ? 1 : ids.length }\n      )}\n      header={\n        <Title size=\"2xl\" headingLevel=\"h1\">\n          <ExclamationTriangleIcon\n            size=\"sm\"\n            fill=\"#f0ab00\"\n            className=\"pf-u-mr-sm\"\n          />\n          {intl.formatMessage(orderProcessMessages.removeProcessTitle, {\n            count: finalId ? 1 : ids.length\n          })}\n        </Title>\n      }\n      onClose={onCancel}\n      actions={[\n        <Button\n          id=\"submit-remove-order-process\"\n          ouiaId=\"submit-remove-order-process\"\n          key=\"submit\"\n          variant=\"danger\"\n          type=\"button\"\n          isDisabled={submitting}\n          onClick={onSubmit}\n        >\n          {submitting ? (\n            <React.Fragment>\n              <Spinner size=\"sm\" className=\"pf-u-mr-md\" />\n              {intl.formatMessage(actionMessages.deleting)}\n            </React.Fragment>\n          ) : (\n            intl.formatMessage(actionMessages.delete)\n          )}\n        </Button>,\n        <Button\n          id=\"cancel-remove-order-process\"\n          ouiaId=\"cancel-remove-order-process\"\n          key=\"cancel\"\n          variant=\"link\"\n          type=\"button\"\n          isDisabled={submitting}\n          onClick={onCancel}\n        >\n          {intl.formatMessage(labelMessages.cancel)}\n        </Button>\n      ]}\n    >\n      <TextContent>\n        <Text component={TextVariants.p}>\n          {isLoading ? (\n            <FormItemLoader />\n          ) : (\n            intl.formatMessage(orderProcessMessages.removeProcessDescription, {\n              name\n            })\n          )}\n        </Text>\n      </TextContent>\n    </Modal>\n  );\n};\n\nRemoveOrderProcessModal.propTypes = {\n  fetchData: PropTypes.func.isRequired,\n  ids: PropTypes.array,\n  resetSelectedOrderProcesses: PropTypes.func.isRequired\n};\n\nexport default RemoveOrderProcessModal;\n","import React, { Fragment, useEffect, useReducer } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Link, Route } from 'react-router-dom';\nimport {\n  Button,\n  Text,\n  TextContent,\n  TextVariants,\n  ToolbarItem\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { sortable, cellWidth } from '@patternfly/react-table';\nimport {\n  fetchOrderProcesses,\n  sortOrderProcesses\n} from '../../redux/actions/order-process-actions';\nimport { createRows } from './order-process-table-helpers';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport TopToolbar from '../../presentational-components/shared/top-toolbar';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport TableEmptyState from '../../presentational-components/shared/table-empty-state';\nimport { useIntl } from 'react-intl';\nimport orderProcessesMessages from '../../messages/order-processes.messages';\nimport filteringMessages from '../../messages/filtering.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport { StyledToolbarGroup } from '../../presentational-components/styled-components/toolbars';\nimport {\n  ADD_ORDER_PROCESS_ROUTE,\n  REMOVE_ORDER_PROCESS_ROUTE,\n  UPDATE_ORDER_PROCESS_ROUTE\n} from '../../constants/routes';\nimport AddOrderProcess from './add-order-process-modal';\nimport useInitialUriHash from '../../routing/use-initial-uri-hash';\nimport RemoveOrderProcess from './remove-order-process-modal';\nimport actionMessages from '../../messages/actions.messages';\nimport OrderProcessTableContext from './order-process-table-context';\nimport { Checkbox } from '@patternfly/react-core';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\n\nconst columns = (intl, allSelected, selectAll) => [\n  {\n    title: (\n      <Checkbox onChange={selectAll} isChecked={allSelected} id=\"select-all\" />\n    ),\n    transforms: [cellWidth(1)]\n  },\n  {\n    title: intl.formatMessage(labelMessages.name),\n    transforms: [sortable]\n  },\n  {\n    title: intl.formatMessage(labelMessages.description),\n    transforms: [sortable]\n  },\n  {\n    title: intl.formatMessage(labelMessages.created),\n    transforms: [sortable]\n  }\n];\n\nconst debouncedFilter = asyncFormValidator(\n  (filter, dispatch, filteringCallback, meta = defaultSettings, sortBy) => {\n    filteringCallback(true);\n    return dispatch(\n      fetchOrderProcesses({ filterValue: filter, ...meta, sortBy })\n    ).then(() => filteringCallback(false));\n  },\n  1000\n);\n\nconst prepareChips = (filterValue, intl) =>\n  filterValue\n    ? [\n        {\n          category: intl.formatMessage(labelMessages.name),\n          key: 'name',\n          chips: [{ name: filterValue, value: filterValue }]\n        }\n      ]\n    : [];\n\nconst initialState = {\n  filter: '',\n  isFetching: true,\n  isFiltering: false,\n  selectedOrderProcesses: [],\n  allSelected: false,\n  rows: []\n};\n\nconst areAllSelected = (rows = [], selected) =>\n  rows.every((row) => selected.includes(row.id));\nconst unique = (value, index, self) => self.indexOf(value) === index;\n\nconst orderProcessesState = (state, action) => {\n  switch (action.type) {\n    case 'setRows':\n      return {\n        ...state,\n        rows: action.payload,\n        allSelected: areAllSelected(\n          action.payload,\n          state.selectedOrderProcesses\n        )\n      };\n    case 'setFetching':\n      return {\n        ...state,\n        isFetching: action.payload\n      };\n    case 'setFilterValue':\n      return { ...state, filterValue: action.payload };\n    case 'select':\n      return {\n        ...state,\n        allSelected: false,\n        selectedOrderProcesses: state.selectedOrderProcesses.includes(\n          action.payload\n        )\n          ? state.selectedOrderProcesses.filter((id) => id !== action.payload)\n          : [...state.selectedOrderProcesses, action.payload]\n      };\n    case 'selectAll':\n      return {\n        ...state,\n        selectedOrderProcesses: [\n          ...state.selectedOrderProcesses,\n          ...action.payload\n        ].filter(unique),\n        allSelected: true\n      };\n    case 'unselectAll':\n      return {\n        ...state,\n        selectedOrderProcesses: state.selectedOrderProcesses.filter(\n          (selected) => !action.payload.includes(selected)\n        ),\n        allSelected: false\n      };\n    case 'resetSelected':\n      return {\n        ...state,\n        selectedOrderProceses: [],\n        allSelected: false\n      };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst sortIndexMapper = {\n  1: 'name',\n  2: 'description',\n  3: 'created_at'\n};\n\nconst OrderProcesses = () => {\n  const viewState = useInitialUriHash();\n  const {\n    orderProcesses: { data, meta },\n    sortBy\n  } = useSelector(\n    ({ orderProcessReducer: { orderProcesses, sortBy } }) => ({\n      orderProcesses,\n      sortBy\n    }),\n    shallowEqual\n  );\n  const [\n    {\n      filterValue,\n      isFetching,\n      isFiltering,\n      selectedOrderProcesses,\n      allSelected,\n      rows\n    },\n    stateDispatch\n  ] = useReducer(orderProcessesState, {\n    ...initialState,\n    filterValue: viewState?.orderProcesses?.filter || initialState.filterValue\n  });\n\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const history = useEnhancedHistory({ keepHash: true });\n  const setSelectedOrderProcesses = (id) =>\n    stateDispatch({ type: 'select', payload: id });\n\n  const updateOrderProcesses = (pagination, sortBy) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    return dispatch(fetchOrderProcesses(pagination, sortBy))\n      .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n      .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  useEffect(() => {\n    updateOrderProcesses(\n      viewState?.orderProcesses\n        ? {\n            ...viewState.orderProcesses,\n            filterValue\n          }\n        : defaultSettings,\n      sortBy\n    );\n    scrollToTop();\n  }, []);\n\n  useEffect(() => {\n    stateDispatch({ type: 'setRows', payload: createRows(data) });\n  }, [data]);\n\n  const handleFilterChange = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      value,\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering }),\n      { ...meta, offset: 0 }\n    );\n  };\n\n  const routes = () => (\n    <Fragment>\n      <Route exact path={ADD_ORDER_PROCESS_ROUTE}>\n        <AddOrderProcess postMethod={updateOrderProcesses} />\n      </Route>\n      <Route exact path={REMOVE_ORDER_PROCESS_ROUTE}>\n        <RemoveOrderProcess\n          ids={selectedOrderProcesses}\n          fetchData={updateOrderProcesses}\n          resetSelectedOrderProcesses={() =>\n            stateDispatch({ type: 'resetSelected' })\n          }\n        />\n      </Route>\n      <Route exact path={UPDATE_ORDER_PROCESS_ROUTE}>\n        <AddOrderProcess edit />\n      </Route>\n    </Fragment>\n  );\n\n  const actionResolver = () => [\n    {\n      title: intl.formatMessage(actionMessages.edit),\n      onClick: (_event, _rowId, orderProcess) =>\n        history.push({\n          pathname: UPDATE_ORDER_PROCESS_ROUTE,\n          search: `?order_process=${orderProcess.id}`\n        })\n    },\n    {\n      title: intl.formatMessage(actionMessages.delete),\n      onClick: (_event, _rowId, orderProcess) =>\n        history.push({\n          pathname: REMOVE_ORDER_PROCESS_ROUTE,\n          search: `?order_process=${orderProcess.id}`\n        })\n    }\n  ];\n\n  const doSelectAll = () => {\n    return allSelected\n      ? stateDispatch({ type: 'unselectAll', payload: data.map((op) => op.id) })\n      : stateDispatch({ type: 'selectAll', payload: data.map((op) => op.id) });\n  };\n\n  const anyOrderProcessSelected = selectedOrderProcesses.length > 0;\n\n  const onSort = (_e, index, direction, { property }) => {\n    dispatch(\n      sortOrderProcesses({\n        index,\n        direction,\n        property: sortIndexMapper[index] || property\n      })\n    );\n    return updateOrderProcesses(\n      {\n        ...meta,\n        filterValue\n      },\n      {\n        index,\n        direction,\n        property: sortIndexMapper[index] || property\n      }\n    );\n  };\n\n  const toolbarButtons = () => (\n    <StyledToolbarGroup className=\"pf-u-pl-lg top-toolbar\">\n      <ToolbarItem>\n        <Link\n          id=\"add-order-process-link\"\n          to={{ pathname: ADD_ORDER_PROCESS_ROUTE }}\n        >\n          <Button\n            variant=\"primary\"\n            ouiaid={'create-order-process'}\n            aria-label={intl.formatMessage(labelMessages.create)}\n          >\n            {intl.formatMessage(labelMessages.create)}\n          </Button>\n        </Link>\n      </ToolbarItem>\n      <ToolbarItem>\n        <Link\n          id=\"remove-multiple-order-processes'\"\n          className={anyOrderProcessSelected ? '' : 'disabled-link'}\n          to={{ pathname: REMOVE_ORDER_PROCESS_ROUTE }}\n        >\n          <Button\n            variant=\"secondary\"\n            ouiaid={'delete-order-process'}\n            isDisabled={!anyOrderProcessSelected}\n            aria-label={intl.formatMessage(\n              orderProcessesMessages.deleteOrderProcess\n            )}\n          >\n            {intl.formatMessage(actionMessages.delete)}\n          </Button>\n        </Link>\n      </ToolbarItem>\n    </StyledToolbarGroup>\n  );\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TextContent className=\"pf-u-ml-md\">\n          <Text component={TextVariants.h1}>\n            {intl.formatMessage(orderProcessesMessages.title)}\n          </Text>\n        </TextContent>\n      </TopToolbar>\n      <OrderProcessTableContext.Provider\n        value={{ selectedOrderProcesses, setSelectedOrderProcesses }}\n      >\n        <TableToolbarView\n          ouiaId={'OrderProcessesTable'}\n          sortBy={sortBy}\n          onSort={onSort}\n          rows={rows}\n          columns={columns(intl, allSelected, doSelectAll)}\n          routes={routes}\n          fetchData={updateOrderProcesses}\n          titlePlural={intl.formatMessage(orderProcessesMessages.title)}\n          titleSingular={intl.formatMessage(\n            orderProcessesMessages.orderProcess\n          )}\n          pagination={meta}\n          filterValue={filterValue}\n          onFilterChange={handleFilterChange}\n          isLoading={isFetching || isFiltering}\n          toolbarButtons={toolbarButtons}\n          actionResolver={actionResolver}\n          renderEmptyState={() => (\n            <TableEmptyState\n              title={\n                filterValue === ''\n                  ? intl.formatMessage(orderProcessesMessages.noOrderProcesses)\n                  : intl.formatMessage(filteringMessages.noResultsFound)\n              }\n              Icon={SearchIcon}\n              PrimaryAction={() =>\n                filterValue !== '' ? (\n                  <Button\n                    ouiaId={'clear-filter'}\n                    onClick={() => handleFilterChange('')}\n                    variant=\"link\"\n                  >\n                    {intl.formatMessage(filteringMessages.clearFilters)}\n                  </Button>\n                ) : null\n              }\n              description={\n                filterValue === ''\n                  ? intl.formatMessage(orderProcessesMessages.noOrderProcesses)\n                  : intl.formatMessage(filteringMessages.noResultsDescription)\n              }\n            />\n          )}\n          activeFiltersConfig={{\n            filters: prepareChips(filterValue, intl),\n            onDelete: () => handleFilterChange('')\n          }}\n        />\n      </OrderProcessTableContext.Provider>\n    </Fragment>\n  );\n};\n\nexport default OrderProcesses;\n"],"names":["createContext","selectedOrderProcesses","SelectBox","id","useContext","OrderProcessTableContext","setSelectedOrderProcesses","Checkbox","isChecked","includes","onChange","propTypes","PropTypes","createRows","data","map","name","description","created_at","cells","key","ouiaId","date","TableToolbarView","columns","fetchData","toolbarButtons","actionResolver","routes","plural","pagination","filterValue","onFilterChange","isLoading","renderEmptyState","sortBy","onSort","activeFiltersConfig","filterConfig","rows","intl","useIntl","paginationConfig","itemCount","count","page","limit","offset","perPage","onSetPage","_e","onPerPageSelect","size","isDisabled","Section","type","PrimaryToolbar","className","actionsConfig","dropdownProps","position","actions","items","label","formatMessage","defaultMessage","filterValues","placeholder","_event","value","length","Fragment","Table","TableHeader","TableBody","dropDirection","variant","isCompact","TableEmptyState","title","Icon","PrimaryAction","renderDescription","EmptyTable","centered","EmptyState","EmptyStateIcon","icon","TextContent","Text","component","TextVariants","EmptyStateBody","EmptyStateSecondaryActions","then","find","op","condition","item_type","loadOptions","initialValue","noValueUpdates","isSearchable","isClearable","fields","options","isRequired","validate","message","when","is","orderProcesses","useSelector","shallowEqual","reducer","state","initialValues","schema","edit","dispatch","useDispatch","order_process","push","keepHash","loadedProcess","useReducer","stateDispatch","useEffect","order_process_type","return_portfolio_item_id","onCancel","Modal","isOpen","onClose","onSubmit","values","submitAction","templateProps","submitLabel","disableSubmit","RemoveOrderProcessModal","ids","resetSelectedOrderProcesses","useState","fetchedOrderProcess","setFetchedOrderProcess","submitting","setSubmitting","useEnhancedHistory","useQuery","finalId","orderProcess","useOrderProcess","fetchOrderProcess","ORDER_PROCESSES_ROUTE","orderProcessMessages","header","Title","headingLevel","fill","Button","onClick","removeOrderProcess","removeOrderProcesses","Spinner","actionMessages","labelMessages","allSelected","selectAll","transforms","cellWidth","sortable","debouncedFilter","asyncFormValidator","filter","filteringCallback","meta","defaultSettings","fetchOrderProcesses","prepareChips","category","chips","initialState","isFetching","isFiltering","areAllSelected","selected","every","row","unique","index","self","indexOf","orderProcessesState","action","payload","selectedOrderProceses","sortIndexMapper","viewState","useInitialUriHash","orderProcessReducer","history","updateOrderProcesses","scrollToTop","handleFilterChange","anyOrderProcessSelected","orderProcessesMessages","direction","property","sortOrderProcesses","Route","exact","path","ADD_ORDER_PROCESS_ROUTE","postMethod","REMOVE_ORDER_PROCESS_ROUTE","UPDATE_ORDER_PROCESS_ROUTE","titlePlural","titleSingular","ToolbarItem","Link","to","pathname","ouiaid","_rowId","search","filteringMessages","SearchIcon","filters","onDelete"],"sourceRoot":""}