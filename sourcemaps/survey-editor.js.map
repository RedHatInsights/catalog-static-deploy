{"version":3,"sources":["webpack:///./src/smart-components/survey-editing/survey-editor.js"],"names":["componentProperties","componentTypes","TEXT_FIELD","attributes","fieldProperties","LABEL","HELPER_TEXT","PLACEHOLDER","IS_DISABLED","IS_READ_ONLY","HIDE_FIELD","CHECKBOX","OPTIONS","SELECT","DATE_PICKER","TODAY_BUTTON_LABEL","IS_CLEARABLE","CLOSE_ON_DAY_SELECT","SHOW_TODAY_BUTTON","PLAIN_TEXT","MULTI_LINE_LABEL","RADIO","SWITCH","TEXTAREA","pf4Skin","componentMapper","builderMapper","pickerMapper","propertiesMapper","changeValidators","schema","result","fields","map","validate","rest","type","catalogValidatorAlias","BuilderWrapper","props","SurveyEditor","closeUrl","search","portfolioItem","uploadIcon","useState","setSchema","isFetching","setIsFetching","baseSchema","setBaseSchema","servicePlan","setServicePlan","dispatch","useDispatch","push","useHistory","getServicePlan","getAxiosInstance","get","CATALOG_API_BASE","id","then","create_json_schema","imported","useEffect","modifySurvey","editedTemplate","getServicePlansApi","patchServicePlanModified","modified","createSurvey","createServicePlan","portfolio_item_id","handleSaveSurvey","validatorTypes","MAX_NUMBER_VALUE","MIN_NUMBER_VALUE","appendValidator","addNotification","variant","title","name","dismissable","pathname","error","payload","disableDrag","disableAdd","schemaTemplate","mode","getSchema","isValid","key","product","handleResetSurvey","undefined","resetServicePlanModified","propTypes","PropTypes","string","isRequired","func","shape","portfolio","object"],"mappings":"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","file":"js/survey-editor.c28c5ed62d12ce2a1d6d.js","sourcesContent":["import React, { useEffect, useState, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport FormBuilder from '@data-driven-forms/form-builder/dist/cjs';\nimport {\n  builderMapper,\n  fieldProperties,\n  pickerMapper,\n  propertiesMapper,\n  BuilderTemplate\n} from '@data-driven-forms/form-builder/dist/cjs/pf4-builder-mappers';\nimport { Spinner } from '@patternfly/react-core/dist/js/components/Spinner/Spinner';\n\nimport {\n  getAxiosInstance,\n  getServicePlansApi\n} from '../../helpers/shared/user-login';\nimport { CATALOG_API_BASE } from '../../utilities/constants';\nimport { Bullseye } from '@patternfly/react-core';\nimport { SurveyEditingToolbar } from '../portfolio/portfolio-item-detail/portfolio-item-detail-toolbar';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport { catalogValidatorAlias } from '../common/form-renderer';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nconst componentProperties = {\n  [componentTypes.TEXT_FIELD]: {\n    attributes: [\n      fieldProperties.LABEL,\n      fieldProperties.HELPER_TEXT,\n      fieldProperties.PLACEHOLDER,\n      fieldProperties.IS_DISABLED,\n      fieldProperties.IS_READ_ONLY,\n      fieldProperties.HIDE_FIELD\n    ]\n  },\n  [componentTypes.CHECKBOX]: {\n    attributes: [\n      fieldProperties.LABEL,\n      fieldProperties.IS_DISABLED,\n      fieldProperties.OPTIONS,\n      fieldProperties.HIDE_FIELD\n    ]\n  },\n  [componentTypes.SELECT]: {\n    attributes: [\n      fieldProperties.OPTIONS,\n      fieldProperties.LABEL,\n      fieldProperties.IS_DISABLED,\n      fieldProperties.PLACEHOLDER,\n      fieldProperties.HELPER_TEXT,\n      fieldProperties.HIDE_FIELD\n    ]\n  },\n  [componentTypes.DATE_PICKER]: {\n    attributes: [\n      fieldProperties.LABEL,\n      fieldProperties.TODAY_BUTTON_LABEL,\n      fieldProperties.IS_CLEARABLE,\n      fieldProperties.CLOSE_ON_DAY_SELECT,\n      fieldProperties.SHOW_TODAY_BUTTON,\n      fieldProperties.HIDE_FIELD\n    ]\n  },\n  [componentTypes.PLAIN_TEXT]: {\n    attributes: [fieldProperties.MULTI_LINE_LABEL]\n  },\n  [componentTypes.RADIO]: {\n    attributes: [\n      fieldProperties.LABEL,\n      fieldProperties.IS_DISABLED,\n      fieldProperties.OPTIONS,\n      fieldProperties.HIDE_FIELD\n    ]\n  },\n  [componentTypes.SWITCH]: {\n    attributes: [\n      fieldProperties.LABEL,\n      fieldProperties.IS_READ_ONLY,\n      fieldProperties.IS_DISABLED,\n      fieldProperties.HIDE_FIELD\n    ]\n  },\n  [componentTypes.TEXTAREA]: {\n    attributes: [\n      fieldProperties.LABEL,\n      fieldProperties.HELPER_TEXT,\n      fieldProperties.IS_READ_ONLY,\n      fieldProperties.IS_DISABLED,\n      fieldProperties.HIDE_FIELD\n    ]\n  }\n};\n\ncomponentProperties['select-field'] =\n  componentProperties[componentTypes.SELECT];\ncomponentProperties['textarea-field'] =\n  componentProperties[componentTypes.TEXTAREA];\nconst pf4Skin = {\n  componentMapper: {\n    ...builderMapper,\n    'select-field': builderMapper[componentTypes.SELECT],\n    'textarea-field': builderMapper[componentTypes.TEXTAREA]\n  },\n  pickerMapper: {\n    ...pickerMapper,\n    'select-field': pickerMapper[componentTypes.SELECT],\n    'textarea-field': pickerMapper[componentTypes.TEXTAREA]\n  },\n  propertiesMapper,\n  componentProperties\n};\n\n// remove after API full migration to v2\nconst changeValidators = (schema) => {\n  const result = { ...schema };\n  result.fields = result.fields.map(({ validate, ...rest }) => {\n    return validate\n      ? {\n          ...rest,\n          validate: validate.map(({ type, ...rest }) => ({\n            ...rest,\n            type: catalogValidatorAlias[type] || type\n          }))\n        }\n      : rest;\n  });\n  return result;\n};\n\n// remove after API full migration to v2\nconst appendValidator = (schema) => {\n  const result = { ...schema };\n  result.fields = result.fields.map(({ validate, ...rest }) => {\n    return validate\n      ? {\n          ...rest,\n          validate: validate.map(({ type, ...rest }) => ({\n            ...rest,\n            type:\n              type !== validatorTypes.MAX_NUMBER_VALUE &&\n              type !== validatorTypes.MIN_NUMBER_VALUE\n                ? `${type}-validator`\n                : type\n          }))\n        }\n      : rest;\n  });\n  return result;\n};\n\nconst BuilderWrapper = (props) => <FormBuilder {...props} />;\n\nconst SurveyEditor = ({ closeUrl, search, portfolioItem, uploadIcon }) => {\n  const [schema, setSchema] = useState();\n  const [isFetching, setIsFetching] = useState(false);\n  const [baseSchema, setBaseSchema] = useState();\n  const [servicePlan, setServicePlan] = useState();\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const getServicePlan = () =>\n    getAxiosInstance()\n      .get(\n        `${CATALOG_API_BASE}/portfolio_items/${portfolioItem.id}/service_plans`\n      )\n      .then((servicePlan) => {\n        const [\n          {\n            create_json_schema: { schema }\n          }\n        ] = servicePlan;\n        setServicePlan(servicePlan[0]);\n        if (servicePlan[0].imported) {\n          return getAxiosInstance()\n            .get(`${CATALOG_API_BASE}/service_plans/${servicePlan[0].id}/base`)\n            .then((baseSchema) => {\n              setBaseSchema(\n                changeValidators(baseSchema.create_json_schema.schema)\n              );\n              return changeValidators(schema);\n            });\n        }\n\n        return changeValidators(schema);\n      })\n      .then((schema) => {\n        setSchema(schema);\n        setIsFetching(false);\n      });\n  useEffect(() => {\n    getServicePlan();\n  }, []);\n\n  const modifySurvey = (editedTemplate) =>\n    getServicePlansApi().patchServicePlanModified(`${servicePlan.id}`, {\n      modified: { schema: editedTemplate }\n    });\n  const createSurvey = (editedTemplate) =>\n    getServicePlansApi()\n      .createServicePlan({ portfolio_item_id: portfolioItem.id })\n      .then(([{ id }]) => id)\n      .then((id) =>\n        getServicePlansApi().patchServicePlanModified(`${id}`, {\n          modified: { schema: editedTemplate }\n        })\n      );\n  const handleSaveSurvey = (editedTemplate) => {\n    setIsFetching(true);\n    const submitCall = servicePlan.imported ? modifySurvey : createSurvey;\n    return submitCall(appendValidator(editedTemplate))\n      .then(() => {\n        setIsFetching(false);\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: `Survey of ${portfolioItem.name} has been modified.`,\n            dismissable: true\n          })\n        );\n        return push({ pathname: closeUrl, search });\n      })\n      .catch((error) => {\n        setIsFetching(false);\n        dispatch({ type: 'EDIT_SURVEY_REJECTED', payload: error });\n      });\n  };\n\n  const handleResetSurvey = (id) => {\n    setSchema(undefined);\n    getServicePlansApi()\n      .resetServicePlanModified(id)\n      .then(getServicePlan)\n      .then(() =>\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: `Survey of ${portfolioItem.name} has been restored.`,\n            dismissable: true\n          })\n        )\n      );\n  };\n\n  return (\n    <Fragment>\n      {schema ? (\n        <BuilderWrapper\n          {...pf4Skin}\n          schema={schema}\n          disableDrag\n          disableAdd\n          schemaTemplate={baseSchema}\n          mode=\"subset\"\n        >\n          {({ getSchema, isValid, ...props }) => (\n            <Fragment>\n              <SurveyEditingToolbar\n                key=\"survey-editor-toolbar\"\n                uploadIcon={uploadIcon}\n                product={portfolioItem}\n                handleSaveSurvey={() => handleSaveSurvey(getSchema())}\n                isValid={isValid}\n                closeUrl={closeUrl}\n                search={search}\n                isFetching={isFetching || !schema}\n                modified={servicePlan.modified}\n                handleResetSurvey={() => handleResetSurvey(servicePlan.id)}\n              />\n              <BuilderTemplate {...props} />;\n            </Fragment>\n          )}\n        </BuilderWrapper>\n      ) : (\n        <Fragment>\n          <SurveyEditingToolbar\n            uploadIcon={uploadIcon}\n            product={portfolioItem}\n            handleSaveSurvey={handleSaveSurvey}\n            closeUrl={closeUrl}\n            search={search}\n            isFetching={!schema || isFetching}\n          />\n          <Bullseye>\n            <Spinner />\n          </Bullseye>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nSurveyEditor.propTypes = {\n  closeUrl: PropTypes.string.isRequired,\n  search: PropTypes.string.isRequired,\n  uploadIcon: PropTypes.func.isRequired,\n  portfolioItem: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired\n  }).isRequired,\n  portfolio: PropTypes.object.isRequired\n};\n\nexport default SurveyEditor;\n"],"sourceRoot":""}