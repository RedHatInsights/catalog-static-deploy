{"version":3,"sources":["webpack:///./src/smart-components/portfolio/portfolio-item-detail/copy-portfolio-item-modal.js"],"names":["loadPortfolios","name","listPortfolios","limit","offset","then","data","filter","metadata","user_capabilities","update","map","value","id","label","copySchema","getName","formatMessage","initialOptions","fields","component","labelMessages","fieldSpy","portfolio","isRequired","loadOptions","asyncFormValidator","isSearchable","options","menuIsPortal","CopyPortfolioItemModal","portfolioId","portfolioItemId","closeUrl","search","portfolioName","useFormatMessage","dispatch","useDispatch","push","useHistory","onSubmit","values","a","fetchSelectedPortfolio","portfolio_id","copyPortfolioItem","service_offering_source_ref","pathname","PORTFOLIO_ITEM_ROUTE","fetchPortfolioItemsWithPortfolio","isOpen","title","portfolioMessages","copyItemTitle","onClose","variant","initialValues","schema","getPortfolioItemApi","getPortfolioItemNextName","next_name","onCancel","formContainer","templateProps","submitLabel","actionMessages","save","disableSubmit","propTypes","PropTypes","string"],"mappings":"sRAqBMA,EAAiB,SAACC,GAAD,OACrBC,YAAe,CAAED,QAAQ,CAAEE,MAAO,IAAKC,OAAQ,IAAKC,MAAK,qBAAGC,KAEvDC,QACC,qBACEC,SACEC,kBAAqBC,UAI1BC,KAAI,gBAAGV,EAAH,EAAGA,KAAH,MAAmB,CAAEW,MAArB,EAASC,GAAuBC,MAAOb,UAG5Cc,EAAa,SAACC,EAASC,EAAeC,GAAzB,MAA6C,CAC9DC,OAAQ,CACN,CACEC,UAAW,oBACXnB,KAAM,sBACNa,MAAOG,EAAcI,IAAcpB,MACnCe,UACAM,SAAU,gBAEZ,CACEF,UAAW,iBACXnB,KAAM,eACNa,MAAOG,EAAcI,IAAcE,WACnCC,YAAY,EACZC,YAAaC,YAAmB1B,GAChC2B,cAAc,EACdC,QAASV,EACTW,cAAc,MAKdC,EAAyB,SAAC,GAM1B,IALJC,EAKI,EALJA,YACAC,EAII,EAJJA,gBACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,OACAC,EACI,EADJA,cAEMlB,EAAgBmB,cAChBC,EAAWC,wBACTC,EAASC,cAATD,KAEFE,EAAQ,+BAAG,WAAOC,GAAP,iBAAAC,EAAA,sEAKoBN,EACjCO,YAAuBF,EAAOG,eANjB,uBAKAtB,EALA,EAKPX,MALO,kBAQRyB,EAASS,YAAkBd,EAAiBU,EAAQnB,IACxDlB,MAAK,gBAAGQ,EAAH,EAAGA,GAAIkC,EAAP,EAAOA,4BAAP,OACJR,EAAK,CACHS,SAAUC,IACVf,OAAQ,cAAF,OAAgBQ,EAAOG,aAAvB,2BAAsDhC,EAAtD,mBAAmEkC,QAG5E1C,MACC,kBACEqC,EAAOG,eAAiBd,GACxBM,EAASa,YAAiCnB,QAlBjC,2CAAH,sDA2Bd,OACE,kBAAC,QAAD,CACEoB,QAAM,EACNC,MAAOnC,EAAcoC,IAAkBC,eACvCC,QAAS,kBACPhB,EAAK,CACHS,SAAUf,EACVC,YAGJsB,QAAQ,SAER,kBAAC,IAAD,CACEC,cAAe,CAAEZ,aAAcd,GAC/B2B,OAAQ3C,GAnBU,SAACgB,GAAD,OACtB4B,cACGC,yBAAyB5B,EAAiBD,GAC1C1B,MAAK,qBAAGwD,eAgB6B5C,EAAe,CACjD,CAAEL,MAAOmB,EAAajB,MAAOqB,KAE/BM,SAAUA,EACVqB,SAAU,kBACRvB,EAAK,CACHS,SAAUf,EACVC,YAGJ6B,cAAc,QACdC,cAAe,CACbC,YAAahD,EAAciD,IAAeC,MAC1CC,cAAe,CAAC,aAAc,mBAOxCtC,EAAuBuC,UAAY,CACjCpC,SAAUqC,IAAUC,OAAO/C,WAC3BO,YAAauC,IAAUC,OACvBvC,gBAAiBsC,IAAUC,OAAO/C,WAClCU,OAAQoC,IAAUC,OAAO/C,WACzBW,cAAemC,IAAUC,OAAO/C,YAEnBM","file":"js/copy-portfolio-item-modal~1601866c.2d85d280a0d6947e463e.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Modal } from '@patternfly/react-core';\n\nimport FormRenderer from '../../common/form-renderer';\nimport { getPortfolioItemApi } from '../../../helpers/shared/user-login';\nimport {\n  copyPortfolioItem,\n  fetchPortfolioItemsWithPortfolio,\n  fetchSelectedPortfolio\n} from '../../../redux/actions/portfolio-actions';\nimport asyncFormValidator from '../../../utilities/async-form-validator';\nimport { listPortfolios } from '../../../helpers/portfolio/portfolio-helper';\nimport { PORTFOLIO_ITEM_ROUTE } from '../../../constants/routes';\nimport actionMessages from '../../../messages/actions.messages';\nimport labelMessages from '../../../messages/labels.messages';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\n\nconst loadPortfolios = (name) =>\n  listPortfolios({ name }, { limit: 100, offset: 0 }).then(({ data }) =>\n    data\n      .filter(\n        ({\n          metadata: {\n            user_capabilities: { update }\n          }\n        }) => update\n      )\n      .map(({ name, id }) => ({ value: id, label: name }))\n  );\n\nconst copySchema = (getName, formatMessage, initialOptions) => ({\n  fields: [\n    {\n      component: 'copy-name-display',\n      name: 'portfolio_item_name',\n      label: formatMessage(labelMessages.name),\n      getName,\n      fieldSpy: 'portfolio_id'\n    },\n    {\n      component: 'initial-select',\n      name: 'portfolio_id',\n      label: formatMessage(labelMessages.portfolio),\n      isRequired: true,\n      loadOptions: asyncFormValidator(loadPortfolios),\n      isSearchable: true,\n      options: initialOptions,\n      menuIsPortal: true\n    }\n  ]\n});\n\nconst CopyPortfolioItemModal = ({\n  portfolioId,\n  portfolioItemId,\n  closeUrl,\n  search,\n  portfolioName\n}) => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n\n  const onSubmit = async (values) => {\n    /**\n     * dispatch redux action to set selected portfolio in store\n     * this will ensure that correct portfolio data will be loaded after the redirect occurs\n     */\n    const { value: portfolio } = await dispatch(\n      fetchSelectedPortfolio(values.portfolio_id)\n    );\n    return dispatch(copyPortfolioItem(portfolioItemId, values, portfolio))\n      .then(({ id, service_offering_source_ref }) =>\n        push({\n          pathname: PORTFOLIO_ITEM_ROUTE,\n          search: `?portfolio=${values.portfolio_id}&portfolio-item=${id}&source=${service_offering_source_ref}`\n        })\n      )\n      .then(\n        () =>\n          values.portfolio_id === portfolioId &&\n          dispatch(fetchPortfolioItemsWithPortfolio(portfolioId))\n      );\n  };\n\n  const portfolioChange = (portfolioId) =>\n    getPortfolioItemApi()\n      .getPortfolioItemNextName(portfolioItemId, portfolioId)\n      .then(({ next_name }) => next_name);\n\n  return (\n    <Modal\n      isOpen\n      title={formatMessage(portfolioMessages.copyItemTitle)}\n      onClose={() =>\n        push({\n          pathname: closeUrl,\n          search\n        })\n      }\n      variant=\"small\"\n    >\n      <FormRenderer\n        initialValues={{ portfolio_id: portfolioId }}\n        schema={copySchema(portfolioChange, formatMessage, [\n          { value: portfolioId, label: portfolioName }\n        ])}\n        onSubmit={onSubmit}\n        onCancel={() =>\n          push({\n            pathname: closeUrl,\n            search\n          })\n        }\n        formContainer=\"modal\"\n        templateProps={{\n          submitLabel: formatMessage(actionMessages.save),\n          disableSubmit: ['validating', 'submitting']\n        }}\n      />\n    </Modal>\n  );\n};\n\nCopyPortfolioItemModal.propTypes = {\n  closeUrl: PropTypes.string.isRequired,\n  portfolioId: PropTypes.string,\n  portfolioItemId: PropTypes.string.isRequired,\n  search: PropTypes.string.isRequired,\n  portfolioName: PropTypes.string.isRequired\n};\nexport default CopyPortfolioItemModal;\n"],"sourceRoot":""}