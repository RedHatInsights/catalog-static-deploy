{"version":3,"file":"js/add-portfolio.1643309516607.7f8cceb6a3e98c63ed41.js","mappings":"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","sources":["webpack:///./src/forms/portfolio-form.schema.ts","webpack:///./src/smart-components/portfolio/add-portfolio-modal.tsx","webpack:///./src/utilities/use-enhanced-history.ts"],"sourcesContent":["import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Schema from '@data-driven-forms/react-form-renderer/common-types/schema';\nimport { DEFAULT_MAX_LENGTH } from '../utilities/constants';\n\nimport asyncFormValidator from '../utilities/async-form-validator';\nimport { fetchPortfolioByName } from '../helpers/portfolio/portfolio-helper';\nimport { fetchPortfolioByName as fetchPortfolioByNameS } from '../helpers/portfolio/portfolio-helper-s';\nimport { AnyObject } from '../types/common-types';\n\nexport const validateName = (name: string, portfolioId: string) => {\n  if (localStorage.getItem('catalog_standalone')) {\n    fetchPortfolioByNameS(name).then(({ results }) => {\n      if (!name || name.trim().length === 0) {\n        throw 'Required';\n      }\n\n      const conflict = results.find(\n        (portfolio) => portfolio.name === name && portfolio.id !== portfolioId\n      );\n      if (conflict) {\n        throw 'Name has already been taken';\n      }\n    });\n  } else {\n    fetchPortfolioByName(name).then(({ data }) => {\n      if (!name || name.trim().length === 0) {\n        throw 'Required';\n      }\n\n      const conflict = data.find(\n        (portfolio) => portfolio.name === name && portfolio.id !== portfolioId\n      );\n      if (conflict) {\n        throw 'Name has already been taken';\n      }\n    });\n  }\n};\n\nconst debouncedValidator = asyncFormValidator(validateName);\n\n/**\n * Creates a data-driven-form schema for adding/editing portfolio\n * @param {bool} newRecord sets the variant of portfolio form\n * @param openApiSchema\n * @param portfolioId\n */\nexport const createPortfolioSchema = (\n  openApiSchema: AnyObject,\n  portfolioId: string\n): Schema => ({\n  fields: [\n    {\n      label: 'schemas.portfolio.name',\n      name: 'name',\n      component: componentTypes.TEXT_FIELD,\n      isRequired: true,\n      maxLength:\n        openApiSchema?.components?.schemas?.Portfolio?.properties?.name\n          ?.maxLength || DEFAULT_MAX_LENGTH,\n      validate: [(value: string) => debouncedValidator(value, portfolioId)]\n    },\n    {\n      label: 'schemas.portfolio.description',\n      component: componentTypes.TEXTAREA,\n      name: 'description'\n    }\n  ]\n});\n","/* eslint-disable react/prop-types */\nimport React, { ReactNode, useContext, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FormRenderer from '../common/form-renderer';\nimport { createPortfolioSchema } from '../../forms/portfolio-form.schema';\nimport {\n  addPortfolio,\n  updatePortfolio\n} from '../../redux/actions/portfolio-actions';\nimport {\n  addPortfolio as addPortfolioS,\n  updatePortfolio as updatePortfolioS\n} from '../../redux/actions/portfolio-actions-s';\nimport useQuery from '../../utilities/use-query';\nimport { getPortfolioFromState } from '../../helpers/portfolio/portfolio-helper';\nimport { getPortfolioFromState as getPortfolioFromStateS } from '../../helpers/portfolio/portfolio-helper-s';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\nimport { UnauthorizedRedirect } from '../error-pages/error-redirects';\nimport { PORTFOLIO_ROUTE } from '../../constants/routes';\nimport UserContext from '../../user-context';\nimport actionMessages from '../../messages/actions.messages';\nimport portfolioMessages from '../../messages/portfolio.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport { CatalogLinkTo } from '../common/catalog-link';\nimport { PaginationConfiguration } from '../../helpers/shared/pagination';\nimport { CatalogRootState } from '../../types/redux';\nimport { Portfolio } from '@redhat-cloud-services/catalog-client';\nimport { InternalPortfolio } from '../../types/common-types';\nimport { isStandalone } from '../../helpers/shared/helpers';\n\nexport interface AddPortfolioModalProps {\n  removeQuery?: boolean;\n  closeTarget: CatalogLinkTo;\n  viewState?: PaginationConfiguration;\n}\nconst AddPortfolioModal: React.ComponentType<AddPortfolioModalProps> = ({\n  removeQuery,\n  closeTarget,\n  viewState\n}) => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const [isOpen, setIsOpen] = useState(true);\n  const { openApiSchema: openApiSchema } = useContext(UserContext);\n  const [{ portfolio: portfolioId }] = useQuery(['portfolio']);\n  const { push } = useEnhancedHistory({\n    removeSearch: removeQuery,\n    keepHash: true\n  });\n  const initialValues = useSelector<\n    CatalogRootState,\n    InternalPortfolio | undefined\n  >(({ portfolioReducer }) =>\n    isStandalone()\n      ? (getPortfolioFromStateS(portfolioReducer, portfolioId) as\n          | InternalPortfolio\n          | undefined)\n      : (getPortfolioFromState(portfolioReducer, portfolioId) as\n          | InternalPortfolio\n          | undefined)\n  );\n\n  const onAddPortfolio = async (data: Partial<Portfolio>) => {\n    const notification = {\n      variant: 'success',\n      title: formatMessage(portfolioMessages.addSuccessTitle),\n      description: formatMessage(portfolioMessages.addSuccessDescription, {\n        name: data.name,\n        // eslint-disable-next-line react/display-name\n        b: (chunks: ReactNode) => <b key=\"strong\">{chunks}</b>\n      })\n    };\n    const newPortfolio = await dispatch(\n      isStandalone()\n        ? (addPortfolioS(data, notification) as Promise<{ value: Portfolio }>)\n        : (addPortfolio(data, notification) as Promise<{ value: Portfolio }>)\n    );\n    return newPortfolio && newPortfolio.value && newPortfolio.value.id\n      ? push({\n          pathname: PORTFOLIO_ROUTE,\n          search: `?portfolio=${newPortfolio.value.id}`\n        })\n      : push(closeTarget);\n  };\n\n  const onSubmit = (data: Portfolio) => {\n    if (initialValues) {\n      /**\n       * Fake the redirect by closing the modal\n       */\n      setIsOpen(false);\n      return dispatch(\n        (isStandalone()\n          ? updatePortfolioS(data, viewState)\n          : (updatePortfolio(data, viewState) as unknown)) as Promise<void>\n      ).then(() =>\n        /**\n         * Redirect only after the update was finished.\n         * This will ensure that API requests are triggered in correct order when chaning the router pathname\n         * */\n        push(closeTarget)\n      );\n    } else {\n      return onAddPortfolio(data);\n    }\n  };\n\n  const editVariant =\n    portfolioId && initialValues && Object.keys(initialValues).length > 0;\n\n  if (initialValues?.metadata?.user_capabilities?.update === false) {\n    return <UnauthorizedRedirect />;\n  }\n\n  const schema = createPortfolioSchema(openApiSchema, portfolioId);\n  return (\n    <FormRenderer\n      schema={schema}\n      onSubmit={onSubmit}\n      onCancel={() => push(closeTarget)}\n      initialValues={{ ...initialValues }}\n      isModal\n      modalProps={{\n        title: portfolioId\n          ? (formatMessage(portfolioMessages.modalEditTitle) as string)\n          : (formatMessage(portfolioMessages.modalCreateTitle) as string),\n        isOpen,\n        onClose: () => push(closeTarget),\n        variant: 'small'\n      }}\n      templateProps={{\n        submitLabel: portfolioId\n          ? formatMessage(actionMessages.save)\n          : formatMessage(labelMessages.create)\n      }}\n    />\n  );\n};\n\nexport default AddPortfolioModal;\n","import { useHistory } from 'react-router-dom';\nimport { History, Path } from 'history';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\n\nexport type EnhancedHistoryPushtarget =\n  | Path\n  | { pathname: string; hash?: string; search?: string; state?: AnyObject };\n\nconst removeSearchQuery = (target: EnhancedHistoryPushtarget) => {\n  if (typeof target === 'string') {\n    return target.split('?')[0];\n  }\n\n  if (typeof target === 'object') {\n    return {\n      ...target,\n      search: undefined\n    };\n  }\n\n  return target;\n};\n\n/**\n * Wrapper around useHistory hook which adds aditional settings to standard history methods\n * @param {Boolean} removeSearch if true, using history navigation methods will remove search string from path\n * @param {Boolean} keepHash if true, using history navigation methods will not remove hash from URL\n */\nconst useEnhancedHistory = ({\n  removeSearch,\n  keepHash\n}: {\n  removeSearch?: boolean;\n  keepHash?: boolean;\n} = {}): History<History.UnknownFacade> => {\n  const history = useHistory();\n  return {\n    ...history,\n    push: (target: EnhancedHistoryPushtarget) => {\n      let internalTarget = target;\n      if (keepHash && history.location.hash.length > 0) {\n        internalTarget =\n          typeof internalTarget === 'object'\n            ? { ...internalTarget, hash: history.location.hash }\n            : `${internalTarget}${history.location.hash}`;\n      }\n\n      if (removeSearch) {\n        return history.push(removeSearchQuery(internalTarget));\n      }\n\n      return history.push(internalTarget);\n    }\n  };\n};\n\nexport default useEnhancedHistory;\n"],"names":["debouncedValidator","name","portfolioId","localStorage","getItem","then","results","trim","length","find","portfolio","id","data","removeQuery","closeTarget","viewState","formatMessage","dispatch","useState","isOpen","setIsOpen","openApiSchema","useContext","push","removeSearch","keepHash","initialValues","portfolioReducer","Object","keys","metadata","user_capabilities","update","schema","fields","label","component","isRequired","maxLength","components","schemas","Portfolio","properties","validate","value","createPortfolioSchema","onSubmit","notification","variant","title","description","b","chunks","key","newPortfolio","pathname","search","onAddPortfolio","onCancel","isModal","modalProps","onClose","templateProps","submitLabel","history","useHistory","target","internalTarget","location","hash","split","undefined","removeSearchQuery"],"sourceRoot":""}