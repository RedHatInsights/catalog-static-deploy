{"version":3,"file":"js/edit-approval-workflow.68f82b9b4f6eacba5564.js","mappings":"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","sources":["webpack:///./src/helpers/approval/approval-helper.ts","webpack:///./src/messages/approval.messages.ts","webpack:///./src/redux/actions/approval-actions.ts","webpack:///./src/smart-components/common/edit-approval-workflow.tsx","webpack:///./src/utilities/extract-format-message.ts"],"sourcesContent":["import {\n  Workflow,\n  ResourceObject\n} from '@redhat-cloud-services/approval-client';\nimport { getWorkflowApi, getAxiosInstance } from '../shared/user-login';\nimport { APPROVAL_API_BASE } from '../../utilities/constants';\nimport { defaultSettings, PaginationConfiguration } from '../shared/pagination';\nimport {\n  ApiCollectionResponse,\n  SelectOptions,\n  InternalResourceObject\n} from '../../types/common-types';\n\nexport const getApprovalWorkflows = (): Promise<ApiCollectionResponse<\n  Workflow\n>> =>\n  (getWorkflowApi().listWorkflows() as unknown) as Promise<\n    ApiCollectionResponse<Workflow>\n  >;\n\nexport const loadWorkflowOptions = (\n  filterValue = '',\n  initialLookup: string[] = []\n): Promise<SelectOptions> => {\n  const initialLookupQuery = initialLookup\n    .map((workflow) => `filter[id][]=${workflow}`)\n    .join('&');\n\n  return getAxiosInstance()\n    .get(\n      `${APPROVAL_API_BASE}/workflows?filter[name][contains]=${filterValue}&${initialLookupQuery ||\n        ''}`\n    )\n    .then(({ data }) =>\n      data.map(({ id, name }: Workflow) => ({ label: name, value: id }))\n    );\n};\n\nexport const updateWorkflows = (\n  unlinkIds: string[],\n  linkIds: string[],\n  resourceObject: ResourceObject\n): Promise<void[]> => {\n  const unlinkPromises = unlinkIds\n    ? unlinkIds.map((wf) => getWorkflowApi().unlinkWorkflow(wf, resourceObject))\n    : [];\n  const linkPromises = linkIds\n    ? linkIds.map((wf) => getWorkflowApi().linkWorkflow(wf, resourceObject))\n    : [];\n  return (Promise.all([\n    ...unlinkPromises,\n    ...linkPromises\n  ]) as unknown) as Promise<void[]>;\n};\n\nexport const listWorkflowsForObject = (\n  resourceObject: InternalResourceObject,\n  pagination: PaginationConfiguration = {\n    limit: defaultSettings.limit,\n    offset: defaultSettings.offset\n  },\n  filter = ''\n): Promise<ApiCollectionResponse<Workflow>> => {\n  const objectQuery = `app_name=${resourceObject.appName}&object_type=${resourceObject.objectType}&object_id=${resourceObject.objectId}`;\n  const paginationQuery = `&limit=${pagination.limit}&offset=${pagination.offset}`;\n  const filterQuery = `&filter[name][contains]=${filter}`;\n  return getAxiosInstance().get(\n    `${APPROVAL_API_BASE}/workflows?${objectQuery}${filterQuery}${paginationQuery}`\n  );\n};\n","import { defineMessages } from 'react-intl';\n\nconst approvalMessages = defineMessages({\n  unlinkNotification: {\n    id: 'approval.notifications.unlink',\n    defaultMessage:\n      '{count, number} {count, plural, one {approval process was} other {approval processes were}} unlinked successfully.'\n  },\n  linkNotification: {\n    id: 'approval.notifications.link',\n    defaultMessage:\n      '{count, number} {count, plural, one {approval process was} other {approval processes were}} linked successfully.'\n  },\n  setWorkflow: {\n    id: 'approval.workflows.set',\n    defaultMessage:\n      'Select approval processes for <strong>{objectName}</strong>'\n  },\n  currentWorkflows: {\n    id: 'approval.workflows.current',\n    defaultMessage: 'Current approval processes'\n  }\n});\n\nexport default approvalMessages;\n","import { Dispatch } from 'redux';\nimport {\n  ApiCollectionResponse,\n  ApiMetadata,\n  InternalResourceObject\n} from '../../types/common-types';\nimport { ASYNC_ACTIONS } from '../action-types/approval-action-types';\nimport * as ApprovalHelper from '../../helpers/approval/approval-helper';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport extractFormatMessage from '../../utilities/extract-format-message';\nimport approvalMessages from '../../messages/approval.messages';\nimport { AsyncMiddlewareAction, GetReduxState } from '../../types/redux';\nimport {\n  ResourceObject,\n  Workflow\n} from '@redhat-cloud-services/approval-client';\n\nexport const fetchWorkflows = (): AsyncMiddlewareAction<{\n  value?: string;\n  label?: string;\n}[]> => ({\n  type: ASYNC_ACTIONS.FETCH_WORKFLOWS,\n  payload: ApprovalHelper.getApprovalWorkflows().then(({ data }) =>\n    data.map(({ id, name }) => ({ value: id, label: name }))\n  )\n});\n\nexport const updateWorkflows = (\n  toLinkIds: string[],\n  toUnlinkIds: string[],\n  resourceObject: ResourceObject\n) => (dispatch: Dispatch, getState: GetReduxState): AsyncMiddlewareAction => {\n  const formatMessage = extractFormatMessage(getState);\n  return dispatch({\n    type: ASYNC_ACTIONS.UPDATE_WORKFLOWS,\n    payload: ApprovalHelper.updateWorkflows(\n      toUnlinkIds,\n      toLinkIds,\n      resourceObject\n    ).then(() =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Success updating approval process',\n          dismissable: true,\n          description: `${\n            toUnlinkIds.length > 0\n              ? formatMessage &&\n                formatMessage(approvalMessages.unlinkNotification, {\n                  count: toUnlinkIds.length\n                })\n              : ''\n          }\n          ${\n            toLinkIds.length > 0\n              ? formatMessage(approvalMessages.linkNotification, {\n                  count: toLinkIds.length\n                })\n              : ''\n          }`\n        })\n      )\n    )\n  });\n};\n\nexport const listWorkflowsForObject = (\n  resourceObject: InternalResourceObject,\n  meta: ApiMetadata = {\n    limit: defaultSettings.limit,\n    offset: defaultSettings.offset\n  },\n  filter = ''\n): AsyncMiddlewareAction<ApiCollectionResponse<Workflow>> => ({\n  type: ASYNC_ACTIONS.RESOLVE_WORKFLOWS,\n  payload: ApprovalHelper.listWorkflowsForObject(resourceObject, meta, filter)\n});\n","/* eslint-disable react/prop-types */\nimport React, { ReactNode, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateWorkflows } from '../../redux/actions/approval-actions';\nimport { APP_NAME } from '../../utilities/constants';\nimport {\n  loadWorkflowOptions,\n  listWorkflowsForObject\n} from '../../helpers/approval/approval-helper';\nimport useQuery from '../../utilities/use-query';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\nimport { defineMessage } from 'react-intl';\nimport approvalMessages from '../../messages/approval.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport TaggingModal, { Tag } from './tagging-modal';\nimport { Bold } from '../../presentational-components/shared/intl-rich-text-components';\nimport { CatalogLinkTo } from '../common/catalog-link';\n\nexport interface EditApprovalWorkflowProps {\n  pushParam: CatalogLinkTo;\n  objectType: keyof typeof APP_NAME;\n  objectName: (node: string) => ReactNode;\n  removeSearch?: boolean;\n  querySelector: 'portfolio' | 'platform' | 'inventory' | 'portfolio-item';\n  keepHash?: boolean;\n  postMethod?: () => any;\n  onClose?: () => any;\n}\nconst EditApprovalWorkflow: React.ComponentType<EditApprovalWorkflowProps> = ({\n  objectType,\n  removeSearch,\n  keepHash = false,\n  querySelector,\n  pushParam,\n  objectName = () => objectType,\n  postMethod,\n  onClose\n}) => {\n  const formatMessage = useFormatMessage();\n  const { current: modalTitle } = useRef(\n    formatMessage(\n      defineMessage({\n        id: 'workflows.modal.title',\n        defaultMessage: 'Set approval process'\n      })\n    )\n  );\n  const dispatch = useDispatch();\n  const history = useEnhancedHistory({ removeSearch, keepHash });\n  const [query] = useQuery([querySelector]);\n\n  const close = () => {\n    onClose && onClose();\n    history.push(pushParam);\n  };\n\n  const onSubmit = (toLink: string[], toUnlink: string[]) => {\n    close();\n    const t = dispatch(\n      updateWorkflows(toLink, toUnlink, {\n        object_type: objectType,\n        app_name: APP_NAME[objectType],\n        object_id: query[querySelector]\n      })\n    );\n    ((t as unknown) as Promise<any>).then(() => {\n      if (postMethod) {\n        dispatch(postMethod());\n      }\n    });\n  };\n\n  return (\n    <TaggingModal\n      title={modalTitle as string}\n      onClose={close}\n      onSubmit={onSubmit}\n      getInitialTags={() =>\n        listWorkflowsForObject({\n          objectType,\n          appName: APP_NAME[objectType],\n          objectId: query[querySelector]\n        }).then(({ data }) => data) as Promise<Tag[]>\n      }\n      loadTags={loadWorkflowOptions}\n      subTitle={formatMessage(approvalMessages.setWorkflow, {\n        strong: Bold,\n        objectName: objectName(query[querySelector])\n      })}\n      existingTagsMessage={formatMessage(approvalMessages.currentWorkflows)}\n    />\n  );\n};\n\nexport default EditApprovalWorkflow;\n","import { I18nFormatMessage } from '../redux/reducers/i18n-reducer';\nimport { GetReduxState } from '../types/redux';\n\nconst extractFormatMessage = (getState: GetReduxState): I18nFormatMessage =>\n  getState().i18nReducer.formatMessage!;\n\nexport default extractFormatMessage;\n"],"names":["loadWorkflowOptions","filterValue","initialLookup","initialLookupQuery","map","workflow","join","get","then","id","label","value","updateWorkflows","unlinkIds","linkIds","resourceObject","unlinkPromises","wf","unlinkWorkflow","linkPromises","linkWorkflow","Promise","all","unlinkNotification","defaultMessage","linkNotification","setWorkflow","currentWorkflows","objectType","removeSearch","keepHash","querySelector","pushParam","objectName","postMethod","onClose","formatMessage","modalTitle","useRef","dispatch","useDispatch","history","query","close","push","title","onSubmit","toLink","toUnlink","toLinkIds","toUnlinkIds","object_type","app_name","object_id","getState","i18nReducer","type","payload","variant","dismissable","description","length","count","getInitialTags","pagination","filter","limit","offset","objectQuery","appName","objectId","paginationQuery","filterQuery","listWorkflowsForObject","loadTags","subTitle","strong","existingTagsMessage"],"sourceRoot":""}