{"version":3,"file":"js/2439.1640113391352.0bdf2e8e8c3058a6ad15.js","mappings":"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","sources":["webpack:///./src/helpers/order/service-plan-helper-s.ts","webpack:///./src/messages/orders.messages.ts","webpack:///./src/presentational-components/order/order-notification.tsx","webpack:///./src/helpers/order/new-order-helper-s.ts","webpack:///./src/helpers/order/order-helper-s.ts","webpack:///./src/redux/actions/order-actions-s.tsx","webpack:///./src/helpers/order/new-order-helper.ts","webpack:///./src/helpers/order/order-helper.ts","webpack:///./src/redux/actions/order-actions.tsx"],"sourcesContent":["/* eslint camelcase: 0 */\nimport { getAxiosInstance } from '../shared/user-login';\nimport { CATALOG_API_BASE } from '../../utilities/constants';\nimport { ApiCollectionResponse } from '../../types/common-types-s';\nimport { AxiosInstance, AxiosPromise } from 'axios';\nconst axiosInstance = getAxiosInstance();\n\nexport interface ImportServicePlan {\n  /**\n   * The Portfolio Item to import the service plans for.\n   * @type {string}\n   * @memberof ImportServicePlan\n   */\n  portfolio_item_id?: string;\n}\n\nexport interface ServicePlan {\n  name?: string;\n  description?: string;\n  schema?: any;\n  portfolio_item_id?: string;\n  id?: string;\n  imported?: boolean;\n  modified?: boolean;\n}\n\nexport interface PatchModifiedServicePlan {\n  modified?: any;\n}\n\nexport const getServicePlans = (\n  portfolioItemId: string\n): Promise<ApiCollectionResponse<ServicePlan>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolio_items/${portfolioItemId}/service_plans/?extra=true`\n  ) as Promise<ApiCollectionResponse<ServicePlan>>;\n\nexport const patchServicePlanModified = (\n  servicePlanId: string,\n  patchModifiedServicePlan?: PatchModifiedServicePlan\n): Promise<ApiCollectionResponse<ServicePlan>> =>\n  axiosInstance.patch(\n    `${CATALOG_API_BASE}/service_plans/${servicePlanId}/`,\n    patchModifiedServicePlan\n  ) as Promise<ApiCollectionResponse<ServicePlan>>;\n\nexport const showServicePlanModified = (\n  servicePlanId: string\n): Promise<ApiCollectionResponse<ServicePlan>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/service_plans/${servicePlanId}/?extra=true/`\n  );\n\nexport const createServicePlan = (\n  importServicePlan?: ImportServicePlan,\n  options: any = {}\n) =>\n  axiosInstance.post(`${CATALOG_API_BASE}/service_plans/`, importServicePlan);\n\nexport const resetServicePlanModified = (\n  id: string,\n  options?: any\n): AxiosPromise<Array<ServicePlan>> =>\n  axiosInstance.post(`${CATALOG_API_BASE}$/service_plans/${id}/reset/`);\n","import { defineMessages } from 'react-intl';\n\nconst ordersMessages = defineMessages({\n  orderedBy: {\n    id: 'orders.common.orderedBy',\n    defaultMessage: 'Ordered by {owner}'\n  },\n  orderedByLabel: {\n    id: 'orders.approval.orderedBy',\n    defaultMessage: 'Ordered by'\n  },\n  lastUpdated: {\n    id: 'orders.common.lastUpdated',\n    defaultMessage: 'Last updated'\n  },\n  compositeTitle: {\n    id: 'orders.common.compositeTitle',\n    defaultMessage: '{name} - Order # {id}'\n  },\n  detailTitle: {\n    id: 'orders.detail.title',\n    defaultMessage: 'Order ID {id}'\n  },\n  orderSuccess: {\n    id: 'orders.notification.success',\n    defaultMessage:\n      'You can track the progress of Order # {id} in your <link>Orders</link> page.'\n  },\n  noOrdersTitle: {\n    id: 'orders.list.empty.title',\n    defaultMessage: 'No orders'\n  },\n  noOrdersDescription: {\n    id: 'orders.list.empty.description',\n    defaultMessage: 'No orders have been created.'\n  },\n  noApprovalRequests: {\n    id: 'orders.approval.no-requests',\n    defaultMessage:\n      'We were unable to find any approval requests for this order.'\n  },\n  creatingApprovalRequest: {\n    id: 'orders.approval.creating',\n    defaultMessage: 'Creating approval request'\n  },\n  approvalTitle: {\n    id: 'orders.approval.title',\n    defaultMessage: 'Summary'\n  },\n  approvalDetail: {\n    id: 'orders.approval.view-detail',\n    // eslint-disable-next-line quotes\n    defaultMessage: \"View this order's approval request details\"\n  },\n  approvalCreated: {\n    id: 'orders.approval.details.created',\n    defaultMessage: 'Request created'\n  },\n  approvalReason: {\n    id: 'orders.approval.details.reason',\n    defaultMessage: 'Approval reason'\n  },\n  approvalCompleted: {\n    id: 'orders.approval.details.completed',\n    defaultMessage: 'Completed at'\n  },\n  orderDetails: {\n    id: 'orders.common.details',\n    defaultMessage: 'Order details'\n  },\n  menuApproval: {\n    id: 'orders.menu.approval',\n    defaultMessage: 'Approval'\n  },\n  menuProvision: {\n    id: 'orders.menu.provision',\n    defaultMessage: 'Provision'\n  },\n  menuLifecycle: {\n    id: 'orders.menu.lifecycle',\n    defaultMessage: 'Lifecycle'\n  },\n  menuSteps: {\n    id: 'orders.menu.steps',\n    defaultMessage: 'Order steps'\n  },\n  objectsNotFound: {\n    id: 'order.detail.not-found',\n    defaultMessage:\n      'The {objects} for this order {count, plural, one {is} other {are}} not available'\n  },\n  orderID: {\n    id: 'orders.order.detail.ID',\n    defaultMessage: 'Order ID'\n  },\n  orderParameters: {\n    id: 'orders.order.detail.parameters',\n    defaultMessage: 'Order parameters'\n  },\n  orderItemParameters: {\n    id: 'orders.order.provision.parameters',\n    defaultMessage: 'Parameters'\n  },\n  defaultOrderItemType: {\n    id: 'orders.order.default_type',\n    defaultMessage: 'Product'\n  },\n  orderProgressMessages: {\n    id: 'orders.order.detail.messages',\n    defaultMessage: 'Progress messages'\n  },\n  lifecycleLink: {\n    id: 'orders.order.lifecycle.link',\n    defaultMessage: 'Manage product'\n  },\n  cancelOrder: {\n    id: 'orders.actions.cancel',\n    defaultMessage: 'Cancel order'\n  },\n  reOrder: {\n    id: 'orders.actions.reorder',\n    defaultMessage: 'Reorder'\n  },\n  keepOrder: {\n    id: 'orders.actions.keep',\n    defaultMessage: 'Keep order'\n  },\n  cancelDescription: {\n    id: 'orders.cancel.description',\n    defaultMessage: 'Are you sure you want to cancel {name}?'\n  },\n  backToOrders: {\n    id: 'orders.toolbar.backLink',\n    defaultMessage: 'Back to orders'\n  },\n  orderDate: {\n    id: 'orders.approval.order-date',\n    defaultMessage: 'Order date'\n  },\n  approvalParameters: {\n    id: 'orders.approval.parameters',\n    defaultMessage: 'Parameters'\n  },\n  activity: {\n    id: 'orders.approval.activity',\n    defaultMessage: 'Activity'\n  },\n  artifacts: {\n    id: 'orders.artifacts',\n    defaultMessage: 'Order artifacts'\n  },\n  noOrderProvision: {\n    id: 'orders.provision.no-items',\n    defaultMessage: 'We were unable to find provisioning data for this order.'\n  },\n  fetchingOrderProvision: {\n    id: 'orders.provision.fetching-provision',\n    defaultMessage: 'Retrieving order provisioning data'\n  }\n});\n\nexport default ordersMessages;\n","import React, { ComponentType, ReactElement, ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ORDER_ROUTE } from '../../constants/routes';\nimport ordersMessages from '../../messages/orders.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport { Dispatch } from 'redux';\n\nexport interface OrderNotificationProps {\n  id: string;\n  dispatch: Dispatch;\n  portfolioItemId: string;\n  portfolioId: string;\n  platformId: string;\n  orderItemId: string;\n}\n\nconst OrderNotification: ComponentType<OrderNotificationProps> = ({\n  id,\n  dispatch,\n  portfolioItemId,\n  portfolioId,\n  platformId,\n  orderItemId\n}) => {\n  const formatMessage = useFormatMessage();\n  return formatMessage(ordersMessages.orderSuccess, {\n    id,\n    // eslint-disable-next-line react/display-name\n    link: (chunks: ReactNode | ReactNode[]) => (\n      <Link\n        onClick={() => dispatch(clearNotifications())}\n        to={{\n          pathname: ORDER_ROUTE,\n          search: `?order=${id}&order-item=${orderItemId}&portfolio-item=${portfolioItemId}&platform=${platformId}&portfolio=${portfolioId}`\n        }}\n      >\n        {chunks}\n      </Link>\n    )\n  }) as ReactElement;\n};\n\nexport default OrderNotification;\n","// TODO migrate whole order-helper.js to TS\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  Portfolio,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\nimport { Source } from '@redhat-cloud-services/sources-client';\nimport { getAxiosInstance } from '../shared/user-login';\nimport {\n  CATALOG_API_BASE,\n  CATALOG_INVENTORY_API_BASE\n} from '../../utilities/constants';\nimport { OrderItem } from './order-helper-s';\nimport { OrderStateEnum } from '@redhat-cloud-services/catalog-client/dist/api';\nconst axiosInstance = getAxiosInstance();\n\nexport interface ObjectNotFound {\n  object: 'Order item' | 'Product' | 'Portfolio' | 'Messages' | 'Platform';\n  notFound: boolean;\n}\nexport interface Order {\n  id?: string;\n  user_id?: string;\n  state?: OrderStateEnum;\n  created_at?: string;\n  order_request_sent_at?: string | null;\n  completed_at?: string;\n  owner?: string;\n  extra_data?: any;\n}\n\nexport interface PortfolioItem {\n  id?: string;\n  favorite?: boolean;\n  name?: string;\n  description?: string | null;\n  orphan?: boolean;\n  state?: string;\n  long_description?: string | null;\n  distributor?: string | null;\n  documentation_url?: string | null;\n  support_url?: string | null;\n  owner?: string;\n  service_offering_source_ref?: string;\n  service_offering_type?: string;\n  portfolio?: string;\n  icon_url?: string;\n  created_at?: string;\n  updated_at?: string;\n  metadata?: any;\n}\n\nexport type OrderDetailPayload = [\n  Order,\n  OrderItem | ObjectNotFound,\n  PortfolioItem | ObjectNotFound,\n  Source | ObjectNotFound,\n  ProgressMessage | ObjectNotFound,\n  Portfolio | ObjectNotFound\n];\n\nexport type ProgressMessageItem = {\n  orderItemId: string;\n  progressMessages: ProgressMessage[];\n};\n\nexport interface OrderProvisionPayload {\n  orderItems: OrderItem[] | [];\n  progressMessageItems: ProgressMessageItem[] | [];\n}\n\nexport const fetchOrderDetailSequence = async (\n  orderId: string\n): Promise<OrderDetailPayload> => {\n  let order: Order;\n  try {\n    order = await axiosInstance.get(\n      `${CATALOG_API_BASE}/orders/${orderId}/?extra=true`\n    );\n  } catch (error) {\n    order = {};\n    // @ts-ignore\n    if (error.status === 404 || error.status === 400) {\n      catalogHistory.replace({\n        pathname: '/404',\n        state: { from: catalogHistory.location }\n      });\n    } else {\n      throw error;\n    }\n  }\n  const orderItems = order?.extra_data?.order_items;\n  const orderItem = orderItems[0];\n  let portfolioItem: PortfolioItem | ObjectNotFound = {\n    object: 'Product',\n    notFound: true\n  };\n\n  if (orderItem) {\n    portfolioItem = orderItem.extra_data?.portfolio_item;\n  }\n\n  const parallerRequests = [\n    axiosInstance\n      .get(\n        `${CATALOG_INVENTORY_API_BASE}/sources/${\n          (portfolioItem as PortfolioItem).service_offering_source_ref\n        }`\n      )\n      .catch(() => ({ object: 'Platform', notFound: true })),\n\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/order_items/${\n          (orderItem as OrderItem).id\n        }/progress_messages/`\n      )\n      .catch(() => ({ object: 'Messages', notFound: true })),\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/portfolios/${\n          (portfolioItem as PortfolioItem).portfolio\n        }`\n      )\n      .catch(() => ({ object: 'Portfolio', notFound: true }))\n  ];\n\n  return Promise.all(\n    parallerRequests\n  ).then(([platform, progressMessages, portfolio]) => [\n    order,\n    orderItem,\n    portfolioItem,\n    platform as Source | ObjectNotFound,\n    progressMessages as ProgressMessage | ObjectNotFound,\n    portfolio as Portfolio | ObjectNotFound\n  ]);\n};\n\nexport const fetchOrderProvisionItems = async (\n  orderId: string\n): Promise<OrderProvisionPayload> => {\n  let orderItems: OrderItem[];\n  try {\n    const items = await axiosInstance.get(\n      `${CATALOG_API_BASE}/orders/${orderId}/order_items/`\n    );\n    orderItems = items.data;\n  } catch (error) {\n    orderItems = [];\n    // @ts-ignore\n    if (error.status === 404 || error.status === 400) {\n      catalogHistory.replace({\n        pathname: '/404',\n        state: { from: catalogHistory.location }\n      });\n    } else {\n      throw error;\n    }\n  }\n\n  const progressMessageItems: ProgressMessageItem[] = [];\n  const promises = orderItems.map((orderItem) =>\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/order_items/${orderItem.id}/progress_messages/`)\n      .then((item) => {\n        progressMessageItems.push({\n          orderItemId: orderItem.id || '',\n          progressMessages: item.data\n        });\n        return progressMessageItems;\n      })\n  );\n  await Promise.all(promises);\n  return { orderItems, progressMessageItems };\n};\n","/* eslint camelcase: 0 */\nimport { getAxiosInstance } from '../shared/user-login';\nimport {\n  CATALOG_API_BASE,\n  APPROVAL_API_BASE,\n  CATALOG_INVENTORY_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  fetchOrderDetailSequence,\n  fetchOrderProvisionItems,\n  OrderDetailPayload,\n  OrderProvisionPayload\n} from './new-order-helper-s';\nimport {\n  ApiCollectionResponse,\n  EnhancedOrder,\n  Full\n} from '../../types/common-types-s';\nimport {\n  ServicePlan,\n  Order,\n  PortfolioItem,\n  ApprovalRequest,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\nimport { AxiosPromise } from 'axios';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\nimport { Request, Action } from '@redhat-cloud-services/approval-client';\nimport { OrderItemStateEnum } from '@redhat-cloud-services/catalog-client';\nimport { GetOrderDetailParams } from './order-helper';\n\nconst axiosInstance = getAxiosInstance();\n\nexport interface OrderItem {\n  id?: string;\n  name?: string;\n  count: number;\n  service_parameters?: any | null;\n  provider_control_parameters?: any | null;\n  portfolio_item: string;\n  state?: OrderItemStateEnum;\n  order?: string;\n  created_at?: string;\n  order_request_sent_at?: string;\n  completed_at?: string;\n  updated_at?: string;\n  owner?: string;\n  external_url?: string;\n  insights_request_id?: string;\n  process_sequence?: number;\n  process_scope?: string;\n  artifacts?: any;\n}\n\nexport const sendSubmitOrder = async (\n  {\n    service_parameters: { providerControlParameters, ...service_parameters },\n    ...parameters\n  }: AnyObject,\n  portfolioItem: AnyObject\n): Promise<EnhancedOrder> => {\n  const order: Order = await axiosInstance.post(`${CATALOG_API_BASE}/orders/`);\n  let orderItem: Partial<OrderItem> = {};\n  orderItem.count = 1;\n  orderItem = {\n    ...orderItem,\n    ...parameters,\n    service_parameters,\n    provider_control_parameters: providerControlParameters || {}\n  };\n  const orderItemResponse = await axiosInstance.post(\n    `${CATALOG_API_BASE}/orders/${order.id}/order_items/`,\n    {\n      id: order.id,\n      name: `orderItem_${order.id}`,\n      portfolio_item: portfolioItem.id,\n      ...orderItem\n    }\n  );\n  return axiosInstance\n    .post(`${CATALOG_API_BASE}/orders/${order.id}/submit/`)\n    .then((order) => ({\n      ...order,\n      orderItem: (orderItemResponse as unknown) as OrderItem\n    }));\n};\n\nexport const cancelOrder = (orderId: string): AxiosPromise<Order> =>\n  axiosInstance.post(`${CATALOG_API_BASE}/orders/${orderId}/cancel/`);\n\nexport const getOrders = (\n  filter = '',\n  pagination = defaultSettings\n): Promise<{\n  data: Order[];\n}> => {\n  return axiosInstance.get(\n    `${CATALOG_API_BASE}/orders/?extra=true${\n      filter?.length > 1 ? '&' : ''\n    }${filter}&page_size=${pagination.limit}&page=${pagination.offset || 1}`\n  );\n};\n\nexport const getOrderDetail = (\n  params: GetOrderDetailParams\n): Promise<OrderDetailPayload> => {\n  return fetchOrderDetailSequence(params.order);\n};\n\nexport interface RequestTranscript extends Full<Request> {\n  actions: Action[];\n}\n\nconst fetchRequestTranscript = (\n  requestId: string\n): Promise<RequestTranscript[]> => {\n  return axiosInstance\n    .get(`${APPROVAL_API_BASE}/requests/${requestId}/`)\n    .then(({ data: { requests } }) => {\n      return requests &&\n        requests.length > 0 &&\n        requests[0].number_of_children > 0\n        ? requests[0].requests\n        : requests;\n    });\n};\n\nexport const getApprovalRequests = (\n  orderItemId: string\n): Promise<{\n  data: { group_name: string; decision: string; updated?: string }[];\n}> =>\n  axiosInstance\n    .get(`${CATALOG_API_BASE}/order_items/${orderItemId}/approval_requests/`)\n    .then(({ data }: { data: Full<ApprovalRequest>[] }) => {\n      const promises = data.map(({ approval_request_ref }) =>\n        fetchRequestTranscript(approval_request_ref)\n      );\n      return Promise.all(promises).then((requests) => {\n        const data = requests?.[0]?.map(({ actions, ...request }) => ({\n          ...request,\n          updated:\n            actions?.length > 0 ? actions.pop()?.created_at : request.created_at\n        }));\n        return { data: data || [] };\n      });\n    });\n\nexport const getOrderProvisionItems = async (\n  orderId: string\n): Promise<OrderProvisionPayload> => {\n  const items = await fetchOrderProvisionItems(orderId);\n  return items;\n};\n\nexport const getProgressMessages = (\n  orderItemId: string\n): Promise<{\n  data: ProgressMessage[];\n}> =>\n  axiosInstance\n    .get(`${CATALOG_API_BASE}/order_items/${orderItemId}/progress_messages/`)\n    .then(({ data }: { data: Full<ProgressMessage>[] }) => {\n      return { data: data || [] };\n    });\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport * as ActionTypes from '../action-types';\nimport * as OrderHelper from '../../helpers/order/order-helper-s';\nimport OrderNotification from '../../presentational-components/order/order-notification';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport {\n  ApprovalRequestStateEnum,\n  Order,\n  OrderItem,\n  OrderStateEnum,\n  Portfolio,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\nimport { PortfolioItem } from '../../helpers/order/new-order-helper-s';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\nimport { Dispatch } from 'redux';\nimport { Full, StringObject, ReduxAction } from '../../types/common-types';\nimport { ApiCollectionResponse } from '../../types/common-types-s';\nimport { AsyncMiddlewareAction, GetReduxState } from '../../types/redux';\nimport {\n  ObjectNotFound,\n  ProgressMessageItem\n} from '../../helpers/order/new-order-helper';\nimport { GetOrderDetailParams } from '../../helpers/order/order-helper';\nimport {\n  getServicePlans,\n  ServicePlan\n} from '../../helpers/order/service-plan-helper-s';\nimport React from 'react';\n\nexport const fetchServicePlans = (\n  portfolioItemId: string\n): AsyncMiddlewareAction<ApiCollectionResponse<ServicePlan>> => ({\n  type: ActionTypes.FETCH_SERVICE_PLANS,\n  payload: getServicePlans(portfolioItemId)\n});\n\nexport const setSelectedPlan = (\n  data: ServicePlan\n): ReduxAction<ServicePlan> => ({\n  type: ActionTypes.SET_SELECTED_PLAN,\n  payload: data\n});\n\nexport const sendSubmitOrder = (\n  apiProps: AnyObject,\n  portfolioItem: Full<PortfolioItem>\n) => (dispatch: Dispatch): AsyncMiddlewareAction =>\n  dispatch({\n    type: ActionTypes.SUBMIT_SERVICE_ORDER,\n    payload: OrderHelper.sendSubmitOrder(apiProps, portfolioItem).then(\n      ({ id, orderItem }) =>\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: 'Your order has been accepted successfully',\n            description: (\n              <OrderNotification\n                id={id!}\n                dispatch={dispatch}\n                portfolioItemId={portfolioItem.id}\n                portfolioId={portfolioItem.portfolio}\n                platformId={portfolioItem.service_offering_source_ref}\n                orderItemId={orderItem.id!}\n              />\n            ),\n            dismissable: true\n          })\n        )\n    )\n  });\n\nexport const cancelOrder = (orderId: string) => (\n  dispatch: Dispatch,\n  getState: GetReduxState\n): Promise<void | { type: string }> => {\n  dispatch({ type: `${ActionTypes.CANCEL_ORDER}_PENDING` });\n  const {\n    orderReducer: { orderDetail }\n  } = getState();\n  return OrderHelper.cancelOrder(orderId)\n    .then(() => {\n      orderDetail.order.state = OrderStateEnum.Canceled;\n      if (\n        orderDetail.approvalRequest &&\n        orderDetail.approvalRequest.data.length > 0\n      ) {\n        orderDetail.approvalRequest.data[0].state = 'canceled' as ApprovalRequestStateEnum;\n      }\n\n      dispatch({\n        type: ActionTypes.SET_ORDER_DETAIL,\n        payload: { ...orderDetail }\n      });\n      return orderDetail;\n    })\n    .then((orderDetail) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been canceled successfully',\n          description: `${`Order #${orderDetail.order.id}`} was canceled.`,\n          dismissable: true\n        })\n      )\n    )\n    .then(() => dispatch({ type: `${ActionTypes.CANCEL_ORDER}_FULFILLED` }))\n    .catch((error) => {\n      dispatch({\n        type: `${ActionTypes.CANCEL_ORDER}_REJECTED`,\n        payload: error\n      });\n    });\n};\n\nexport const fetchOrders = (\n  filters: StringObject,\n  pagination = defaultSettings\n) => (dispatch: Dispatch): Promise<ReduxAction> => {\n  let queryFilter = Object.entries(filters)\n    .filter(([, value]) => value && value.length > 0)\n    .map(([key, value]) =>\n      Array.isArray(value)\n        ? value.map((value) => `${key}=${value}`).join('&')\n        : `${key}=${value}`\n    )\n    .join('&');\n  if (pagination.sortBy) {\n    queryFilter = `${queryFilter}&sort_by=${\n      pagination.sortBy\n    }:${pagination.sortDirection || 'desc'}`;\n  }\n\n  dispatch({ type: `${ActionTypes.FETCH_ORDERS}_PENDING` });\n  return OrderHelper.getOrders(queryFilter, pagination)\n    .then(({ ...orders }) => {\n      return dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_FULFILLED`,\n        meta: {\n          ...pagination,\n          filter: queryFilter,\n          filters,\n          storeState: true,\n          stateKey: 'orders'\n        },\n        payload: orders\n      });\n    })\n    .catch((error) => {\n      return dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_REJECTED`,\n        payload: error\n      });\n    });\n};\n\nexport const fetchOrderDetails = (params: GetOrderDetailParams) => (\n  dispatch: Dispatch\n): Promise<{\n  type: string;\n  payload: {\n    order: Order | ObjectNotFound;\n    orderItem: OrderItem | ObjectNotFound;\n    portfolioItem: PortfolioItem | ObjectNotFound;\n    progressMessages: ProgressMessage | ObjectNotFound;\n    portfolio: Portfolio | ObjectNotFound;\n  };\n}> => {\n  dispatch({ type: `${ActionTypes.SET_ORDER_DETAIL}_PENDING` });\n  // @ts-ignore\n  return OrderHelper.getOrderDetail(params)\n    .then(\n      ([\n        order,\n        orderItem,\n        portfolioItem,\n        platform,\n        progressMessages,\n        portfolio\n      ]) =>\n        dispatch({\n          type: `${ActionTypes.SET_ORDER_DETAIL}_FULFILLED`,\n          payload: {\n            order,\n            orderItem,\n            portfolioItem,\n            platform,\n            progressMessages,\n            portfolio\n          }\n        })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_DETAIL}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchApprovalRequests = (orderItemId: string) => (\n  dispatch: Dispatch\n): Promise<\n  | {\n      data: {\n        group_name: string;\n        decision: string;\n        updated?: string | undefined;\n      }[];\n    }\n  | { type: string; payload: any } /** the action in catch branch */\n> => {\n  dispatch({ type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_PENDING` });\n  return OrderHelper.getApprovalRequests(orderItemId)\n    .then((data) => {\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_FULFILLED`,\n        payload: data\n      });\n      return data;\n    })\n    .catch((err) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_REJECTED`,\n        payload: err\n      })\n    );\n};\n\nexport const fetchOrderProvision = (orderId: string) => (\n  dispatch: Dispatch\n): Promise<{\n  type: string;\n  payload: {\n    orderItems: OrderItem[] | [];\n    progressMessageItems: ProgressMessageItem[] | [];\n  };\n}> => {\n  dispatch({ type: `${ActionTypes.SET_ORDER_PROVISION_ITEMS}_PENDING` });\n  // @ts-ignore\n  return OrderHelper.getOrderProvisionItems(orderId)\n    .then(({ orderItems, progressMessageItems }) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_PROVISION_ITEMS}_FULFILLED`,\n        payload: {\n          orderItems,\n          progressMessageItems\n        }\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_PROVISION_ITEMS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n","// TODO migrate whole order-helper.js to TS\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  Order,\n  OrderItem,\n  PortfolioItem,\n  Portfolio,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\nimport { Source } from '@redhat-cloud-services/sources-client';\nimport { getAxiosInstance } from '../shared/user-login';\nimport {\n  CATALOG_API_BASE,\n  CATALOG_INVENTORY_API_BASE\n} from '../../utilities/constants';\nconst axiosInstance = getAxiosInstance();\n\nexport interface ObjectNotFound {\n  object: 'Order item' | 'Product' | 'Portfolio' | 'Messages' | 'Platform';\n  notFound: boolean;\n}\n\nexport type OrderDetailPayload = [\n  Order,\n  OrderItem | ObjectNotFound,\n  PortfolioItem | ObjectNotFound,\n  Source | ObjectNotFound,\n  ProgressMessage | ObjectNotFound,\n  Portfolio | ObjectNotFound\n];\n\nexport type ProgressMessageItem = {\n  orderItemId: string;\n  progressMessages: ProgressMessage[];\n};\n\nexport interface OrderProvisionPayload {\n  orderItems: OrderItem[] | [];\n  progressMessageItems: ProgressMessageItem[] | [];\n}\n\nexport const fetchOrderDetailSequence = async (\n  orderId: string\n): Promise<OrderDetailPayload> => {\n  let order: Order;\n  try {\n    order = await axiosInstance.get(`${CATALOG_API_BASE}/orders/${orderId}`);\n  } catch (error) {\n    order = {};\n    // @ts-ignore\n    if (error.status === 404 || error.status === 400) {\n      catalogHistory.replace({\n        pathname: '/404',\n        state: { from: catalogHistory.location }\n      });\n    } else {\n      throw error;\n    }\n  }\n\n  let orderItem: OrderItem | ObjectNotFound = {\n    object: 'Order item',\n    notFound: true\n  };\n  try {\n    const orderItems = await axiosInstance.get(\n      `${CATALOG_API_BASE}/order_items/?order_id=${order.id}`\n    );\n    orderItem = orderItems.data[0];\n  } catch (_error) {\n    // no handler\n  }\n\n  let portfolioItem: PortfolioItem | ObjectNotFound = {\n    object: 'Product',\n    notFound: true\n  };\n\n  try {\n    portfolioItem = await axiosInstance.get(\n      `${CATALOG_API_BASE}/portfolio_items/${\n        (orderItem as OrderItem).portfolio_item_id\n      }`\n    );\n  } catch (_error) {\n    // nohandler\n  }\n\n  const parallerRequests = [\n    axiosInstance\n      .get(\n        `${CATALOG_INVENTORY_API_BASE}/sources/${\n          (portfolioItem as PortfolioItem).service_offering_source_ref\n        }`\n      )\n      .catch(() => ({ object: 'Platform', notFound: true })),\n\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/order_items/${\n          (orderItem as OrderItem).id\n        }/progress_messages`\n      )\n      .catch(() => ({ object: 'Messages', notFound: true })),\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/portfolios/${\n          (portfolioItem as PortfolioItem).portfolio_id\n        }`\n      )\n      .catch(() => ({ object: 'Portfolio', notFound: true }))\n  ];\n\n  return Promise.all(\n    parallerRequests\n  ).then(([platform, progressMessages, portfolio]) => [\n    order,\n    orderItem,\n    portfolioItem,\n    platform as Source | ObjectNotFound,\n    progressMessages as ProgressMessage | ObjectNotFound,\n    portfolio as Portfolio | ObjectNotFound\n  ]);\n};\n\nexport const fetchOrderProvisionItems = async (\n  orderId: string\n): Promise<OrderProvisionPayload> => {\n  let orderItems: OrderItem[];\n  try {\n    const items = await axiosInstance.get(\n      `${CATALOG_API_BASE}/order_items/?order_id=${orderId}`\n    );\n    orderItems = items.data;\n  } catch (error) {\n    orderItems = [];\n    // @ts-ignore\n    if (error.status === 404 || error.status === 400) {\n      catalogHistory.replace({\n        pathname: '/404',\n        state: { from: catalogHistory.location }\n      });\n    } else {\n      throw error;\n    }\n  }\n\n  const progressMessageItems: ProgressMessageItem[] = [];\n  const promises = orderItems.map((orderItem) =>\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/order_items/${orderItem.id}/progress_messages`)\n      .then((item) => {\n        progressMessageItems.push({\n          orderItemId: orderItem.id || '',\n          progressMessages: item.data\n        });\n        return progressMessageItems;\n      })\n  );\n  await Promise.all(promises);\n  return { orderItems, progressMessageItems };\n};\n","/* eslint camelcase: 0 */\nimport {\n  getAxiosInstance,\n  getPortfolioItemApi,\n  getOrderApi,\n  getOrderItemApi,\n  getGraphqlInstance\n} from '../shared/user-login';\nimport {\n  CATALOG_API_BASE,\n  APPROVAL_API_BASE,\n  CATALOG_INVENTORY_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  fetchOrderDetailSequence,\n  fetchOrderProvisionItems,\n  OrderDetailPayload,\n  OrderProvisionPayload\n} from './new-order-helper';\nimport {\n  ApiCollectionResponse,\n  ApiMetadata,\n  EnhancedOrder,\n  Full\n} from '../../types/common-types';\nimport {\n  ServicePlan,\n  Order,\n  OrderItem,\n  PortfolioItem,\n  ApprovalRequest,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\nimport { AxiosPromise } from 'axios';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\nimport { Request, Action } from '@redhat-cloud-services/approval-client';\n\nconst orderApi = getOrderApi();\nconst orderItemApi = getOrderItemApi();\nconst portfolioItemApi = getPortfolioItemApi();\nconst axiosInstance = getAxiosInstance();\nconst graphqlInstance = getGraphqlInstance();\n\nexport const getServicePlans = (\n  portfolioItemId: string\n): Promise<ApiCollectionResponse<ServicePlan>> =>\n  (portfolioItemApi.listServicePlans(portfolioItemId) as unknown) as Promise<\n    ApiCollectionResponse<ServicePlan>\n  >;\n\nexport const sendSubmitOrder = async ({\n  service_parameters: { providerControlParameters, ...service_parameters },\n  ...parameters\n}: AnyObject): Promise<EnhancedOrder> => {\n  const order: Order = ((await orderApi.createOrder()) as unknown) as Order;\n  let orderItem: Partial<OrderItem> = {};\n  orderItem.count = 1;\n  orderItem = {\n    ...orderItem,\n    ...parameters,\n    service_parameters,\n    provider_control_parameters: providerControlParameters || {}\n  };\n  const orderItemResponse = await orderApi.addToOrder(\n    order.id as string,\n    orderItem as OrderItem\n  );\n  return orderApi.submitOrder(order.id as string).then((order) => ({\n    ...order,\n    orderItem: (orderItemResponse as unknown) as OrderItem\n  }));\n};\n\nexport const cancelOrder = (orderId: string): AxiosPromise<Order> =>\n  orderApi.cancelOrder(orderId);\n\nconst getOrderItems = (\n  orderIds: string[]\n): Promise<ApiCollectionResponse<OrderItem>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/order_items?limit=${orderIds.length * 3 ||\n      defaultSettings.limit}${orderIds.length ? '&' : ''}${orderIds\n      .map((orderId) => `filter[order_id][]=${orderId}`)\n      .join('&')}`\n  );\n\nconst getOrderPortfolioItems = (\n  itemIds: string[]\n): Promise<ApiCollectionResponse<PortfolioItem>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolio_items?${itemIds\n      .map((itemId) => `filter[id][]=${itemId}`)\n      .join('&')}`\n  );\n\nexport const getOrders = (\n  filter = '',\n  pagination = defaultSettings\n): Promise<{\n  data: (Order & { orderItems: OrderItem[] })[];\n  portfolioItems: ApiCollectionResponse<PortfolioItem>;\n  meta: ApiMetadata;\n}> =>\n  axiosInstance\n    .get(\n      `${CATALOG_API_BASE}/orders?${filter}&limit=${pagination.limit}&offset=${pagination.offset}`\n    ) // eslint-disable-line max-len\n    .then((orders: ApiCollectionResponse<Full<Order>>) =>\n      getOrderItems(orders.data.map(({ id }) => id)).then((orderItems) =>\n        getOrderPortfolioItems(\n          orderItems.data.map(({ portfolio_item_id }) => portfolio_item_id)\n        ).then((portfolioItems) => {\n          return {\n            portfolioItems,\n            ...orders,\n            data: orders.data.map((order) => ({\n              ...order,\n              orderItems: orderItems.data.filter(\n                ({ order_id }) => order_id === order.id\n              )\n            }))\n          };\n        })\n      )\n    );\n\nexport const getOrderApprovalRequests = (\n  orderItemId: string\n): Promise<ApiCollectionResponse<Request>> =>\n  (orderItemApi.listApprovalRequests(orderItemId) as unknown) as Promise<\n    ApiCollectionResponse<Request>\n  >;\n\nexport interface GetOrderDetailParams {\n  order: string;\n  'order-item'?: string;\n  'portfolio-item'?: string;\n  platform?: string;\n  portfolio?: string;\n}\nexport const getOrderDetail = (\n  params: GetOrderDetailParams\n): Promise<OrderDetailPayload> => {\n  if (Object.values(params).some((value) => !value)) {\n    /**\n     * Try to fetch data sequentially if any of the parameters is unknown\n     */\n    return fetchOrderDetailSequence(params.order);\n  }\n\n  const detailPromises = [\n    (axiosInstance\n      .get(`${CATALOG_API_BASE}/orders/${params.order}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return catalogHistory.replace({\n            pathname: '/404',\n            state: { from: catalogHistory.location }\n          });\n        }\n\n        throw error;\n      }) as unknown) as Promise<Order>,\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/order_items/${params['order-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Order item',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/portfolio_items/${params['portfolio-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Product',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_INVENTORY_API_BASE}/sources/${params.platform}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Platform',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/orders/${params.order}/progress_messages`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {};\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/portfolios/${params.portfolio}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Portfolio',\n            notFound: true\n          };\n        }\n\n        throw error;\n      })\n  ];\n\n  return (Promise.all(detailPromises) as unknown) as Promise<\n    OrderDetailPayload\n  >;\n};\n\nconst APPROVAL_REQUESTER_PERSONA = 'approval/requester';\nexport interface RequestTranscript extends Full<Request> {\n  actions: Action[];\n}\nconst requestTranscriptQuery = (parent_id: string) => `query {\n  requests(id: \"${parent_id}\") {\n    id\n    number_of_children\n    decision\n    group_name\n    created_at\n    state\n    actions {\n      id\n      created_at\n    }\n    requests {\n      id\n      number_of_children\n      decision\n      group_name\n      state\n      parent_id\n      created_at\n      actions {\n        id\n        created_at\n      }\n    }\n  }\n}`;\nconst fetchRequestTranscript = (\n  requestId: string\n): Promise<RequestTranscript[]> =>\n  graphqlInstance\n    .post(\n      `${APPROVAL_API_BASE}/graphql`,\n      { query: requestTranscriptQuery(requestId) },\n      { 'x-rh-persona': APPROVAL_REQUESTER_PERSONA }\n    )\n    .then(({ data: { requests } }) => {\n      return requests &&\n        requests.length > 0 &&\n        requests[0].number_of_children > 0\n        ? requests[0].requests\n        : requests;\n    });\n\nexport const getApprovalRequests = (\n  orderItemId: string\n): Promise<{\n  data: { group_name: string; decision: string; updated?: string }[];\n}> =>\n  axiosInstance\n    .get(`${CATALOG_API_BASE}/order_items/${orderItemId}/approval_requests`)\n    .then(({ data }: { data: Full<ApprovalRequest>[] }) => {\n      const promises = data.map(({ approval_request_ref }) =>\n        fetchRequestTranscript(approval_request_ref)\n      );\n      return Promise.all(promises).then((requests) => {\n        const data = requests?.[0]?.map(({ actions, ...request }) => ({\n          ...request,\n          updated:\n            actions?.length > 0 ? actions.pop()?.created_at : request.created_at\n        }));\n        return { data: data || [] };\n      });\n    });\n\nexport const getOrderProvisionItems = async (\n  orderId: string\n): Promise<OrderProvisionPayload> => {\n  const items = await fetchOrderProvisionItems(orderId);\n  return items;\n};\n\nexport const getProgressMessages = (\n  orderItemId: string\n): Promise<{\n  data: ProgressMessage[];\n}> =>\n  axiosInstance\n    .get(`${CATALOG_API_BASE}/order_items/${orderItemId}/progress_messages`)\n    .then(({ data }: { data: Full<ProgressMessage>[] }) => {\n      return { data: data || [] };\n    });\n","import React from 'react';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport * as ActionTypes from '../action-types';\nimport * as OrderHelper from '../../helpers/order/order-helper';\nimport OrderNotification from '../../presentational-components/order/order-notification';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport {\n  ApprovalRequestStateEnum,\n  Order,\n  OrderItem,\n  OrderStateEnum,\n  Portfolio,\n  PortfolioItem,\n  ProgressMessage,\n  ServicePlan\n} from '@redhat-cloud-services/catalog-client';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\nimport { Dispatch } from 'redux';\nimport {\n  Full,\n  StringObject,\n  ReduxAction,\n  ApiCollectionResponse\n} from '../../types/common-types';\nimport { AsyncMiddlewareAction, GetReduxState } from '../../types/redux';\nimport { Source } from '@redhat-cloud-services/sources-client';\nimport {\n  ObjectNotFound,\n  ProgressMessageItem\n} from '../../helpers/order/new-order-helper';\n\nexport const fetchServicePlans = (\n  portfolioItemId: string\n): AsyncMiddlewareAction<ApiCollectionResponse<ServicePlan>> => ({\n  type: ActionTypes.FETCH_SERVICE_PLANS,\n  payload: OrderHelper.getServicePlans(portfolioItemId)\n});\n\nexport const setSelectedPlan = (\n  data: ServicePlan\n): ReduxAction<ServicePlan> => ({\n  type: ActionTypes.SET_SELECTED_PLAN,\n  payload: data\n});\n\nexport const sendSubmitOrder = (\n  apiProps: AnyObject,\n  portfolioItem: Full<PortfolioItem>\n) => (dispatch: Dispatch): AsyncMiddlewareAction =>\n  dispatch({\n    type: ActionTypes.SUBMIT_SERVICE_ORDER,\n    payload: OrderHelper.sendSubmitOrder(apiProps).then(({ id, orderItem }) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been accepted successfully',\n          description: (\n            <OrderNotification\n              id={id!}\n              dispatch={dispatch}\n              portfolioItemId={portfolioItem.id}\n              portfolioId={portfolioItem.portfolio_id}\n              platformId={portfolioItem.service_offering_source_ref}\n              orderItemId={orderItem.id!}\n            />\n          ),\n          dismissable: true\n        })\n      )\n    )\n  });\n\nexport const cancelOrder = (orderId: string) => (\n  dispatch: Dispatch,\n  getState: GetReduxState\n): Promise<void | { type: string }> => {\n  dispatch({ type: `${ActionTypes.CANCEL_ORDER}_PENDING` });\n  const {\n    orderReducer: { orderDetail }\n  } = getState();\n  return OrderHelper.cancelOrder(orderId)\n    .then(() => {\n      orderDetail.order.state = OrderStateEnum.Canceled;\n      if (\n        orderDetail.approvalRequest &&\n        orderDetail.approvalRequest.data.length > 0\n      ) {\n        orderDetail.approvalRequest.data[0].state = 'canceled' as ApprovalRequestStateEnum;\n      }\n\n      dispatch({\n        type: ActionTypes.SET_ORDER_DETAIL,\n        payload: { ...orderDetail }\n      });\n      return orderDetail;\n    })\n    .then((orderDetail) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been canceled successfully',\n          description: `${`Order #${orderDetail.order.id}`} was canceled.`,\n          dismissable: true\n        })\n      )\n    )\n    .then(() => dispatch({ type: `${ActionTypes.CANCEL_ORDER}_FULFILLED` }))\n    .catch((error) => {\n      dispatch({\n        type: `${ActionTypes.CANCEL_ORDER}_REJECTED`,\n        payload: error\n      });\n    });\n};\n\nexport const fetchOrders = (\n  filters: StringObject,\n  pagination = defaultSettings\n) => (dispatch: Dispatch): Promise<ReduxAction> => {\n  let queryFilter = Object.entries(filters)\n    .filter(([, value]) => value && value.length > 0)\n    .map(([key, value]) =>\n      Array.isArray(value)\n        ? value.map((value) => `filter[${key}][]=${value}`).join('&')\n        : `filter[${key}][contains_i]=${value}`\n    )\n    .join('&');\n  if (pagination.sortBy) {\n    queryFilter = `${queryFilter}&sort_by=${\n      pagination.sortBy\n    }:${pagination.sortDirection || 'desc'}`;\n  }\n\n  dispatch({ type: `${ActionTypes.FETCH_ORDERS}_PENDING` });\n  return OrderHelper.getOrders(queryFilter, pagination)\n    .then(({ portfolioItems, ...orders }) => {\n      dispatch({\n        type: ActionTypes.SET_PORTFOLIO_ITEMS,\n        payload: portfolioItems\n      });\n      return dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_FULFILLED`,\n        meta: {\n          ...pagination,\n          filter: queryFilter,\n          filters,\n          storeState: true,\n          stateKey: 'orders'\n        },\n        payload: orders\n      });\n    })\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchOrderDetails = (params: OrderHelper.GetOrderDetailParams) => (\n  dispatch: Dispatch\n): Promise<{\n  type: string;\n  payload: {\n    order: Order | ObjectNotFound;\n    orderItem: OrderItem | ObjectNotFound;\n    portfolioItem: PortfolioItem | ObjectNotFound;\n    platform: Source | ObjectNotFound;\n    progressMessages: ProgressMessage | ObjectNotFound;\n    portfolio: Portfolio | ObjectNotFound;\n  };\n}> => {\n  dispatch({ type: `${ActionTypes.SET_ORDER_DETAIL}_PENDING` });\n  return OrderHelper.getOrderDetail(params)\n    .then(\n      ([\n        order,\n        orderItem,\n        portfolioItem,\n        platform,\n        progressMessages,\n        portfolio\n      ]) =>\n        dispatch({\n          type: `${ActionTypes.SET_ORDER_DETAIL}_FULFILLED`,\n          payload: {\n            order,\n            orderItem,\n            portfolioItem,\n            platform,\n            progressMessages,\n            portfolio\n          }\n        })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_DETAIL}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchApprovalRequests = (orderItemId: string) => (\n  dispatch: Dispatch\n): Promise<\n  | {\n      data: {\n        group_name: string;\n        decision: string;\n        updated?: string | undefined;\n      }[];\n    }\n  | { type: string; payload: any } /** the action in catch branch */\n> => {\n  dispatch({ type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_PENDING` });\n  return OrderHelper.getApprovalRequests(orderItemId)\n    .then((data) => {\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_FULFILLED`,\n        payload: data\n      });\n      return data;\n    })\n    .catch((err) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_REJECTED`,\n        payload: err\n      })\n    );\n};\n\nexport const fetchOrderProvision = (orderId: string) => (\n  dispatch: Dispatch\n): Promise<{\n  type: string;\n  payload: {\n    orderItems: OrderItem[] | [];\n    progressMessageItems: ProgressMessageItem[] | [];\n  };\n}> => {\n  dispatch({ type: `${ActionTypes.SET_ORDER_PROVISION_ITEMS}_PENDING` });\n  return OrderHelper.getOrderProvisionItems(orderId)\n    .then(({ orderItems, progressMessageItems }) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_PROVISION_ITEMS}_FULFILLED`,\n        payload: {\n          orderItems,\n          progressMessageItems\n        }\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_PROVISION_ITEMS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n"],"names":["axiosInstance","getServicePlans","portfolioItemId","get","patchServicePlanModified","servicePlanId","patchModifiedServicePlan","patch","createServicePlan","importServicePlan","options","post","resetServicePlanModified","id","orderedBy","defaultMessage","orderedByLabel","lastUpdated","compositeTitle","detailTitle","orderSuccess","noOrdersTitle","noOrdersDescription","noApprovalRequests","creatingApprovalRequest","approvalTitle","approvalDetail","approvalCreated","approvalReason","approvalCompleted","orderDetails","menuApproval","menuProvision","menuLifecycle","menuSteps","objectsNotFound","orderID","orderParameters","orderItemParameters","defaultOrderItemType","orderProgressMessages","lifecycleLink","cancelOrder","reOrder","keepOrder","cancelDescription","backToOrders","orderDate","approvalParameters","activity","artifacts","noOrderProvision","fetchingOrderProvision","dispatch","portfolioId","platformId","orderItemId","formatMessage","link","chunks","Link","onClick","to","pathname","search","sendSubmitOrder","portfolioItem","service_parameters","providerControlParameters","parameters","order","orderItem","count","provider_control_parameters","name","portfolio_item","orderItemResponse","then","getOrderDetail","params","orderId","status","state","from","orderItems","extra_data","order_items","object","notFound","parallerRequests","service_offering_source_ref","catch","portfolio","Promise","all","platform","progressMessages","fetchServicePlans","type","payload","apiProps","variant","title","description","dismissable","fetchOrders","filters","pagination","queryFilter","Object","entries","filter","value","length","map","key","Array","isArray","join","sortBy","sortDirection","limit","offset","orders","meta","storeState","stateKey","error","fetchOrderDetails","fetchOrderProvisionItems","items","data","progressMessageItems","promises","item","push","orderApi","portfolioItemApi","graphqlInstance","listServicePlans","createOrder","addToOrder","submitOrder","portfolio_id","getState","orderDetail","OrderStateEnum","approvalRequest","orderIds","itemIds","itemId","portfolioItems","values","some","portfolio_item_id","detailPromises","fetchApprovalRequests","requestId","parent_id","query","requests","number_of_children","actions","request","updated","pop","created_at","err","fetchOrderProvision"],"sourceRoot":""}