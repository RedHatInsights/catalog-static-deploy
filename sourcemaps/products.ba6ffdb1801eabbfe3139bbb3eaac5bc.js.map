{"version":3,"file":"js/products.1639742730135.978fa97c47b7309f5675.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/js/layouts/Level/Level.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/wrench-icon.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/PageHeader/PageHeaderTitle.js","webpack:///./src/toolbar/schemas/products-toolbar.schema.js","webpack:///./src/messages/products.messages.ts","webpack:///./src/smart-components/products/products.js","webpack:///./src/messages/platforms.messages.ts","webpack:///./src/helpers/platform/platform-helper-s.ts","webpack:///./src/redux/actions/platform-actions-s.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Level = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst level_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/layouts/Level/level\"));\nconst Level = (_a) => {\n    var { hasGutter, className = '', children = null } = _a, props = tslib_1.__rest(_a, [\"hasGutter\", \"className\", \"children\"]);\n    return (React.createElement(\"div\", Object.assign({}, props, { className: react_styles_1.css(level_1.default.level, hasGutter && level_1.default.modifiers.gutter, className) }), children));\n};\nexports.Level = Level;\nexports.Level.displayName = 'Level';\n//# sourceMappingURL=Level.js.map","\"use strict\"\nexports.__esModule = true;\nexports.WrenchIconConfig = {\n  name: 'WrenchIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M507.73 109.1c-2.24-9.03-13.54-12.09-20.12-5.51l-74.36 74.36-67.88-11.31-11.31-67.88 74.36-74.36c6.62-6.62 3.43-17.9-5.66-20.16-47.38-11.74-99.55.91-136.58 37.93-39.64 39.64-50.55 97.1-34.05 147.2L18.74 402.76c-24.99 24.99-24.99 65.51 0 90.5 24.99 24.99 65.51 24.99 90.5 0l213.21-213.21c50.12 16.71 107.47 5.68 147.37-34.22 37.07-37.07 49.7-89.32 37.91-136.73zM64 472c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.WrenchIcon = require('../createIcon').createIcon(exports.WrenchIconConfig);\nexports[\"default\"] = exports.WrenchIcon;","import React from 'react';\nimport propTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Title } from \"@patternfly/react-core/dist/esm/components/Title/Title.js\";\n/**\n * This is the title section of the pageHeader\n */\n\nvar PageHeaderTitle = function PageHeaderTitle(_ref) {\n  var className = _ref.className,\n      title = _ref.title;\n  var pageHeaderTitleClasses = classNames(className);\n  return /*#__PURE__*/React.createElement(Title, {\n    headingLevel: \"h1\",\n    size: \"2xl\",\n    className: pageHeaderTitleClasses,\n    \"widget-type\": \"InsightsPageHeaderTitle\"\n  }, \" \", title, \" \");\n};\n\nexport default PageHeaderTitle;\nPageHeaderTitle.propTypes = {\n  title: propTypes.node.isRequired,\n  className: propTypes.string\n};","import { toolbarComponentTypes } from '../toolbar-mapper';\n\nimport AsyncPagination from '../../smart-components/common/async-pagination';\n\nconst createPortfolioToolbarSchema = ({\n  meta,\n  fetchProducts,\n  isLoading,\n  filterProps: { searchValue, onFilterChange, placeholder }\n}) => ({\n  fields: [\n    {\n      component: toolbarComponentTypes.TOP_TOOLBAR,\n      key: 'products-top-toolbar',\n      fields: [\n        {\n          component: toolbarComponentTypes.TOP_TOOLBAR_TITLE,\n          key: 'products-toolbar-title',\n          title: 'Products',\n          description: 'All products collected from your portfolios',\n          noData: meta.noData\n        },\n        {\n          component: toolbarComponentTypes.LEVEL,\n          key: 'Products-actions',\n          fields: meta.noData\n            ? []\n            : [\n                {\n                  component: toolbarComponentTypes.TOOLBAR,\n                  key: 'main-portfolio-toolbar',\n                  fields: [\n                    {\n                      groupName: 'filter-group',\n                      component: toolbarComponentTypes.FILTER_TOOLBAR_ITEM,\n                      key: 'filter-input',\n                      searchValue,\n                      onFilterChange,\n                      placeholder,\n                      isClearable: true\n                    }\n                  ]\n                },\n                {\n                  component: toolbarComponentTypes.LEVEL_ITEM,\n                  key: 'pagination-item',\n                  fields:\n                    meta.count > 0\n                      ? [\n                          {\n                            component: AsyncPagination,\n                            key: 'products-pagination',\n                            meta,\n                            apiProps: searchValue,\n                            apiRequest: fetchProducts,\n                            isDisabled: isLoading,\n                            isCompact: true\n                          }\n                        ]\n                      : []\n                }\n              ]\n        }\n      ]\n    }\n  ]\n});\n\nexport default createPortfolioToolbarSchema;\n","import { defineMessages } from 'react-intl';\n\nconst productsMessages = defineMessages({\n  addSource: {\n    id: 'products.empty.add-source',\n    defaultMessage: 'Add source'\n  },\n  configureSource: {\n    id: 'products.empty.configure-source',\n    defaultMessage: 'Configure a source and add products into portfolios.'\n  },\n  title: {\n    id: 'products.toolbar.title',\n    defaultMessage: 'Products'\n  }\n});\n\nexport default productsMessages;\n","import React, { useContext, useEffect, useReducer, Fragment } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { WrenchIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport { fetchPortfolioItems } from '../../redux/actions/portfolio-actions';\nimport { fetchPortfolioItems as fetchPortfolioItemsS } from '../../redux/actions/portfolio-actions-s';\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport PortfolioItem from '../portfolio/portfolio-item';\nimport createProductsToolbarSchema from '../../toolbar/schemas/products-toolbar.schema';\nimport ToolbarRenderer from '../../toolbar/toolbar-renderer';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport ContentGallery from '../content-gallery/content-gallery';\nimport { fetchPlatforms } from '../../redux/actions/platform-actions';\nimport { fetchPlatforms as fetchPlatformsS } from '../../redux/actions/platform-actions-s';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport ContentGalleryEmptyState from '../../presentational-components/shared/content-gallery-empty-state';\nimport {\n  Button,\n  TextContent,\n  Text,\n  TextVariants\n} from '@patternfly/react-core';\nimport AppContext from '../../app-context';\nimport AsyncPagination from '../common/async-pagination';\nimport { PORTFOLIO_ITEM_ROUTE } from '../../constants/routes';\nimport BottomPaginationContainer from '../../presentational-components/shared/bottom-pagination-container';\nimport useInitialUriHash from '../../routing/use-initial-uri-hash';\nimport UserContext from '../../user-context';\nimport filteringMessages from '../../messages/filtering.messages';\nimport productsMessages from '../../messages/products.messages';\nimport platformsMessages from '../../messages/platforms.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\n\nconst debouncedFilter = asyncFormValidator(\n  (value, dispatch, filteringCallback) => {\n    filteringCallback(true);\n    dispatch(\n      window.catalog?.standalone\n        ? fetchPortfolioItemsS(value, defaultSettings)\n        : fetchPortfolioItems(value, defaultSettings)\n    ).then(() => filteringCallback(false));\n  },\n  1000\n);\n\nconst buildItemLink = ({ portfolio_id, id, service_offering_source_ref }) => {\n  if (portfolio_id && id && service_offering_source_ref) {\n    return {\n      pathname: portfolio_id && PORTFOLIO_ITEM_ROUTE,\n      searchParams: {\n        portfolio: portfolio_id,\n        'portfolio-item': id,\n        source: service_offering_source_ref,\n        'from-products': 'true'\n      }\n    };\n  }\n\n  return {};\n};\n\nconst initialState = {\n  filterValue: '',\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false\n};\n\nconst productsState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return { ...state, filterValue: action.payload };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n  }\n\n  return state;\n};\n\nconst Products = () => {\n  const formatMessage = useFormatMessage();\n  const viewState = useInitialUriHash();\n  const { release } = useContext(AppContext);\n  const [{ isFetching, filterValue, isFiltering }, stateDispatch] = useReducer(\n    productsState,\n    {\n      ...initialState,\n      filterValue: viewState?.products?.filter || ''\n    }\n  );\n  const {\n    userIdentity: {\n      identity: {\n        user: { is_org_admin }\n      }\n    }\n  } = useContext(UserContext);\n  const dispatch = useDispatch();\n  const products = useSelector(\n    ({ portfolioReducer: { portfolioItems } }) => portfolioItems\n  );\n  const meta = products.meta || { count: products.count };\n  const data = products.data || products.results;\n  useEffect(() => {\n    Promise.all([\n      dispatch(\n        window.catalog?.standalone\n          ? fetchPortfolioItemsS(\n              viewState?.products?.filter,\n              viewState?.products\n            )\n          : fetchPortfolioItems(\n              viewState?.products?.filter,\n              viewState?.products\n            )\n      ),\n      dispatch(window.catalog?.standalone ? fetchPlatformsS() : fetchPlatforms)\n    ]).then(() => stateDispatch({ type: 'setFetching', payload: false }));\n    scrollToTop();\n  }, []);\n\n  const handleFilterItems = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(value, dispatch, (isFiltering) =>\n      stateDispatch({ type: 'setFilteringFlag', payload: isFiltering })\n    );\n  };\n\n  const galleryItems = data.map((item) => (\n    <PortfolioItem\n      key={item.id}\n      pathname={item.portfolio_id && PORTFOLIO_ITEM_ROUTE}\n      {...buildItemLink(item)}\n      {...item}\n      toDisplay={[]}\n    />\n  ));\n\n  const SourcesAction = () =>\n    is_org_admin && (\n      <a href={`${release}settings/sources/new`}>\n        <Button ouiaId={'add-source'} variant=\"primary\">\n          {formatMessage(productsMessages.addSource)}\n        </Button>\n      </a>\n    );\n\n  const FilterAction = () => (\n    <Button\n      ouiaId={'clear-filter'}\n      variant=\"link\"\n      onClick={() => handleFilterItems('')}\n    >\n      {formatMessage(filteringMessages.clearFilters)}\n    </Button>\n  );\n\n  const renderEmptyStateDescription = () => (\n    <Fragment>\n      <TextContent>\n        <Text component={TextVariants.p}>\n          {meta.noData\n            ? formatMessage(productsMessages.configureSource)\n            : formatMessage(filteringMessages.noResultsDescription)}\n        </Text>\n        {is_org_admin ? (\n          <Text component={TextVariants.p}>\n            {formatMessage(platformsMessages.connectSource, {\n              // eslint-disable-next-line react/display-name\n              a: (chunks) => (\n                <Fragment>\n                  <a href={`${document.baseURI}settings/sources`}>{chunks}</a>\n                </Fragment>\n              )\n            })}\n          </Text>\n        ) : (\n          <Text>{formatMessage(platformsMessages.contactAdmin)}</Text>\n        )}\n      </TextContent>\n    </Fragment>\n  );\n\n  const emptyStateProps = {\n    PrimaryAction: meta.noData ? SourcesAction : FilterAction,\n    title: meta.noData\n      ? formatMessage(filteringMessages.noProducts)\n      : formatMessage(filteringMessages.noResults),\n    renderDescription: renderEmptyStateDescription,\n    Icon: meta.noData ? WrenchIcon : SearchIcon\n  };\n\n  return (\n    <Fragment>\n      <ToolbarRenderer\n        schema={createProductsToolbarSchema({\n          filterProps: {\n            searchValue: filterValue,\n            onFilterChange: handleFilterItems,\n            placeholder: formatMessage(filteringMessages.filterByProduct)\n          },\n          title: formatMessage(productsMessages.title),\n          isLoading: isFiltering || isFetching,\n          meta,\n          fetchProducts: window.catalog?.standalone\n            ? (...args) => dispatch(fetchPortfolioItemsS(...args))\n            : (...args) => dispatch(fetchPortfolioItems(...args))\n        })}\n      />\n      <ContentGallery\n        isLoading={isFiltering || isFetching}\n        items={galleryItems}\n        renderEmptyState={() => (\n          <ContentGalleryEmptyState {...emptyStateProps} />\n        )}\n      />\n      {meta.count > 0 && (\n        <BottomPaginationContainer>\n          <AsyncPagination\n            dropDirection=\"up\"\n            meta={meta}\n            apiRequest={(_e, options) =>\n              dispatch(\n                window.catalog?.standalone\n                  ? fetchPortfolioItemsS(viewState?.products?.filter, options)\n                  : fetchPortfolioItems(viewState?.products?.filter, options)\n              )\n            }\n          />\n        </BottomPaginationContainer>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Products;\n","import { defineMessages } from 'react-intl';\n\nconst platformsMessages = defineMessages({\n  workflowColumn: {\n    id: 'platform.inventories.columns.workflow',\n    defaultMessage: 'Workflow'\n  },\n  noInventoriesDescription: {\n    id: 'platform.inventories.empty.no-inventories',\n    defaultMessage: 'No inventories found.'\n  },\n  noInventoriesFilterDescription: {\n    id: 'platform.inventories.empty.no-results',\n    defaultMessage: 'No inventories match your filter criteria.'\n  },\n  inventoriesFilter: {\n    id: 'platform.inventories.filter.placeholder',\n    defaultMessage: 'Filter by inventory'\n  },\n  templatesFilter: {\n    id: 'platform.templates.filter.placeholder',\n    defaultMessage: 'Filter by template'\n  },\n  noTemplatesTitle: {\n    id: 'platform.templates.no-templates',\n    defaultMessage: 'No templates'\n  },\n  noTemplatesDescription: {\n    id: 'platform.templates.empty.no-templates',\n    defaultMessage: 'This platform has no templates.'\n  },\n  platformsNoDataDescription: {\n    id: 'platforms.list.configure-source',\n    defaultMessage:\n      'Ansible Automation Services Catalog can be added by following the'\n  },\n  platformsDocTitle: {\n    id: 'platforms.doc.title',\n    defaultMessage: 'Ansible Automation Platform 2.0 BETA documentation'\n  },\n  connectSource: {\n    id: 'platforms.list.connect-source',\n    defaultMessage: 'Go to Sources'\n  },\n  contactAdmin: {\n    id: 'platforms.list.contact-admin',\n    defaultMessage:\n      'Contact your organization administrator to setup sources for Catalog.'\n  },\n  title: {\n    id: 'platforms.title',\n    defaultMessage: 'Platforms'\n  },\n  noPlatforms: {\n    id: 'platforms.list.empty.title',\n    defaultMessage: 'No platforms yet'\n  },\n  offeringTitle: {\n    id: 'platforms.offerings.detail.title',\n    defaultMessage: 'Service offering'\n  },\n  offeringParameters: {\n    id: 'platforms.offerings.detail.extra-params',\n    defaultMessage: 'Extra parameters'\n  },\n  platformVersion: {\n    id: 'platforms.version',\n    defaultMessage: 'Platform version'\n  },\n  ansibleVersion: {\n    id: 'platforms.ansible.version',\n    defaultMessage: 'Ansible version'\n  },\n  platformSummary: {\n    id: 'platforms.summary',\n    defaultMessage: 'Summary'\n  },\n  platformDetails: {\n    id: 'platforms.details',\n    defaultMessage: 'Details'\n  },\n  platformActivity: {\n    id: 'platforms.activity',\n    defaultMessage: 'Activity'\n  },\n  cloudConnectorId: {\n    id: 'platform.cloudConnectorId',\n    defaultMessage: 'RedHat Connect Client Id'\n  },\n  refreshState: {\n    id: 'platforms.refreshState',\n    defaultMessage: 'Refresh state'\n  },\n  refreshStarted: {\n    id: 'platforms.refreshStarted',\n    defaultMessage: 'Refresh started'\n  },\n  refreshFinished: {\n    id: 'platforms.refreshFinished',\n    defaultMessage: 'Refresh finished'\n  },\n  lastSuccessfulRefresh: {\n    id: 'platforms.lastSuccessfulRefresh',\n    defaultMessage: 'Last successful refresh'\n  },\n  lastChecked: {\n    id: 'platforms.lastChecked',\n    defaultMessage: 'Last checked'\n  },\n  lastAvailable: {\n    id: 'platforms.lastAvailable',\n    defaultMessage: 'Last available'\n  },\n  enabled: {\n    id: 'platforms.enabled',\n    defaultMessage: 'Enabled'\n  },\n  availabilityStatus: {\n    id: 'platforms.availabilityStatus',\n    defaultMessage: 'Availability status'\n  },\n  dateAdded: {\n    id: 'platforms.dateAdded',\n    defaultMessage: 'Date added'\n  },\n  refreshTooltip: {\n    id: 'platforms.refreshTooltip',\n    defaultMessage: 'Refresh platform'\n  },\n  lastRefreshMessage: {\n    id: 'platforms.lastRefreshMessage',\n    defaultMessage: 'Last refresh message'\n  },\n  availabilityMessage: {\n    id: 'platforms.availabilityMessage',\n    defaultMessage: 'Availability message'\n  }\n});\n\nexport default platformsMessages;\n","import { getAxiosInstance, getGraphqlInstance } from '../shared/user-login';\nimport {\n  CATALOG_API_BASE,\n  CATALOG_INVENTORY_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings, PaginationConfiguration } from '../shared/pagination';\nimport {\n  Source,\n  ServiceOffering,\n  ServiceInventory\n} from '@redhat-cloud-services/sources-client';\nimport { ApiCollectionResponse, SourceDetails } from '../../types/common-types';\nconst axiosInstance = getAxiosInstance();\nconst { post } = getGraphqlInstance();\n\nexport const getPlatforms = (): Promise<SourceDetails> =>\n  axiosInstance.get(`${CATALOG_API_BASE}/sources/`);\n\nexport const getPlatform = (platformId: string): Promise<Source> => {\n  return axiosInstance.get(`${CATALOG_API_BASE}/sources/${platformId}/`);\n};\n\nexport const refreshPlatform = (platformId: string): Promise<Source> => {\n  return axiosInstance.patch(\n    `${CATALOG_API_BASE}/sources/${platformId}/refresh/`\n  );\n};\n\nexport const getPlatformItems = (\n  platformId: string,\n  filter?: string,\n  options?: PaginationConfiguration\n): Promise<ApiCollectionResponse<ServiceOffering>> => {\n  if (platformId) {\n    const filterQuery = filter ? `?name=${filter}` : '';\n    const optionsQuery = options\n      ? `page_size=${options.limit}&page=${options.offset || 1}`\n      : '';\n    return axiosInstance.get(\n      `${CATALOG_API_BASE}/sources/${platformId}/service_offerings/${filterQuery}${\n        filter ? '&' : '?'\n      }${optionsQuery}`\n    );\n  } else {\n    return axiosInstance.get(`${CATALOG_API_BASE}/service_offerings/`);\n  }\n};\n\nexport const getPlatformInventories = (\n  platformId: string,\n  filter = '',\n  options = defaultSettings\n): Promise<ApiCollectionResponse<ServiceInventory>> => {\n  if (platformId) {\n    const filterQuery = filter ? `name=${filter}` : '';\n    return axiosInstance.get(\n      `${CATALOG_API_BASE}/sources/${platformId}/service_inventories/?${filterQuery}${\n        options ? `&page_size=${options.limit}&page=${options.offset || 1}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(\n      `${CATALOG_API_BASE}/service_inventories/?page_size=${\n        options.limit\n      }&page=${options.offset || 1}`\n    );\n  }\n};\n","import * as ActionTypes from '../action-types';\nimport * as PlatformHelper from '../../helpers/platform/platform-helper-s';\nimport { Dispatch } from 'redux';\nimport {\n  ServiceInventory,\n  ServiceOffering,\n  Source\n} from '@redhat-cloud-services/sources-client';\nimport { AsyncMiddlewareAction } from '../../types/redux';\nimport { ApiCollectionResponse, SourceDetails } from '../../types/common-types';\nimport { PaginationConfiguration } from '../../helpers/shared/pagination';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const fetchPlatforms = () => (\n  dispatch: Dispatch\n): Promise<{ type: string; payload: SourceDetails }> => {\n  dispatch({ type: `${ActionTypes.FETCH_PLATFORMS}_PENDING` });\n  return PlatformHelper.getPlatforms()\n    .then((results) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_FULFILLED`,\n        payload: results\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchPlatformItems = (\n  platformId: string,\n  filter: string,\n  options: PaginationConfiguration\n): AsyncMiddlewareAction<ApiCollectionResponse<ServiceOffering>> => ({\n  type: ActionTypes.FETCH_PLATFORM_ITEMS,\n  payload: PlatformHelper.getPlatformItems(platformId, filter, options),\n  meta: {\n    platformId,\n    filter,\n    ...options\n  }\n});\n\nexport const fetchMultiplePlatformItems = (\n  platformsId: string[]\n): {\n  type: string;\n  payload: Promise<\n    [] | { [x: string]: ApiCollectionResponse<ServiceOffering> }\n  >;\n} => {\n  const platformPromisses = platformsId.map((platformId) =>\n    PlatformHelper.getPlatformItems(platformId).then((results) => ({\n      [platformId]: results\n    }))\n  );\n  return {\n    type: ActionTypes.FETCH_MULTIPLE_PLATFORM_ITEMS,\n    payload: Promise.all(platformPromisses).then((results) =>\n      results.reduce(\n        (acc, curr) => ({\n          ...acc,\n          ...curr\n        }),\n        {}\n      )\n    )\n  };\n};\n\nexport const fetchSelectedPlatform = (\n  id: string\n): AsyncMiddlewareAction<Source> => ({\n  type: ActionTypes.FETCH_PLATFORM,\n  payload: PlatformHelper.getPlatform(id)\n});\n\nexport const fetchPlatformInventories = (\n  platformId: string,\n  filter: string,\n  options: PaginationConfiguration\n): AsyncMiddlewareAction<ApiCollectionResponse<ServiceInventory>> => ({\n  type: ActionTypes.FETCH_PLATFORM_INVENTORIES,\n  payload: PlatformHelper.getPlatformInventories(platformId, filter, options)\n});\n\nexport const refreshPlatform = (platformId: string) => (\n  dispatch: Dispatch\n): AsyncMiddlewareAction => {\n  return dispatch({\n    type: ActionTypes.REFRESH_PLATFORM,\n    payload: PlatformHelper.refreshPlatform(platformId)\n      .then(() =>\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: 'Success starting the platform refresh',\n            dismissable: true,\n            description: 'The platform refresh started successfully'\n          })\n        )\n      )\n      .catch((error) => {\n        if (error.status === 429) {\n          dispatch(\n            addNotification({\n              variant: 'info',\n              title: 'Platform refresh in progress',\n              dismissable: true,\n              description: 'Platform refresh already running.'\n            })\n          );\n        } else {\n          dispatch({\n            type: `${ActionTypes.REFRESH_PLATFORM}_REJECTED`,\n            payload: error\n          });\n        }\n      })\n  });\n};\n"],"names":["exports","tslib_1","React","__importStar","react_styles_1","level_1","__importDefault","_a","hasGutter","className","children","props","__rest","createElement","Object","assign","css","default","level","modifiers","gutter","name","height","width","svgPath","yOffset","xOffset","PageHeaderTitle","_ref","title","pageHeaderTitleClasses","headingLevel","size","propTypes","meta","fetchProducts","isLoading","filterProps","searchValue","onFilterChange","placeholder","fields","component","toolbarComponentTypes","key","description","noData","groupName","isClearable","count","AsyncPagination","apiProps","apiRequest","isDisabled","isCompact","addSource","id","defaultMessage","configureSource","debouncedFilter","asyncFormValidator","value","dispatch","filteringCallback","window","catalog","standalone","fetchPortfolioItemsS","defaultSettings","fetchPortfolioItems","then","initialState","filterValue","isOpen","isFetching","isFiltering","productsState","state","action","type","payload","formatMessage","useFormatMessage","viewState","useInitialUriHash","release","useContext","AppContext","useReducer","products","filter","stateDispatch","is_org_admin","UserContext","userIdentity","identity","user","useDispatch","useSelector","portfolioReducer","portfolioItems","data","results","useEffect","Promise","all","fetchPlatformsS","fetchPlatforms","scrollToTop","handleFilterItems","galleryItems","map","item","pathname","portfolio_id","PORTFOLIO_ITEM_ROUTE","service_offering_source_ref","searchParams","portfolio","source","toDisplay","emptyStateProps","PrimaryAction","href","Button","ouiaId","variant","productsMessages","onClick","filteringMessages","renderDescription","Fragment","TextContent","Text","TextVariants","platformsMessages","a","chunks","document","baseURI","Icon","WrenchIcon","SearchIcon","schema","createProductsToolbarSchema","items","renderEmptyState","dropDirection","_e","options","workflowColumn","noInventoriesDescription","noInventoriesFilterDescription","inventoriesFilter","templatesFilter","noTemplatesTitle","noTemplatesDescription","platformsNoDataDescription","platformsDocTitle","connectSource","contactAdmin","noPlatforms","offeringTitle","offeringParameters","platformVersion","ansibleVersion","platformSummary","platformDetails","platformActivity","cloudConnectorId","refreshState","refreshStarted","refreshFinished","lastSuccessfulRefresh","lastChecked","lastAvailable","enabled","availabilityStatus","dateAdded","refreshTooltip","lastRefreshMessage","availabilityMessage","axiosInstance","refreshPlatform","platformId","patch","getPlatformItems","filterQuery","optionsQuery","limit","offset","get","getPlatformInventories","catch","error","fetchPlatformItems","fetchSelectedPlatform","fetchPlatformInventories","dismissable","status"],"sourceRoot":""}