{"version":3,"sources":["webpack:///./src/presentational-components/shared/bottom-pagination-container.js","webpack:///./src/messages/platforms.messages.ts","webpack:///./src/presentational-components/shared/card-checkbox.js","webpack:///./src/presentational-components/shared/service-offering-body.js","webpack:///./src/presentational-components/platform/platform-item.js","webpack:///./src/smart-components/platform/platform-templates.js"],"names":["BottomPaginationContainer","children","className","propTypes","PropTypes","oneOfType","node","arrayOf","platformsMessages","workflowColumn","id","defaultMessage","noInventoriesDescription","noInventoriesFilterDescription","inventoriesFilter","templatesFilter","noTemplatesTitle","noTemplatesDescription","configureSourceTitle","connectSource","contactAdmin","title","noPlatforms","offeringTitle","offeringParameters","CardCheckbox","handleCheck","isChecked","onClick","event","stopPropagation","onChange","aria-label","func","bool","string","ServiceOfferingCardBody","name","distributor","display_name","pathname","searchParams","preserveSearch","portfolioName","props","component","TextVariants","h3","small","toDisplay","description","long_description","shape","StyledLevel","styled","Level","PlatformItem","src","key","height","sourceId","source_id","editMode","checked","onToggleItemSelect","isRequired","service_offering_icon_id","platformId","initialState","filterValue","isOpen","isFetching","isFiltering","platformItemsState","state","action","type","payload","debouncedFilter","asyncFormValidator","value","dispatch","filteringCallback","meta","defaultSettings","fetchPlatformItems","then","PlatformTemplates","formatMessage","useFormatMessage","useQuery","platform","useReducer","stateDispatch","useSelector","platformItems","platformReducer","data","selectedPlatform","platformIconMapping","useDispatch","useEffect","scrollToTop","handleFilterChange","offset","filteredItems","items","map","item","PLATFORM_SERVICE_OFFERINGS_ROUTE","service","schema","createPlatformsFilterToolbarSchema","onFilterChange","searchValue","filterPlaceholder","apiRequest","_","options","isLoading","renderEmptyState","filteringMessages","noResults","Icon","SearchIcon","PrimaryAction","variant","clearFilters","noResultsDescription","count","dropDirection"],"mappings":"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","file":"js/platform-templates~5a11b65b.a0014c58345af6de2f1a.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst BottomPaginationContainer = ({ children }) => (\n  <div className=\"pf-u-p-lg pf-u-pt-md pf-u-pb-md global-primary-background pf-u-mt-auto\">\n    {children}\n  </div>\n);\n\nBottomPaginationContainer.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node)\n  ])\n};\n\nexport default BottomPaginationContainer;\n","import { defineMessages } from 'react-intl';\n\nconst platformsMessages = defineMessages({\n  workflowColumn: {\n    id: 'platform.inventories.columns.workflow',\n    defaultMessage: 'Workflow'\n  },\n  noInventoriesDescription: {\n    id: 'platform.inventories.empty.no-inventories',\n    defaultMessage: 'No inventories found.'\n  },\n  noInventoriesFilterDescription: {\n    id: 'platform.inventories.empty.no-results',\n    defaultMessage: 'No inventories match your filter criteria.'\n  },\n  inventoriesFilter: {\n    id: 'platform.inventories.filter.placeholder',\n    defaultMessage: 'Filter by inventory'\n  },\n  templatesFilter: {\n    id: 'platform.templates.filter.placeholder',\n    defaultMessage: 'Filter by template'\n  },\n  noTemplatesTitle: {\n    id: 'platform.templates.no-templates',\n    defaultMessage: 'No templates'\n  },\n  noTemplatesDescription: {\n    id: 'platform.templates.empty.no-templates',\n    defaultMessage: 'This platform has no templates.'\n  },\n  configureSourceTitle: {\n    id: 'platforms.list.configure-source',\n    defaultMessage: 'Configure a source in order to add products to portfolios.'\n  },\n  connectSource: {\n    id: 'platforms.list.connect-source',\n    defaultMessage:\n      'To connect to a source, go to <a>Sources</a> under Settings.'\n  },\n  contactAdmin: {\n    id: 'platforms.list.contact-admin',\n    defaultMessage:\n      'Contact your organization administrator to setup sources for Catalog.'\n  },\n  title: {\n    id: 'platforms.title',\n    defaultMessage: 'Platforms'\n  },\n  noPlatforms: {\n    id: 'platforms.list.empty.title',\n    defaultMessage: 'No platforms yet'\n  },\n  offeringTitle: {\n    id: 'platforms.offerings.detail.title',\n    defaultMessage: 'Service offering'\n  },\n  offeringParameters: {\n    id: 'platforms.offerings.detail.extra-params',\n    defaultMessage: 'Extra parameters'\n  }\n});\n\nexport default platformsMessages;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Checkbox } from '@patternfly/react-core';\n\nconst CardCheckbox = ({ handleCheck, isChecked, id }) => (\n  <Checkbox\n    onClick={(event) => event.stopPropagation()}\n    isChecked={isChecked}\n    onChange={handleCheck}\n    aria-label=\"card checkbox\"\n    id={id}\n  />\n);\n\nCardCheckbox.propTypes = {\n  handleCheck: propTypes.func,\n  isChecked: propTypes.bool,\n  id: propTypes.string\n};\n\nexport default CardCheckbox;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport ItemDetails from './card-common';\nimport ConditionalLink from './conditional-link';\nimport EllipsisTextContainer from '../styled-components/ellipsis-text-container';\nimport { StyledCardBody } from '../styled-components/card';\n\nconst ServiceOfferingCardBody = ({\n  name,\n  display_name,\n  distributor,\n  pathname,\n  searchParams,\n  preserveSearch,\n  portfolioName,\n  ...props\n}) => (\n  <StyledCardBody>\n    <TextContent>\n      <ConditionalLink\n        pathname={pathname}\n        searchParams={searchParams}\n        preserveSearch={preserveSearch}\n      >\n        <Text component={TextVariants.h3} title={name}>\n          <EllipsisTextContainer>{name}</EllipsisTextContainer>\n        </Text>\n      </ConditionalLink>\n      {distributor && <Text component={TextVariants.small}>{distributor}</Text>}\n      {portfolioName && (\n        <Fragment>\n          <Text className=\"pf-u-mb-0\" component=\"small\">\n            Portfolio\n          </Text>\n          <Text>{portfolioName}</Text>\n        </Fragment>\n      )}\n    </TextContent>\n    <ItemDetails\n      toDisplay={[props.description ? 'description' : 'long_description']}\n      {...props}\n    />\n  </StyledCardBody>\n);\n\nServiceOfferingCardBody.propTypes = {\n  name: PropTypes.string,\n  display_name: PropTypes.string,\n  distributor: PropTypes.string,\n  long_description: PropTypes.string,\n  description: PropTypes.string,\n  pathname: PropTypes.string,\n  preserveSearch: PropTypes.bool,\n  searchParams: PropTypes.shape({ [PropTypes.string]: PropTypes.string }),\n  portfolioName: PropTypes.string\n};\n\nexport default ServiceOfferingCardBody;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CardHeader, CardFooter, Level } from '@patternfly/react-core';\n\nimport CardIcon from '../shared/card-icon';\nimport CardCheckbox from '../shared/card-checkbox';\nimport ServiceOfferingCardBody from '../shared/service-offering-body';\nimport { StyledCard } from '../styled-components/styled-gallery';\nimport styled from 'styled-components';\n\nconst StyledLevel = styled(Level)`\n  flex: 1;\n`;\n\nconst PlatformItem = ({ src, ...props }) => (\n  <StyledCard key={props.id}>\n    <CardHeader>\n      <StyledLevel>\n        <CardIcon height={40} sourceId={props.source_id} />\n        {props.editMode && (\n          <CardCheckbox\n            id={props.id}\n            isChecked={props.checked}\n            handleCheck={props.onToggleItemSelect}\n          />\n        )}\n      </StyledLevel>\n    </CardHeader>\n    <ServiceOfferingCardBody {...props} />\n    <CardFooter />\n  </StyledCard>\n);\n\nPlatformItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  service_offering_icon_id: PropTypes.string,\n  source_id: PropTypes.string,\n  platformId: PropTypes.string,\n  name: PropTypes.string,\n  editMode: PropTypes.bool,\n  checked: PropTypes.bool,\n  onToggleItemSelect: PropTypes.func,\n  src: PropTypes.string\n};\n\nexport default PlatformItem;\n","import React, { Fragment, useEffect, useReducer } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport ToolbarRenderer from '../../toolbar/toolbar-renderer';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport { fetchPlatformItems } from '../../redux/actions/platform-actions';\nimport PlatformItem from '../../presentational-components/platform/platform-item';\nimport { createPlatformsFilterToolbarSchema } from '../../toolbar/schemas/platforms-toolbar.schema';\nimport ContentGalleryEmptyState from '../../presentational-components/shared/content-gallery-empty-state';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport ContentGallery from '../content-gallery/content-gallery';\nimport { Button } from '@patternfly/react-core';\nimport AsyncPagination from '../common/async-pagination';\nimport BottomPaginationContainer from '../../presentational-components/shared/bottom-pagination-container';\nimport useQuery from '../../utilities/use-query';\nimport { PLATFORM_SERVICE_OFFERINGS_ROUTE } from '../../constants/routes';\nimport filteringMessages from '../../messages/filtering.messages';\nimport platformsMessages from '../../messages/platforms.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\n\nconst initialState = {\n  filterValue: '',\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false\n};\n\nconst platformItemsState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return { ...state, filterValue: action.payload };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst debouncedFilter = asyncFormValidator(\n  (id, value, dispatch, filteringCallback, meta = defaultSettings) => {\n    filteringCallback(true);\n    dispatch(fetchPlatformItems(id, value, meta)).then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst PlatformTemplates = () => {\n  const formatMessage = useFormatMessage();\n  const [{ platform: id }] = useQuery(['platform']);\n  const [{ filterValue, isFetching, isFiltering }, stateDispatch] = useReducer(\n    platformItemsState,\n    initialState\n  );\n  const { data, meta } = useSelector(({ platformReducer: { platformItems } }) =>\n    platformItems[id] ? platformItems[id] : { data: [], meta: defaultSettings }\n  );\n  const { platform, platformIconMapping } = useSelector(\n    ({ platformReducer: { selectedPlatform, platformIconMapping } }) => ({\n      platform: selectedPlatform,\n      platformIconMapping\n    })\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchPlatformItems(id, filterValue, defaultSettings)).then(() =>\n      stateDispatch({ type: 'setFetching', payload: false })\n    );\n    scrollToTop();\n  }, [id]);\n\n  const handleFilterChange = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      id,\n      value,\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering }),\n      {\n        ...meta,\n        offset: 0\n      }\n    );\n  };\n\n  const filteredItems = {\n    items: data\n      ? data.map((item) => (\n          <PlatformItem\n            key={item.id}\n            pathname={PLATFORM_SERVICE_OFFERINGS_ROUTE}\n            searchParams={{\n              service: item.id\n            }}\n            preserveSearch\n            src={platformIconMapping[id]}\n            {...item}\n          />\n        ))\n      : []\n  };\n\n  const title = platform ? platform.name : '';\n  return (\n    <Fragment>\n      <ToolbarRenderer\n        schema={createPlatformsFilterToolbarSchema({\n          onFilterChange: handleFilterChange,\n          searchValue: filterValue,\n          filterPlaceholder: formatMessage(platformsMessages.templatesFilter),\n          meta,\n          apiRequest: (_, options) =>\n            dispatch(fetchPlatformItems(id, filterValue, options))\n        })}\n      />\n      <ContentGallery\n        title={title}\n        isLoading={isFetching || isFiltering}\n        renderEmptyState={() => (\n          <ContentGalleryEmptyState\n            title={\n              filterValue === ''\n                ? formatMessage(platformsMessages.noTemplatesTitle)\n                : formatMessage(filteringMessages.noResults)\n            }\n            Icon={SearchIcon}\n            PrimaryAction={() =>\n              filterValue !== '' ? (\n                <Button onClick={() => handleFilterChange('')} variant=\"link\">\n                  {formatMessage(filteringMessages.clearFilters)}\n                </Button>\n              ) : null\n            }\n            description={\n              filterValue === ''\n                ? formatMessage(platformsMessages.noTemplatesDescription)\n                : formatMessage(filteringMessages.noResultsDescription)\n            }\n          />\n        )}\n        {...filteredItems}\n      />\n      {meta.count > 0 && (\n        <BottomPaginationContainer>\n          <AsyncPagination\n            dropDirection=\"up\"\n            meta={meta}\n            apiRequest={(_, options) =>\n              dispatch(fetchPlatformItems(id, filterValue, options))\n            }\n          />\n        </BottomPaginationContainer>\n      )}\n    </Fragment>\n  );\n};\n\nexport default PlatformTemplates;\n"],"sourceRoot":""}