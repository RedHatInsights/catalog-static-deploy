{"version":3,"file":"js/add-portfolio.01256fecb9cd35113735.js","mappings":"0NAyBMA,GAAqB,QAjBC,SAC1BC,EACAC,GAEA,eAAqBD,GAAME,MAAK,SAAC,G,IAAEC,EAAI,OACrC,IAAKH,GAA+B,IAAvBA,EAAKI,OAAOC,OACvB,KAAM,WAMR,GAHiBF,EAAKG,MACpB,SAACC,GAAc,OAAAA,EAAUP,OAASA,GAAQO,EAAUC,KAAOP,KAG3D,KAAM,oCAYCQ,EAAwB,SACnCC,EACAT,G,cACW,OACXU,OAAQ,CACN,CACEC,MAAO,yBACPZ,KAAM,OACNa,UAAW,eACXC,YAAY,EACZC,WACiE,QAA/D,EAAyD,QAAzD,EAA6C,QAA7C,EAAkC,QAAlC,EAAyB,QAAzB,EAAAL,MAAAA,OAAa,EAAbA,EAAeM,kBAAU,eAAEC,eAAO,eAAEC,iBAAS,eAAEC,kBAAU,eAAEnB,YAAI,eAC3De,YAAa,KACnBK,SAAU,CAAC,SAACC,GAAkB,OAAAtB,EAAmBsB,EAAOpB,MAE1D,CACEW,MAAO,gCACPC,UAAW,aACXb,KAAM,kB,2TCwEZ,QA7FuE,SAAC,G,QACtEsB,EAAW,cACXC,EAAW,cACXC,EAAS,YAEHC,GAAgB,SAChBC,GAAW,IAAAC,eACX,GAAsB,IAAAC,WAAS,GAA9BC,EAAM,KAAEC,EAAS,KACDpB,GAAkB,IAAAqB,YAAW,KAAY,cAC5C9B,GAAiB,OAAS,CAAC,cAAa,aACpD+B,GAAS,OAAmB,CAClCC,aAAcX,EACdY,UAAU,IACV,KACIC,GAAgB,IAAAC,cAIpB,SAAC,G,IAAEC,EAAgB,mBACjB,eAAsBA,EAAkBpC,MA8C5C,OAA2D,KAAb,QAA1C,EAAuB,QAAvB,EAAAkC,MAAAA,OAAa,EAAbA,EAAeG,gBAAQ,eAAEC,yBAAiB,eAAEC,QACvC,kBAAC,IAAoB,MAI5B,kBAAC,KAAY,CACXC,OAAQhC,EAAsBC,EAAeT,GAC7CyC,SA3Ba,SAACvC,GAChB,OAAIgC,GAIFL,GAAU,GACHJ,GACJ,QAAgBvB,EAAMqB,IACvBtB,MAAK,WAKL,OAAA8B,EAAKT,OAlCY,SAAOpB,GAAwB,O,OAAA,E,OAAA,E,EAAA,W,6lCAU/B,OATfwC,EAAe,CACnBC,QAAS,UACTC,MAAOpB,EAAc,qBACrBqB,YAAarB,EAAc,0BAAyC,CAClEzB,KAAMG,EAAKH,KAEX+C,EAAG,SAACC,GAAsB,8BAAGC,IAAI,UAAUD,OAG1B,GAAMtB,GACzB,QAAavB,EAAMwC,K,OAErB,MAAO,CAAP,GAHMO,EAAe,WAGEA,EAAa7B,OAAS6B,EAAa7B,MAAMb,GAC5DwB,EAAK,CACHmB,SAAU,KACVC,OAAQ,cAAcF,EAAa7B,MAAMb,KAE3CwB,EAAKT,S,YAlB2C,K,8QAqC3C8B,CAAelD,IAYtBmD,SAAU,WAAM,OAAAtB,EAAKT,IACrBY,cAAa,KAAOA,GACpBoB,SAAO,EACPC,WAAY,CACVX,MACKpB,EADExB,EACY,mBACA,sBACnB4B,OAAM,EACN4B,QAAS,WAAM,OAAAzB,EAAKT,IACpBqB,QAAS,SAEXc,cAAe,CACbC,YACIlC,EADSxB,EACK,SACA","sources":["webpack:///./src/forms/portfolio-form.schema.ts","webpack:///./src/smart-components/portfolio/add-portfolio-modal.tsx"],"sourcesContent":["import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Schema from '@data-driven-forms/react-form-renderer/common-types/schema';\nimport { DEFAULT_MAX_LENGTH } from '../utilities/constants';\n\nimport asyncFormValidator from '../utilities/async-form-validator';\nimport { fetchPortfolioByName } from '../helpers/portfolio/portfolio-helper';\nimport { AnyObject } from '../types/common-types';\n\nexport const validateName = (\n  name: string,\n  portfolioId: string\n): Promise<void> =>\n  fetchPortfolioByName(name).then(({ data }) => {\n    if (!name || name.trim().length === 0) {\n      throw 'Required';\n    }\n\n    const conflict = data.find(\n      (portfolio) => portfolio.name === name && portfolio.id !== portfolioId\n    );\n    if (conflict) {\n      throw 'Name has already been taken';\n    }\n  });\n\nconst debouncedValidator = asyncFormValidator(validateName);\n\n/**\n * Creates a data-driven-form schema for adding/editing portfolio\n * @param {bool} newRecord sets the variant of portfolio form\n * @param openApiSchema\n * @param portfolioId\n */\nexport const createPortfolioSchema = (\n  openApiSchema: AnyObject,\n  portfolioId: string\n): Schema => ({\n  fields: [\n    {\n      label: 'schemas.portfolio.name',\n      name: 'name',\n      component: componentTypes.TEXT_FIELD,\n      isRequired: true,\n      maxLength:\n        openApiSchema?.components?.schemas?.Portfolio?.properties?.name\n          ?.maxLength || DEFAULT_MAX_LENGTH,\n      validate: [(value: string) => debouncedValidator(value, portfolioId)]\n    },\n    {\n      label: 'schemas.portfolio.description',\n      component: componentTypes.TEXTAREA,\n      name: 'description'\n    }\n  ]\n});\n","/* eslint-disable react/prop-types */\nimport React, { ReactNode, useContext, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FormRenderer from '../common/form-renderer';\nimport { createPortfolioSchema } from '../../forms/portfolio-form.schema';\nimport {\n  addPortfolio,\n  updatePortfolio\n} from '../../redux/actions/portfolio-actions';\nimport useQuery from '../../utilities/use-query';\nimport { getPortfolioFromState } from '../../helpers/portfolio/portfolio-helper';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\nimport { UnauthorizedRedirect } from '../error-pages/error-redirects';\nimport { PORTFOLIO_ROUTE } from '../../constants/routes';\nimport UserContext from '../../user-context';\nimport actionMessages from '../../messages/actions.messages';\nimport portfolioMessages from '../../messages/portfolio.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport { CatalogLinkTo } from '../common/catalog-link';\nimport { PaginationConfiguration } from '../../helpers/shared/pagination';\nimport { CatalogRootState } from '../../types/redux';\nimport { Portfolio } from '@redhat-cloud-services/catalog-client';\nimport { InternalPortfolio } from '../../types/common-types';\n\nexport interface AddPortfolioModalProps {\n  removeQuery?: boolean;\n  closeTarget: CatalogLinkTo;\n  viewState?: PaginationConfiguration;\n}\nconst AddPortfolioModal: React.ComponentType<AddPortfolioModalProps> = ({\n  removeQuery,\n  closeTarget,\n  viewState\n}) => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const [isOpen, setIsOpen] = useState(true);\n  const { openApiSchema: openApiSchema } = useContext(UserContext);\n  const [{ portfolio: portfolioId }] = useQuery(['portfolio']);\n  const { push } = useEnhancedHistory({\n    removeSearch: removeQuery,\n    keepHash: true\n  });\n  const initialValues = useSelector<\n    CatalogRootState,\n    InternalPortfolio | undefined\n  >(\n    ({ portfolioReducer }) =>\n      getPortfolioFromState(portfolioReducer, portfolioId) as\n        | InternalPortfolio\n        | undefined\n  );\n\n  const onAddPortfolio = async (data: Partial<Portfolio>) => {\n    const notification = {\n      variant: 'success',\n      title: formatMessage(portfolioMessages.addSuccessTitle),\n      description: formatMessage(portfolioMessages.addSuccessDescription, {\n        name: data.name,\n        // eslint-disable-next-line react/display-name\n        b: (chunks: ReactNode) => <b key=\"strong\">{chunks}</b>\n      })\n    };\n    const newPortfolio = await dispatch(\n      addPortfolio(data, notification) as Promise<{ value: Portfolio }>\n    );\n    return newPortfolio && newPortfolio.value && newPortfolio.value.id\n      ? push({\n          pathname: PORTFOLIO_ROUTE,\n          search: `?portfolio=${newPortfolio.value.id}`\n        })\n      : push(closeTarget);\n  };\n\n  const onSubmit = (data: Portfolio) => {\n    if (initialValues) {\n      /**\n       * Fake the redirect by closing the modal\n       */\n      setIsOpen(false);\n      return dispatch(\n        (updatePortfolio(data, viewState) as unknown) as Promise<void>\n      ).then(() =>\n        /**\n         * Redirect only after the update was finished.\n         * This will ensure that API requests are triggered in correct order when chaning the router pathname\n         * */\n        push(closeTarget)\n      );\n    } else {\n      return onAddPortfolio(data);\n    }\n  };\n\n  if (initialValues?.metadata?.user_capabilities?.update === false) {\n    return <UnauthorizedRedirect />;\n  }\n\n  return (\n    <FormRenderer\n      schema={createPortfolioSchema(openApiSchema, portfolioId)}\n      onSubmit={onSubmit}\n      onCancel={() => push(closeTarget)}\n      initialValues={{ ...initialValues }}\n      isModal\n      modalProps={{\n        title: portfolioId\n          ? (formatMessage(portfolioMessages.modalEditTitle) as string)\n          : (formatMessage(portfolioMessages.modalCreateTitle) as string),\n        isOpen,\n        onClose: () => push(closeTarget),\n        variant: 'small'\n      }}\n      templateProps={{\n        submitLabel: portfolioId\n          ? formatMessage(actionMessages.save)\n          : formatMessage(labelMessages.create)\n      }}\n    />\n  );\n};\n\nexport default AddPortfolioModal;\n"],"names":["debouncedValidator","name","portfolioId","then","data","trim","length","find","portfolio","id","createPortfolioSchema","openApiSchema","fields","label","component","isRequired","maxLength","components","schemas","Portfolio","properties","validate","value","removeQuery","closeTarget","viewState","formatMessage","dispatch","useDispatch","useState","isOpen","setIsOpen","useContext","push","removeSearch","keepHash","initialValues","useSelector","portfolioReducer","metadata","user_capabilities","update","schema","onSubmit","notification","variant","title","description","b","chunks","key","newPortfolio","pathname","search","onAddPortfolio","onCancel","isModal","modalProps","onClose","templateProps","submitLabel"],"sourceRoot":""}