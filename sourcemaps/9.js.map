{"version":3,"sources":["webpack:///./src/Helpers/Order/OrderHelper.js","webpack:///./src/redux/Actions/OrderActions.js","webpack:///./src/SmartComponents/ContentGallery/ContentList.js","webpack:///./src/SmartComponents/Order/Orders.js"],"names":["api","ServicePortalApi","getServicePlans","portfolioItemId","fetchPlansWithPortfolioItemId","then","data","error","console","_callee","parameters","order","orderItem","regenerator_default","a","wrap","_context","prev","next","newOrder","sent","count","provider_control_parameters","namespace","portfolio_item_id","service_plan_ref","service_parameters","addToOrder","id","abrupt","submitOrder","result","stop","this","instance","basePath","SERVICE_PORTAL_API_BASE","__webpack_require__","d","__webpack_exports__","OrderActions_fetchServicePlans","OrderActions_fetchOrderList","OrderActions_sendSubmitOrder","fetchServicePlans","type","ActionTypes","payload","OrderHelper","fetchOrderList","listOrders","sendSubmitOrder","apiProps","Promise","resolve","_x","_sendSubmitOrder","apply","arguments","ContentList","_ref","isLoading","items","react_default","createElement","insights_frontend_components","title","length","sort","b","dateA","Date","created_at","headers","reduce","acc","curr","Object","keys","Fragment","Bullseye","color","header","rows","map","item","row","cells","values","val","undefined","toString","propTypes","bool","array","Orders","props","fetchOrders","orderList","objectSpread_default","className","ContentGallery_ContentList","Component","object","searchFilter","string","func","connect","_ref$orderReducer","orderReducer","orders","dispatch"],"mappings":"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","file":"js/9.js","sourcesContent":["/* eslint camelcase: 0 */\nimport * as ServicePortalApi from '@manageiq/service-portal-api';\nimport { SERVICE_PORTAL_API_BASE } from '../../Utilities/Constants';\n\nlet api = new ServicePortalApi.AdminsApi();\n\nconst sspDefaultClient = ServicePortalApi.ApiClient.instance;\nsspDefaultClient.basePath = SERVICE_PORTAL_API_BASE;\n\nexport function getServicePlans(portfolioItemId) {\n  return api.fetchPlansWithPortfolioItemId(portfolioItemId).then(data => data, error => console.error(error));\n}\n\nexport function listOrders() {\n  return api.listOrders().then(data => data, error => console.error(error));\n}\n\nexport async function sendSubmitOrder(parameters) {\n  let order = await api.newOrder();\n  let orderItem = new ServicePortalApi.OrderItem;\n  orderItem.count = 1;\n  orderItem.provider_control_parameters =  { namespace: 'default' };\n  orderItem.portfolio_item_id = parameters.portfolio_item_id;\n  orderItem.service_plan_ref = parameters.service_plan_ref;\n  orderItem.service_parameters = parameters.service_parameters;\n  await api.addToOrder(order.id, orderItem);\n  return api.submitOrder(order.id).then(result => result, error => console.error(error));\n}\n","import * as ActionTypes from '../ActionTypes';\nimport * as OrderHelper from '../../Helpers/Order/OrderHelper';\n\nexport const fetchServicePlans = (portfolioItemId) => ({\n  type: ActionTypes.FETCH_SERVICE_PLANS,\n  payload: OrderHelper.getServicePlans(portfolioItemId)\n});\n\nexport const fetchOrderList = () => ({\n  type: ActionTypes.LIST_ORDERS,\n  payload: OrderHelper.listOrders()\n});\n\nexport const updateServiceData = (data) => ({\n  type: ActionTypes.UPDATE_SERVICE_DATA,\n  payload: { serviceData: data }\n});\n\nexport const setSelectedPlan = (data) => ({\n  type: ActionTypes.SET_SELECTED_PLAN,\n  payload: data\n});\n\nexport const sendSubmitOrder = apiProps => ({\n  type: ActionTypes.SUBMIT_SERVICE_ORDER,\n  payload: new Promise(resolve => {\n    resolve(OrderHelper.sendSubmitOrder(apiProps));\n  })\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { PageHeader, PageHeaderTitle, Table, Section } from '@red-hat-insights/insights-frontend-components';\nimport { Bullseye } from '@patternfly/react-core';\n\nconst ContentList = ({ isLoading, items }) => {\n\n  if (isLoading)\n  {\n    return (\n      <PageHeader>\n        <PageHeaderTitle title={ 'No Orders' }/>\n      </PageHeader>\n    );\n  }\n\n  if (items && items.length > 0) {\n    items.sort(function (a, b) {\n      let dateA = new Date(a.created_at);\n      let dateB = new Date(b.created_at);\n      return dateB - dateA; //sort by date descending\n    });\n  }\n\n  const headers = items.reduce((acc, curr) => Object.keys(curr).length > acc.length ? Object.keys(curr) : acc,  []);\n  return (\n    <React.Fragment>\n      <br />\n      <Bullseye>\n        <div>\n          { isLoading && (<span color={ '#00b9e4' }> Loading...</span>) }\n        </div>\n      </Bullseye>\n      <Section type='content'>\n        { (items && items.length > 0) && (\n          <Table\n            header={ headers }\n            rows={ items.map(item => {\n              let row = {};\n              row.cells = (Object.values(item)).map(val => val === undefined ? '' : val.toString());\n              return row;\n            }) }\n          />)\n        }\n      </Section>\n    </React.Fragment>\n  );\n};\n\nContentList.propTypes = {\n  isLoading: propTypes.bool,\n  items: propTypes.array\n};\nexport default ContentList;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchOrderList } from '../../redux/Actions/OrderActions';\nimport ContentList from '../ContentGallery/ContentList';\nimport propTypes from 'prop-types';\n\nclass Orders extends Component {\n\n  componentDidMount() {\n    this.props.fetchOrders();\n  }\n\n  render() {\n    let orderList = {\n      ...this.props.orderList,\n      isLoading: this.props.isLoading\n    };\n    return (\n      <div className=\"pf-l-stack__item pf-m-secondary \">\n        <ContentList { ...orderList } />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ orderReducer: { orders, isLoading }}) => ({\n  orderList: {\n    items: orders\n  },\n  isLoading\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchOrders: () => dispatch(fetchOrderList())\n});\n\nOrders.propTypes = {\n  orderList: propTypes.object,\n  isLoading: propTypes.bool,\n  searchFilter: propTypes.string,\n  fetchOrders: propTypes.func\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Orders);\n"],"sourceRoot":""}