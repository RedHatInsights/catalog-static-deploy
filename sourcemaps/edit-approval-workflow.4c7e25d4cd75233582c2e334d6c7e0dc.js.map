{"version":3,"file":"js/edit-approval-workflow.1644480102172.2bf25f8a2667da7fd69c.js","mappings":"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","sources":["webpack:///./src/helpers/approval/approval-helper.ts","webpack:///./src/utilities/extract-format-message.ts","webpack:///./src/messages/approval.messages.ts","webpack:///./src/redux/actions/approval-actions.ts","webpack:///./src/helpers/approval/approval-helper-s.ts","webpack:///./src/smart-components/common/edit-approval-workflow.tsx","webpack:///./src/redux/actions/approval-actions-s.ts","webpack:///./src/utilities/use-enhanced-history.ts"],"sourcesContent":["import {\n  Workflow,\n  ResourceObject\n} from '@redhat-cloud-services/approval-client';\nimport { getWorkflowApi, getAxiosInstance } from '../shared/user-login';\nimport { APPROVAL_API_BASE } from '../../utilities/constants';\nimport { defaultSettings, PaginationConfiguration } from '../shared/pagination';\nimport {\n  ApiCollectionResponse,\n  SelectOptions,\n  InternalResourceObject\n} from '../../types/common-types';\n\nexport const getApprovalWorkflows = (): Promise<ApiCollectionResponse<\n  Workflow\n>> =>\n  (getWorkflowApi().listWorkflows() as unknown) as Promise<\n    ApiCollectionResponse<Workflow>\n  >;\n\nexport const loadWorkflowOptions = (\n  filterValue = '',\n  initialLookup: string[] = []\n): Promise<SelectOptions> => {\n  const initialLookupQuery = initialLookup\n    .map((workflow) => `filter[id][]=${workflow}`)\n    .join('&');\n\n  return getAxiosInstance()\n    .get(\n      `${APPROVAL_API_BASE}/workflows?filter[name][contains]=${filterValue}&${initialLookupQuery ||\n        ''}`\n    )\n    .then(({ data }) =>\n      data.map(({ id, name }: Workflow) => ({ label: name, value: id }))\n    );\n};\n\nexport const updateWorkflows = (\n  unlinkIds: string[],\n  linkIds: string[],\n  resourceObject: ResourceObject\n): Promise<void[]> => {\n  const unlinkPromises = unlinkIds\n    ? unlinkIds.map((wf) => getWorkflowApi().unlinkWorkflow(wf, resourceObject))\n    : [];\n  const linkPromises = linkIds\n    ? linkIds.map((wf) => getWorkflowApi().linkWorkflow(wf, resourceObject))\n    : [];\n  return (Promise.all([\n    ...unlinkPromises,\n    ...linkPromises\n  ]) as unknown) as Promise<void[]>;\n};\n\nexport const listWorkflowsForObject = (\n  resourceObject: InternalResourceObject,\n  pagination: PaginationConfiguration = {\n    limit: defaultSettings.limit,\n    offset: defaultSettings.offset\n  },\n  filter = ''\n): Promise<ApiCollectionResponse<Workflow>> => {\n  const objectQuery = `app_name=${resourceObject.appName}&object_type=${resourceObject.objectType}&object_id=${resourceObject.objectId}`;\n  const paginationQuery = `&limit=${pagination.limit}&offset=${pagination.offset}`;\n  const filterQuery = `&filter[name][contains]=${filter}`;\n  return getAxiosInstance().get(\n    `${APPROVAL_API_BASE}/workflows?${objectQuery}${filterQuery}${paginationQuery}`\n  );\n};\n","import { I18nFormatMessage } from '../redux/reducers/i18n-reducer';\nimport { GetReduxState } from '../types/redux';\n\nconst extractFormatMessage = (getState: GetReduxState): I18nFormatMessage =>\n  getState().i18nReducer.formatMessage!;\n\nexport default extractFormatMessage;\n","import { defineMessages } from 'react-intl';\n\nconst approvalMessages = defineMessages({\n  unlinkNotification: {\n    id: 'approval.notifications.unlink',\n    defaultMessage: 'Approval processes were unlinked successfully.'\n  },\n  linkNotification: {\n    id: 'approval.notifications.link',\n    defaultMessage: 'Approval processes were linked successfully.'\n  },\n  setWorkflow: {\n    id: 'approval.workflows.set',\n    defaultMessage:\n      'Select approval processes for <strong>{objectName}</strong>'\n  },\n  currentWorkflows: {\n    id: 'approval.workflows.current',\n    defaultMessage: 'Current approval processes'\n  }\n});\n\nexport default approvalMessages;\n","import { Dispatch } from 'redux';\nimport {\n  ApiCollectionResponse,\n  ApiMetadata,\n  InternalResourceObject\n} from '../../types/common-types';\nimport { ASYNC_ACTIONS } from '../action-types/approval-action-types';\nimport * as ApprovalHelper from '../../helpers/approval/approval-helper';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport extractFormatMessage from '../../utilities/extract-format-message';\nimport approvalMessages from '../../messages/approval.messages';\nimport { AsyncMiddlewareAction, GetReduxState } from '../../types/redux';\nimport {\n  ResourceObject,\n  Workflow\n} from '@redhat-cloud-services/approval-client';\n\nexport const fetchWorkflows = (): AsyncMiddlewareAction<{\n  value?: string;\n  label?: string;\n}[]> => ({\n  type: ASYNC_ACTIONS.FETCH_WORKFLOWS,\n  payload: ApprovalHelper.getApprovalWorkflows().then(({ data }) =>\n    data.map(({ id, name }) => ({ value: id, label: name }))\n  )\n});\n\nexport const updateWorkflows = (\n  toLinkIds: string[],\n  toUnlinkIds: string[],\n  resourceObject: ResourceObject\n) => (dispatch: Dispatch, getState: GetReduxState): AsyncMiddlewareAction => {\n  const formatMessage = extractFormatMessage(getState);\n  return dispatch({\n    type: ASYNC_ACTIONS.UPDATE_WORKFLOWS,\n    payload: ApprovalHelper.updateWorkflows(\n      toUnlinkIds,\n      toLinkIds,\n      resourceObject\n    ).then(() =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Success updating approval process',\n          dismissable: true,\n          description: `${\n            toUnlinkIds.length > 0\n              ? formatMessage &&\n                formatMessage(approvalMessages.unlinkNotification, {\n                  count: toUnlinkIds.length\n                })\n              : ''\n          }\n          ${\n            toLinkIds.length > 0\n              ? formatMessage(approvalMessages.linkNotification, {\n                  count: toLinkIds.length\n                })\n              : ''\n          }`\n        })\n      )\n    )\n  });\n};\n\nexport const listWorkflowsForObject = (\n  resourceObject: InternalResourceObject,\n  meta: ApiMetadata = {\n    limit: defaultSettings.limit,\n    offset: defaultSettings.offset\n  },\n  filter = ''\n): AsyncMiddlewareAction<ApiCollectionResponse<Workflow>> => ({\n  type: ASYNC_ACTIONS.RESOLVE_WORKFLOWS,\n  payload: ApprovalHelper.listWorkflowsForObject(resourceObject, meta, filter)\n});\n","import {\n  Workflow,\n  ResourceObject\n} from '@redhat-cloud-services/approval-client';\nimport { getWorkflowApi, getAxiosInstance } from '../shared/user-login';\nimport { APPROVAL_API_BASE } from '../../utilities/constants';\nimport { defaultSettings, PaginationConfiguration } from '../shared/pagination';\nimport {\n  ApiCollectionResponse,\n  SelectOptions,\n  InternalResourceObject\n} from '../../types/common-types';\n\nexport const getApprovalWorkflows = (): Promise<ApiCollectionResponse<\n  Workflow\n>> => getAxiosInstance().get(`${APPROVAL_API_BASE}/workflows/`);\n\nexport const loadWorkflowOptions = (\n  filterValue = '',\n  initialLookup: string[] = []\n): Promise<SelectOptions> => {\n  const initialLookupQuery = initialLookup\n    .map((workflow) => `id=${workflow}`)\n    .join('&');\n\n  return getAxiosInstance()\n    .get(\n      `${APPROVAL_API_BASE}/workflows?name=${filterValue}&${initialLookupQuery ||\n        ''}`\n    )\n    .then(({ results }) =>\n      results.map(({ id, name }: Workflow) => ({ label: name, value: id }))\n    );\n};\n\nexport const linkWorkflow = (wf: string, resourceObject: ResourceObject) =>\n  getAxiosInstance().post(\n    `${APPROVAL_API_BASE}/workflows/${wf}/link/`,\n    resourceObject\n  );\n\nexport const unlinkWorkflow = (wf: string, resourceObject: ResourceObject) =>\n  getAxiosInstance().post(\n    `${APPROVAL_API_BASE}/workflows/${wf}/unlink/`,\n    resourceObject\n  );\n\nexport const updateWorkflows = (\n  unlinkIds: string[],\n  linkIds: string[],\n  resourceObject: ResourceObject\n): Promise<void[]> => {\n  const unlinkPromises = unlinkIds\n    ? unlinkIds.map((wf) => unlinkWorkflow(wf, resourceObject))\n    : [];\n  const linkPromises = linkIds\n    ? linkIds.map((wf) => linkWorkflow(wf, resourceObject))\n    : [];\n  return (Promise.all([\n    ...unlinkPromises,\n    ...linkPromises\n  ]) as unknown) as Promise<void[]>;\n};\n\nexport const listWorkflowsForObject = (\n  resourceObject: InternalResourceObject,\n  pagination: PaginationConfiguration = {\n    limit: defaultSettings.limit,\n    offset: defaultSettings.offset\n  },\n  filter = ''\n): Promise<ApiCollectionResponse<Workflow>> => {\n  const objectQuery = `app_name=${resourceObject.appName}&object_type=${resourceObject.objectType}&object_id=${resourceObject.objectId}`;\n  const paginationQuery = `&page_size=${\n    pagination.limit\n  }&page=${pagination.offset || 1}`;\n  const filterQuery = `&filter[name][contains]=${filter}`;\n  return getAxiosInstance().get(\n    `${APPROVAL_API_BASE}/workflows?${objectQuery}${filterQuery}${paginationQuery}`\n  );\n};\n","/* eslint-disable react/prop-types */\nimport React, { ReactNode, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateWorkflows } from '../../redux/actions/approval-actions';\nimport { updateWorkflows as updateWorkflowsS } from '../../redux/actions/approval-actions-s';\nimport { APP_NAME } from '../../utilities/constants';\nimport {\n  loadWorkflowOptions,\n  listWorkflowsForObject\n} from '../../helpers/approval/approval-helper';\nimport {\n  loadWorkflowOptions as loadWorkflowOptionsS,\n  listWorkflowsForObject as listWorkflowsForObjectS\n} from '../../helpers/approval/approval-helper-s';\nimport useQuery from '../../utilities/use-query';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\nimport { defineMessage } from 'react-intl';\nimport approvalMessages from '../../messages/approval.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport TaggingModal, { Tag } from './tagging-modal';\nimport { Bold } from '../../presentational-components/shared/intl-rich-text-components';\nimport { CatalogLinkTo } from '../common/catalog-link';\nimport { isStandalone } from '../../helpers/shared/helpers';\n\nexport interface EditApprovalWorkflowProps {\n  pushParam: CatalogLinkTo;\n  objectType: keyof typeof APP_NAME;\n  objectName: (node: string) => ReactNode;\n  removeSearch?: boolean;\n  querySelector: 'portfolio' | 'platform' | 'inventory' | 'portfolio-item';\n  keepHash?: boolean;\n  postMethod?: () => any;\n  onClose?: () => any;\n}\nconst EditApprovalWorkflow: React.ComponentType<EditApprovalWorkflowProps> = ({\n  objectType,\n  removeSearch,\n  keepHash = false,\n  querySelector,\n  pushParam,\n  objectName = () => objectType,\n  postMethod,\n  onClose\n}) => {\n  const formatMessage = useFormatMessage();\n  const { current: modalTitle } = useRef(\n    formatMessage(\n      defineMessage({\n        id: 'workflows.modal.title',\n        defaultMessage: 'Set approval process'\n      })\n    )\n  );\n  const dispatch = useDispatch();\n  const history = useEnhancedHistory({ removeSearch, keepHash });\n  const [query] = useQuery([querySelector]);\n\n  const close = () => {\n    onClose && onClose();\n    history.push(pushParam);\n  };\n\n  const onSubmit = (toLink: string[], toUnlink: string[]) => {\n    close();\n    const t = dispatch(\n      isStandalone()\n        ? updateWorkflowsS(toLink, toUnlink, {\n            object_type: objectType,\n            app_name: APP_NAME[objectType],\n            object_id: query[querySelector]\n          })\n        : updateWorkflows(toLink, toUnlink, {\n            object_type: objectType,\n            app_name: APP_NAME[objectType],\n            object_id: query[querySelector]\n          })\n    );\n    ((t as unknown) as Promise<any>).then(() => {\n      if (postMethod) {\n        dispatch(postMethod());\n      }\n    });\n  };\n\n  return (\n    <TaggingModal\n      title={modalTitle as string}\n      onClose={close}\n      onSubmit={onSubmit}\n      getInitialTags={() => {\n        return isStandalone()\n          ? (listWorkflowsForObjectS({\n              objectType,\n              appName: APP_NAME[objectType],\n              objectId: query[querySelector]\n            }).then(({ results }) => results) as Promise<Tag[]>)\n          : (listWorkflowsForObject({\n              objectType,\n              appName: APP_NAME[objectType],\n              objectId: query[querySelector]\n            }).then(({ data }) => data) as Promise<Tag[]>);\n      }}\n      loadTags={isStandalone() ? loadWorkflowOptionsS : loadWorkflowOptions}\n      subTitle={formatMessage(approvalMessages.setWorkflow, {\n        strong: Bold,\n        objectName: objectName(query[querySelector])\n      })}\n      existingTagsMessage={formatMessage(approvalMessages.currentWorkflows)}\n    />\n  );\n};\n\nexport default EditApprovalWorkflow;\n","import { Dispatch } from 'redux';\nimport {\n  ApiCollectionResponse,\n  ApiMetadata,\n  InternalResourceObject\n} from '../../types/common-types';\nimport { ASYNC_ACTIONS } from '../action-types/approval-action-types';\nimport * as ApprovalHelper from '../../helpers/approval/approval-helper-s';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport extractFormatMessage from '../../utilities/extract-format-message';\nimport approvalMessages from '../../messages/approval.messages';\nimport { AsyncMiddlewareAction, GetReduxState } from '../../types/redux';\nimport {\n  ResourceObject,\n  Workflow\n} from '@redhat-cloud-services/approval-client';\n\nexport const fetchWorkflows = (): AsyncMiddlewareAction<{\n  value?: string;\n  label?: string;\n}[]> => ({\n  type: ASYNC_ACTIONS.FETCH_WORKFLOWS,\n  payload: ApprovalHelper.getApprovalWorkflows().then(({ results }) =>\n    results.map(({ id, name }) => ({ value: id, label: name }))\n  )\n});\n\nexport const updateWorkflows = (\n  toLinkIds: string[],\n  toUnlinkIds: string[],\n  resourceObject: ResourceObject\n) => (dispatch: Dispatch, getState: GetReduxState): AsyncMiddlewareAction => {\n  const formatMessage = extractFormatMessage(getState);\n  return dispatch({\n    type: ASYNC_ACTIONS.UPDATE_WORKFLOWS,\n    payload: ApprovalHelper.updateWorkflows(\n      toUnlinkIds,\n      toLinkIds,\n      resourceObject\n    ).then(() =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Success updating approval process',\n          dismissable: true,\n          description: `${\n            toUnlinkIds.length > 0\n              ? formatMessage &&\n                formatMessage(approvalMessages.unlinkNotification, {\n                  count: toUnlinkIds.length\n                })\n              : ''\n          }\n          ${\n            toLinkIds.length > 0\n              ? formatMessage(approvalMessages.linkNotification, {\n                  count: toLinkIds.length\n                })\n              : ''\n          }`\n        })\n      )\n    )\n  });\n};\n\nexport const listWorkflowsForObject = (\n  resourceObject: InternalResourceObject,\n  meta: ApiMetadata = {\n    limit: defaultSettings.limit,\n    offset: defaultSettings.offset\n  },\n  filter = ''\n): AsyncMiddlewareAction<ApiCollectionResponse<Workflow>> => ({\n  type: ASYNC_ACTIONS.RESOLVE_WORKFLOWS,\n  payload: ApprovalHelper.listWorkflowsForObject(resourceObject, meta, filter)\n});\n","import { useHistory } from 'react-router-dom';\nimport { History, Path } from 'history';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\n\nexport type EnhancedHistoryPushtarget =\n  | Path\n  | { pathname: string; hash?: string; search?: string; state?: AnyObject };\n\nconst removeSearchQuery = (target: EnhancedHistoryPushtarget) => {\n  if (typeof target === 'string') {\n    return target.split('?')[0];\n  }\n\n  if (typeof target === 'object') {\n    return {\n      ...target,\n      search: undefined\n    };\n  }\n\n  return target;\n};\n\n/**\n * Wrapper around useHistory hook which adds aditional settings to standard history methods\n * @param {Boolean} removeSearch if true, using history navigation methods will remove search string from path\n * @param {Boolean} keepHash if true, using history navigation methods will not remove hash from URL\n */\nconst useEnhancedHistory = ({\n  removeSearch,\n  keepHash\n}: {\n  removeSearch?: boolean;\n  keepHash?: boolean;\n} = {}): History<History.UnknownFacade> => {\n  const history = useHistory();\n  return {\n    ...history,\n    push: (target: EnhancedHistoryPushtarget) => {\n      let internalTarget = target;\n      if (keepHash && history.location.hash.length > 0) {\n        internalTarget =\n          typeof internalTarget === 'object'\n            ? { ...internalTarget, hash: history.location.hash }\n            : `${internalTarget}${history.location.hash}`;\n      }\n\n      if (removeSearch) {\n        return history.push(removeSearchQuery(internalTarget));\n      }\n\n      return history.push(internalTarget);\n    }\n  };\n};\n\nexport default useEnhancedHistory;\n"],"names":["loadWorkflowOptions","filterValue","initialLookup","initialLookupQuery","map","workflow","join","get","then","id","label","value","updateWorkflows","unlinkIds","linkIds","resourceObject","unlinkPromises","wf","unlinkWorkflow","linkPromises","linkWorkflow","Promise","all","getState","i18nReducer","formatMessage","unlinkNotification","defaultMessage","linkNotification","setWorkflow","currentWorkflows","post","objectType","removeSearch","keepHash","querySelector","pushParam","objectName","postMethod","onClose","modalTitle","useRef","dispatch","history","query","close","push","title","onSubmit","toLink","toUnlink","toLinkIds","toUnlinkIds","object_type","app_name","object_id","type","payload","variant","dismissable","description","length","count","getInitialTags","pagination","filter","limit","offset","objectQuery","appName","objectId","paginationQuery","filterQuery","listWorkflowsForObject","loadTags","subTitle","strong","existingTagsMessage","useHistory","target","internalTarget","location","hash","split","search","undefined","removeSearchQuery"],"sourceRoot":""}