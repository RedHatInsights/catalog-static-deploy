{"version":3,"file":"js/platform.97c0ba274748435de813.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/js/layouts/Level/LevelItem.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/PageHeader/PageHeaderTitle.js","webpack:///./src/smart-components/platform/platform.js","webpack:///./src/toolbar/schemas/platforms-toolbar.schema.js","webpack:///./src/helpers/platform/platform-helper-s.ts","webpack:///./src/redux/actions/platform-actions-s.ts","webpack:///./src/smart-components/common/async-pagination.tsx","webpack:///./src/helpers/shared/breadcrumbs-creators.ts","webpack:///./src/redux/actions/breadcrumbs-actions.ts","webpack:///./src/utilities/use-breadcrumbs.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LevelItem = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst LevelItem = (_a) => {\n    var { children = null } = _a, props = tslib_1.__rest(_a, [\"children\"]);\n    return (React.createElement(\"div\", Object.assign({}, props), children));\n};\nexports.LevelItem = LevelItem;\nexports.LevelItem.displayName = 'LevelItem';\n//# sourceMappingURL=LevelItem.js.map","import React from 'react';\nimport propTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Title } from \"@patternfly/react-core/dist/esm/components/Title/Title.js\";\n/**\n * This is the title section of the pageHeader\n */\n\nvar PageHeaderTitle = function PageHeaderTitle(_ref) {\n  var className = _ref.className,\n      title = _ref.title;\n  var pageHeaderTitleClasses = classNames(className);\n  return /*#__PURE__*/React.createElement(Title, {\n    headingLevel: \"h1\",\n    size: \"2xl\",\n    className: pageHeaderTitleClasses,\n    \"widget-type\": \"InsightsPageHeaderTitle\"\n  }, \" \", title, \" \");\n};\n\nexport default PageHeaderTitle;\nPageHeaderTitle.propTypes = {\n  title: propTypes.node.isRequired,\n  className: propTypes.string\n};","import React, { Fragment, useEffect, lazy, Suspense } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport {\n  fetchSelectedPlatform,\n  fetchPlatforms\n} from '../../redux/actions/platform-actions';\nimport {\n  fetchSelectedPlatform as fetchSelectedPlatformS,\n  fetchPlatforms as fetchPlatformsS\n} from '../../redux/actions/platform-actions-s';\n\nimport useQuery from '../../utilities/use-query';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useBreadcrumbs from '../../utilities/use-breadcrumbs';\nimport {\n  PLATFORM_SERVICE_OFFERINGS_ROUTE,\n  PLATFORM_INVENTORIES_ROUTE,\n  PLATFORM_ROUTE,\n  PLATFORM_TEMPLATES_ROUTE,\n  PLATFORM_DETAILS_ROUTE\n} from '../../constants/routes';\nimport ToolbarRenderer from '../../toolbar/toolbar-renderer';\nimport { createPlatformsTopToolbarSchema } from '../../toolbar/schemas/platforms-toolbar.schema';\nimport { PlatformToolbarPlaceholder } from '../../presentational-components/shared/loader-placeholders';\nimport { LevelItem } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\n\nconst PlatformDetails = lazy(() =>\n  import(/* webpackChunkName: \"platform-details\" */ './platform-details')\n);\n\nconst PlatformTemplates = lazy(() =>\n  import(/* webpackChunkName: \"platform-templates\" */ './platform-templates')\n);\n\nconst PlatformInventories = lazy(() =>\n  import(\n    /* webpackChunkName: \"platform-inventories\" */ './platform-inventories'\n  )\n);\n\nconst ServiceOfferingDetail = lazy(() =>\n  import(\n    /* webpackChunkName: \"service-offering-detail\" */ './service-offering/service-offering-detail'\n  )\n);\n\nconst tabItems = [\n  {\n    eventKey: 0,\n    title: 'Templates',\n    name: `/platforms/platform/platform-templates`\n  },\n  {\n    eventKey: 1,\n    title: 'Inventories',\n    name: `/platforms/platform/platform-inventories`\n  },\n  {\n    eventKey: 2,\n    title: 'Summary',\n    name: `/platforms/platform/platform-details`\n  }\n];\n\nconst Platform = () => {\n  const dispatch = useDispatch();\n  const [{ platform }] = useQuery(['platform']);\n  const { selectedPlatform, serviceOffering } = useSelector(\n    ({ platformReducer: { selectedPlatform, serviceOffering } }) => ({\n      selectedPlatform,\n      serviceOffering\n    })\n  );\n\n  const resetBreadcrumbs = useBreadcrumbs([selectedPlatform, serviceOffering]);\n  const formatMessage = useFormatMessage();\n\n  useEffect(() => {\n    Promise.all([\n      dispatch(\n        window.catalog?.standalone\n          ? fetchSelectedPlatformS(platform)\n          : fetchSelectedPlatform(platform)\n      ),\n      dispatch(\n        window.catalog?.standalone ? fetchPlatformsS() : fetchPlatforms()\n      )\n    ]);\n    scrollToTop();\n    return () => {\n      resetBreadcrumbs();\n    };\n  }, [platform]);\n\n  const platformAvailable = (platform) => ({\n    color: platform.availability_status === 'available' ? 'green' : 'red',\n    icon: <InfoCircleIcon />,\n    title:\n      platform.availability_status === 'available'\n        ? formatMessage(labelMessages.available)\n        : formatMessage(labelMessages.notAvailable)\n  });\n\n  return (\n    <Fragment>\n      <Route\n        exact\n        path={[\n          PLATFORM_INVENTORIES_ROUTE,\n          PLATFORM_ROUTE,\n          PLATFORM_TEMPLATES_ROUTE,\n          PLATFORM_DETAILS_ROUTE,\n          `${PLATFORM_INVENTORIES_ROUTE}/*`\n        ]}\n      >\n        <LevelItem>\n          <ToolbarRenderer\n            schema={createPlatformsTopToolbarSchema({\n              title: selectedPlatform.name,\n              paddingBottom: false,\n              tabItems,\n              platformAvailable: () => platformAvailable(selectedPlatform)\n            })}\n          />\n        </LevelItem>\n      </Route>\n      <Suspense fallback={<PlatformToolbarPlaceholder />}>\n        <Switch>\n          <Route path={PLATFORM_SERVICE_OFFERINGS_ROUTE}>\n            <ServiceOfferingDetail />\n          </Route>\n          <Route path={PLATFORM_INVENTORIES_ROUTE}>\n            <PlatformInventories />\n          </Route>\n          <Route path={PLATFORM_DETAILS_ROUTE}>\n            <PlatformDetails />\n          </Route>\n          <Route path={[PLATFORM_TEMPLATES_ROUTE, PLATFORM_ROUTE]}>\n            <PlatformTemplates />\n          </Route>\n        </Switch>\n      </Suspense>\n    </Fragment>\n  );\n};\n\nexport default Platform;\n","import AppTabs from '../../presentational-components/shared/app-tabs';\nimport { toolbarComponentTypes } from '../toolbar-mapper';\nimport AsyncPagination from '../../smart-components/common/async-pagination';\n\nexport const createPlatformsToolbarSchema = ({\n  searchValue,\n  onFilterChange,\n  title\n}) => ({\n  fields: [\n    {\n      component: toolbarComponentTypes.TOP_TOOLBAR,\n      key: 'platforms-toolbar',\n      fields: [\n        {\n          component: toolbarComponentTypes.TOP_TOOLBAR_TITLE,\n          key: 'platforms-toolbar-title',\n          title\n        },\n        {\n          component: toolbarComponentTypes.LEVEL,\n          key: 'platforms-toolbar-actions',\n          fields: [\n            {\n              component: toolbarComponentTypes.LEVEL_ITEM,\n              key: 'input-level-item',\n              fields: [\n                {\n                  component: toolbarComponentTypes.FILTER_TOOLBAR_ITEM,\n                  key: 'platforms-toolbar-filter-input',\n                  searchValue,\n                  onFilterChange,\n                  placeholder: 'Filter by platform'\n                }\n              ]\n            },\n            {\n              component: toolbarComponentTypes.LEVEL_ITEM,\n              key: 'pagination-level-item',\n              fields: []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n});\n\nexport const createPlatformsTopToolbarSchema = ({\n  title,\n  paddingBottom,\n  tabItems,\n  platformAvailable\n}) => ({\n  fields: [\n    {\n      component: toolbarComponentTypes.TOP_TOOLBAR,\n      key: 'platforms-toolbar',\n      paddingBottom,\n      fields: [\n        {\n          component: toolbarComponentTypes.LEVEL,\n          fields: [\n            {\n              component: toolbarComponentTypes.TOOLBAR_GROUP,\n              key: 'platform-toolbar',\n              fields: [\n                {\n                  component: toolbarComponentTypes.TOOLBAR_ITEM,\n                  key: 'platform-toolbar-group',\n                  fields: [\n                    {\n                      component: toolbarComponentTypes.TOP_TOOLBAR_TITLE,\n                      key: 'platforms-toolbar-title',\n                      title\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              component: toolbarComponentTypes.TOOLBAR_GROUP,\n              key: 'platform-toolbar',\n              alignment: 'alignRight',\n              fields: [\n                {\n                  component: toolbarComponentTypes.TOOLBAR_ITEM,\n                  key: 'platform-label',\n                  alignment: 'alignRight',\n                  fields: [\n                    {\n                      component: toolbarComponentTypes.LABEL,\n                      key: 'platform-available-label',\n                      variant: 'outline',\n                      ...platformAvailable()\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        },\n        {\n          component: toolbarComponentTypes.LEVEL_ITEM,\n          key: 'tabs-level-item',\n          fields: tabItems\n            ? [\n                {\n                  component: AppTabs,\n                  key: 'platform-tabs',\n                  tabItems\n                }\n              ]\n            : []\n        }\n      ]\n    }\n  ]\n});\n\nexport const createPlatformsFilterToolbarSchema = ({\n  searchValue,\n  onFilterChange,\n  meta,\n  apiRequest,\n  filterPlaceholder\n}) => ({\n  fields: [\n    {\n      component: toolbarComponentTypes.TOOLBAR,\n      key: 'platforms-filter-toolbar',\n      className: 'pf-u-pt-md pf-u-pb-md pf-u-pr-lg pf-u-pl-lg',\n      fields: [\n        {\n          component: toolbarComponentTypes.LEVEL,\n          key: 'platforms-toolbar-actions',\n          className: 'pf-m-grow',\n          fields: [\n            {\n              component: toolbarComponentTypes.LEVEL_ITEM,\n              key: 'input-level-item',\n              fields: [\n                {\n                  component: toolbarComponentTypes.FILTER_TOOLBAR_ITEM,\n                  key: 'platforms-toolbar-filter-input',\n                  searchValue,\n                  onFilterChange,\n                  placeholder: filterPlaceholder\n                }\n              ]\n            },\n            {\n              component: toolbarComponentTypes.LEVEL_ITEM,\n              key: 'pagination-level-item',\n              fields:\n                meta.count > 0\n                  ? [\n                      {\n                        component: AsyncPagination,\n                        key: 'platform-pagination',\n                        apiRequest,\n                        meta,\n                        isCompact: true\n                      }\n                    ]\n                  : []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n});\n","import { getAxiosInstance, getGraphqlInstance } from '../shared/user-login';\nimport {\n  CATALOG_API_BASE,\n  CATALOG_INVENTORY_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings, PaginationConfiguration } from '../shared/pagination';\nimport {\n  Source,\n  ServiceOffering,\n  ServiceInventory\n} from '@redhat-cloud-services/sources-client';\nimport { ApiCollectionResponse, SourceDetails } from '../../types/common-types';\nconst axiosInstance = getAxiosInstance();\nconst { post } = getGraphqlInstance();\n\nexport const getPlatforms = (): Promise<SourceDetails> =>\n  axiosInstance.get(`${CATALOG_API_BASE}/sources/`);\n\nexport const getPlatform = (platformId: string): Promise<Source> => {\n  return axiosInstance.get(`${CATALOG_API_BASE}/sources/${platformId}/`);\n};\n\nexport const refreshPlatform = (platformId: string): Promise<Source> => {\n  return axiosInstance.patch(\n    `${CATALOG_API_BASE}/sources/${platformId}/refresh/`\n  );\n};\n\nexport const getPlatformItems = (\n  platformId: string,\n  filter?: string,\n  options?: PaginationConfiguration\n): Promise<ApiCollectionResponse<ServiceOffering>> => {\n  if (platformId) {\n    const filterQuery = filter ? `?name=${filter}` : '';\n    const optionsQuery = options\n      ? `page_size=${options.limit}&page=${options.offset || 1}`\n      : '';\n    return axiosInstance.get(\n      `${CATALOG_API_BASE}/sources/${platformId}/service_offerings/${filterQuery}${\n        filter ? '&' : '?'\n      }${optionsQuery}`\n    );\n  } else {\n    return axiosInstance.get(`${CATALOG_API_BASE}/service_offerings/`);\n  }\n};\n\nexport const getPlatformInventories = (\n  platformId: string,\n  filter = '',\n  options = defaultSettings\n): Promise<ApiCollectionResponse<ServiceInventory>> => {\n  if (platformId) {\n    const filterQuery = filter ? `name=${filter}` : '';\n    return axiosInstance.get(\n      `${CATALOG_API_BASE}/sources/${platformId}/service_inventories/?${filterQuery}${\n        options ? `&page_size=${options.limit}&page=${options.offset || 1}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(\n      `${CATALOG_API_BASE}/service_inventories/?page_size=${\n        options.limit\n      }&page=${options.offset || 1}`\n    );\n  }\n};\n","import * as ActionTypes from '../action-types';\nimport * as PlatformHelper from '../../helpers/platform/platform-helper-s';\nimport { Dispatch } from 'redux';\nimport {\n  ServiceInventory,\n  ServiceOffering,\n  Source\n} from '@redhat-cloud-services/sources-client';\nimport { AsyncMiddlewareAction } from '../../types/redux';\nimport { ApiCollectionResponse, SourceDetails } from '../../types/common-types';\nimport { PaginationConfiguration } from '../../helpers/shared/pagination';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const fetchPlatforms = () => (\n  dispatch: Dispatch\n): Promise<{ type: string; payload: SourceDetails }> => {\n  dispatch({ type: `${ActionTypes.FETCH_PLATFORMS}_PENDING` });\n  return PlatformHelper.getPlatforms()\n    .then((results) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_FULFILLED`,\n        payload: results\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchPlatformItems = (\n  platformId: string,\n  filter: string,\n  options: PaginationConfiguration\n): AsyncMiddlewareAction<ApiCollectionResponse<ServiceOffering>> => ({\n  type: ActionTypes.FETCH_PLATFORM_ITEMS,\n  payload: PlatformHelper.getPlatformItems(platformId, filter, options),\n  meta: {\n    platformId,\n    filter,\n    ...options\n  }\n});\n\nexport const fetchMultiplePlatformItems = (\n  platformsId: string[]\n): {\n  type: string;\n  payload: Promise<\n    [] | { [x: string]: ApiCollectionResponse<ServiceOffering> }\n  >;\n} => {\n  const platformPromisses = platformsId.map((platformId) =>\n    PlatformHelper.getPlatformItems(platformId).then((results) => ({\n      [platformId]: results\n    }))\n  );\n  return {\n    type: ActionTypes.FETCH_MULTIPLE_PLATFORM_ITEMS,\n    payload: Promise.all(platformPromisses).then((results) =>\n      results.reduce(\n        (acc, curr) => ({\n          ...acc,\n          ...curr\n        }),\n        {}\n      )\n    )\n  };\n};\n\nexport const fetchSelectedPlatform = (\n  id: string\n): AsyncMiddlewareAction<Source> => ({\n  type: ActionTypes.FETCH_PLATFORM,\n  payload: PlatformHelper.getPlatform(id)\n});\n\nexport const fetchPlatformInventories = (\n  platformId: string,\n  filter: string,\n  options: PaginationConfiguration\n): AsyncMiddlewareAction<ApiCollectionResponse<ServiceInventory>> => ({\n  type: ActionTypes.FETCH_PLATFORM_INVENTORIES,\n  payload: PlatformHelper.getPlatformInventories(platformId, filter, options)\n});\n\nexport const refreshPlatform = (platformId: string) => (\n  dispatch: Dispatch\n): AsyncMiddlewareAction => {\n  return dispatch({\n    type: ActionTypes.REFRESH_PLATFORM,\n    payload: PlatformHelper.refreshPlatform(platformId)\n      .then(() =>\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: 'Success starting the platform refresh',\n            dismissable: true,\n            description: 'The platform refresh started successfully'\n          })\n        )\n      )\n      .catch((error) => {\n        if (error.status === 429) {\n          dispatch(\n            addNotification({\n              variant: 'info',\n              title: 'Platform refresh in progress',\n              dismissable: true,\n              description: 'Platform refresh already running.'\n            })\n          );\n        } else {\n          dispatch({\n            type: `${ActionTypes.REFRESH_PLATFORM}_REJECTED`,\n            payload: error\n          });\n        }\n      })\n  });\n};\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport debouncePromise from 'awesome-debounce-promise';\n\nimport { OnPerPageSelect, OnSetPage, Pagination } from '@patternfly/react-core';\n\nimport {\n  getCurrentPage,\n  getNewPage,\n  PaginationConfiguration\n} from '../../helpers/shared/pagination';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\n\nexport interface AsyncPaginationProps<T = any> extends AnyObject {\n  meta: PaginationConfiguration;\n  apiRequest: (...args: any[]) => Promise<T>;\n  apiProps?: any;\n  className?: string;\n  isCompact?: boolean;\n}\nconst AsyncPagination: React.ComponentType<AsyncPaginationProps> = ({\n  meta: { limit = 50, count = 0, offset = 0 },\n  apiProps,\n  apiRequest,\n  className = '',\n  isCompact = false,\n  ...props\n}) => {\n  const handleOnPerPageSelect: OnPerPageSelect = (_event, limit) =>\n    apiRequest(apiProps, {\n      offset,\n      limit\n    });\n\n  const handleSetPage: OnSetPage = (_event, number, debounce) => {\n    const options = {\n      offset: getNewPage(number, limit),\n      limit\n    };\n\n    const request = () => apiRequest(apiProps, options);\n    if (debounce) {\n      return debouncePromise(request, 250)();\n    }\n\n    return request();\n  };\n\n  return (\n    <div className={className}>\n      <Pagination\n        perPage={limit || 50}\n        itemCount={count || 0}\n        onPerPageSelect={handleOnPerPageSelect}\n        page={getCurrentPage(limit, offset)}\n        onSetPage={handleSetPage}\n        dropDirection=\"down\"\n        isCompact={isCompact}\n        {...props}\n      />\n    </div>\n  );\n};\n\nexport default AsyncPagination;\n","import {\n  PORTFOLIOS_ROUTE,\n  PORTFOLIO_ROUTE,\n  PORTFOLIO_ITEM_ROUTE,\n  ORDER_ROUTE,\n  PLATFORM_ROUTE,\n  PLATFORM_SERVICE_OFFERINGS_ROUTE,\n  PLATFORMS_ROUTE,\n  ORDERS_ROUTE,\n  EDIT_SURVEY_ROUTE,\n  ADD_PRODUCTS_ROUTE,\n  PORTFOLIO_ITEM_ROUTE_EDIT\n} from '../../constants/routes';\nimport { PortfolioReducerState } from '../../redux/reducers/portfolio-reducer';\nimport { ReactNode } from 'react';\nimport { PlatformReducerState } from '../../redux/reducers/platform-reducer';\nimport { OrderReducerState } from '../../redux/reducers/order-reducer';\n\nexport const BASE_PORTFOLIO_FRAGMENTS = [\n  {\n    title: 'Portfolios',\n    pathname: PORTFOLIOS_ROUTE,\n    searchParams: {}\n  }\n];\n\nexport const ENTITIES_EXTRA_PARAMS = {\n  'portfolio-item': ['source', 'portfolio'],\n  'edit-survey': ['source', 'portfolio', 'portfolio-item']\n};\n\nexport const FRAGMENT_TITLE = {\n  [PORTFOLIO_ROUTE]: (\n    getState: () => { portfolioReducer: PortfolioReducerState }\n  ): ReactNode => getState().portfolioReducer.selectedPortfolio.name,\n  [PORTFOLIO_ITEM_ROUTE]: (\n    getState: () => { portfolioReducer: PortfolioReducerState }\n  ): ReactNode => getState().portfolioReducer.portfolioItem.portfolioItem.name,\n  [EDIT_SURVEY_ROUTE]: (): string => 'Edit survey',\n  [ADD_PRODUCTS_ROUTE]: (): string => 'Add products',\n  [PLATFORM_ROUTE]: (\n    getState: () => { platformReducer: PlatformReducerState }\n  ): ReactNode => getState().platformReducer.selectedPlatform.name,\n  [PLATFORM_SERVICE_OFFERINGS_ROUTE]: (\n    getState: () => { platformReducer: PlatformReducerState }\n  ): ReactNode => getState().platformReducer.serviceOffering.service.name,\n  [ORDER_ROUTE]: (\n    getState: () => { orderReducer: OrderReducerState }\n  ): ReactNode => {\n    const { portfolioItem, order } = getState().orderReducer.orderDetail;\n    return `${portfolioItem.name} # ${order.id}`;\n  },\n  [PORTFOLIO_ITEM_ROUTE_EDIT]: (): string => 'Edit product'\n};\n\nexport const FRAGMENT_PREFIX = {\n  [PORTFOLIO_ROUTE]: {\n    pathname: PORTFOLIOS_ROUTE,\n    title: 'Portfolios',\n    searchParams: {}\n  },\n  [PLATFORM_ROUTE]: {\n    pathname: PLATFORMS_ROUTE,\n    title: 'Platforms',\n    searchParams: {}\n  },\n  [ORDER_ROUTE]: {\n    pathname: ORDERS_ROUTE,\n    title: 'Orders',\n    searchParams: {}\n  }\n};\n","import { INITIALIZE_BREADCRUMBS } from '../action-types';\nimport {\n  FRAGMENT_TITLE,\n  ENTITIES_EXTRA_PARAMS,\n  FRAGMENT_PREFIX\n} from '../../helpers/shared/breadcrumbs-creators';\nimport { Dispatch } from 'redux';\nimport { BreadcrumbFragment } from '../reducers/breadcrumbs-reducer';\nimport { GetReduxState } from '../../types/redux';\nimport { AnyObject, ReduxAction } from '../../types/common-types';\n\nexport const createBreadcrumbsFromLocations = (\n  pathname = '',\n  search: AnyObject = {}\n) => (\n  dispatch: Dispatch,\n  getState: GetReduxState\n): ReduxAction<BreadcrumbFragment[]> => {\n  if (pathname.length === 0) {\n    return dispatch({ type: INITIALIZE_BREADCRUMBS, payload: [] });\n  }\n\n  const prefix: string[] = [];\n  if (pathname === '/portfolios/portfolio') {\n    prefix.push('/portfolios');\n  }\n\n  if (pathname.startsWith('/portfolios/portfolio/portfolio-item')) {\n    prefix[0] = '/portfolios';\n    prefix[1] = '/portfolio';\n    if (pathname.startsWith('/portfolios/portfolio/portfolio-item/')) {\n      prefix[2] = '/portfolio-item';\n    }\n  }\n\n  if (pathname.startsWith('/platforms/platform')) {\n    prefix[0] = '/platforms';\n  }\n\n  pathname = pathname.replace(prefix[0], '');\n  let result = pathname\n    .replace(/^\\//, '')\n    .split('/')\n    .reduce<BreadcrumbFragment[]>((acc, curr, index) => {\n      const pathname = `${\n        index > 0 && acc[index - 1] ? acc[index - 1].pathname : ''\n      }${prefix[index]}/${curr}`;\n      const generateTitle = (FRAGMENT_TITLE[\n        pathname as keyof typeof FRAGMENT_TITLE\n      ] as unknown) as (getState: GetReduxState) => string;\n      if (!generateTitle) {\n        return acc;\n      }\n\n      const searchParams = {\n        ...(index > 0 && acc[index - 1]?.searchParams),\n        ...(search[curr] ? { [curr]: search[curr] } : {})\n      };\n      if ((ENTITIES_EXTRA_PARAMS as AnyObject)[curr]) {\n        (ENTITIES_EXTRA_PARAMS as AnyObject)[curr].forEach((key: string) => {\n          searchParams[key] = search[key];\n        });\n      }\n\n      if ((FRAGMENT_PREFIX as AnyObject)[pathname]) {\n        acc = [(FRAGMENT_PREFIX as AnyObject)[pathname]];\n      }\n\n      const currTitle = generateTitle(getState);\n\n      return !currTitle\n        ? acc\n        : [\n            ...acc,\n            {\n              pathname,\n              searchParams,\n              title: currTitle\n            }\n          ];\n    }, []);\n  if (result.length > 0 && (FRAGMENT_PREFIX as AnyObject)[result[0].pathname]) {\n    result = [(FRAGMENT_PREFIX as AnyObject)[result[0].pathname], ...result];\n  }\n\n  // if portfolio item, add the 2 breadcrumbs\n  return dispatch({ type: INITIALIZE_BREADCRUMBS, payload: result });\n};\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { createBreadcrumbsFromLocations } from '../redux/actions/breadcrumbs-actions';\nimport { INITIALIZE_BREADCRUMBS } from '../redux/action-types';\nimport { AnyObject, ReduxAction } from '../types/common-types';\nimport { AnyAction } from 'redux';\n\nconst useBreadcrumbs = (\n  updateTriggers: any[] = []\n):\n  | (() => ReduxAction<{\n      type: typeof INITIALIZE_BREADCRUMBS;\n    }>)\n  | ReduxAction<{ type: typeof INITIALIZE_BREADCRUMBS }> => {\n  const dispatch = useDispatch();\n  const { pathname, search } = useLocation();\n  if (updateTriggers.length === 0) {\n    return dispatch(\n      (createBreadcrumbsFromLocations('', {}) as unknown) as AnyAction\n    );\n  }\n\n  const searchParams = new URLSearchParams(search);\n  const searchObject: AnyObject = {};\n  searchParams.forEach((value, key) => {\n    searchObject[key] = value;\n  });\n\n  useEffect(() => {\n    dispatch(createBreadcrumbsFromLocations(pathname, searchObject));\n  }, [pathname, ...updateTriggers]);\n\n  return () =>\n    dispatch((createBreadcrumbsFromLocations('', {}) as unknown) as AnyAction);\n};\n\nexport default useBreadcrumbs;\n"],"names":["exports","tslib_1","React","__importStar","_a","children","props","__rest","createElement","Object","assign","PageHeaderTitle","_ref","className","title","pageHeaderTitleClasses","headingLevel","size","propTypes","PlatformDetails","lazy","PlatformTemplates","PlatformInventories","ServiceOfferingDetail","tabItems","eventKey","name","dispatch","useDispatch","useQuery","platform","useSelector","platformReducer","selectedPlatform","serviceOffering","resetBreadcrumbs","useBreadcrumbs","formatMessage","useFormatMessage","useEffect","Promise","all","window","catalog","standalone","fetchSelectedPlatformS","fetchSelectedPlatform","fetchPlatformsS","fetchPlatforms","scrollToTop","Fragment","Route","exact","path","PLATFORM_INVENTORIES_ROUTE","PLATFORM_ROUTE","PLATFORM_TEMPLATES_ROUTE","PLATFORM_DETAILS_ROUTE","schema","createPlatformsTopToolbarSchema","paddingBottom","platformAvailable","color","availability_status","icon","labelMessages","Suspense","fallback","Switch","PLATFORM_SERVICE_OFFERINGS_ROUTE","createPlatformsToolbarSchema","searchValue","onFilterChange","fields","component","toolbarComponentTypes","key","placeholder","alignment","variant","AppTabs","createPlatformsFilterToolbarSchema","meta","apiRequest","filterPlaceholder","count","AsyncPagination","isCompact","axiosInstance","refreshPlatform","platformId","patch","getPlatformItems","filter","options","filterQuery","optionsQuery","limit","offset","get","getPlatformInventories","type","then","results","payload","catch","error","fetchPlatformItems","id","fetchPlatformInventories","dismissable","description","status","apiProps","Pagination","perPage","itemCount","onPerPageSelect","_event","page","onSetPage","number","debounce","request","dropDirection","ENTITIES_EXTRA_PARAMS","FRAGMENT_TITLE","getState","portfolioReducer","selectedPortfolio","portfolioItem","service","orderReducer","orderDetail","order","FRAGMENT_PREFIX","pathname","searchParams","createBreadcrumbsFromLocations","search","length","prefix","push","startsWith","result","replace","split","reduce","acc","curr","index","generateTitle","forEach","currTitle","updateTriggers","useLocation","URLSearchParams","searchObject","value"],"sourceRoot":""}