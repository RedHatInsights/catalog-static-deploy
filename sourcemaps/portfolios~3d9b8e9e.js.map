{"version":3,"sources":["webpack:///./src/presentational-components/portfolio/portfolio-card-header.tsx","webpack:///./src/presentational-components/portfolio/porfolio-card.tsx","webpack:///./src/smart-components/portfolio/toolbars/portfolios-primary-toolbar.js","webpack:///./src/smart-components/portfolio/portfolios.js","webpack:///./src/presentational-components/shared/bottom-pagination-container.tsx","webpack:///./src/utilities/use-is-mounted.js"],"names":["HeaderTitle","LevelItem","HeaderLevel","Level","id","to","portfolioName","portfolio_items","headerActions","TextContent","Text","title","className","component","h3","Badge","isRead","onClick","event","preventDefault","TO_DISPLAY","HeaderActions","portfolioId","handleCopyPortfolio","canLinkOrderProcesses","userCapabilities","share","copy","unshare","update","destroy","set_approval","formatMessage","isOpen","setOpen","dropdownItems","push","DropdownItem","key","searchParams","portfolio","pathname","preserveHash","setApproval","window","insights","chrome","isBeta","orderProcessAction","setOrderProcess","preserveSearch","role","edit","delete","length","Dropdown","isPlain","onSelect","position","right","toggle","KebabToggle","onToggle","imageUrl","isDisabled","name","metadata","user_capabilities","statistics","shared_groups","props","search","CardHeader","small","DateFormat","date","updated_at","created_at","type","owner","toDisplay","CardFooter","Label","variant","color","shared","chipCategories","labelMessages","sort_by","sortBy","sortByMapping","updated","created","PortfoliosPrimaryToolbar","filters","stateDispatch","debouncedFilter","initialState","meta","filterType","handleFilterItems","sortDirection","handleSort","fetchPortfoliosWithState","isFetching","isFiltering","canCreate","dispatch","useDispatch","useFormatMessage","noData","PrimaryToolbar","dedicatedAction","Button","create","activeFiltersConfig","Object","entries","filter","value","map","category","chips","Array","isArray","onDelete","_e","clearAll","chip","payload","newFilters","filterConfig","onChange","items","filterValues","label","placeholder","sortByConfig","direction","onSortChange","_event","pagination","count","apiRequest","_","options","isCompact","undefined","propTypes","PropTypes","shape","string","isRequired","func","any","object","bool","asyncFormValidator","defaultSettings","filteringCallback","then","SortByDirection","asc","portfoliosState","state","action","Portfolios","viewState","useInitialUriHash","isMounted","useIsMounted","useReducer","useSelector","portfolioReducer","portfolios","data","userPermissions","useContext","UserContext","permissions","history","useHistory","useEffect","scrollToTop","appNavClick","secondaryNav","offset","copyPortfolio","PORTFOLIO_ROUTE","hasPermission","emptyStateProps","PrimaryAction","url","ADD_PORTFOLIO_ROUTE","filteringMessages","clearFilters","portfolioMessages","portfoliosNoData","noResults","description","portfoliosNoDataDescription","noResultsDescription","Icon","WrenchIcon","SearchIcon","galleryItems","item","portfoliosTitle","isLoading","renderEmptyState","dropDirection","children","useRef","current"],"mappings":"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","file":"js/portfolios~3d9b8e9e.6faa8f678c0a493a0380.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  Badge,\n  Level,\n  LevelItem,\n  Text,\n  TextContent,\n  TextVariants\n} from '@patternfly/react-core';\nimport EllipsisTextContainer from '../styled-components/ellipsis-text-container';\nimport styled from 'styled-components';\nimport { CatalogLinkTo } from '../../smart-components/common/catalog-link';\n\nconst HeaderTitle = styled(LevelItem)`\n  max-width: calc(100% - 80px);\n  width: calc(100% - 80px);\n`;\n\nconst HeaderLevel = styled(Level)`\n  width: 100%;\n`;\n\nexport interface PortfolioCardHeaderProps {\n  id: string;\n  to: CatalogLinkTo;\n  portfolioName?: string;\n  portfolio_items: number;\n  headerActions: ReactNode;\n}\nconst PortfolioCardHeader: React.ComponentType<PortfolioCardHeaderProps> = ({\n  id,\n  to,\n  portfolioName,\n  portfolio_items,\n  headerActions = []\n}) => (\n  <HeaderLevel>\n    <HeaderTitle>\n      <TextContent>\n        <Link to={to} id={`portfolio-link-${id}`}>\n          <Text\n            title={portfolioName}\n            className=\"pf-u-mb-0\"\n            component={TextVariants.h3}\n          >\n            <EllipsisTextContainer>{portfolioName}</EllipsisTextContainer>\n          </Text>\n        </Link>\n      </TextContent>\n    </HeaderTitle>\n    <Badge isRead>{portfolio_items}</Badge>\n    <div onClick={(event) => event.preventDefault()}>{headerActions}</div>\n  </HeaderLevel>\n);\n\nexport default PortfolioCardHeader;\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\nimport ItemDetails from '../shared/card-common';\nimport {\n  CardHeader,\n  CardFooter,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  KebabToggle,\n  Text,\n  TextContent,\n  TextVariants,\n  Label\n} from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\nimport PortfolioCardHeader from './portfolio-card-header';\n\nimport CatalogLink from '../../smart-components/common/catalog-link';\nimport {\n  SHARE_PORTFOLIO_ROUTE,\n  EDIT_PORTFOLIO_WORKFLOW_ROUTE,\n  EDIT_PORTFOLIO_ROUTE,\n  REMOVE_PORTFOLIO_ROUTE,\n  PORTFOLIO_ROUTE,\n  EDIT_ORDER_PROCESS_ROUTE\n} from '../../constants/routes';\nimport {\n  StyledCard,\n  StyledGalleryItem\n} from '../styled-components/styled-gallery';\nimport { StyledCardBody } from '../styled-components/card';\nimport actionMessages from '../../messages/actions.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport orderProcessesMessages from '../../messages/order-processes.messages';\nimport { UserCapabilities, PortfolioMetadata } from '../../types/common-types';\n\nconst TO_DISPLAY = ['description'];\n\ninterface HeaderActionsProps {\n  portfolioId: string;\n  handleCopyPortfolio: (portfolioId: string) => void;\n  userCapabilities: UserCapabilities;\n  canLinkOrderProcesses: boolean;\n}\nconst HeaderActions: React.ComponentType<HeaderActionsProps> = ({\n  portfolioId,\n  handleCopyPortfolio,\n  canLinkOrderProcesses,\n  userCapabilities: { share, copy, unshare, update, destroy, set_approval }\n}) => {\n  const formatMessage = useFormatMessage();\n  const [isOpen, setOpen] = useState(false);\n  const dropdownItems = [];\n  if (share || unshare) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"share-portfolio-action\"\n        id=\"share-portfolio-action\"\n        component={\n          <CatalogLink\n            searchParams={{ portfolio: portfolioId }}\n            pathname={SHARE_PORTFOLIO_ROUTE}\n            preserveHash\n          >\n            {formatMessage(actionMessages.share)}\n          </CatalogLink>\n        }\n      />\n    );\n  }\n\n  if (copy) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"copy-portfolio-action\"\n        id=\"copy-portfolio-action\"\n        onClick={() => handleCopyPortfolio(portfolioId)}\n      >\n        {formatMessage(actionMessages.copy)}\n      </DropdownItem>\n    );\n  }\n\n  if (set_approval) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"workflow-portfolio-action\"\n        id=\"workflow-portfolio-action\"\n        component={\n          <CatalogLink\n            searchParams={{ portfolio: portfolioId }}\n            pathname={EDIT_PORTFOLIO_WORKFLOW_ROUTE}\n            preserveHash\n          >\n            {formatMessage(actionMessages.setApproval)}\n          </CatalogLink>\n        }\n      />\n    );\n  }\n\n  if (window.insights.chrome.isBeta() && update && canLinkOrderProcesses) {\n    const orderProcessAction = formatMessage(\n      orderProcessesMessages.setOrderProcess\n    ) as string;\n    dropdownItems.push(\n      <DropdownItem\n        aria-label={orderProcessAction}\n        key=\"attach-order-processes\"\n        id=\"attach-order-processes\"\n        component={\n          <CatalogLink\n            preserveSearch\n            pathname={EDIT_ORDER_PROCESS_ROUTE}\n            searchParams={{ portfolio: portfolioId }}\n          >\n            {orderProcessAction}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (update) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"edit-portfolio-action\"\n        id=\"edit-portfolio-action\"\n        component={\n          <CatalogLink\n            searchParams={{ portfolio: portfolioId }}\n            pathname={EDIT_PORTFOLIO_ROUTE}\n            preserveHash\n          >\n            {formatMessage(actionMessages.edit)}\n          </CatalogLink>\n        }\n      />\n    );\n  }\n\n  if (destroy) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"remove-portfolio-action\"\n        id=\"remove-portfolio-action\"\n        component={\n          <CatalogLink\n            searchParams={{ portfolio: portfolioId }}\n            pathname={REMOVE_PORTFOLIO_ROUTE}\n            preserveHash\n          >\n            {formatMessage(actionMessages.delete)}\n          </CatalogLink>\n        }\n      />\n    );\n  }\n\n  return dropdownItems.length === 0 ? null : (\n    <Dropdown\n      key=\"portfolio-dropdown\"\n      id={`portfolio-${portfolioId}-dropdown`}\n      isOpen={isOpen}\n      isPlain\n      onSelect={() => setOpen(false)}\n      position={DropdownPosition.right}\n      toggle={\n        <KebabToggle\n          id={`portfolio-${portfolioId}-toggle`}\n          onToggle={(isOpen) => setOpen(isOpen)}\n        />\n      }\n      dropdownItems={dropdownItems}\n    />\n  );\n};\n\nexport interface PortfolioCardProps {\n  imageUrl?: string;\n  name?: string;\n  id: string;\n  updated_at?: string;\n  created_at: string;\n  owner?: string;\n  isDisabled?: boolean;\n  metadata: PortfolioMetadata;\n  handleCopyPortfolio: (portfolioId: string) => void;\n  canLinkOrderProcesses: boolean;\n}\nconst PortfolioCard: React.ComponentType<PortfolioCardProps> = ({\n  imageUrl,\n  isDisabled,\n  name,\n  id,\n  handleCopyPortfolio,\n  metadata: {\n    user_capabilities,\n    statistics: { shared_groups, portfolio_items }\n  },\n  canLinkOrderProcesses,\n  ...props\n}) => {\n  const formatMessage = useFormatMessage();\n  const to = {\n    pathname: PORTFOLIO_ROUTE,\n    search: `?portfolio=${id}`\n  };\n  return (\n    <StyledGalleryItem isDisabled={isDisabled}>\n      <StyledCard>\n        <CardHeader>\n          <PortfolioCardHeader\n            id={id}\n            to={to}\n            portfolioName={name}\n            portfolio_items={portfolio_items || 0}\n            headerActions={\n              <HeaderActions\n                portfolioId={id}\n                userCapabilities={user_capabilities}\n                handleCopyPortfolio={handleCopyPortfolio}\n                canLinkOrderProcesses={canLinkOrderProcesses}\n              />\n            }\n          />\n        </CardHeader>\n        <StyledCardBody>\n          <TextContent className=\"pf-u-mb-md\">\n            <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n              Last updated&nbsp;\n              <DateFormat\n                date={props.updated_at || props.created_at}\n                type=\"relative\"\n              />\n            </Text>\n            <Text component={TextVariants.small}>by {props.owner}</Text>\n          </TextContent>\n          <ItemDetails\n            {...{ name, imageUrl, ...props }}\n            toDisplay={TO_DISPLAY}\n          />\n        </StyledCardBody>\n        <CardFooter>\n          {shared_groups && shared_groups > 0 && (\n            <Label variant=\"filled\" color=\"grey\">\n              {formatMessage(labelMessages.shared)}\n            </Label>\n          )}\n        </CardFooter>\n      </StyledCard>\n    </StyledGalleryItem>\n  );\n};\n\nexport default PortfolioCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\n\nimport AsyncPagination from '../../common/async-pagination';\nimport CatalogLink from '../../common/catalog-link';\nimport { Button } from '@patternfly/react-core';\nimport labelMessages from '../../../messages/labels.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\n\nconst chipCategories = {\n  name: labelMessages.name,\n  owner: labelMessages.owner,\n  sort_by: labelMessages.sortBy\n};\n\nconst sortByMapping = {\n  name: labelMessages.name,\n  owner: labelMessages.owner,\n  updated_at: labelMessages.updated,\n  created_at: labelMessages.created\n};\n\nconst PortfoliosPrimaryToolbar = ({\n  filters,\n  stateDispatch,\n  debouncedFilter,\n  initialState,\n  meta,\n  filterType,\n  handleFilterItems,\n  sortDirection,\n  handleSort,\n  fetchPortfoliosWithState,\n  isFetching,\n  isFiltering,\n  canCreate\n}) => {\n  const dispatch = useDispatch();\n  const formatMessage = useFormatMessage();\n  if (meta.noData) {\n    return null;\n  }\n\n  return (\n    <PrimaryToolbar\n      {...(canCreate\n        ? {\n            dedicatedAction: (\n              <CatalogLink pathname=\"/portfolios/add-portfolio\">\n                <Button variant=\"primary\" id=\"create-portfolio\" type=\"button\">\n                  {formatMessage(labelMessages.create)}\n                </Button>\n              </CatalogLink>\n            )\n          }\n        : {})}\n      activeFiltersConfig={{\n        filters: Object.entries(filters)\n          .filter(([, value]) => value && value.length > 0)\n          .map(([key, value]) => {\n            return {\n              category: formatMessage(chipCategories[key]),\n              type: key,\n              chips: Array.isArray(value)\n                ? value.map((name) => ({\n                    name\n                  }))\n                : [\n                    {\n                      name:\n                        key === 'sort_by'\n                          ? formatMessage(sortByMapping[value])\n                          : value\n                    }\n                  ]\n            };\n          }),\n        onDelete: (_e, [chip], clearAll) => {\n          if (clearAll) {\n            stateDispatch({\n              type: 'replaceFilterChip',\n              payload: initialState.filters\n            });\n            return debouncedFilter(\n              initialState.filters,\n              meta,\n              dispatch,\n              (isFiltering) =>\n                stateDispatch({\n                  type: 'setFilteringFlag',\n                  payload: isFiltering\n                })\n            );\n          }\n\n          const newFilters = { ...filters };\n          if (chip.type === 'state') {\n            newFilters[chip.type] = newFilters[chip.type].filter(\n              (value) => value !== chip.chips[0].name\n            );\n          } else {\n            newFilters[chip.type] = '';\n          }\n\n          stateDispatch({\n            type: 'replaceFilterChip',\n            payload: newFilters\n          });\n          debouncedFilter(newFilters, meta, dispatch, (isFiltering) =>\n            stateDispatch({\n              type: 'setFilteringFlag',\n              payload: isFiltering\n            })\n          );\n        }\n      }}\n      filterConfig={{\n        onChange: (_e, value) =>\n          stateDispatch({ type: 'setFilterType', payload: value }),\n        value: filterType,\n        items: [\n          {\n            filterValues: {\n              value: filters.name,\n              onChange: (_e, value) => handleFilterItems(value)\n            },\n            label: formatMessage(labelMessages.name),\n            value: 'name'\n          },\n          {\n            filterValues: {\n              value: filters.owner,\n              onChange: (_e, value) => handleFilterItems(value)\n            },\n            label: formatMessage(labelMessages.owner),\n            value: 'owner'\n          },\n          {\n            filterValues: {\n              value: filters.sort_by || 'name',\n              onChange: (_e, value) => handleFilterItems(value),\n              items: [\n                {\n                  label: formatMessage(labelMessages.name),\n                  value: 'name'\n                },\n                {\n                  label: formatMessage(labelMessages.owner),\n                  value: 'owner'\n                },\n                {\n                  label: formatMessage(labelMessages.created),\n                  value: 'created_at'\n                },\n                {\n                  label: formatMessage(labelMessages.updated),\n                  value: 'updated_at'\n                }\n              ]\n            },\n            placeholder: filters.sort_by\n              ? formatMessage(sortByMapping[filters.sort_by])\n              : formatMessage(labelMessages.name),\n            label: formatMessage(labelMessages.sortBy),\n            value: 'sort_by',\n            type: 'radio'\n          }\n        ]\n      }}\n      sortByConfig={{\n        direction: sortDirection,\n        onSortChange: (_event, direction) => handleSort(direction)\n      }}\n      pagination={\n        meta.count > 0 ? (\n          <AsyncPagination\n            isDisabled={isFetching || isFiltering}\n            meta={meta}\n            apiRequest={(_, options) =>\n              dispatch(fetchPortfoliosWithState(filters, options))\n            }\n            isCompact\n          />\n        ) : (\n          undefined\n        )\n      }\n    />\n  );\n};\n\nPortfoliosPrimaryToolbar.propTypes = {\n  filters: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    owner: PropTypes.string.isRequired,\n    sort_by: PropTypes.string\n  }).isRequired,\n  stateDispatch: PropTypes.func.isRequired,\n  debouncedFilter: PropTypes.func.isRequired,\n  initialState: PropTypes.shape({\n    filters: PropTypes.shape({ [PropTypes.string]: PropTypes.any }).isRequired\n  }).isRequired,\n  meta: PropTypes.object.isRequired,\n  filterType: PropTypes.string.isRequired,\n  handleFilterItems: PropTypes.func.isRequired,\n  sortDirection: PropTypes.string.isRequired,\n  handleSort: PropTypes.func.isRequired,\n  fetchPortfoliosWithState: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  isFiltering: PropTypes.bool.isRequired,\n  canCreate: PropTypes.bool\n};\n\nexport default PortfoliosPrimaryToolbar;\n","import React, { Fragment, useEffect, useReducer, useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { SearchIcon, WrenchIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\n\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport ContentGallery from '../content-gallery/content-gallery';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport {\n  fetchPortfoliosWithState,\n  copyPortfolio\n} from '../../redux/actions/portfolio-actions';\nimport PortfolioCard from '../../presentational-components/portfolio/porfolio-card';\nimport ContentGalleryEmptyState, {\n  EmptyStatePrimaryAction\n} from '../../presentational-components/shared/content-gallery-empty-state';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport AsyncPagination from '../common/async-pagination';\nimport BottomPaginationContainer from '../../presentational-components/shared/bottom-pagination-container';\nimport { ADD_PORTFOLIO_ROUTE, PORTFOLIO_ROUTE } from '../../constants/routes';\nimport UserContext from '../../user-context';\nimport { hasPermission } from '../../helpers/shared/helpers';\nimport useInitialUriHash from '../../routing/use-initial-uri-hash';\nimport filteringMessages from '../../messages/filtering.messages';\nimport portfolioMessages from '../../messages/portfolio.messages';\n\nimport { SortByDirection } from '@patternfly/react-table';\nimport useIsMounted from '../../utilities/use-is-mounted';\nimport PortfoliosPrimaryToolbar from './toolbars/portfolios-primary-toolbar';\nimport TopToolbar, {\n  TopToolbarTitle\n} from '../../presentational-components/shared/top-toolbar';\nimport useFormatMessage from '../../utilities/use-format-message';\n\nconst debouncedFilter = asyncFormValidator(\n  (filters, meta = defaultSettings, dispatch, filteringCallback) => {\n    filteringCallback(true);\n    dispatch(fetchPortfoliosWithState(filters, meta)).then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst initialState = {\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false,\n  filterType: 'name',\n  filters: {\n    name: '',\n    owner: '',\n    sort_by: undefined\n  },\n  sortDirection: SortByDirection.asc\n};\n\nconst changeFilters = (value, type, filters) => ({\n  ...filters,\n  [type]: value\n});\n\nconst portfoliosState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return {\n        ...state,\n        filters: changeFilters(action.payload, state.filterType, state.filters)\n      };\n    case 'replaceFilterChip':\n      return {\n        ...state,\n        sortDirection: SortByDirection.asc,\n        filters: action.payload\n      };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    case 'setFilterType':\n      return { ...state, filterType: action.payload };\n    case 'setSortBy':\n      return {\n        ...state,\n        sortDirection: action.payload,\n        filters: !state.filters.sort_by\n          ? { ...state.filters, sort_by: 'name' }\n          : state.filters\n      };\n  }\n\n  return state;\n};\n\nconst Portfolios = () => {\n  const formatMessage = useFormatMessage();\n  const viewState = useInitialUriHash();\n  const isMounted = useIsMounted();\n  const [\n    { isFetching, isFiltering, filters, filterType, sortDirection },\n    stateDispatch\n  ] = useReducer(portfoliosState, {\n    ...initialState,\n    ...viewState?.portfolio\n  });\n  const { data, meta } = useSelector(\n    ({ portfolioReducer: { portfolios } }) => portfolios\n  );\n  const dispatch = useDispatch();\n  const { permissions: userPermissions } = useContext(UserContext);\n  const history = useHistory();\n\n  useEffect(() => {\n    dispatch(\n      fetchPortfoliosWithState(filters, { ...meta, sortDirection })\n    ).then(() => stateDispatch({ type: 'setFetching', payload: false }));\n    scrollToTop();\n    insights.chrome.appNavClick({ id: 'portfolios', secondaryNav: true });\n  }, []);\n\n  const handleFilterItems = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      { ...filters, [filterType]: value },\n      { ...meta, offset: 0, sortDirection },\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering })\n    );\n  };\n\n  useEffect(() => {\n    if (isMounted && (!isFiltering || !isFetching)) {\n      handleFilterItems(filters[filterType]);\n    }\n  }, [sortDirection]);\n\n  const handleSort = (direction) =>\n    stateDispatch({ type: 'setSortBy', payload: direction });\n\n  const handleCopyPortfolio = (id) =>\n    dispatch(copyPortfolio(id)).then(({ id }) =>\n      history.push({\n        pathname: PORTFOLIO_ROUTE,\n        search: `?portfolio=${id}`\n      })\n    );\n\n  const canCreate = hasPermission(userPermissions, [\n    'catalog:portfolios:create'\n  ]);\n\n  const canLinkOrderProcesses = hasPermission(userPermissions, [\n    'catalog:order_processes:link'\n  ]);\n\n  const NoDataAction = () => (\n    <EmptyStatePrimaryAction\n      url={ADD_PORTFOLIO_ROUTE}\n      id=\"create-portfolio\"\n      label=\"Create portfolio\"\n      hasPermission={canCreate}\n    />\n  );\n  const FilterAction = () => (\n    <Button variant=\"link\" onClick={() => handleFilterItems('')}>\n      {formatMessage(filteringMessages.clearFilters)}\n    </Button>\n  );\n\n  const emptyStateProps = {\n    PrimaryAction: meta.noData ? NoDataAction : FilterAction,\n    title: meta.noData\n      ? formatMessage(portfolioMessages.portfoliosNoData)\n      : formatMessage(filteringMessages.noResults),\n    description: meta.noData\n      ? formatMessage(portfolioMessages.portfoliosNoDataDescription)\n      : formatMessage(filteringMessages.noResultsDescription),\n    Icon: meta.noData ? WrenchIcon : SearchIcon\n  };\n  const galleryItems = data.map((item) => (\n    <PortfolioCard\n      key={item.id}\n      {...item}\n      canLinkOrderProcesses={canLinkOrderProcesses}\n      handleCopyPortfolio={handleCopyPortfolio}\n    />\n  ));\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TopToolbarTitle\n          title={formatMessage(portfolioMessages.portfoliosTitle)}\n        />\n        <PortfoliosPrimaryToolbar\n          filters={filters}\n          stateDispatch={stateDispatch}\n          debouncedFilter={debouncedFilter}\n          initialState={initialState}\n          meta={meta}\n          filterType={filterType}\n          handleFilterItems={handleFilterItems}\n          sortDirection={sortDirection}\n          handleSort={handleSort}\n          fetchPortfoliosWithState={fetchPortfoliosWithState}\n          isFetching={isFetching}\n          isFiltering={isFiltering}\n          canCreate={canCreate}\n        />\n      </TopToolbar>\n      <ContentGallery\n        items={galleryItems}\n        isLoading={isFetching || isFiltering}\n        renderEmptyState={() => (\n          <ContentGalleryEmptyState {...emptyStateProps} />\n        )}\n      />\n      {meta.count > 0 && (\n        <BottomPaginationContainer>\n          <AsyncPagination\n            meta={meta}\n            apiRequest={(_, options) =>\n              dispatch(fetchPortfoliosWithState(filters, options))\n            }\n            dropDirection=\"up\"\n          />\n        </BottomPaginationContainer>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Portfolios;\n","/* eslint-disable react/prop-types */\nimport React, { HTMLProps } from 'react';\nimport clsx from 'clsx';\n\nconst BottomPaginationContainer: React.ComponentType<HTMLProps<\n  HTMLDivElement\n>> = ({ children, className, ...props }) => (\n  <div\n    className={clsx(\n      'pf-u-p-lg pf-u-pt-md pf-u-pb-md global-primary-background pf-u-mt-auto',\n      className\n    )}\n    {...props}\n  >\n    {children}\n  </div>\n);\n\nexport default BottomPaginationContainer;\n","import { useRef, useEffect } from 'react';\n\nconst useIsMounted = () => {\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => (isMounted.current = false);\n  }, []);\n  return isMounted;\n};\n\nexport default useIsMounted;\n"],"sourceRoot":""}