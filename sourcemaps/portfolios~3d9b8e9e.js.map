{"version":3,"sources":["webpack:///./src/smart-components/common/async-pagination.tsx","webpack:///./src/presentational-components/shared/bottom-pagination-container.tsx","webpack:///./src/presentational-components/shared/conditional-link.tsx","webpack:///./src/presentational-components/shared/top-toolbar.tsx","webpack:///./src/smart-components/common/catalog-breadcrumbs.tsx","webpack:///./src/utilities/use-is-mounted.js","webpack:///./src/presentational-components/portfolio/portfolio-card-header.tsx","webpack:///./src/presentational-components/portfolio/porfolio-card.tsx","webpack:///./src/smart-components/portfolio/toolbars/portfolios-primary-toolbar.js","webpack:///./src/smart-components/portfolio/portfolios.js"],"names":["meta","limit","count","offset","apiProps","apiRequest","className","isCompact","props","perPage","itemCount","onPerPageSelect","_event","page","onSetPage","number","debounce","options","request","dropDirection","children","pathname","paddingBottom","breadcrumbs","rest","TopToolbarTitle","title","description","noData","component","h2","p","fragments","length","map","index","searchParams","undefined","nav","exact","key","showDivider","isActive","useIsMounted","isMounted","useRef","useEffect","current","id","to","portfolioName","portfolio_items","headerActions","TextContent","Text","h3","Badge","isRead","onClick","event","preventDefault","TO_DISPLAY","HeaderActions","portfolioId","handleCopyPortfolio","canLinkOrderProcesses","userCapabilities","share","copy","unshare","update","destroy","set_approval","formatMessage","isOpen","setOpen","dropdownItems","push","DropdownItem","portfolio","preserveHash","setApproval","orderProcessAction","setOrderProcess","preserveSearch","role","edit","delete","Dropdown","isPlain","onSelect","position","right","toggle","KebabToggle","onToggle","imageUrl","isDisabled","name","metadata","user_capabilities","statistics","shared_groups","approval_processes","search","ouiaId","CardHeader","small","DateFormat","date","updated_at","created_at","type","owner","toDisplay","CardFooter","Label","variant","color","approvalProcessSet","shared","chipCategories","labelMessages","sort_by","sortBy","sortByMapping","updated","created","PortfoliosPrimaryToolbar","filters","stateDispatch","debouncedFilter","initialState","filterType","handleFilterItems","sortDirection","handleSort","fetchPortfoliosWithState","isFetching","isFiltering","canCreate","dispatch","useDispatch","useFormatMessage","PrimaryToolbar","dedicatedAction","Button","create","activeFiltersConfig","Object","entries","filter","value","category","chips","Array","isArray","onDelete","_e","clearAll","chip","payload","newFilters","filterConfig","onChange","items","filterValues","label","placeholder","sortByConfig","direction","onSortChange","pagination","_","propTypes","PropTypes","shape","string","isRequired","func","any","object","bool","asyncFormValidator","defaultSettings","filteringCallback","then","SortByDirection","asc","portfoliosState","state","action","Portfolios","viewState","useInitialUriHash","useReducer","useSelector","portfolioReducer","portfolios","data","userPermissions","useContext","UserContext","permissions","history","useHistory","scrollToTop","insights","chrome","appNavClick","secondaryNav","copyPortfolio","PORTFOLIO_ROUTE","hasPermission","emptyStateProps","PrimaryAction","url","ADD_PORTFOLIO_ROUTE","filteringMessages","clearFilters","portfolioMessages","portfoliosNoData","noResults","portfoliosNoDataDescription","noResultsDescription","Icon","PlusCircleIcon","SearchIcon","galleryItems","item","portfoliosTitle","isLoading","renderEmptyState"],"mappings":"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","file":"js/portfolios~3d9b8e9e.5d228d72417475a07534.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\nimport debouncePromise from 'awesome-debounce-promise';\n\nimport { OnPerPageSelect, OnSetPage, Pagination } from '@patternfly/react-core';\n\nimport {\n  getCurrentPage,\n  getNewPage,\n  PaginationConfiguration\n} from '../../helpers/shared/pagination';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\n\nexport interface AsyncPaginationProps<T = any> extends AnyObject {\n  meta: PaginationConfiguration;\n  apiRequest: (...args: any[]) => Promise<T>;\n  apiProps?: any;\n  className?: string;\n  isCompact?: boolean;\n}\nconst AsyncPagination: React.ComponentType<AsyncPaginationProps> = ({\n  meta: { limit = 50, count = 0, offset = 0 },\n  apiProps,\n  apiRequest,\n  className = '',\n  isCompact = false,\n  ...props\n}) => {\n  const handleOnPerPageSelect: OnPerPageSelect = (_event, limit) =>\n    apiRequest(apiProps, {\n      offset,\n      limit\n    });\n\n  const handleSetPage: OnSetPage = (_event, number, debounce) => {\n    const options = {\n      offset: getNewPage(number, limit),\n      limit\n    };\n\n    const request = () => apiRequest(apiProps, options);\n    if (debounce) {\n      return debouncePromise(request, 250)();\n    }\n\n    return request();\n  };\n\n  return (\n    <div className={className}>\n      <Pagination\n        perPage={limit || 50}\n        itemCount={count || 0}\n        onPerPageSelect={handleOnPerPageSelect}\n        page={getCurrentPage(limit, offset)}\n        onSetPage={handleSetPage}\n        dropDirection=\"down\"\n        isCompact={isCompact}\n        {...props}\n      />\n    </div>\n  );\n};\n\nexport default AsyncPagination;\n","/* eslint-disable react/prop-types */\nimport React, { HTMLProps } from 'react';\nimport clsx from 'clsx';\n\nconst BottomPaginationContainer: React.ComponentType<HTMLProps<\n  HTMLDivElement\n>> = ({ children, className, ...props }) => (\n  <div\n    className={clsx(\n      'pf-u-p-lg pf-u-pt-md pf-u-pb-md global-primary-background pf-u-mt-auto',\n      className\n    )}\n    {...props}\n  >\n    {children}\n  </div>\n);\n\nexport default BottomPaginationContainer;\n","/* eslint-disable react/prop-types */\nimport React, { Fragment } from 'react';\nimport CatalogLink, {\n  CatalogLinkProps\n} from '../../smart-components/common/catalog-link';\n\nexport interface ConditionalLinkProps\n  extends Omit<CatalogLinkProps, 'pathname'> {\n  pathname?: string;\n}\nconst ConditionalLink: React.ComponentType<ConditionalLinkProps> = ({\n  children,\n  pathname,\n  ...props\n}) => (\n  <Fragment>\n    {pathname ? (\n      <CatalogLink pathname={pathname} {...props}>\n        {children}\n      </CatalogLink>\n    ) : (\n      children\n    )}\n  </Fragment>\n);\n\nexport default ConditionalLink;\n","/* eslint-disable react/prop-types */\nimport React, { Fragment, ReactNode } from 'react';\nimport {\n  LevelItem,\n  Text,\n  TextContent,\n  TextVariants\n} from '@patternfly/react-core';\nimport clsx from 'clsx';\nimport { ToolbarTitlePlaceholder } from './loader-placeholders';\nimport CatalogBreadcrumbs from '../../smart-components/common/catalog-breadcrumbs';\nimport {\n  TopToolbarWrapper,\n  TopToolbarTitleContainer\n} from '../styled-components/toolbars';\n\nexport interface TopToolbarProps {\n  paddingBottom?: boolean;\n  breadcrumbs?: boolean;\n}\nconst TopToolbar: React.ComponentType<TopToolbarProps> = ({\n  children,\n  paddingBottom = true,\n  breadcrumbs = true,\n  ...rest\n}) => (\n  <TopToolbarWrapper\n    className={`pf-u-pt-lg pf-u-pr-lg pf-u-pl-lg ${\n      paddingBottom ? 'pf-u-pb-lg' : ''\n    }`}\n    {...rest}\n  >\n    {breadcrumbs && (\n      <div className=\"pf-u-mb-md\">\n        {' '}\n        <CatalogBreadcrumbs />\n      </div>\n    )}\n    {children}\n  </TopToolbarWrapper>\n);\n\nexport default TopToolbar;\n\nexport interface TopToolbarTitleProps {\n  title?: React.ElementType;\n  description?: ReactNode;\n  noData?: boolean;\n}\nexport const TopToolbarTitle: React.ComponentType<TopToolbarTitleProps> = ({\n  title = <ToolbarTitlePlaceholder />,\n  description,\n  children,\n  noData,\n  ...rest\n}) => (\n  <Fragment>\n    <TopToolbarTitleContainer\n      className={clsx({ 'pf-u-mb-lg': !noData, 'flex-no-wrap': true })}\n      {...rest}\n    >\n      <LevelItem>\n        <TextContent>\n          <Text component={TextVariants.h2} className=\"pf-u-m-0 pf-u-mr-md\">\n            {title}\n          </Text>\n          {description && <Text component={TextVariants.p}>{description}</Text>}\n        </TextContent>\n      </LevelItem>\n      <LevelItem className=\"flex-item-no-wrap\">{children}</LevelItem>\n    </TopToolbarTitleContainer>\n  </Fragment>\n);\n","import React from 'react';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { useSelector } from 'react-redux';\nimport ConditionalLink from '../../presentational-components/shared/conditional-link';\nimport { BreadcrumbFragment } from '../../redux/reducers/breadcrumbs-reducer';\nimport { CatalogRootState } from '../../types/redux';\n\nconst CatalogBreadcrumbs: React.ComponentType = () => {\n  const fragments = useSelector<CatalogRootState, BreadcrumbFragment[]>(\n    ({ breadcrumbsReducer: { fragments } }) => fragments\n  );\n  if (fragments.length <= 1) {\n    return null;\n  }\n\n  return (\n    <Breadcrumb>\n      {fragments.map(({ title, pathname, searchParams }, index) => (\n        <ConditionalLink\n          pathname={!(fragments.length === index + 1) ? pathname : undefined}\n          searchParams={searchParams}\n          nav\n          exact\n          key={pathname}\n          className=\"pf-c-breadcrumb__item\"\n        >\n          <BreadcrumbItem\n            showDivider={index > 0}\n            isActive={fragments.length === index + 1}\n          >\n            {title}\n          </BreadcrumbItem>\n        </ConditionalLink>\n      ))}\n    </Breadcrumb>\n  );\n};\n\nexport default CatalogBreadcrumbs;\n","import { useRef, useEffect } from 'react';\n\nconst useIsMounted = () => {\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => (isMounted.current = false);\n  }, []);\n  return isMounted;\n};\n\nexport default useIsMounted;\n","/* eslint-disable react/prop-types */\nimport React, { ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Badge, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport EllipsisTextContainer from '../styled-components/ellipsis-text-container';\nimport { CatalogLinkTo } from '../../smart-components/common/catalog-link';\nimport { HeaderLevel, HeaderTitle } from '../shared/card-common';\n\nexport interface PortfolioCardHeaderProps {\n  id: string;\n  to: CatalogLinkTo;\n  portfolioName?: string;\n  portfolio_items: number;\n  headerActions: ReactNode;\n}\nconst PortfolioCardHeader: React.ComponentType<PortfolioCardHeaderProps> = ({\n  id,\n  to,\n  portfolioName,\n  portfolio_items,\n  headerActions = []\n}) => (\n  <HeaderLevel>\n    <HeaderTitle>\n      <TextContent>\n        <Link to={to} id={`portfolio-link-${id}`}>\n          <Text\n            title={portfolioName}\n            className=\"pf-u-mb-0\"\n            component={TextVariants.h3}\n          >\n            <EllipsisTextContainer>{portfolioName}</EllipsisTextContainer>\n          </Text>\n        </Link>\n      </TextContent>\n    </HeaderTitle>\n    <Badge isRead>{portfolio_items}</Badge>\n    <div onClick={(event) => event.preventDefault()}>{headerActions}</div>\n  </HeaderLevel>\n);\n\nexport default PortfolioCardHeader;\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\nimport ItemDetails from '../shared/card-common';\nimport {\n  CardHeader,\n  CardFooter,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  KebabToggle,\n  Text,\n  TextContent,\n  TextVariants,\n  Label\n} from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\nimport PortfolioCardHeader from './portfolio-card-header';\n\nimport CatalogLink from '../../smart-components/common/catalog-link';\nimport {\n  SHARE_PORTFOLIO_ROUTE,\n  EDIT_PORTFOLIO_WORKFLOW_ROUTE,\n  EDIT_PORTFOLIO_ROUTE,\n  REMOVE_PORTFOLIO_ROUTE,\n  PORTFOLIO_ROUTE,\n  EDIT_ORDER_PROCESS_ROUTE\n} from '../../constants/routes';\nimport {\n  StyledCard,\n  StyledGalleryItem\n} from '../styled-components/styled-gallery';\nimport { StyledCardBody } from '../styled-components/card';\nimport actionMessages from '../../messages/actions.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport orderProcessesMessages from '../../messages/order-processes.messages';\nimport { UserCapabilities, PortfolioMetadata } from '../../types/common-types';\n\nconst TO_DISPLAY = ['description'];\n\ninterface HeaderActionsProps {\n  portfolioId: string;\n  handleCopyPortfolio: (portfolioId: string) => void;\n  userCapabilities: UserCapabilities;\n  canLinkOrderProcesses: boolean;\n}\nconst HeaderActions: React.ComponentType<HeaderActionsProps> = ({\n  portfolioId,\n  handleCopyPortfolio,\n  canLinkOrderProcesses,\n  userCapabilities: { share, copy, unshare, update, destroy, set_approval }\n}) => {\n  const formatMessage = useFormatMessage();\n  const [isOpen, setOpen] = useState(false);\n  const dropdownItems = [];\n  if (share || unshare) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"share-portfolio-action\"\n        id=\"share-portfolio-action\"\n        component={\n          <CatalogLink\n            searchParams={{ portfolio: portfolioId }}\n            pathname={SHARE_PORTFOLIO_ROUTE}\n            preserveHash\n          >\n            {formatMessage(actionMessages.share)}\n          </CatalogLink>\n        }\n      />\n    );\n  }\n\n  if (copy) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"copy-portfolio-action\"\n        id=\"copy-portfolio-action\"\n        onClick={() => handleCopyPortfolio(portfolioId)}\n      >\n        {formatMessage(actionMessages.copy)}\n      </DropdownItem>\n    );\n  }\n\n  if (set_approval) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"workflow-portfolio-action\"\n        id=\"workflow-portfolio-action\"\n        component={\n          <CatalogLink\n            searchParams={{ portfolio: portfolioId }}\n            pathname={EDIT_PORTFOLIO_WORKFLOW_ROUTE}\n            preserveHash\n          >\n            {formatMessage(actionMessages.setApproval)}\n          </CatalogLink>\n        }\n      />\n    );\n  }\n\n  if (update && canLinkOrderProcesses) {\n    const orderProcessAction = formatMessage(\n      orderProcessesMessages.setOrderProcess\n    ) as string;\n    dropdownItems.push(\n      <DropdownItem\n        aria-label={orderProcessAction}\n        key=\"attach-order-processes\"\n        id=\"attach-order-processes\"\n        component={\n          <CatalogLink\n            preserveSearch\n            pathname={EDIT_ORDER_PROCESS_ROUTE}\n            searchParams={{ portfolio: portfolioId }}\n          >\n            {orderProcessAction}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (update) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"edit-portfolio-action\"\n        id=\"edit-portfolio-action\"\n        component={\n          <CatalogLink\n            searchParams={{ portfolio: portfolioId }}\n            pathname={EDIT_PORTFOLIO_ROUTE}\n            preserveHash\n          >\n            {formatMessage(actionMessages.edit)}\n          </CatalogLink>\n        }\n      />\n    );\n  }\n\n  if (destroy) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"remove-portfolio-action\"\n        id=\"remove-portfolio-action\"\n        component={\n          <CatalogLink\n            searchParams={{ portfolio: portfolioId }}\n            pathname={REMOVE_PORTFOLIO_ROUTE}\n            preserveHash\n          >\n            {formatMessage(actionMessages.delete)}\n          </CatalogLink>\n        }\n      />\n    );\n  }\n\n  return dropdownItems.length === 0 ? null : (\n    <Dropdown\n      key=\"portfolio-dropdown\"\n      id={`portfolio-${portfolioId}-dropdown`}\n      isOpen={isOpen}\n      isPlain\n      onSelect={() => setOpen(false)}\n      position={DropdownPosition.right}\n      toggle={\n        <KebabToggle\n          id={`portfolio-${portfolioId}-toggle`}\n          onToggle={(isOpen) => setOpen(isOpen)}\n        />\n      }\n      dropdownItems={dropdownItems}\n    />\n  );\n};\n\nexport interface PortfolioCardProps {\n  imageUrl?: string;\n  name?: string;\n  id: string;\n  updated_at?: string;\n  created_at: string;\n  owner?: string;\n  isDisabled?: boolean;\n  metadata: PortfolioMetadata;\n  handleCopyPortfolio: (portfolioId: string) => void;\n  canLinkOrderProcesses: boolean;\n}\nconst PortfolioCard: React.ComponentType<PortfolioCardProps> = ({\n  imageUrl,\n  isDisabled,\n  name,\n  id,\n  handleCopyPortfolio,\n  metadata: {\n    user_capabilities,\n    statistics: { shared_groups, approval_processes, portfolio_items }\n  },\n  canLinkOrderProcesses,\n  ...props\n}) => {\n  const formatMessage = useFormatMessage();\n  const to = {\n    pathname: PORTFOLIO_ROUTE,\n    search: `?portfolio=${id}`\n  };\n  return (\n    <StyledGalleryItem isDisabled={isDisabled}>\n      <StyledCard ouiaId={`portfolio-${id}`}>\n        <CardHeader>\n          <PortfolioCardHeader\n            id={id}\n            to={to}\n            portfolioName={name}\n            portfolio_items={portfolio_items || 0}\n            headerActions={\n              <HeaderActions\n                portfolioId={id}\n                userCapabilities={user_capabilities}\n                handleCopyPortfolio={handleCopyPortfolio}\n                canLinkOrderProcesses={canLinkOrderProcesses}\n              />\n            }\n          />\n        </CardHeader>\n        <StyledCardBody>\n          <TextContent className=\"pf-u-mb-md\">\n            <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n              Last updated&nbsp;\n              <DateFormat\n                date={props.updated_at || props.created_at}\n                type=\"relative\"\n              />\n            </Text>\n            <Text component={TextVariants.small}>by {props.owner}</Text>\n          </TextContent>\n          <ItemDetails\n            {...{ name, imageUrl, ...props }}\n            toDisplay={TO_DISPLAY}\n          />\n        </StyledCardBody>\n        <CardFooter>\n          {approval_processes && approval_processes > 0 && (\n            <Label variant=\"filled\" color=\"grey\">\n              {formatMessage(labelMessages.approvalProcessSet)}\n            </Label>\n          )}\n          &nbsp;\n          {shared_groups && shared_groups > 0 && (\n            <Label variant=\"filled\" color=\"grey\">\n              {formatMessage(labelMessages.shared)}\n            </Label>\n          )}\n        </CardFooter>\n      </StyledCard>\n    </StyledGalleryItem>\n  );\n};\n\nexport default PortfolioCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\n\nimport AsyncPagination from '../../common/async-pagination';\nimport CatalogLink from '../../common/catalog-link';\nimport { Button } from '@patternfly/react-core';\nimport labelMessages from '../../../messages/labels.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\n\nconst chipCategories = {\n  name: labelMessages.name,\n  owner: labelMessages.owner,\n  sort_by: labelMessages.sortBy\n};\n\nconst sortByMapping = {\n  name: labelMessages.name,\n  owner: labelMessages.owner,\n  updated_at: labelMessages.updated,\n  created_at: labelMessages.created\n};\n\nconst PortfoliosPrimaryToolbar = ({\n  filters,\n  stateDispatch,\n  debouncedFilter,\n  initialState,\n  meta,\n  filterType,\n  handleFilterItems,\n  sortDirection,\n  handleSort,\n  fetchPortfoliosWithState,\n  isFetching,\n  isFiltering,\n  canCreate\n}) => {\n  const dispatch = useDispatch();\n  const formatMessage = useFormatMessage();\n  if (meta.noData) {\n    return null;\n  }\n\n  return (\n    <PrimaryToolbar\n      {...(canCreate\n        ? {\n            dedicatedAction: (\n              <CatalogLink pathname=\"/portfolios/add-portfolio\">\n                <Button\n                  variant=\"primary\"\n                  id=\"create-portfolio\"\n                  ouiaId={'create-portfolio'}\n                  type=\"button\"\n                >\n                  {formatMessage(labelMessages.create)}\n                </Button>\n              </CatalogLink>\n            )\n          }\n        : {})}\n      activeFiltersConfig={{\n        filters: Object.entries(filters)\n          .filter(([, value]) => value && value.length > 0)\n          .map(([key, value]) => {\n            return {\n              category: formatMessage(chipCategories[key]),\n              type: key,\n              chips: Array.isArray(value)\n                ? value.map((name) => ({\n                    name\n                  }))\n                : [\n                    {\n                      name:\n                        key === 'sort_by'\n                          ? formatMessage(sortByMapping[value])\n                          : value\n                    }\n                  ]\n            };\n          }),\n        onDelete: (_e, [chip], clearAll) => {\n          if (clearAll) {\n            stateDispatch({\n              type: 'replaceFilterChip',\n              payload: initialState.filters\n            });\n            return debouncedFilter(\n              initialState.filters,\n              meta,\n              dispatch,\n              (isFiltering) =>\n                stateDispatch({\n                  type: 'setFilteringFlag',\n                  payload: isFiltering\n                })\n            );\n          }\n\n          const newFilters = { ...filters };\n          if (chip.type === 'state') {\n            newFilters[chip.type] = newFilters[chip.type].filter(\n              (value) => value !== chip.chips[0].name\n            );\n          } else {\n            newFilters[chip.type] = '';\n          }\n\n          stateDispatch({\n            type: 'replaceFilterChip',\n            payload: newFilters\n          });\n          debouncedFilter(newFilters, meta, dispatch, (isFiltering) =>\n            stateDispatch({\n              type: 'setFilteringFlag',\n              payload: isFiltering\n            })\n          );\n        }\n      }}\n      filterConfig={{\n        onChange: (_e, value) =>\n          stateDispatch({ type: 'setFilterType', payload: value }),\n        value: filterType,\n        items: [\n          {\n            filterValues: {\n              value: filters.name,\n              onChange: (_e, value) => handleFilterItems(value)\n            },\n            label: formatMessage(labelMessages.name),\n            value: 'name'\n          },\n          {\n            filterValues: {\n              value: filters.owner,\n              onChange: (_e, value) => handleFilterItems(value)\n            },\n            label: formatMessage(labelMessages.owner),\n            value: 'owner'\n          },\n          {\n            filterValues: {\n              value: filters.sort_by || 'name',\n              onChange: (_e, value) => handleFilterItems(value),\n              items: [\n                {\n                  label: formatMessage(labelMessages.name),\n                  value: 'name'\n                },\n                {\n                  label: formatMessage(labelMessages.owner),\n                  value: 'owner'\n                },\n                {\n                  label: formatMessage(labelMessages.created),\n                  value: 'created_at'\n                },\n                {\n                  label: formatMessage(labelMessages.updated),\n                  value: 'updated_at'\n                }\n              ]\n            },\n            placeholder: filters.sort_by\n              ? formatMessage(sortByMapping[filters.sort_by])\n              : formatMessage(labelMessages.name),\n            label: formatMessage(labelMessages.sortBy),\n            value: 'sort_by',\n            type: 'radio'\n          }\n        ]\n      }}\n      sortByConfig={{\n        direction: sortDirection,\n        onSortChange: (_event, direction) => handleSort(direction)\n      }}\n      pagination={\n        meta.count > 0 ? (\n          <AsyncPagination\n            isDisabled={isFetching || isFiltering}\n            meta={meta}\n            apiRequest={(_, options) =>\n              dispatch(fetchPortfoliosWithState(filters, options))\n            }\n            isCompact\n          />\n        ) : (\n          undefined\n        )\n      }\n    />\n  );\n};\n\nPortfoliosPrimaryToolbar.propTypes = {\n  filters: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    owner: PropTypes.string.isRequired,\n    sort_by: PropTypes.string\n  }).isRequired,\n  stateDispatch: PropTypes.func.isRequired,\n  debouncedFilter: PropTypes.func.isRequired,\n  initialState: PropTypes.shape({\n    filters: PropTypes.shape({ [PropTypes.string]: PropTypes.any }).isRequired\n  }).isRequired,\n  meta: PropTypes.object.isRequired,\n  filterType: PropTypes.string.isRequired,\n  handleFilterItems: PropTypes.func.isRequired,\n  sortDirection: PropTypes.string.isRequired,\n  handleSort: PropTypes.func.isRequired,\n  fetchPortfoliosWithState: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  isFiltering: PropTypes.bool.isRequired,\n  canCreate: PropTypes.bool\n};\n\nexport default PortfoliosPrimaryToolbar;\n","import React, { Fragment, useEffect, useReducer, useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { PlusCircleIcon, SearchIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\n\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport ContentGallery from '../content-gallery/content-gallery';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport {\n  fetchPortfoliosWithState,\n  copyPortfolio\n} from '../../redux/actions/portfolio-actions';\nimport PortfolioCard from '../../presentational-components/portfolio/porfolio-card';\nimport ContentGalleryEmptyState, {\n  EmptyStatePrimaryAction\n} from '../../presentational-components/shared/content-gallery-empty-state';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport AsyncPagination from '../common/async-pagination';\nimport BottomPaginationContainer from '../../presentational-components/shared/bottom-pagination-container';\nimport { ADD_PORTFOLIO_ROUTE, PORTFOLIO_ROUTE } from '../../constants/routes';\nimport UserContext from '../../user-context';\nimport { hasPermission } from '../../helpers/shared/helpers';\nimport useInitialUriHash from '../../routing/use-initial-uri-hash';\nimport filteringMessages from '../../messages/filtering.messages';\nimport portfolioMessages from '../../messages/portfolio.messages';\n\nimport { SortByDirection } from '@patternfly/react-table';\nimport useIsMounted from '../../utilities/use-is-mounted';\nimport PortfoliosPrimaryToolbar from './toolbars/portfolios-primary-toolbar';\nimport TopToolbar, {\n  TopToolbarTitle\n} from '../../presentational-components/shared/top-toolbar';\nimport useFormatMessage from '../../utilities/use-format-message';\n\nconst debouncedFilter = asyncFormValidator(\n  (filters, meta = defaultSettings, dispatch, filteringCallback) => {\n    filteringCallback(true);\n    dispatch(fetchPortfoliosWithState(filters, meta)).then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst initialState = {\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false,\n  filterType: 'name',\n  filters: {\n    name: '',\n    owner: '',\n    sort_by: undefined\n  },\n  sortDirection: SortByDirection.asc\n};\n\nconst changeFilters = (value, type, filters) => ({\n  ...filters,\n  [type]: value\n});\n\nconst portfoliosState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return {\n        ...state,\n        filters: changeFilters(action.payload, state.filterType, state.filters)\n      };\n    case 'replaceFilterChip':\n      return {\n        ...state,\n        sortDirection: SortByDirection.asc,\n        filters: action.payload\n      };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    case 'setFilterType':\n      return { ...state, filterType: action.payload };\n    case 'setSortBy':\n      return {\n        ...state,\n        sortDirection: action.payload,\n        filters: !state.filters.sort_by\n          ? { ...state.filters, sort_by: 'name' }\n          : state.filters\n      };\n  }\n\n  return state;\n};\n\nconst Portfolios = () => {\n  const formatMessage = useFormatMessage();\n  const viewState = useInitialUriHash();\n  const isMounted = useIsMounted();\n  const [\n    { isFetching, isFiltering, filters, filterType, sortDirection },\n    stateDispatch\n  ] = useReducer(portfoliosState, {\n    ...initialState,\n    ...viewState?.portfolio\n  });\n  const { data, meta } = useSelector(\n    ({ portfolioReducer: { portfolios } }) => portfolios\n  );\n  const dispatch = useDispatch();\n  const { permissions: userPermissions } = useContext(UserContext);\n  const history = useHistory();\n\n  useEffect(() => {\n    dispatch(\n      fetchPortfoliosWithState(filters, { ...meta, sortDirection })\n    ).then(() => stateDispatch({ type: 'setFetching', payload: false }));\n    scrollToTop();\n    insights.chrome.appNavClick({ id: 'portfolios', secondaryNav: true });\n  }, []);\n\n  const handleFilterItems = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      { ...filters, [filterType]: value },\n      { ...meta, offset: 0, sortDirection },\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering })\n    );\n  };\n\n  useEffect(() => {\n    if (isMounted && (!isFiltering || !isFetching)) {\n      handleFilterItems(filters[filterType]);\n    }\n  }, [sortDirection]);\n\n  const handleSort = (direction) =>\n    stateDispatch({ type: 'setSortBy', payload: direction });\n\n  const handleCopyPortfolio = (id) =>\n    dispatch(copyPortfolio(id)).then(({ id }) =>\n      history.push({\n        pathname: PORTFOLIO_ROUTE,\n        search: `?portfolio=${id}`\n      })\n    );\n\n  const canCreate = hasPermission(userPermissions, [\n    'catalog:portfolios:create'\n  ]);\n\n  const canLinkOrderProcesses = hasPermission(userPermissions, [\n    'catalog:order_processes:link'\n  ]);\n\n  const NoDataAction = () => (\n    <EmptyStatePrimaryAction\n      url={ADD_PORTFOLIO_ROUTE}\n      id=\"create-portfolio\"\n      label=\"Create\"\n      hasPermission={canCreate}\n    />\n  );\n  const FilterAction = () => (\n    <Button\n      ouiaId={'clear-filter'}\n      variant=\"link\"\n      onClick={() => handleFilterItems('')}\n    >\n      {formatMessage(filteringMessages.clearFilters)}\n    </Button>\n  );\n\n  const emptyStateProps = {\n    PrimaryAction: meta.noData ? NoDataAction : FilterAction,\n    title: meta.noData\n      ? formatMessage(portfolioMessages.portfoliosNoData)\n      : formatMessage(filteringMessages.noResults),\n    description: meta.noData\n      ? formatMessage(portfolioMessages.portfoliosNoDataDescription)\n      : formatMessage(filteringMessages.noResultsDescription),\n    Icon: meta.noData ? PlusCircleIcon : SearchIcon\n  };\n  const galleryItems = data.map((item) => (\n    <PortfolioCard\n      key={item.id}\n      ouiaId={`portfolio-${item.id}`}\n      {...item}\n      canLinkOrderProcesses={canLinkOrderProcesses}\n      handleCopyPortfolio={handleCopyPortfolio}\n    />\n  ));\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TopToolbarTitle\n          title={formatMessage(portfolioMessages.portfoliosTitle)}\n        />\n        <PortfoliosPrimaryToolbar\n          filters={filters}\n          stateDispatch={stateDispatch}\n          debouncedFilter={debouncedFilter}\n          initialState={initialState}\n          meta={meta}\n          filterType={filterType}\n          handleFilterItems={handleFilterItems}\n          sortDirection={sortDirection}\n          handleSort={handleSort}\n          fetchPortfoliosWithState={fetchPortfoliosWithState}\n          isFetching={isFetching}\n          isFiltering={isFiltering}\n          canCreate={canCreate}\n        />\n      </TopToolbar>\n      <ContentGallery\n        items={galleryItems}\n        isLoading={isFetching || isFiltering}\n        renderEmptyState={() => (\n          <ContentGalleryEmptyState {...emptyStateProps} />\n        )}\n      />\n      {meta.count > 0 && (\n        <BottomPaginationContainer>\n          <AsyncPagination\n            meta={meta}\n            apiRequest={(_, options) =>\n              dispatch(fetchPortfoliosWithState(filters, options))\n            }\n            dropDirection=\"up\"\n          />\n        </BottomPaginationContainer>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Portfolios;\n"],"sourceRoot":""}