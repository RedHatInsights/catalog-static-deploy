{"version":3,"sources":["webpack:///./src/utilities/async-form-validator.js","webpack:///./src/smart-components/common/async-pagination.js","webpack:///./src/presentational-components/shared/bottom-pagination-container.js","webpack:///./src/utilities/use-is-mounted.js","webpack:///./src/presentational-components/portfolio/portfolio-card-header.js","webpack:///./src/presentational-components/portfolio/porfolio-card.js","webpack:///./src/smart-components/portfolio/toolbars/portfolios-primary-toolbar.js","webpack:///./src/smart-components/portfolio/portfolios.js"],"names":["asyncFunction","debounceTime","options","onlyResolvesLast","awesomeDebouncePromise","AsyncPagination","meta","limit","count","offset","apiProps","apiRequest","className","isCompact","props","perPage","itemCount","onPerPageSelect","_event","page","getCurrentPage","onSetPage","number","debounce","getNewPage","request","debouncePromise","direction","propTypes","PropTypes","shape","isRequired","func","any","string","bool","defaultProps","BottomPaginationContainer","children","oneOfType","node","arrayOf","useIsMounted","isMounted","useRef","useEffect","current","HeaderTitle","styled","LevelItem","HeaderLevel","Level","PortfolioCardHeader","id","to","portfolioName","portfolio_items","headerActions","TextContent","Text","title","component","TextVariants","h3","Badge","isRead","onClick","event","preventDefault","pathname","search","TO_DISPLAY","HeaderActions","portfolioId","handleCopyPortfolio","userCapabilities","share","copy","unshare","update","destroy","set_approval","formatMessage","useFormatMessage","useState","isOpen","setOpen","dropdownItems","push","DropdownItem","key","searchParams","portfolio","SHARE_PORTFOLIO_ROUTE","preserveHash","actionMessages","EDIT_PORTFOLIO_WORKFLOW_ROUTE","setApproval","EDIT_PORTFOLIO_ROUTE","edit","REMOVE_PORTFOLIO_ROUTE","length","Dropdown","isPlain","onSelect","position","DropdownPosition","right","toggle","KebabToggle","onToggle","PortfolioCard","imageUrl","isDisabled","name","metadata","user_capabilities","statistics","shared_groups","PORTFOLIO_ROUTE","CardHeader","small","DateFormat","date","updated_at","created_at","type","owner","toDisplay","CardFooter","Label","variant","color","labelMessages","shared","history","object","chipCategories","sort_by","sortBy","sortByMapping","updated","created","PortfoliosPrimaryToolbar","filters","stateDispatch","debouncedFilter","initialState","filterType","handleFilterItems","sortDirection","handleSort","fetchPortfoliosWithState","isFetching","isFiltering","dispatch","useDispatch","noData","PrimaryToolbar","dedicatedAction","Button","create","activeFiltersConfig","Object","entries","filter","value","map","category","chips","Array","isArray","onDelete","_e","clearAll","chip","payload","newFilters","filterConfig","onChange","items","filterValues","label","placeholder","sortByConfig","onSortChange","pagination","_","undefined","asyncFormValidator","defaultSettings","filteringCallback","then","SortByDirection","asc","portfoliosState","state","action","Portfolios","viewState","useInitialUriHash","useReducer","useSelector","portfolioReducer","portfolios","data","userPermissions","useContext","UserContext","permissions","useHistory","scrollToTop","insights","chrome","appNavClick","secondaryNav","copyPortfolio","emptyStateProps","PrimaryAction","url","ADD_PORTFOLIO_ROUTE","hasPermission","filteringMessages","clearFilters","portfolioMessages","portfoliosNoData","noResults","description","portfoliosNoDataDescription","noResultsDescription","Icon","WrenchIcon","SearchIcon","galleryItems","item","portfoliosTitle","isLoading","renderEmptyState","dropDirection"],"mappings":"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","file":"js/portfolios~3d9b8e9e.a6bc8a017af502ef40d3.js","sourcesContent":["import awesomeDebouncePromise from 'awesome-debounce-promise';\n\nexport default (\n  asyncFunction,\n  debounceTime = 250,\n  options = { onlyResolvesLast: false }\n) => awesomeDebouncePromise(asyncFunction, debounceTime, options);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport debouncePromise from 'awesome-debounce-promise';\n\nimport { Pagination } from '@patternfly/react-core';\n\nimport { getCurrentPage, getNewPage } from '../../helpers/shared/pagination';\n\nconst AsyncPagination = ({\n  meta: { limit, count, offset },\n  apiProps,\n  apiRequest,\n  className,\n  isCompact,\n  ...props\n}) => {\n  const handleOnPerPageSelect = (_event, limit) =>\n    apiRequest(apiProps, {\n      offset,\n      limit\n    });\n\n  const handleSetPage = (_event, number, debounce) => {\n    const options = {\n      offset: getNewPage(number, limit),\n      limit\n    };\n\n    const request = () => apiRequest(apiProps, options);\n    if (debounce) {\n      return debouncePromise(request, 250)();\n    }\n\n    return request();\n  };\n\n  return (\n    <div className={className}>\n      <Pagination\n        perPage={limit || 50}\n        itemCount={count || 0}\n        onPerPageSelect={handleOnPerPageSelect}\n        page={getCurrentPage(limit, offset)}\n        onSetPage={handleSetPage}\n        direction=\"down\"\n        isCompact={isCompact}\n        {...props}\n      />\n    </div>\n  );\n};\n\nAsyncPagination.propTypes = {\n  meta: PropTypes.shape({\n    count: PropTypes.number,\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number.isRequired\n  }),\n  apiRequest: PropTypes.func.isRequired,\n  apiProps: PropTypes.any,\n  className: PropTypes.string,\n  isCompact: PropTypes.bool\n};\n\nAsyncPagination.defaultProps = {\n  meta: {\n    count: 0,\n    limit: 50,\n    offset: 0\n  },\n  className: '',\n  isCompact: false\n};\n\nexport default AsyncPagination;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst BottomPaginationContainer = ({ children }) => (\n  <div className=\"pf-u-p-lg pf-u-pt-md pf-u-pb-md global-primary-background pf-u-mt-auto\">\n    {children}\n  </div>\n);\n\nBottomPaginationContainer.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node)\n  ])\n};\n\nexport default BottomPaginationContainer;\n","import { useRef, useEffect } from 'react';\n\nconst useIsMounted = () => {\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => (isMounted.current = false);\n  }, []);\n  return isMounted;\n};\n\nexport default useIsMounted;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport {\n  Badge,\n  Level,\n  LevelItem,\n  Text,\n  TextContent,\n  TextVariants\n} from '@patternfly/react-core';\nimport EllipsisTextContainer from '../styled-components/ellipsis-text-container';\nimport styled from 'styled-components';\n\nconst HeaderTitle = styled(LevelItem)`\n  max-width: calc(100% - 80px);\n  width: calc(100% - 80px);\n`;\n\nconst HeaderLevel = styled(Level)`\n  width: 100%;\n`;\n\nconst PortfolioCardHeader = ({\n  id,\n  to,\n  portfolioName,\n  portfolio_items,\n  headerActions\n}) => (\n  <HeaderLevel>\n    <HeaderTitle>\n      <TextContent>\n        <Link to={to} id={`portfolio-link-${id}`}>\n          <Text\n            title={portfolioName}\n            className=\"pf-u-mb-0\"\n            component={TextVariants.h3}\n          >\n            <EllipsisTextContainer>{portfolioName}</EllipsisTextContainer>\n          </Text>\n        </Link>\n      </TextContent>\n    </HeaderTitle>\n    <Badge isRead>{portfolio_items}</Badge>\n    <div onClick={(event) => event.preventDefault()}>{headerActions}</div>\n  </HeaderLevel>\n);\n\nPortfolioCardHeader.propTypes = {\n  portfolioName: PropTypes.string.isRequired,\n  portfolio_items: PropTypes.number,\n  headerActions: PropTypes.node,\n  id: PropTypes.string,\n  to: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n    search: PropTypes.string.isRequired\n  }).isRequired\n};\n\nPortfolioCardHeader.defaultProps = {\n  headerActions: []\n};\n\nexport default PortfolioCardHeader;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ItemDetails from '../shared/card-common';\nimport {\n  CardHeader,\n  CardFooter,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  KebabToggle,\n  Text,\n  TextContent,\n  TextVariants,\n  Label\n} from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\nimport PortfolioCardHeader from './portfolio-card-header';\n\nimport CatalogLink from '../../smart-components/common/catalog-link';\nimport {\n  SHARE_PORTFOLIO_ROUTE,\n  EDIT_PORTFOLIO_WORKFLOW_ROUTE,\n  EDIT_PORTFOLIO_ROUTE,\n  REMOVE_PORTFOLIO_ROUTE,\n  PORTFOLIO_ROUTE\n} from '../../constants/routes';\nimport {\n  StyledCard,\n  StyledGalleryItem\n} from '../styled-components/styled-gallery';\nimport { StyledCardBody } from '../styled-components/card';\nimport actionMessages from '../../messages/actions.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\n\nconst TO_DISPLAY = ['description'];\n\nconst HeaderActions = ({\n  portfolioId,\n  handleCopyPortfolio,\n  userCapabilities: { share, copy, unshare, update, destroy, set_approval }\n}) => {\n  const formatMessage = useFormatMessage();\n  const [isOpen, setOpen] = useState(false);\n  const dropdownItems = [];\n  if (share || unshare) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"share-portfolio-action\"\n        id=\"share-portfolio-action\"\n        component={\n          <CatalogLink\n            searchParams={{ portfolio: portfolioId }}\n            pathname={SHARE_PORTFOLIO_ROUTE}\n            preserveHash\n          >\n            {formatMessage(actionMessages.share)}\n          </CatalogLink>\n        }\n      />\n    );\n  }\n\n  if (copy) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"copy-portfolio-action\"\n        id=\"copy-portfolio-action\"\n        onClick={() => handleCopyPortfolio(portfolioId)}\n      >\n        {formatMessage(actionMessages.copy)}\n      </DropdownItem>\n    );\n  }\n\n  if (set_approval) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"workflow-portfolio-action\"\n        id=\"workflow-portfolio-action\"\n        component={\n          <CatalogLink\n            searchParams={{ portfolio: portfolioId }}\n            pathname={EDIT_PORTFOLIO_WORKFLOW_ROUTE}\n            preserveHash\n          >\n            {formatMessage(actionMessages.setApproval)}\n          </CatalogLink>\n        }\n      />\n    );\n  }\n\n  if (update) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"edit-portfolio-action\"\n        id=\"edit-portfolio-action\"\n        component={\n          <CatalogLink\n            searchParams={{ portfolio: portfolioId }}\n            pathname={EDIT_PORTFOLIO_ROUTE}\n            preserveHash\n          >\n            {formatMessage(actionMessages.edit)}\n          </CatalogLink>\n        }\n      />\n    );\n  }\n\n  if (destroy) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"remove-portfolio-action\"\n        id=\"remove-portfolio-action\"\n        component={\n          <CatalogLink\n            searchParams={{ portfolio: portfolioId }}\n            pathname={REMOVE_PORTFOLIO_ROUTE}\n            preserveHash\n          >\n            {formatMessage(actionMessages.delete)}\n          </CatalogLink>\n        }\n      />\n    );\n  }\n\n  return dropdownItems.length === 0 ? null : (\n    <Dropdown\n      key=\"portfolio-dropdown\"\n      id={`portfolio-${portfolioId}-dropdown`}\n      isOpen={isOpen}\n      isPlain\n      onSelect={() => setOpen(false)}\n      position={DropdownPosition.right}\n      toggle={\n        <KebabToggle\n          id={`portfolio-${portfolioId}-toggle`}\n          onToggle={(isOpen) => setOpen(isOpen)}\n        />\n      }\n      dropdownItems={dropdownItems}\n    />\n  );\n};\n\nHeaderActions.propTypes = {\n  portfolioId: PropTypes.string.isRequired,\n  userCapabilities: PropTypes.shape({\n    destroy: PropTypes.bool,\n    update: PropTypes.bool,\n    share: PropTypes.bool,\n    unshare: PropTypes.bool,\n    set_approval: PropTypes.bool,\n    copy: PropTypes.bool\n  }).isRequired,\n  handleCopyPortfolio: PropTypes.func.isRequired\n};\n\nconst PortfolioCard = ({\n  imageUrl,\n  isDisabled,\n  name,\n  id,\n  handleCopyPortfolio,\n  metadata: {\n    user_capabilities,\n    statistics: { shared_groups, portfolio_items }\n  },\n  ...props\n}) => {\n  const formatMessage = useFormatMessage();\n  const to = {\n    pathname: PORTFOLIO_ROUTE,\n    search: `?portfolio=${id}`\n  };\n  return (\n    <StyledGalleryItem isDisabled={isDisabled}>\n      <StyledCard>\n        <CardHeader>\n          <PortfolioCardHeader\n            id={id}\n            to={to}\n            portfolioName={name}\n            portfolio_items={portfolio_items || 0}\n            headerActions={\n              <HeaderActions\n                portfolioId={id}\n                userCapabilities={user_capabilities}\n                handleCopyPortfolio={handleCopyPortfolio}\n              />\n            }\n          />\n        </CardHeader>\n        <StyledCardBody>\n          <TextContent className=\"pf-u-mb-md\">\n            <Text component={TextVariants.small} className=\"pf-i-mb-sm\">\n              Last updated&nbsp;\n              <DateFormat\n                date={props.updated_at || props.created_at}\n                type=\"relative\"\n              />\n            </Text>\n            <Text component={TextVariants.small}>{props.owner}</Text>\n          </TextContent>\n          <ItemDetails\n            {...{ name, imageUrl, ...props }}\n            toDisplay={TO_DISPLAY}\n          />\n        </StyledCardBody>\n        <CardFooter>\n          {shared_groups > 0 && (\n            <Label variant=\"filled\" color=\"blue\">\n              {formatMessage(labelMessages.shared)}\n            </Label>\n          )}\n        </CardFooter>\n      </StyledCard>\n    </StyledGalleryItem>\n  );\n};\n\nPortfolioCard.propTypes = {\n  history: PropTypes.object,\n  imageUrl: PropTypes.string,\n  name: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  updated_at: PropTypes.string,\n  created_at: PropTypes.string.isRequired,\n  owner: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  metadata: PropTypes.shape({\n    user_capabilities: PropTypes.object.isRequired,\n    statistics: PropTypes.shape({\n      shared_groups: PropTypes.number,\n      portfolio_items: PropTypes.number\n    }).isRequired\n  }).isRequired,\n  handleCopyPortfolio: PropTypes.func.isRequired\n};\n\nexport default PortfolioCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\n\nimport AsyncPagination from '../../common/async-pagination';\nimport CatalogLink from '../../common/catalog-link';\nimport { Button } from '@patternfly/react-core';\nimport labelMessages from '../../../messages/labels.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\n\nconst chipCategories = {\n  name: labelMessages.name,\n  owner: labelMessages.owner,\n  sort_by: labelMessages.sortBy\n};\n\nconst sortByMapping = {\n  name: labelMessages.name,\n  owner: labelMessages.owner,\n  updated_at: labelMessages.updated,\n  created_at: labelMessages.created\n};\n\nconst PortfoliosPrimaryToolbar = ({\n  filters,\n  stateDispatch,\n  debouncedFilter,\n  initialState,\n  meta,\n  filterType,\n  handleFilterItems,\n  sortDirection,\n  handleSort,\n  fetchPortfoliosWithState,\n  isFetching,\n  isFiltering\n}) => {\n  const dispatch = useDispatch();\n  const formatMessage = useFormatMessage();\n  if (meta.noData) {\n    return null;\n  }\n\n  return (\n    <PrimaryToolbar\n      dedicatedAction={\n        <CatalogLink pathname=\"/portfolios/add-portfolio\">\n          <Button variant=\"primary\" type=\"button\">\n            {formatMessage(labelMessages.create)}\n          </Button>\n        </CatalogLink>\n      }\n      activeFiltersConfig={{\n        filters: Object.entries(filters)\n          .filter(([, value]) => value && value.length > 0)\n          .map(([key, value]) => {\n            return {\n              category: formatMessage(chipCategories[key]),\n              type: key,\n              chips: Array.isArray(value)\n                ? value.map((name) => ({\n                    name\n                  }))\n                : [\n                    {\n                      name:\n                        key === 'sort_by'\n                          ? formatMessage(sortByMapping[value])\n                          : value\n                    }\n                  ]\n            };\n          }),\n        onDelete: (_e, [chip], clearAll) => {\n          if (clearAll) {\n            stateDispatch({\n              type: 'replaceFilterChip',\n              payload: initialState.filters\n            });\n            return debouncedFilter(\n              initialState.filters,\n              meta,\n              dispatch,\n              (isFiltering) =>\n                stateDispatch({\n                  type: 'setFilteringFlag',\n                  payload: isFiltering\n                })\n            );\n          }\n\n          const newFilters = { ...filters };\n          if (chip.type === 'state') {\n            newFilters[chip.type] = newFilters[chip.type].filter(\n              (value) => value !== chip.chips[0].name\n            );\n          } else {\n            newFilters[chip.type] = '';\n          }\n\n          stateDispatch({\n            type: 'replaceFilterChip',\n            payload: newFilters\n          });\n          debouncedFilter(newFilters, meta, dispatch, (isFiltering) =>\n            stateDispatch({\n              type: 'setFilteringFlag',\n              payload: isFiltering\n            })\n          );\n        }\n      }}\n      filterConfig={{\n        onChange: (_e, value) =>\n          stateDispatch({ type: 'setFilterType', payload: value }),\n        value: filterType,\n        items: [\n          {\n            filterValues: {\n              value: filters.name,\n              onChange: (_e, value) => handleFilterItems(value)\n            },\n            label: formatMessage(labelMessages.name),\n            value: 'name'\n          },\n          {\n            filterValues: {\n              value: filters.owner,\n              onChange: (_e, value) => handleFilterItems(value)\n            },\n            label: formatMessage(labelMessages.owner),\n            value: 'owner'\n          },\n          {\n            filterValues: {\n              value: filters.sort_by || 'name',\n              onChange: (_e, value) => handleFilterItems(value),\n              items: [\n                {\n                  label: formatMessage(labelMessages.name),\n                  value: 'name'\n                },\n                {\n                  label: formatMessage(labelMessages.owner),\n                  value: 'owner'\n                },\n                {\n                  label: formatMessage(labelMessages.created),\n                  value: 'created_at'\n                },\n                {\n                  label: formatMessage(labelMessages.updated),\n                  value: 'updated_at'\n                }\n              ]\n            },\n            placeholder: filters.sort_by\n              ? formatMessage(sortByMapping[filters.sort_by])\n              : formatMessage(labelMessages.name),\n            label: formatMessage(labelMessages.sortBy),\n            value: 'sort_by',\n            type: 'radio'\n          }\n        ]\n      }}\n      sortByConfig={{\n        direction: sortDirection,\n        onSortChange: (_event, direction) => handleSort(direction)\n      }}\n      pagination={\n        meta.count > 0 ? (\n          <AsyncPagination\n            isDisabled={isFetching || isFiltering}\n            meta={meta}\n            apiRequest={(_, options) =>\n              dispatch(fetchPortfoliosWithState(filters, options))\n            }\n            isCompact\n          />\n        ) : (\n          undefined\n        )\n      }\n    />\n  );\n};\n\nPortfoliosPrimaryToolbar.propTypes = {\n  filters: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    owner: PropTypes.string.isRequired,\n    sort_by: PropTypes.string\n  }).isRequired,\n  stateDispatch: PropTypes.func.isRequired,\n  debouncedFilter: PropTypes.func.isRequired,\n  initialState: PropTypes.shape({\n    filters: PropTypes.shape({ [PropTypes.string]: PropTypes.any }).isRequired\n  }).isRequired,\n  meta: PropTypes.object.isRequired,\n  filterType: PropTypes.string.isRequired,\n  handleFilterItems: PropTypes.func.isRequired,\n  sortDirection: PropTypes.string.isRequired,\n  handleSort: PropTypes.func.isRequired,\n  fetchPortfoliosWithState: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  isFiltering: PropTypes.bool.isRequired\n};\n\nexport default PortfoliosPrimaryToolbar;\n","import React, { Fragment, useEffect, useReducer, useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { SearchIcon, WrenchIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\n\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport ContentGallery from '../content-gallery/content-gallery';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport {\n  fetchPortfoliosWithState,\n  copyPortfolio\n} from '../../redux/actions/portfolio-actions';\nimport PortfolioCard from '../../presentational-components/portfolio/porfolio-card';\nimport ContentGalleryEmptyState, {\n  EmptyStatePrimaryAction\n} from '../../presentational-components/shared/content-gallery-empty-state';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport AsyncPagination from '../common/async-pagination';\nimport BottomPaginationContainer from '../../presentational-components/shared/bottom-pagination-container';\nimport { ADD_PORTFOLIO_ROUTE, PORTFOLIO_ROUTE } from '../../constants/routes';\nimport UserContext from '../../user-context';\nimport { hasPermission } from '../../helpers/shared/helpers';\nimport useInitialUriHash from '../../routing/use-initial-uri-hash';\nimport filteringMessages from '../../messages/filtering.messages';\nimport portfolioMessages from '../../messages/portfolio.messages';\n\nimport { SortByDirection } from '@patternfly/react-table';\nimport useIsMounted from '../../utilities/use-is-mounted';\nimport PortfoliosPrimaryToolbar from './toolbars/portfolios-primary-toolbar';\nimport TopToolbar, {\n  TopToolbarTitle\n} from '../../presentational-components/shared/top-toolbar';\nimport useFormatMessage from '../../utilities/use-format-message';\n\nconst debouncedFilter = asyncFormValidator(\n  (filters, meta = defaultSettings, dispatch, filteringCallback) => {\n    filteringCallback(true);\n    dispatch(fetchPortfoliosWithState(filters, meta)).then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst initialState = {\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false,\n  filterType: 'name',\n  filters: {\n    name: '',\n    owner: '',\n    sort_by: undefined\n  },\n  sortDirection: SortByDirection.asc\n};\n\nconst changeFilters = (value, type, filters) => ({\n  ...filters,\n  [type]: value\n});\n\nconst portfoliosState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return {\n        ...state,\n        filters: changeFilters(action.payload, state.filterType, state.filters)\n      };\n    case 'replaceFilterChip':\n      return { ...state, filters: action.payload };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    case 'setFilterType':\n      return { ...state, filterType: action.payload };\n    case 'setSortBy':\n      return {\n        ...state,\n        sortDirection: action.payload,\n        filters: !state.filters.sort_by\n          ? { ...state.filters, sort_by: 'name' }\n          : state.filters\n      };\n  }\n\n  return state;\n};\n\nconst Portfolios = () => {\n  const formatMessage = useFormatMessage();\n  const viewState = useInitialUriHash();\n  const isMounted = useIsMounted();\n  const [\n    { isFetching, isFiltering, filters, filterType, sortDirection },\n    stateDispatch\n  ] = useReducer(portfoliosState, {\n    ...initialState,\n    ...viewState?.portfolio\n  });\n  const { data, meta } = useSelector(\n    ({ portfolioReducer: { portfolios } }) => portfolios\n  );\n  const dispatch = useDispatch();\n  const { permissions: userPermissions } = useContext(UserContext);\n  const history = useHistory();\n\n  useEffect(() => {\n    dispatch(\n      fetchPortfoliosWithState(filters, { ...meta, sortDirection })\n    ).then(() => stateDispatch({ type: 'setFetching', payload: false }));\n    scrollToTop();\n    insights.chrome.appNavClick({ id: 'portfolios', secondaryNav: true });\n  }, []);\n\n  const handleFilterItems = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      { ...filters, [filterType]: value },\n      { ...meta, offset: 0, sortDirection },\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering })\n    );\n  };\n\n  useEffect(() => {\n    if (isMounted && (!isFiltering || !isFetching)) {\n      handleFilterItems(filters[filterType]);\n    }\n  }, [sortDirection]);\n\n  const handleSort = (direction) =>\n    stateDispatch({ type: 'setSortBy', payload: direction });\n\n  const handleCopyPortfolio = (id) =>\n    dispatch(copyPortfolio(id)).then(({ id }) =>\n      history.push({\n        pathname: PORTFOLIO_ROUTE,\n        search: `?portfolio=${id}`\n      })\n    );\n\n  const NoDataAction = () => (\n    <EmptyStatePrimaryAction\n      url={ADD_PORTFOLIO_ROUTE}\n      id=\"create-portfolio\"\n      label=\"Create portfolio\"\n      hasPermission={hasPermission(userPermissions, [\n        'catalog:portfolios:create'\n      ])}\n    />\n  );\n\n  const FilterAction = () => (\n    <Button variant=\"link\" onClick={() => handleFilterItems('')}>\n      {formatMessage(filteringMessages.clearFilters)}\n    </Button>\n  );\n\n  const emptyStateProps = {\n    PrimaryAction: meta.noData ? NoDataAction : FilterAction,\n    title: meta.noData\n      ? formatMessage(portfolioMessages.portfoliosNoData)\n      : formatMessage(filteringMessages.noResults),\n    description: meta.noData\n      ? formatMessage(portfolioMessages.portfoliosNoDataDescription)\n      : formatMessage(filteringMessages.noResultsDescription),\n    Icon: meta.noData ? WrenchIcon : SearchIcon\n  };\n\n  const galleryItems = data.map((item) => (\n    <PortfolioCard\n      key={item.id}\n      {...item}\n      handleCopyPortfolio={handleCopyPortfolio}\n    />\n  ));\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TopToolbarTitle\n          title={formatMessage(portfolioMessages.portfoliosTitle)}\n        />\n        <PortfoliosPrimaryToolbar\n          filters={filters}\n          stateDispatch={stateDispatch}\n          debouncedFilter={debouncedFilter}\n          initialState={initialState}\n          meta={meta}\n          filterType={filterType}\n          handleFilterItems={handleFilterItems}\n          sortDirection={sortDirection}\n          handleSort={handleSort}\n          fetchPortfoliosWithState={fetchPortfoliosWithState}\n          isFetching={isFetching}\n          isFiltering={isFiltering}\n        />\n      </TopToolbar>\n      <ContentGallery\n        items={galleryItems}\n        isLoading={isFetching || isFiltering}\n        renderEmptyState={() => (\n          <ContentGalleryEmptyState {...emptyStateProps} />\n        )}\n      />\n      {meta.count > 0 && (\n        <BottomPaginationContainer>\n          <AsyncPagination\n            meta={meta}\n            apiRequest={(_, options) =>\n              dispatch(fetchPortfoliosWithState(filters, options))\n            }\n            dropDirection=\"up\"\n          />\n        </BottomPaginationContainer>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Portfolios;\n"],"sourceRoot":""}