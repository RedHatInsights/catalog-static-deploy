{"version":3,"file":"js/2579.1837ab646d4da3b4cceb.js","mappings":"iLA0BaA,GALC,KAKuB,CACnC,iBAAkB,CAAC,YAGRC,IAAc,MACxB,MAAkB,SACjBC,GACc,OAAAA,IAAWC,iBAAiBC,kBAAkBC,MAC9D,EAAC,MAAuB,SACtBH,GACc,OAAAA,IAAWC,iBAAiBG,cAAcA,cAAcD,MACxE,EAAC,MAAoB,WAAc,qBACnC,EAAC,MAAqB,WAAc,sBACpC,EAAC,MAAiB,SAChBH,GACc,OAAAA,IAAWK,gBAAgBC,iBAAiBH,MAC5D,EAAC,MAAmC,SAClCH,GACc,OAAAA,IAAWK,gBAAgBE,gBAAgBC,QAAQL,MACnE,EAAC,MAAc,SACbH,GAEM,MAA2BA,IAAWS,aAAaC,YAAjDN,EAAa,gBAAEO,EAAK,QAC5B,OAAUP,EAAcD,KAAI,MAAMQ,EAAMC,IAE1C,EAAC,MAA4B,WAAc,sB,GAGhCC,IAAe,MACzB,MAAkB,CACjBC,SAAU,KACVC,MAAO,aACPC,aAAc,IAEhB,EAAC,MAAiB,CAChBF,SAAU,KACVC,MAAO,YACPC,aAAc,IAEhB,EAAC,MAAc,CACbF,SAAU,KACVC,MAAO,SACPC,aAAc,I,oSCzDLC,EAAiC,SAC5CH,EACAI,GACG,YAFH,IAAAJ,IAAAA,EAAA,SACA,IAAAI,IAAAA,EAAA,IACG,SACHC,EACAnB,GAEA,GAAwB,IAApBc,EAASM,OACX,OAAOD,EAAS,CAAEE,KAAM,KAAwBC,QAAS,KAG3D,IAAIC,EAAST,EACVU,QAAQ,MAAO,IACfC,MAAM,KACNC,QAA6B,SAACC,EAAKC,EAAMC,G,MAClCf,GACJe,EAAQ,GAAKF,EAAIE,EAAQ,GAAKF,EAAIE,EAAQ,GAAGf,SAAW,IAAE,IACxDc,EAEEE,EAAiB/B,EACrBe,GAEF,IAAKgB,EACH,OAAOH,EAGT,IAAMX,EAAe,EAAH,KACZa,EAAQ,GAAKF,EAAIE,EAAQ,GAAGb,cAC5BE,EAAOU,KAAO,MAAIA,GAAOV,EAAOU,GAAK,GAAK,IAQhD,OANK9B,EAAoC8B,IACtC9B,EAAoC8B,GAAMG,SAAQ,SAACC,GAClDhB,EAAagB,GAAOd,EAAOc,MAIxB,EAAP,KACKL,GAAG,CACN,CACEb,SAAQ,EACRE,aAAY,EACZD,MAAOe,EAAc9B,QAGxB,IAKL,OAJIuB,EAAOH,OAAS,GAAMP,EAA8BU,EAAO,GAAGT,YAChES,EAAS,EAAH,CAAKV,EAA8BU,EAAO,GAAGT,WAAcS,IAG5DJ,EAAS,CAAEE,KAAM,KAAwBC,QAASC,MCvB3D,QA7BuB,SACrBU,QAAA,IAAAA,IAAAA,EAAA,IAMA,IAAMd,GAAW,IAAAe,eACX,GAAuB,IAAAC,eAArBrB,EAAQ,WAAEI,EAAM,SACxB,GAA8B,IAA1Be,EAAeb,OACjB,OAAOD,EACJF,EAA+B,GAAI,KAIxC,IAAMD,EAAe,IAAIoB,gBAAgBlB,GACnCmB,EAA0B,GAShC,OARArB,EAAae,SAAQ,SAACO,EAAON,GAC3BK,EAAaL,GAAOM,MAGtB,IAAAC,YAAU,WACRpB,EAASF,EAA+BH,EAAUuB,M,+EACjD,EAACvB,GAAamB,IAEV,WACL,OAAAd,EAAUF,EAA+B,GAAI","sources":["webpack:///./src/helpers/shared/breadcrumbs-creators.ts","webpack:///./src/redux/actions/breadcrumbs-actions.ts","webpack:///./src/utilities/use-breadcrumbs.ts"],"sourcesContent":["import {\n  PORTFOLIOS_ROUTE,\n  PORTFOLIO_ROUTE,\n  PORTFOLIO_ITEM_ROUTE,\n  ORDER_ROUTE,\n  PLATFORM_ROUTE,\n  PLATFORM_SERVICE_OFFERINGS_ROUTE,\n  PLATFORMS_ROUTE,\n  ORDERS_ROUTE,\n  EDIT_SURVEY_ROUTE,\n  ADD_PRODUCTS_ROUTE,\n  PORTFOLIO_ITEM_ROUTE_EDIT\n} from '../../constants/routes';\nimport { PortfolioReducerState } from '../../redux/reducers/portfolio-reducer';\nimport { ReactNode } from 'react';\nimport { PlatformReducerState } from '../../redux/reducers/platform-reducer';\nimport { OrderReducerState } from '../../redux/reducers/order-reducer';\n\nexport const BASE_PORTFOLIO_FRAGMENTS = [\n  {\n    title: 'Portfolios',\n    pathname: PORTFOLIOS_ROUTE,\n    searchParams: {}\n  }\n];\n\nexport const ENTITIES_EXTRA_PARAMS = {\n  'portfolio-item': ['source']\n};\n\nexport const FRAGMENT_TITLE = {\n  [PORTFOLIO_ROUTE]: (\n    getState: () => { portfolioReducer: PortfolioReducerState }\n  ): ReactNode => getState().portfolioReducer.selectedPortfolio.name,\n  [PORTFOLIO_ITEM_ROUTE]: (\n    getState: () => { portfolioReducer: PortfolioReducerState }\n  ): ReactNode => getState().portfolioReducer.portfolioItem.portfolioItem.name,\n  [EDIT_SURVEY_ROUTE]: (): string => 'Edit survey',\n  [ADD_PRODUCTS_ROUTE]: (): string => 'Add products',\n  [PLATFORM_ROUTE]: (\n    getState: () => { platformReducer: PlatformReducerState }\n  ): ReactNode => getState().platformReducer.selectedPlatform.name,\n  [PLATFORM_SERVICE_OFFERINGS_ROUTE]: (\n    getState: () => { platformReducer: PlatformReducerState }\n  ): ReactNode => getState().platformReducer.serviceOffering.service.name,\n  [ORDER_ROUTE]: (\n    getState: () => { orderReducer: OrderReducerState }\n  ): ReactNode => {\n    const { portfolioItem, order } = getState().orderReducer.orderDetail;\n    return `${portfolioItem.name} # ${order.id}`;\n  },\n  [PORTFOLIO_ITEM_ROUTE_EDIT]: (): string => 'Edit product'\n};\n\nexport const FRAGMENT_PREFIX = {\n  [PORTFOLIO_ROUTE]: {\n    pathname: PORTFOLIOS_ROUTE,\n    title: 'Portfolios',\n    searchParams: {}\n  },\n  [PLATFORM_ROUTE]: {\n    pathname: PLATFORMS_ROUTE,\n    title: 'Platforms',\n    searchParams: {}\n  },\n  [ORDER_ROUTE]: {\n    pathname: ORDERS_ROUTE,\n    title: 'Orders',\n    searchParams: {}\n  }\n};\n","import { INITIALIZE_BREADCRUMBS } from '../action-types';\nimport {\n  FRAGMENT_TITLE,\n  ENTITIES_EXTRA_PARAMS,\n  FRAGMENT_PREFIX\n} from '../../helpers/shared/breadcrumbs-creators';\nimport { Dispatch } from 'redux';\nimport { BreadcrumbFragment } from '../reducers/breadcrumbs-reducer';\nimport { GetReduxState } from '../../types/redux';\nimport { AnyObject, ReduxAction } from '../../types/common-types';\n\nexport const createBreadcrumbsFromLocations = (\n  pathname = '',\n  search: AnyObject = {}\n) => (\n  dispatch: Dispatch,\n  getState: GetReduxState\n): ReduxAction<BreadcrumbFragment[]> => {\n  if (pathname.length === 0) {\n    return dispatch({ type: INITIALIZE_BREADCRUMBS, payload: [] });\n  }\n\n  let result = pathname\n    .replace(/^\\//, '')\n    .split('/')\n    .reduce<BreadcrumbFragment[]>((acc, curr, index) => {\n      const pathname = `${\n        index > 0 && acc[index - 1] ? acc[index - 1].pathname : ''\n      }/${curr}`;\n\n      const generateTitle = (FRAGMENT_TITLE[\n        pathname as keyof typeof FRAGMENT_TITLE\n      ] as unknown) as (getState: GetReduxState) => string;\n      if (!generateTitle) {\n        return acc;\n      }\n\n      const searchParams = {\n        ...(index > 0 && acc[index - 1].searchParams),\n        ...(search[curr] ? { [curr]: search[curr] } : {})\n      };\n      if ((ENTITIES_EXTRA_PARAMS as AnyObject)[curr]) {\n        (ENTITIES_EXTRA_PARAMS as AnyObject)[curr].forEach((key: string) => {\n          searchParams[key] = search[key];\n        });\n      }\n\n      return [\n        ...acc,\n        {\n          pathname,\n          searchParams,\n          title: generateTitle(getState)\n        }\n      ];\n    }, []);\n  if (result.length > 0 && (FRAGMENT_PREFIX as AnyObject)[result[0].pathname]) {\n    result = [(FRAGMENT_PREFIX as AnyObject)[result[0].pathname], ...result];\n  }\n\n  return dispatch({ type: INITIALIZE_BREADCRUMBS, payload: result });\n};\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { createBreadcrumbsFromLocations } from '../redux/actions/breadcrumbs-actions';\nimport { INITIALIZE_BREADCRUMBS } from '../redux/action-types';\nimport { AnyObject, ReduxAction } from '../types/common-types';\nimport { AnyAction } from 'redux';\n\nconst useBreadcrumbs = (\n  updateTriggers: any[] = []\n):\n  | (() => ReduxAction<{\n      type: typeof INITIALIZE_BREADCRUMBS;\n    }>)\n  | ReduxAction<{ type: typeof INITIALIZE_BREADCRUMBS }> => {\n  const dispatch = useDispatch();\n  const { pathname, search } = useLocation();\n  if (updateTriggers.length === 0) {\n    return dispatch(\n      (createBreadcrumbsFromLocations('', {}) as unknown) as AnyAction\n    );\n  }\n\n  const searchParams = new URLSearchParams(search);\n  const searchObject: AnyObject = {};\n  searchParams.forEach((value, key) => {\n    searchObject[key] = value;\n  });\n\n  useEffect(() => {\n    dispatch(createBreadcrumbsFromLocations(pathname, searchObject));\n  }, [pathname, ...updateTriggers]);\n\n  return () =>\n    dispatch((createBreadcrumbsFromLocations('', {}) as unknown) as AnyAction);\n};\n\nexport default useBreadcrumbs;\n"],"names":["ENTITIES_EXTRA_PARAMS","FRAGMENT_TITLE","getState","portfolioReducer","selectedPortfolio","name","portfolioItem","platformReducer","selectedPlatform","serviceOffering","service","orderReducer","orderDetail","order","id","FRAGMENT_PREFIX","pathname","title","searchParams","createBreadcrumbsFromLocations","search","dispatch","length","type","payload","result","replace","split","reduce","acc","curr","index","generateTitle","forEach","key","updateTriggers","useDispatch","useLocation","URLSearchParams","searchObject","value","useEffect"],"sourceRoot":""}