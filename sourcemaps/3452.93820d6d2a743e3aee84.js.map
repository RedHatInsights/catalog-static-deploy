{"version":3,"file":"js/3452.052913075a3297a103f3.js","mappings":"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","sources":["webpack:///./src/toolbar/schemas/portfolio-toolbar.schema.js","webpack:///./src/smart-components/portfolio/portfolio-empty-state.js","webpack:///./src/smart-components/portfolio/portfolio-items.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Dropdown,\n  DropdownPosition,\n  KebabToggle,\n  DropdownItem\n} from '@patternfly/react-core';\n\nimport { toolbarComponentTypes } from '../toolbar-mapper';\nimport { createLinkButton } from '../helpers';\nimport AsyncPagination from '../../smart-components/common/async-pagination';\nimport CatalogLink from '../../smart-components/common/catalog-link';\nimport BackToProducts from '../../presentational-components/portfolio/back-to-products';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport orderProcessesMessages from '../../messages/order-processes.messages';\nimport { NESTED_EDIT_ORDER_PROCESS_ROUTE } from '../../constants/routes';\n\n/**\n * Cannot be anonymous function. Requires Component.displayName to work with PF4 refs\n */\nconst PortfolioActionsToolbar = ({\n  editPortfolioRoute,\n  workflowPortfolioRoute,\n  removePortfolioRoute,\n  copyInProgress,\n  copyPortfolio,\n  userCapabilities: { copy, destroy, update, set_approval },\n  canLinkOrderProcesses\n}) => {\n  const [isOpen, setOpen] = useState(false);\n  const formatMessage = useFormatMessage();\n  const dropdownItems = [];\n\n  if (update) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Edit Portfolio\"\n        key=\"edit-portfolio\"\n        id=\"edit-portfolio\"\n        component={\n          <CatalogLink\n            id=\"edit-portfolio\"\n            preserveSearch\n            pathname={editPortfolioRoute}\n          >\n            Edit\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (copy) {\n    dropdownItems.push(\n      <DropdownItem\n        component=\"button\"\n        aria-label=\"Copy Portfolio\"\n        key=\"copy-portfolio\"\n        id=\"copy-portfolio\"\n        onClick={copyPortfolio}\n      >\n        Copy\n      </DropdownItem>\n    );\n  }\n\n  if (set_approval) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Set approval workflow\"\n        key=\"set-approval-portfolio-action\"\n        id=\"set-approval-portfolio-action\"\n        component={\n          <CatalogLink preserveSearch pathname={workflowPortfolioRoute}>\n            Set approval\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (update && canLinkOrderProcesses) {\n    const orderProcessAction = formatMessage(\n      orderProcessesMessages.setOrderProcess\n    );\n    dropdownItems.push(\n      <DropdownItem\n        aria-label={orderProcessAction}\n        key=\"attach-order-processes\"\n        id=\"attach-order-processes\"\n        component={\n          <CatalogLink\n            preserveSearch\n            pathname={NESTED_EDIT_ORDER_PROCESS_ROUTE}\n          >\n            {orderProcessAction}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (destroy) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Remove Portfolio\"\n        key=\"delete-portfolio\"\n        id=\"delete-portfolio\"\n        component={\n          <CatalogLink preserveSearch pathname={removePortfolioRoute}>\n            Delete\n          </CatalogLink>\n        }\n        role=\"link\"\n        className=\"pf-c-dropdown__menu-item\"\n      />\n    );\n  }\n\n  return dropdownItems.length === 0 ? null : (\n    <Dropdown\n      className=\"pf-u-ml-md\"\n      onSelect={() => setOpen(false)}\n      position={DropdownPosition.right}\n      toggle={\n        <KebabToggle\n          id=\"toggle-portfolio-actions\"\n          onToggle={setOpen}\n          isDisabled={copyInProgress}\n        />\n      }\n      isOpen={isOpen}\n      isPlain\n      dropdownItems={dropdownItems}\n    />\n  );\n};\n\nPortfolioActionsToolbar.propTypes = {\n  removePortfolioRoute: PropTypes.string.isRequired,\n  editPortfolioRoute: PropTypes.string.isRequired,\n  workflowPortfolioRoute: PropTypes.string.isRequired,\n  copyPortfolio: PropTypes.func.isRequired,\n  copyInProgress: PropTypes.bool,\n  userCapabilities: PropTypes.shape({\n    copy: PropTypes.bool,\n    update: PropTypes.bool,\n    destroy: PropTypes.bool,\n    set_approval: PropTypes.bool\n  }).isRequired,\n  canLinkOrderProcesses: PropTypes.bool\n};\n\nconst createPortfolioToolbarSchema = ({\n  title,\n  addProductsRoute,\n  copyPortfolio,\n  sharePortfolioRoute,\n  editPortfolioRoute,\n  workflowPortfolioRoute,\n  removePortfolioRoute,\n  copyInProgress,\n  isLoading,\n  removeProducts,\n  itemsSelected,\n  meta,\n  fetchPortfolioItemsWithPortfolio,\n  portfolioId,\n  description,\n  fromProducts,\n  filterProps: { searchValue, onFilterChange, placeholder },\n  userCapabilities: { share, unshare, ...userCapabilities },\n  canLinkOrderProcesses\n}) => ({\n  fields: [\n    {\n      component: toolbarComponentTypes.TOP_TOOLBAR,\n      breadcrumbs: !fromProducts,\n      key: 'portfolio-top-toolbar',\n      fields: [\n        {\n          key: 'back-to-products',\n          hidden: !fromProducts,\n          component: BackToProducts\n        },\n        {\n          component: toolbarComponentTypes.TOP_TOOLBAR_TITLE,\n          key: 'portfolio-toolbar-title',\n          noData: meta.noData,\n          title,\n          description,\n          fields: [\n            {\n              component: toolbarComponentTypes.TOOLBAR,\n              key: 'portfolio-actions',\n              noWrap: true,\n              fields: [\n                createLinkButton({\n                  pathname: sharePortfolioRoute,\n                  preserveSearch: true,\n                  variant: 'secondary',\n                  title: 'Share',\n                  isDisabled: copyInProgress,\n                  key: 'portfolio-share-button',\n                  id: 'portfolio-share-button',\n                  hidden: !share && !unshare\n                }),\n                {\n                  component: toolbarComponentTypes.TOOLBAR_ITEM,\n                  key: 'portfolio-actions-dropdown-item',\n                  fields: [\n                    {\n                      component: PortfolioActionsToolbar,\n                      editPortfolioRoute,\n                      workflowPortfolioRoute,\n                      removePortfolioRoute,\n                      copyPortfolio,\n                      copyInProgress,\n                      userCapabilities,\n                      canLinkOrderProcesses,\n                      key: 'portfolio-actions-dropdown'\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        },\n        {\n          component: toolbarComponentTypes.LEVEL,\n          key: 'portfolio-items-actions',\n          fields: meta.noData\n            ? []\n            : [\n                {\n                  component: toolbarComponentTypes.TOOLBAR,\n                  key: 'portfolio-items-actions',\n                  fields: [\n                    {\n                      groupName: 'filter-portfolio-items',\n                      component: toolbarComponentTypes.FILTER_TOOLBAR_ITEM,\n                      isClearable: true,\n                      key: 'portfolio-items-filter',\n                      searchValue,\n                      onFilterChange,\n                      placeholder\n                    },\n                    {\n                      hidden: meta.count === 0 || !userCapabilities.update,\n                      groupName: 'add-portfolio-items',\n                      key: 'portfolio-items-add-group',\n                      ...createLinkButton({\n                        preserveSearch: true,\n                        pathname: addProductsRoute,\n                        isDisabled: isLoading || copyInProgress,\n                        variant: 'primary',\n                        title: 'Add',\n                        id: 'add-products-button',\n                        key: 'add-products-button'\n                      })\n                    },\n                    {\n                      component: toolbarComponentTypes.TOOLBAR_ITEM,\n                      key: 'remove-products-item',\n                      hidden: meta.count === 0 || !userCapabilities.update,\n                      fields: [\n                        {\n                          component: toolbarComponentTypes.BUTTON,\n                          groupName: 'remove-portfolio-items',\n                          variant: 'link',\n                          title: 'Remove',\n                          key: 'remove-products-button',\n                          id: 'remove-products-button',\n                          isDisabled: !itemsSelected,\n                          onClick: removeProducts\n                        }\n                      ]\n                    }\n                  ]\n                },\n                {\n                  component: toolbarComponentTypes.LEVEL_ITEM,\n                  key: 'pagination-item',\n                  fields:\n                    meta.count > 0\n                      ? [\n                          {\n                            component: AsyncPagination,\n                            key: 'portfolio-items-pagination',\n                            meta,\n                            apiRequest: fetchPortfolioItemsWithPortfolio,\n                            apiProps: portfolioId,\n                            isCompact: true\n                          }\n                        ]\n                      : []\n                }\n              ]\n        }\n      ]\n    }\n  ]\n});\n\nexport default createPortfolioToolbarSchema;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SearchIcon, PlusCircleIcon } from '@patternfly/react-icons';\n\nimport ContentGalleryEmptyState, {\n  EmptyStatePrimaryAction\n} from '../../presentational-components/shared/content-gallery-empty-state';\nimport { Button } from '@patternfly/react-core';\nimport filteringMessages from '../../messages/filtering.messages';\nimport portfolioMessages from '../../messages/portfolio.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\n\nconst PortfolioEmptyState = ({\n  url,\n  handleFilterChange,\n  meta,\n  userCapabilities: { update }\n}) => {\n  const formatMessage = useFormatMessage();\n  const NoDataAction = () => (\n    <EmptyStatePrimaryAction\n      url={url}\n      label={formatMessage(portfolioMessages.addProducts)}\n      id=\"add-products-to-portfolio\"\n      hasPermission={update}\n    />\n  );\n\n  const FilterAction = () => (\n    <Button\n      id=\"clear-portfolio-filter\"\n      ouiaId=\"clear-portfolio-filter\"\n      variant=\"link\"\n      onClick={() => handleFilterChange('')}\n    >\n      {formatMessage(filteringMessages.clearFilters)}\n    </Button>\n  );\n\n  const emptyStateProps = {\n    PrimaryAction: meta.noData ? NoDataAction : FilterAction,\n    title: meta.noData\n      ? formatMessage(filteringMessages.noProducts)\n      : formatMessage(filteringMessages.noResults),\n    description: meta.noData\n      ? formatMessage(portfolioMessages.emptyNoProducts)\n      : formatMessage(filteringMessages.noResultsDescription),\n    Icon: meta.noData ? PlusCircleIcon : SearchIcon\n  };\n  return <ContentGalleryEmptyState {...emptyStateProps} />;\n};\n\nPortfolioEmptyState.propTypes = {\n  url: PropTypes.string.isRequired,\n  handleFilterChange: PropTypes.func.isRequired,\n  meta: PropTypes.shape({\n    noData: PropTypes.bool\n  }).isRequired,\n  userCapabilities: PropTypes.shape({\n    update: PropTypes.bool\n  }).isRequired\n};\n\nexport default PortfolioEmptyState;\n","import React, { Fragment, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport ToolbarRenderer from '../../toolbar/toolbar-renderer';\nimport createPortfolioToolbarSchema from '../../toolbar/schemas/portfolio-toolbar.schema';\nimport PortfolioEmptyState from './portfolio-empty-state';\nimport ContentGallery from '../content-gallery/content-gallery';\nimport PortfolioItem from './portfolio-item';\nimport { fetchPortfolioItemsWithPortfolio } from '../../redux/actions/portfolio-actions';\nimport AsyncPagination from '../common/async-pagination';\nimport BottomPaginationContainer from '../../presentational-components/shared/bottom-pagination-container';\nimport useQuery from '../../utilities/use-query';\nimport { PORTFOLIO_ROUTE } from '../../constants/routes';\nimport filteringMessages from '../../messages/filtering.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport UserContext from '../../user-context';\nimport { hasPermission } from '../../helpers/shared/helpers';\n\nconst PortfolioItems = ({\n  routes,\n  handleFilterChange,\n  removeProducts,\n  copyPortfolio,\n  stateDispatch,\n  fromProducts,\n  state: {\n    removeInProgress,\n    isFetching,\n    isFiltering,\n    copyInProgress,\n    selectedItems,\n    filterValue\n  }\n}) => {\n  const formatMessage = useFormatMessage();\n  const { data, meta, name, description, userCapabilities } = useSelector(\n    ({\n      portfolioReducer: {\n        portfolioItems: { data, meta },\n        selectedPortfolio: {\n          name,\n          description,\n          metadata: { user_capabilities }\n        }\n      }\n    }) => ({\n      data,\n      meta,\n      name,\n      description,\n      userCapabilities: user_capabilities\n    })\n  );\n  const { url } = useRouteMatch(PORTFOLIO_ROUTE);\n  const [{ portfolio: id }] = useQuery(['portfolio']);\n  const dispatch = useDispatch();\n  const { permissions: userPermissions } = useContext(UserContext);\n  const canLinkOrderProcesses = hasPermission(userPermissions, [\n    'catalog:order_processes:link'\n  ]);\n\n  const items = data.map((item) => (\n    <PortfolioItem\n      key={item.id}\n      {...item}\n      pathname={`${url}/portfolio-item`}\n      searchParams={{\n        source: item.service_offering_source_ref,\n        'portfolio-item': item.id\n      }}\n      preserveSearch\n      isSelectable={userCapabilities.update}\n      onSelect={(selectedItem) =>\n        stateDispatch({\n          type: 'selectItem',\n          payload: { selectedItem, product: item }\n        })\n      }\n      isSelected={selectedItems.includes(item.id)}\n      removeInProgress={removeInProgress}\n    />\n  ));\n\n  return (\n    <Fragment>\n      <ToolbarRenderer\n        schema={createPortfolioToolbarSchema({\n          fromProducts,\n          filterProps: {\n            searchValue: filterValue,\n            onFilterChange: handleFilterChange,\n            placeholder: formatMessage(filteringMessages.filterByProduct)\n          },\n          title: name,\n          description,\n          ...routes,\n          copyPortfolio,\n          isLoading: isFetching || isFiltering,\n          copyInProgress,\n          removeProducts: () => removeProducts(selectedItems),\n          itemsSelected: selectedItems.length > 0,\n          meta,\n          fetchPortfolioItemsWithPortfolio: (...args) =>\n            dispatch(fetchPortfolioItemsWithPortfolio(...args)),\n          portfolioId: id,\n          userCapabilities,\n          canLinkOrderProcesses\n        })}\n      />\n      <ContentGallery\n        items={items}\n        isLoading={isFetching || isFiltering}\n        renderEmptyState={() => (\n          <PortfolioEmptyState\n            handleFilterChange={handleFilterChange}\n            meta={meta}\n            userCapabilities={userCapabilities}\n            url={routes.addProductsRoute}\n          />\n        )}\n      />\n      {meta.count > 0 && (\n        <BottomPaginationContainer>\n          <AsyncPagination\n            dropDirection=\"up\"\n            meta={meta}\n            apiProps={id}\n            apiRequest={(...args) =>\n              dispatch(fetchPortfolioItemsWithPortfolio(...args))\n            }\n          />\n        </BottomPaginationContainer>\n      )}\n    </Fragment>\n  );\n};\n\nPortfolioItems.propTypes = {\n  routes: PropTypes.shape({\n    addProductsRoute: PropTypes.string.isRequired,\n    portfolioRoute: PropTypes.string.isRequired\n  }).isRequired,\n  handleFilterChange: PropTypes.func.isRequired,\n  removeProducts: PropTypes.func.isRequired,\n  copyPortfolio: PropTypes.func.isRequired,\n  stateDispatch: PropTypes.func.isRequired,\n  state: PropTypes.shape({\n    removeInProgress: PropTypes.bool,\n    isFetching: PropTypes.bool,\n    isFiltering: PropTypes.bool,\n    copyInProgress: PropTypes.bool,\n    selectedItems: PropTypes.arrayOf(PropTypes.string),\n    filterValue: PropTypes.string\n  }).isRequired,\n  fromProducts: PropTypes.bool\n};\n\nexport default PortfolioItems;\n"],"names":["PortfolioActionsToolbar","editPortfolioRoute","workflowPortfolioRoute","removePortfolioRoute","copyInProgress","copyPortfolio","userCapabilities","copy","destroy","update","set_approval","canLinkOrderProcesses","useState","isOpen","setOpen","formatMessage","useFormatMessage","dropdownItems","push","DropdownItem","key","id","component","preserveSearch","pathname","role","onClick","orderProcessAction","orderProcessesMessages","NESTED_EDIT_ORDER_PROCESS_ROUTE","className","length","Dropdown","onSelect","position","DropdownPosition","toggle","KebabToggle","onToggle","isDisabled","isPlain","propTypes","PropTypes","isRequired","title","addProductsRoute","sharePortfolioRoute","isLoading","removeProducts","itemsSelected","meta","fetchPortfolioItemsWithPortfolio","portfolioId","description","fromProducts","filterProps","searchValue","onFilterChange","placeholder","share","unshare","fields","toolbarComponentTypes","breadcrumbs","hidden","BackToProducts","noData","noWrap","createLinkButton","variant","groupName","isClearable","count","AsyncPagination","apiRequest","apiProps","isCompact","PortfolioEmptyState","url","handleFilterChange","emptyStateProps","PrimaryAction","label","portfolioMessages","hasPermission","Button","ouiaId","filteringMessages","Icon","PlusCircleIcon","SearchIcon","PortfolioItems","routes","stateDispatch","state","removeInProgress","isFetching","isFiltering","selectedItems","filterValue","useSelector","portfolioReducer","portfolioItems","data","selectedPortfolio","name","metadata","user_capabilities","useRouteMatch","PORTFOLIO_ROUTE","useQuery","portfolio","dispatch","useDispatch","userPermissions","useContext","UserContext","permissions","items","map","item","searchParams","source","service_offering_source_ref","isSelectable","selectedItem","type","payload","product","isSelected","includes","Fragment","schema","createPortfolioToolbarSchema","renderEmptyState","dropDirection","portfolioRoute"],"sourceRoot":""}