{"version":3,"file":"js/portfolios.88349311a8a8665a7dea.js","mappings":"qUAyCA,QA1B2E,SAAC,G,IAC1EA,EAAE,KACFC,EAAE,KACFC,EAAa,gBACbC,EAAe,kBACf,IAAAC,cAAAA,OAAa,IAAG,KAAE,EACd,OACJ,kBAAC,KAAW,KACV,kBAAC,KAAW,KACV,kBAAC,EAAAC,YAAW,KACV,kBAAC,EAAAC,KAAI,CAACL,GAAIA,EAAID,GAAI,kBAAkBA,GAClC,kBAAC,EAAAO,KAAI,CACHC,MAAON,EACPO,UAAU,YACVC,UAAW,EAAAC,aAAA,IAEX,kBAAC,IAAqB,KAAET,OAKhC,kBAAC,EAAAU,MAAK,CAACC,QAAM,GAAEV,GACf,yBAAKW,QAAS,SAACC,GAAU,OAAAA,EAAMC,mBAAmBZ,K,qTCEhDa,EAAa,CAAC,eAQdC,EAAyD,SAAC,G,IAC9DC,EAAW,cACXC,EAAmB,sBACnBC,EAAqB,wBACrB,IAAAC,iBAAoBC,EAAK,QAAEC,EAAI,OAAEC,EAAO,UAAEC,EAAM,SAAEC,EAAO,UAAEC,EAAY,eAEjEC,GAAgB,SAChB,GAAoB,IAAAC,WAAS,GAA5BC,EAAM,KAAEC,EAAO,KAChBC,EAAgB,GAiDtB,IAhDIV,GAASE,IACXQ,EAAcC,KACZ,kBAAC,EAAAC,aAAY,CACXC,IAAI,yBACJpC,GAAG,yBACHU,UACE,kBAAC,IAAW,CACV2B,aAAc,CAAEC,UAAWnB,GAC3BoB,SAAU,KACVC,cAAY,GAEXX,EAAc,eAOrBL,GACFS,EAAcC,KACZ,kBAAC,EAAAC,aAAY,CACXC,IAAI,wBACJpC,GAAG,wBACHc,QAAS,WAAM,OAAAM,EAAoBD,KAElCU,EAAc,YAKjBD,GACFK,EAAcC,KACZ,kBAAC,EAAAC,aAAY,CACXC,IAAI,4BACJpC,GAAG,4BACHU,UACE,kBAAC,IAAW,CACV2B,aAAc,CAAEC,UAAWnB,GAC3BoB,SAAU,KACVC,cAAY,GAEXX,EAAc,qBAOrBH,GAAUL,EAAuB,CACnC,IAAMoB,EAAqBZ,EACzB,qBAEFI,EAAcC,KACZ,kBAAC,EAAAC,aAAY,cACCM,EACZL,IAAI,yBACJpC,GAAG,yBACHU,UACE,kBAAC,IAAW,CACVgC,gBAAc,EACdH,SAAU,KACVF,aAAc,CAAEC,UAAWnB,IAE1BsB,GAGLE,KAAK,UAyCX,OApCIjB,GACFO,EAAcC,KACZ,kBAAC,EAAAC,aAAY,CACXC,IAAI,wBACJpC,GAAG,wBACHU,UACE,kBAAC,IAAW,CACV2B,aAAc,CAAEC,UAAWnB,GAC3BoB,SAAU,KACVC,cAAY,GAEXX,EAAc,cAOrBF,GACFM,EAAcC,KACZ,kBAAC,EAAAC,aAAY,CACXC,IAAI,0BACJpC,GAAG,0BACHU,UACE,kBAAC,IAAW,CACV2B,aAAc,CAAEC,UAAWnB,GAC3BoB,SAAU,KACVC,cAAY,GAEXX,EAAc,gBAOO,IAAzBI,EAAcW,OAAe,KAClC,kBAAC,EAAAC,SAAQ,CACPT,IAAI,qBACJpC,GAAI,aAAamB,EAAW,YAC5BY,OAAQA,EACRe,SAAO,EACPC,SAAU,WAAM,OAAAf,GAAQ,IACxBgB,SAAU,EAAAC,iBAAA,MACVC,OACE,kBAAC,EAAAC,YAAW,CACVnD,GAAI,aAAamB,EAAW,UAC5BiC,SAAU,SAACrB,GAAW,OAAAC,EAAQD,MAGlCE,cAAeA,KA4FrB,QA3E+D,SAAC,G,YAC9DoB,EAAQ,WACRC,EAAU,aACVC,EAAI,OACJvD,EAAE,KACFoB,EAAmB,sBACnBoC,EAAQ,WACRnC,EAAqB,wBAClBoC,E,yUAAK,GARsD,gGAUxD5B,GAAgB,SAChB5B,EAAK,CACTsC,SAAU,KACVmB,OAAQ,cAAc1D,GAElB2D,GAAkC,QAAd,EAAAC,OAAOC,eAAO,eAAEC,YACtC,MACAN,MAAAA,OAAQ,EAARA,EAAUG,oBAAqB,GAC7BI,GAAaP,MAAAA,OAAQ,EAARA,EAAUO,aAAc,GACrC5D,EAA6C,QAA3B,EAAA4D,MAAAA,OAAU,EAAVA,EAAY5D,uBAAe,QAAI,EACjD6D,EAAmD,QAA9B,EAAAD,MAAAA,OAAU,EAAVA,EAAYC,0BAAkB,QAAI,EACvDC,EAAyC,QAAzB,EAAAF,MAAAA,OAAU,EAAVA,EAAYE,qBAAa,QAAI,EACnD,OACE,kBAAC,IAAiB,CAACX,WAAYA,GAC7B,kBAAC,IAAU,CAACY,OAAQ,aAAalE,GAC/B,kBAAC,EAAAmE,WAAU,KACT,kBAAC,EAAmB,CAClBnE,GAAIA,EACJC,GAAIA,EACJC,cAAeqD,EACfpD,gBAAiBA,EACjBC,cACE,kBAACc,EAAa,CACZC,YAAanB,EACbsB,iBAAkBqC,EAClBvC,oBAAqBA,EACrBC,sBAAuBA,OAK/B,kBAAC,IAAc,KACb,kBAAC,EAAAhB,YAAW,CAACI,UAAU,cACrB,kBAAC,EAAAF,KAAI,CAACG,UAAW,EAAAC,aAAA,MAAoBF,UAAU,a,gBAE7C,kBAAC2D,EAAA,EAAU,CACTC,KAAMZ,EAAMa,YAAcb,EAAMc,WAChCC,KAAK,cAGT,kBAAC,EAAAjE,KAAI,CAACG,UAAW,EAAAC,aAAA,O,MAAwB8C,EAAMgB,QAEjD,kBAAC,KAAW,QACJlB,KAAI,EAAEF,SAAQ,GAAKI,GAAK,CAC9BiB,UAAWzD,MAGf,kBAAC,EAAA0D,WAAU,KACRX,EAAqB,GACpB,kBAAC,EAAAY,MAAK,CAACC,QAAQ,SAASC,MAAM,QAC3BjD,EAAc,yB,IAIlBoC,EAAgB,GACf,kBAAC,EAAAW,MAAK,CAACC,QAAQ,SAASC,MAAM,QAC3BjD,EAAc,iB,+WCzP7B,IAAMkD,EAAiB,CACrBxB,KAAMyB,EAAAA,EAAAA,KACNP,MAAOO,EAAAA,EAAAA,MACPC,QAASD,EAAAA,EAAAA,QAGLE,EAAgB,CACpB3B,KAAMyB,EAAAA,EAAAA,KACNP,MAAOO,EAAAA,EAAAA,MACPV,WAAYU,EAAAA,EAAAA,QACZT,WAAYS,EAAAA,EAAAA,SAGRG,EAA2B,SAAC,GAc5B,IAbJC,EAaI,EAbJA,QACAC,EAYI,EAZJA,cACAC,EAWI,EAXJA,gBACAC,EAUI,EAVJA,aACAC,EASI,EATJA,KACAC,EAQI,EARJA,WACAC,EAOI,EAPJA,kBACAC,EAMI,EANJA,cACAC,EAKI,EALJA,WACAC,EAII,EAJJA,yBACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,YACAC,EACI,EADJA,UAEMC,GAAWC,EAAAA,EAAAA,eACXrE,GAAgBsE,EAAAA,EAAAA,KACtB,OAAIX,MAAAA,GAAAA,EAAMY,OACD,KAIP,kBAACC,EAAA,GAAD,UACOL,EACD,CACEM,gBACE,kBAAC,IAAD,CAAa/D,SAAS,6BACpB,kBAACgE,EAAAA,OAAD,CACE1B,QAAQ,UACR7E,GAAG,mBACHkE,OAAQ,mBACRM,KAAK,UAEJ3C,EAAcmD,EAAAA,EAAAA,WAKvB,GAhBN,CAiBEwB,oBAAqB,CACnBpB,QAASqB,OAAOC,QAAQtB,GACrBuB,QAAO,gBAAIC,GAAJ,sBAAeA,GAASA,EAAMhE,OAAS,KAC9CiE,KAAI,YAAkB,mBAAhBzE,EAAgB,KAAXwE,EAAW,KACrB,MAAO,CACLE,SAAUjF,EAAckD,EAAe3C,IACvCoC,KAAMpC,EACN2E,MAAOC,MAAMC,QAAQL,GACjBA,EAAMC,KAAI,SAACtD,GAAD,MAAW,CACnBA,KAAAA,MAEF,CACE,CACEA,KACU,YAARnB,EACIP,EAAcqD,EAAc0B,IAC5BA,QAKpBM,SAAU,SAACC,EAAD,EAAaC,GAAa,IAApBC,GAAoB,eAClC,GAAID,EAKF,OAJA/B,EAAc,CACZb,KAAM,oBACN8C,QAAS/B,EAAaH,UAEjBE,EACLC,EAAaH,QACbI,EACAS,GACA,SAACF,GAAD,OACEV,EAAc,CACZb,KAAM,mBACN8C,QAASvB,OAKjB,IAAMwB,E,qWAAa,CAAH,GAAQnC,GACN,UAAdiC,EAAK7C,KACP+C,EAAWF,EAAK7C,MAAQ+C,EAAWF,EAAK7C,MAAMmC,QAC5C,SAACC,GAAD,OAAWA,IAAUS,EAAKN,MAAM,GAAGxD,QAGrCgE,EAAWF,EAAK7C,MAAQ,GAG1Ba,EAAc,CACZb,KAAM,oBACN8C,QAASC,IAEXjC,EAAgBiC,EAAY/B,EAAMS,GAAU,SAACF,GAAD,OAC1CV,EAAc,CACZb,KAAM,mBACN8C,QAASvB,SAKjByB,aAAc,CACZC,SAAU,SAACN,EAAIP,GAAL,OACRvB,EAAc,CAAEb,KAAM,gBAAiB8C,QAASV,KAClDA,MAAOnB,EACPiC,MAAO,CACL,CACEC,aAAc,CACZf,MAAOxB,EAAQ7B,KACfkE,SAAU,SAACN,EAAIP,GAAL,OAAelB,EAAkBkB,KAE7CgB,MAAO/F,EAAcmD,EAAAA,EAAAA,MACrB4B,MAAO,QAET,CACEe,aAAc,CACZf,MAAOxB,EAAQX,MACfgD,SAAU,SAACN,EAAIP,GAAL,OAAelB,EAAkBkB,KAE7CgB,MAAO/F,EAAcmD,EAAAA,EAAAA,OACrB4B,MAAO,SAET,CACEe,aAAc,CACZf,MAAOxB,EAAQH,SAAW,OAC1BwC,SAAU,SAACN,EAAIP,GAAL,OAAelB,EAAkBkB,IAC3Cc,MAAO,CACL,CACEE,MAAO/F,EAAcmD,EAAAA,EAAAA,MACrB4B,MAAO,QAET,CACEgB,MAAO/F,EAAcmD,EAAAA,EAAAA,OACrB4B,MAAO,SAET,CACEgB,MAAO/F,EAAcmD,EAAAA,EAAAA,SACrB4B,MAAO,cAET,CACEgB,MAAO/F,EAAcmD,EAAAA,EAAAA,SACrB4B,MAAO,gBAIbiB,YAAazC,EAAQH,QACjBpD,EAAcqD,EAAcE,EAAQH,UACpCpD,EAAcmD,EAAAA,EAAAA,MAClB4C,MAAO/F,EAAcmD,EAAAA,EAAAA,QACrB4B,MAAO,UACPpC,KAAM,WAIZsD,aAAc,CACZC,UAAWpC,EACXqC,aAAc,SAACC,EAAQF,GAAT,OAAuBnC,EAAWmC,KAElDG,YACE1C,MAAAA,OAAA,EAAAA,EAAM2C,OAAQ,EACZ,kBAAC,IAAD,CACE7E,WAAYwC,GAAcC,EAC1BP,KAAMA,EACN4C,WAAY,SAACC,EAAGC,GAAJ,OACVrC,EAASJ,EAAyBT,EAASkD,KAE7CC,WAAS,SAGXC,MAOVrD,EAAyBsD,UAAY,CACnCrD,QAASsD,IAAAA,MAAgB,CACvBnF,KAAMmF,IAAAA,OAAAA,WACNjE,MAAOiE,IAAAA,OAAAA,WACPzD,QAASyD,IAAAA,SACRC,WACHtD,cAAeqD,IAAAA,KAAAA,WACfpD,gBAAiBoD,IAAAA,KAAAA,WACjBnD,aAAcmD,IAAAA,MAAgB,CAC5BtD,QAASsD,IAAAA,OAAA,UAAmBA,IAAAA,OAAmBA,IAAAA,MAAiBC,aAC/DA,WACHnD,KAAMkD,IAAAA,OACNjD,WAAYiD,IAAAA,OAAAA,WACZhD,kBAAmBgD,IAAAA,KAAAA,WACnB/C,cAAe+C,IAAAA,OAAAA,WACf9C,WAAY8C,IAAAA,KAAAA,WACZ7C,yBAA0B6C,IAAAA,KAAAA,WAC1B5C,WAAY4C,IAAAA,KAAAA,WACZ3C,YAAa2C,IAAAA,KAAAA,WACb1C,UAAW0C,IAAAA,MAGb,U,wlBCzLA,IAAMpD,IAAkBsD,EAAAA,EAAAA,IACtB,SAACxD,GAAiE,IAAxDI,EAAwD,uDAAjDqD,EAAAA,GAAiB5C,EAAgC,uCAAtB6C,EAAsB,uCAChEA,GAAkB,GAClB7C,GAASJ,EAAAA,EAAAA,IAAyBT,EAASI,IAAOuD,MAAK,kBACrDD,GAAkB,QAGtB,KAGIvD,GAAe,CACnBxD,QAAQ,EACR+D,YAAY,EACZC,aAAa,EACbN,WAAY,OACZL,QAAS,CACP7B,KAAM,GACNkB,MAAO,GACPQ,aAASuD,GAEX7C,cAAeqD,EAAAA,gBAAAA,KAQXC,GAAkB,SAACC,EAAOC,GAC9B,OAAQA,EAAO3E,MACb,IAAK,cACH,gBAAY0E,GAAZ,IAAmBpD,WAAYqD,EAAO7B,UACxC,IAAK,iBACH,gBACK4B,GADL,IAEE9D,SAZewB,EAYQuC,EAAO7B,QAZR9C,EAYiB0E,EAAMzD,WAZjBL,EAY6B8D,EAAM9D,QAZjD,GAAC,MAClBA,GADiB,cAEnBZ,EAAOoC,OAYN,IAAK,oBACH,gBACKsC,GADL,IAEEvD,cAAeqD,EAAAA,gBAAAA,IACf5D,QAAS+D,EAAO7B,UAEpB,IAAK,mBACH,gBAAY4B,GAAZ,IAAmBnD,YAAaoD,EAAO7B,UACzC,IAAK,gBACH,gBAAY4B,GAAZ,IAAmBzD,WAAY0D,EAAO7B,UACxC,IAAK,YACH,gBACK4B,GADL,IAEEvD,cAAewD,EAAO7B,QACtBlC,QAAU8D,EAAM9D,QAAQH,QAEpBiE,EAAM9D,QAFD,SACA8D,EAAM9D,SADN,IACeH,QAAS,WA7BnB,IAAC2B,EAAOpC,EAAMY,EAkClC,OAAO8D,GAkJT,SA/ImB,WACjB,IAAMrH,GAAgBsE,EAAAA,EAAAA,KAChBiD,GAAYC,EAAAA,EAAAA,KACZC,GAAYC,EAAAA,EAAAA,KAClB,GAGIC,EAAAA,EAAAA,YAAWP,GAAD,GAAC,MACV1D,IACA6D,MAAAA,OAFS,EAETA,EAAW9G,YALhB,sBACIwD,EADJ,EACIA,WAAYC,EADhB,EACgBA,YAAaX,EAD7B,EAC6BA,QAASK,EADtC,EACsCA,WAAYE,EADlD,EACkDA,cAChDN,EAFF,KAOA,GAAuBoE,EAAAA,EAAAA,cACrB,qBAAGC,iBAAoBC,cADjBC,EAAR,EAAQA,KAAMpE,EAAd,EAAcA,KAGRS,GAAWC,EAAAA,EAAAA,eACI2D,GAAoBC,EAAAA,EAAAA,YAAWC,EAAAA,GAA5CC,YACFC,GAAUC,EAAAA,EAAAA,eAEhBC,EAAAA,EAAAA,YAAU,WACRlE,GACEJ,EAAAA,EAAAA,IAAyBT,EAAD,GAAC,MAAcI,GAAf,IAAqBG,cAAAA,MAC7CoD,MAAK,kBAAM1D,EAAc,CAAEb,KAAM,cAAe8C,SAAS,QAC3D8C,EAAAA,EAAAA,QACC,IAEH,IAAM1E,EAAoB,SAACkB,GACzBvB,EAAc,CAAEb,KAAM,iBAAkB8C,QAASV,IACjDtB,GAAgB,SACTF,GADQ,cACEK,EAAamB,IADf,GAAC,MAETpB,GAFQ,IAEF6E,OAAQ,EAAG1E,cAAAA,IACtBM,GACA,SAACF,GAAD,OACEV,EAAc,CAAEb,KAAM,mBAAoB8C,QAASvB,SAIzDoE,EAAAA,EAAAA,YAAU,YACJb,GAAevD,GAAgBD,GACjCJ,EAAkBN,EAAQK,MAE3B,CAACE,IAEJ,IAGMvE,EAAsB,SAACpB,GAAD,OAC1BiG,GAASqE,EAAAA,EAAAA,IAActK,IAAK+I,MAAK,gBAAG/I,EAAH,EAAGA,GAAH,OAC/BiK,EAAQ/H,KAAK,CACXK,SAAUgI,EAAAA,GACV7G,OAAQ,cAAF,OAAgB1D,SAItBgG,GAAYwE,EAAAA,EAAAA,IAAcX,EAAiB,CAC/C,8BAGIxI,GAAwBmJ,EAAAA,EAAAA,IAAcX,EAAiB,CAC3D,iCAqBIY,EAAkB,CACtBC,cAAelF,EAAKY,OAnBD,kBACnB,kBAAC,IAAD,CACEuE,IAAKC,EAAAA,GACL5K,GAAG,mBACH4H,MAAM,SACN4C,cAAexE,KAGE,kBACnB,kBAACO,EAAAA,OAAD,CACErC,OAAQ,eACRW,QAAQ,OACR/D,QAAS,kBAAM4E,EAAkB,MAEhC7D,EAAcgJ,EAAAA,EAAAA,gBAMjBrK,MAAOgF,EAAKY,OACRvE,EAAciJ,EAAAA,EAAAA,kBACdjJ,EAAcgJ,EAAAA,EAAAA,WAClBE,YAAavF,EAAKY,OACdvE,EAAciJ,EAAAA,EAAAA,6BACdjJ,EAAcgJ,EAAAA,EAAAA,sBAClBG,KAAMxF,EAAKY,OAAS6E,EAAAA,GAAiBC,EAAAA,IAEjCC,EAAevB,EAAK/C,KAAI,SAACuE,GAAD,OAC5B,kBAAC,GAAD,QACEhJ,IAAKgJ,EAAKpL,GACVkE,OAAM,oBAAekH,EAAKpL,KACtBoL,EAHN,CAIE/J,sBAAuBA,EACvBD,oBAAqBA,QAIzB,OACE,kBAAC,EAAAiK,SAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE7K,MAAOqB,EAAciJ,EAAAA,EAAAA,mBAEvB,kBAAC,EAAD,CACE1F,QAASA,EACTC,cAAeA,EACfC,gBAAiBA,GACjBC,aAAcA,GACdC,KAAMA,EACNC,WAAYA,EACZC,kBAAmBA,EACnBC,cAAeA,EACfC,WAxEW,SAACmC,GAAD,OACjB1C,EAAc,CAAEb,KAAM,YAAa8C,QAASS,KAwEtClC,yBAA0BA,EAAAA,GAC1BC,WAAYA,EACZC,YAAaA,EACbC,UAAWA,KAGf,kBAAC,IAAD,CACE0B,MAAOyD,EACPG,UAAWxF,GAAcC,EACzBwF,iBAAkB,kBAChB,kBAAC,IAA6Bd,MAGjCjF,EAAK2C,MAAQ,GACZ,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE3C,KAAMA,EACN4C,WAAY,SAACC,EAAGC,GAAJ,OACVrC,GAASJ,EAAAA,EAAAA,IAAyBT,EAASkD,KAE7CkD,cAAc","sources":["webpack:///./src/presentational-components/portfolio/portfolio-card-header.tsx","webpack:///./src/presentational-components/portfolio/porfolio-card.tsx","webpack:///./src/smart-components/portfolio/toolbars/portfolios-primary-toolbar.js","webpack:///./src/smart-components/portfolio/portfolios.js"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Badge, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport EllipsisTextContainer from '../styled-components/ellipsis-text-container';\nimport { CatalogLinkTo } from '../../smart-components/common/catalog-link';\nimport { HeaderLevel, HeaderTitle } from '../shared/card-common';\n\nexport interface PortfolioCardHeaderProps {\n  id: string;\n  to: CatalogLinkTo;\n  portfolioName?: string;\n  portfolio_items: number;\n  headerActions: ReactNode;\n}\nconst PortfolioCardHeader: React.ComponentType<PortfolioCardHeaderProps> = ({\n  id,\n  to,\n  portfolioName,\n  portfolio_items,\n  headerActions = []\n}) => (\n  <HeaderLevel>\n    <HeaderTitle>\n      <TextContent>\n        <Link to={to} id={`portfolio-link-${id}`}>\n          <Text\n            title={portfolioName}\n            className=\"pf-u-mb-0\"\n            component={TextVariants.h3}\n          >\n            <EllipsisTextContainer>{portfolioName}</EllipsisTextContainer>\n          </Text>\n        </Link>\n      </TextContent>\n    </HeaderTitle>\n    <Badge isRead>{portfolio_items}</Badge>\n    <div onClick={(event) => event.preventDefault()}>{headerActions}</div>\n  </HeaderLevel>\n);\n\nexport default PortfolioCardHeader;\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\nimport ItemDetails from '../shared/card-common';\nimport {\n  CardHeader,\n  CardFooter,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  KebabToggle,\n  Text,\n  TextContent,\n  TextVariants,\n  Label\n} from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport PortfolioCardHeader from './portfolio-card-header';\n\nimport CatalogLink from '../../smart-components/common/catalog-link';\nimport {\n  SHARE_PORTFOLIO_ROUTE,\n  EDIT_PORTFOLIO_WORKFLOW_ROUTE,\n  EDIT_PORTFOLIO_ROUTE,\n  REMOVE_PORTFOLIO_ROUTE,\n  PORTFOLIO_ROUTE,\n  EDIT_ORDER_PROCESS_ROUTE\n} from '../../constants/routes';\nimport {\n  StyledCard,\n  StyledGalleryItem\n} from '../styled-components/styled-gallery';\nimport { StyledCardBody } from '../styled-components/card';\nimport actionMessages from '../../messages/actions.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport orderProcessesMessages from '../../messages/order-processes.messages';\nimport { UserCapabilities, PortfolioMetadata } from '../../types/common-types';\nimport { USER_CAPABILITIES_PLACEHOLDER } from '../../utilities/constants';\n\nconst TO_DISPLAY = ['description'];\n\ninterface HeaderActionsProps {\n  portfolioId: string;\n  handleCopyPortfolio: (portfolioId: string) => void;\n  userCapabilities: UserCapabilities;\n  canLinkOrderProcesses: boolean;\n}\nconst HeaderActions: React.ComponentType<HeaderActionsProps> = ({\n  portfolioId,\n  handleCopyPortfolio,\n  canLinkOrderProcesses,\n  userCapabilities: { share, copy, unshare, update, destroy, set_approval }\n}) => {\n  const formatMessage = useFormatMessage();\n  const [isOpen, setOpen] = useState(false);\n  const dropdownItems = [];\n  if (share || unshare) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"share-portfolio-action\"\n        id=\"share-portfolio-action\"\n        component={\n          <CatalogLink\n            searchParams={{ portfolio: portfolioId }}\n            pathname={SHARE_PORTFOLIO_ROUTE}\n            preserveHash\n          >\n            {formatMessage(actionMessages.share)}\n          </CatalogLink>\n        }\n      />\n    );\n  }\n\n  if (copy) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"copy-portfolio-action\"\n        id=\"copy-portfolio-action\"\n        onClick={() => handleCopyPortfolio(portfolioId)}\n      >\n        {formatMessage(actionMessages.copy)}\n      </DropdownItem>\n    );\n  }\n\n  if (set_approval) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"workflow-portfolio-action\"\n        id=\"workflow-portfolio-action\"\n        component={\n          <CatalogLink\n            searchParams={{ portfolio: portfolioId }}\n            pathname={EDIT_PORTFOLIO_WORKFLOW_ROUTE}\n            preserveHash\n          >\n            {formatMessage(actionMessages.setApproval)}\n          </CatalogLink>\n        }\n      />\n    );\n  }\n\n  if (update && canLinkOrderProcesses) {\n    const orderProcessAction = formatMessage(\n      orderProcessesMessages.setOrderProcess\n    ) as string;\n    dropdownItems.push(\n      <DropdownItem\n        aria-label={orderProcessAction}\n        key=\"attach-order-processes\"\n        id=\"attach-order-processes\"\n        component={\n          <CatalogLink\n            preserveSearch\n            pathname={EDIT_ORDER_PROCESS_ROUTE}\n            searchParams={{ portfolio: portfolioId }}\n          >\n            {orderProcessAction}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (update) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"edit-portfolio-action\"\n        id=\"edit-portfolio-action\"\n        component={\n          <CatalogLink\n            searchParams={{ portfolio: portfolioId }}\n            pathname={EDIT_PORTFOLIO_ROUTE}\n            preserveHash\n          >\n            {formatMessage(actionMessages.edit)}\n          </CatalogLink>\n        }\n      />\n    );\n  }\n\n  if (destroy) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"remove-portfolio-action\"\n        id=\"remove-portfolio-action\"\n        component={\n          <CatalogLink\n            searchParams={{ portfolio: portfolioId }}\n            pathname={REMOVE_PORTFOLIO_ROUTE}\n            preserveHash\n          >\n            {formatMessage(actionMessages.delete)}\n          </CatalogLink>\n        }\n      />\n    );\n  }\n\n  return dropdownItems.length === 0 ? null : (\n    <Dropdown\n      key=\"portfolio-dropdown\"\n      id={`portfolio-${portfolioId}-dropdown`}\n      isOpen={isOpen}\n      isPlain\n      onSelect={() => setOpen(false)}\n      position={DropdownPosition.right}\n      toggle={\n        <KebabToggle\n          id={`portfolio-${portfolioId}-toggle`}\n          onToggle={(isOpen) => setOpen(isOpen)}\n        />\n      }\n      dropdownItems={dropdownItems}\n    />\n  );\n};\n\nexport interface PortfolioCardProps {\n  imageUrl?: string;\n  name?: string;\n  id: string;\n  updated_at?: string;\n  created_at: string;\n  owner?: string;\n  isDisabled?: boolean;\n  metadata: PortfolioMetadata;\n  handleCopyPortfolio: (portfolioId: string) => void;\n  canLinkOrderProcesses: boolean;\n}\nconst PortfolioCard: React.ComponentType<PortfolioCardProps> = ({\n  imageUrl,\n  isDisabled,\n  name,\n  id,\n  handleCopyPortfolio,\n  metadata,\n  canLinkOrderProcesses,\n  ...props\n}) => {\n  const formatMessage = useFormatMessage();\n  const to = {\n    pathname: PORTFOLIO_ROUTE,\n    search: `?portfolio=${id}`\n  };\n  const user_capabilities = window.catalog?.standalone\n    ? USER_CAPABILITIES_PLACEHOLDER\n    : metadata?.user_capabilities || {};\n  const statistics = metadata?.statistics || {};\n  const portfolio_items = statistics?.portfolio_items ?? 0;\n  const approval_processes = statistics?.approval_processes ?? 0;\n  const shared_groups = statistics?.shared_groups ?? 0;\n  return (\n    <StyledGalleryItem isDisabled={isDisabled}>\n      <StyledCard ouiaId={`portfolio-${id}`}>\n        <CardHeader>\n          <PortfolioCardHeader\n            id={id}\n            to={to}\n            portfolioName={name}\n            portfolio_items={portfolio_items}\n            headerActions={\n              <HeaderActions\n                portfolioId={id}\n                userCapabilities={user_capabilities}\n                handleCopyPortfolio={handleCopyPortfolio}\n                canLinkOrderProcesses={canLinkOrderProcesses}\n              />\n            }\n          />\n        </CardHeader>\n        <StyledCardBody>\n          <TextContent className=\"pf-u-mb-md\">\n            <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n              Last updated&nbsp;\n              <DateFormat\n                date={props.updated_at || props.created_at}\n                type=\"relative\"\n              />\n            </Text>\n            <Text component={TextVariants.small}>by {props.owner}</Text>\n          </TextContent>\n          <ItemDetails\n            {...{ name, imageUrl, ...props }}\n            toDisplay={TO_DISPLAY}\n          />\n        </StyledCardBody>\n        <CardFooter>\n          {approval_processes > 0 && (\n            <Label variant=\"filled\" color=\"grey\">\n              {formatMessage(labelMessages.approvalProcessSet)}\n            </Label>\n          )}\n          &nbsp;\n          {shared_groups > 0 && (\n            <Label variant=\"filled\" color=\"grey\">\n              {formatMessage(labelMessages.shared)}\n            </Label>\n          )}\n        </CardFooter>\n      </StyledCard>\n    </StyledGalleryItem>\n  );\n};\n\nexport default PortfolioCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\n\nimport AsyncPagination from '../../common/async-pagination';\nimport CatalogLink from '../../common/catalog-link';\nimport { Button } from '@patternfly/react-core';\nimport labelMessages from '../../../messages/labels.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\n\nconst chipCategories = {\n  name: labelMessages.name,\n  owner: labelMessages.owner,\n  sort_by: labelMessages.sortBy\n};\n\nconst sortByMapping = {\n  name: labelMessages.name,\n  owner: labelMessages.owner,\n  updated_at: labelMessages.updated,\n  created_at: labelMessages.created\n};\n\nconst PortfoliosPrimaryToolbar = ({\n  filters,\n  stateDispatch,\n  debouncedFilter,\n  initialState,\n  meta,\n  filterType,\n  handleFilterItems,\n  sortDirection,\n  handleSort,\n  fetchPortfoliosWithState,\n  isFetching,\n  isFiltering,\n  canCreate\n}) => {\n  const dispatch = useDispatch();\n  const formatMessage = useFormatMessage();\n  if (meta?.noData) {\n    return null;\n  }\n\n  return (\n    <PrimaryToolbar\n      {...(canCreate\n        ? {\n            dedicatedAction: (\n              <CatalogLink pathname=\"/portfolios/add-portfolio\">\n                <Button\n                  variant=\"primary\"\n                  id=\"create-portfolio\"\n                  ouiaId={'create-portfolio'}\n                  type=\"button\"\n                >\n                  {formatMessage(labelMessages.create)}\n                </Button>\n              </CatalogLink>\n            )\n          }\n        : {})}\n      activeFiltersConfig={{\n        filters: Object.entries(filters)\n          .filter(([, value]) => value && value.length > 0)\n          .map(([key, value]) => {\n            return {\n              category: formatMessage(chipCategories[key]),\n              type: key,\n              chips: Array.isArray(value)\n                ? value.map((name) => ({\n                    name\n                  }))\n                : [\n                    {\n                      name:\n                        key === 'sort_by'\n                          ? formatMessage(sortByMapping[value])\n                          : value\n                    }\n                  ]\n            };\n          }),\n        onDelete: (_e, [chip], clearAll) => {\n          if (clearAll) {\n            stateDispatch({\n              type: 'replaceFilterChip',\n              payload: initialState.filters\n            });\n            return debouncedFilter(\n              initialState.filters,\n              meta,\n              dispatch,\n              (isFiltering) =>\n                stateDispatch({\n                  type: 'setFilteringFlag',\n                  payload: isFiltering\n                })\n            );\n          }\n\n          const newFilters = { ...filters };\n          if (chip.type === 'state') {\n            newFilters[chip.type] = newFilters[chip.type].filter(\n              (value) => value !== chip.chips[0].name\n            );\n          } else {\n            newFilters[chip.type] = '';\n          }\n\n          stateDispatch({\n            type: 'replaceFilterChip',\n            payload: newFilters\n          });\n          debouncedFilter(newFilters, meta, dispatch, (isFiltering) =>\n            stateDispatch({\n              type: 'setFilteringFlag',\n              payload: isFiltering\n            })\n          );\n        }\n      }}\n      filterConfig={{\n        onChange: (_e, value) =>\n          stateDispatch({ type: 'setFilterType', payload: value }),\n        value: filterType,\n        items: [\n          {\n            filterValues: {\n              value: filters.name,\n              onChange: (_e, value) => handleFilterItems(value)\n            },\n            label: formatMessage(labelMessages.name),\n            value: 'name'\n          },\n          {\n            filterValues: {\n              value: filters.owner,\n              onChange: (_e, value) => handleFilterItems(value)\n            },\n            label: formatMessage(labelMessages.owner),\n            value: 'owner'\n          },\n          {\n            filterValues: {\n              value: filters.sort_by || 'name',\n              onChange: (_e, value) => handleFilterItems(value),\n              items: [\n                {\n                  label: formatMessage(labelMessages.name),\n                  value: 'name'\n                },\n                {\n                  label: formatMessage(labelMessages.owner),\n                  value: 'owner'\n                },\n                {\n                  label: formatMessage(labelMessages.created),\n                  value: 'created_at'\n                },\n                {\n                  label: formatMessage(labelMessages.updated),\n                  value: 'updated_at'\n                }\n              ]\n            },\n            placeholder: filters.sort_by\n              ? formatMessage(sortByMapping[filters.sort_by])\n              : formatMessage(labelMessages.name),\n            label: formatMessage(labelMessages.sortBy),\n            value: 'sort_by',\n            type: 'radio'\n          }\n        ]\n      }}\n      sortByConfig={{\n        direction: sortDirection,\n        onSortChange: (_event, direction) => handleSort(direction)\n      }}\n      pagination={\n        meta?.count > 0 ? (\n          <AsyncPagination\n            isDisabled={isFetching || isFiltering}\n            meta={meta}\n            apiRequest={(_, options) =>\n              dispatch(fetchPortfoliosWithState(filters, options))\n            }\n            isCompact\n          />\n        ) : (\n          undefined\n        )\n      }\n    />\n  );\n};\n\nPortfoliosPrimaryToolbar.propTypes = {\n  filters: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    owner: PropTypes.string.isRequired,\n    sort_by: PropTypes.string\n  }).isRequired,\n  stateDispatch: PropTypes.func.isRequired,\n  debouncedFilter: PropTypes.func.isRequired,\n  initialState: PropTypes.shape({\n    filters: PropTypes.shape({ [PropTypes.string]: PropTypes.any }).isRequired\n  }).isRequired,\n  meta: PropTypes.object,\n  filterType: PropTypes.string.isRequired,\n  handleFilterItems: PropTypes.func.isRequired,\n  sortDirection: PropTypes.string.isRequired,\n  handleSort: PropTypes.func.isRequired,\n  fetchPortfoliosWithState: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  isFiltering: PropTypes.bool.isRequired,\n  canCreate: PropTypes.bool\n};\n\nexport default PortfoliosPrimaryToolbar;\n","import React, { Fragment, useEffect, useReducer, useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { PlusCircleIcon, SearchIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\n\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport ContentGallery from '../content-gallery/content-gallery';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport {\n  fetchPortfoliosWithState,\n  copyPortfolio\n} from '../../redux/actions/portfolio-actions';\nimport PortfolioCard from '../../presentational-components/portfolio/porfolio-card';\nimport ContentGalleryEmptyState, {\n  EmptyStatePrimaryAction\n} from '../../presentational-components/shared/content-gallery-empty-state';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport AsyncPagination from '../common/async-pagination';\nimport BottomPaginationContainer from '../../presentational-components/shared/bottom-pagination-container';\nimport { ADD_PORTFOLIO_ROUTE, PORTFOLIO_ROUTE } from '../../constants/routes';\nimport UserContext from '../../user-context';\nimport { hasPermission } from '../../helpers/shared/helpers';\nimport useInitialUriHash from '../../routing/use-initial-uri-hash';\nimport filteringMessages from '../../messages/filtering.messages';\nimport portfolioMessages from '../../messages/portfolio.messages';\n\nimport { SortByDirection } from '@patternfly/react-table';\nimport useIsMounted from '../../utilities/use-is-mounted';\nimport PortfoliosPrimaryToolbar from './toolbars/portfolios-primary-toolbar';\nimport TopToolbar, {\n  TopToolbarTitle\n} from '../../presentational-components/shared/top-toolbar';\nimport useFormatMessage from '../../utilities/use-format-message';\n\nconst debouncedFilter = asyncFormValidator(\n  (filters, meta = defaultSettings, dispatch, filteringCallback) => {\n    filteringCallback(true);\n    dispatch(fetchPortfoliosWithState(filters, meta)).then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst initialState = {\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false,\n  filterType: 'name',\n  filters: {\n    name: '',\n    owner: '',\n    sort_by: undefined\n  },\n  sortDirection: SortByDirection.asc\n};\n\nconst changeFilters = (value, type, filters) => ({\n  ...filters,\n  [type]: value\n});\n\nconst portfoliosState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return {\n        ...state,\n        filters: changeFilters(action.payload, state.filterType, state.filters)\n      };\n    case 'replaceFilterChip':\n      return {\n        ...state,\n        sortDirection: SortByDirection.asc,\n        filters: action.payload\n      };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    case 'setFilterType':\n      return { ...state, filterType: action.payload };\n    case 'setSortBy':\n      return {\n        ...state,\n        sortDirection: action.payload,\n        filters: !state.filters.sort_by\n          ? { ...state.filters, sort_by: 'name' }\n          : state.filters\n      };\n  }\n\n  return state;\n};\n\nconst Portfolios = () => {\n  const formatMessage = useFormatMessage();\n  const viewState = useInitialUriHash();\n  const isMounted = useIsMounted();\n  const [\n    { isFetching, isFiltering, filters, filterType, sortDirection },\n    stateDispatch\n  ] = useReducer(portfoliosState, {\n    ...initialState,\n    ...viewState?.portfolio\n  });\n  const { data, meta } = useSelector(\n    ({ portfolioReducer: { portfolios } }) => portfolios\n  );\n  const dispatch = useDispatch();\n  const { permissions: userPermissions } = useContext(UserContext);\n  const history = useHistory();\n\n  useEffect(() => {\n    dispatch(\n      fetchPortfoliosWithState(filters, { ...meta, sortDirection })\n    ).then(() => stateDispatch({ type: 'setFetching', payload: false }));\n    scrollToTop();\n  }, []);\n\n  const handleFilterItems = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      { ...filters, [filterType]: value },\n      { ...meta, offset: 0, sortDirection },\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering })\n    );\n  };\n\n  useEffect(() => {\n    if (isMounted && (!isFiltering || !isFetching)) {\n      handleFilterItems(filters[filterType]);\n    }\n  }, [sortDirection]);\n\n  const handleSort = (direction) =>\n    stateDispatch({ type: 'setSortBy', payload: direction });\n\n  const handleCopyPortfolio = (id) =>\n    dispatch(copyPortfolio(id)).then(({ id }) =>\n      history.push({\n        pathname: PORTFOLIO_ROUTE,\n        search: `?portfolio=${id}`\n      })\n    );\n\n  const canCreate = hasPermission(userPermissions, [\n    'catalog:portfolios:create'\n  ]);\n\n  const canLinkOrderProcesses = hasPermission(userPermissions, [\n    'catalog:order_processes:link'\n  ]);\n\n  const NoDataAction = () => (\n    <EmptyStatePrimaryAction\n      url={ADD_PORTFOLIO_ROUTE}\n      id=\"create-portfolio\"\n      label=\"Create\"\n      hasPermission={canCreate}\n    />\n  );\n  const FilterAction = () => (\n    <Button\n      ouiaId={'clear-filter'}\n      variant=\"link\"\n      onClick={() => handleFilterItems('')}\n    >\n      {formatMessage(filteringMessages.clearFilters)}\n    </Button>\n  );\n\n  const emptyStateProps = {\n    PrimaryAction: meta.noData ? NoDataAction : FilterAction,\n    title: meta.noData\n      ? formatMessage(portfolioMessages.portfoliosNoData)\n      : formatMessage(filteringMessages.noResults),\n    description: meta.noData\n      ? formatMessage(portfolioMessages.portfoliosNoDataDescription)\n      : formatMessage(filteringMessages.noResultsDescription),\n    Icon: meta.noData ? PlusCircleIcon : SearchIcon\n  };\n  const galleryItems = data.map((item) => (\n    <PortfolioCard\n      key={item.id}\n      ouiaId={`portfolio-${item.id}`}\n      {...item}\n      canLinkOrderProcesses={canLinkOrderProcesses}\n      handleCopyPortfolio={handleCopyPortfolio}\n    />\n  ));\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TopToolbarTitle\n          title={formatMessage(portfolioMessages.portfoliosTitle)}\n        />\n        <PortfoliosPrimaryToolbar\n          filters={filters}\n          stateDispatch={stateDispatch}\n          debouncedFilter={debouncedFilter}\n          initialState={initialState}\n          meta={meta}\n          filterType={filterType}\n          handleFilterItems={handleFilterItems}\n          sortDirection={sortDirection}\n          handleSort={handleSort}\n          fetchPortfoliosWithState={fetchPortfoliosWithState}\n          isFetching={isFetching}\n          isFiltering={isFiltering}\n          canCreate={canCreate}\n        />\n      </TopToolbar>\n      <ContentGallery\n        items={galleryItems}\n        isLoading={isFetching || isFiltering}\n        renderEmptyState={() => (\n          <ContentGalleryEmptyState {...emptyStateProps} />\n        )}\n      />\n      {meta.count > 0 && (\n        <BottomPaginationContainer>\n          <AsyncPagination\n            meta={meta}\n            apiRequest={(_, options) =>\n              dispatch(fetchPortfoliosWithState(filters, options))\n            }\n            dropDirection=\"up\"\n          />\n        </BottomPaginationContainer>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Portfolios;\n"],"names":["id","to","portfolioName","portfolio_items","headerActions","TextContent","Link","Text","title","className","component","TextVariants","Badge","isRead","onClick","event","preventDefault","TO_DISPLAY","HeaderActions","portfolioId","handleCopyPortfolio","canLinkOrderProcesses","userCapabilities","share","copy","unshare","update","destroy","set_approval","formatMessage","useState","isOpen","setOpen","dropdownItems","push","DropdownItem","key","searchParams","portfolio","pathname","preserveHash","orderProcessAction","preserveSearch","role","length","Dropdown","isPlain","onSelect","position","DropdownPosition","toggle","KebabToggle","onToggle","imageUrl","isDisabled","name","metadata","props","search","user_capabilities","window","catalog","standalone","statistics","approval_processes","shared_groups","ouiaId","CardHeader","DateFormat","date","updated_at","created_at","type","owner","toDisplay","CardFooter","Label","variant","color","chipCategories","labelMessages","sort_by","sortByMapping","PortfoliosPrimaryToolbar","filters","stateDispatch","debouncedFilter","initialState","meta","filterType","handleFilterItems","sortDirection","handleSort","fetchPortfoliosWithState","isFetching","isFiltering","canCreate","dispatch","useDispatch","useFormatMessage","noData","PrimaryToolbar","dedicatedAction","Button","activeFiltersConfig","Object","entries","filter","value","map","category","chips","Array","isArray","onDelete","_e","clearAll","chip","payload","newFilters","filterConfig","onChange","items","filterValues","label","placeholder","sortByConfig","direction","onSortChange","_event","pagination","count","apiRequest","_","options","isCompact","undefined","propTypes","PropTypes","isRequired","asyncFormValidator","defaultSettings","filteringCallback","then","SortByDirection","portfoliosState","state","action","viewState","useInitialUriHash","isMounted","useIsMounted","useReducer","useSelector","portfolioReducer","portfolios","data","userPermissions","useContext","UserContext","permissions","history","useHistory","useEffect","scrollToTop","offset","copyPortfolio","PORTFOLIO_ROUTE","hasPermission","emptyStateProps","PrimaryAction","url","ADD_PORTFOLIO_ROUTE","filteringMessages","portfolioMessages","description","Icon","PlusCircleIcon","SearchIcon","galleryItems","item","Fragment","isLoading","renderEmptyState","dropDirection"],"sourceRoot":""}