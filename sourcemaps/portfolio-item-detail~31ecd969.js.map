{"version":3,"sources":["webpack:///./src/presentational-components/shared/button-with-spinner.js","webpack:///./src/helpers/approval/approval-helper.js","webpack:///./src/utilities/extract-format-message.js","webpack:///./src/messages/approval.messages.js","webpack:///./src/smart-components/common/edit-approval-workflow.js","webpack:///./src/redux/actions/approval-actions.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/detail-toolbar-actions.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/portfolio-item-detail-toolbar.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/pencil-alt-icon.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/item-detail-info-bar.js","webpack:///./src/forms/edit-portfolio-item-form.schema.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/icon-upload.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/edit-portfolio-item.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/item-detail-description.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/portfolio-item-detail.js"],"names":["SpinnerButton","styled","Button","SpinnerLabel","span","showSpinner","ButtonWithSpinner","children","isDisabled","props","size","propTypes","PropTypes","bool","oneOfType","node","arrayOf","defaultProps","loadWorkflowOptions","filterValue","initialLookup","initialLookupQuery","map","workflow","join","getAxiosInstance","get","APPROVAL_API_BASE","then","data","id","label","name","value","updateWorkflows","unlinkIds","linkIds","resourceObject","unlinkPromises","wf","getWorkflowApi","unlinkWorkflow","linkPromises","linkWorkflow","Promise","all","listWorkflowsForObject","pagination","limit","defaultSettings","offset","filter","objectQuery","appName","objectType","objectId","paginationQuery","filterQuery","extractFormatMessage","getState","i18nReducer","formatMessage","approvalMessages","defineMessages","require","unlinkNotification","defaultMessage","linkNotification","setWorkflow","currentWorkflows","EditApprovalWorkflow","removeSearch","keepHash","querySelector","pushParam","objectName","onClose","useFormatMessage","modalTitle","useRef","defineMessage","current","dispatch","useDispatch","history","useEnhancedHistory","useQuery","query","close","push","title","onSubmit","toLink","toUnlink","toLinkIds","toUnlinkIds","object_type","app_name","APP_NAME","object_id","type","ASYNC_ACTIONS","UPDATE_WORKFLOWS","payload","ApprovalHelper","addNotification","variant","dismissable","description","length","count","getInitialTags","loadTags","subTitle","strong","Bold","existingTagsMessage","string","shape","pathname","isRequired","search","func","oneOf","DetailToolbarActions","copyUrl","orderUrl","editUrl","workflowUrl","editSurveyUrl","isOpen","setOpen","isFetching","availability","userCapabilities","update","copy","set_approval","dropdownItems","DropdownItem","aria-label","key","component","preserveSearch","actionMessages","edit","role","setApproval","window","insights","chrome","isBeta","orderProcessAction","orderProcessesMessages","setOrderProcess","PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE","portfolioMessages","portfolioItemSurvey","LevelItem","portfolioItemOrder","style","marginLeft","Dropdown","isPlain","onToggle","onSelect","position","DropdownPosition","right","toggle","KebabToggle","PortfolioItemIconItem","sourceId","src","CATALOG_API_BASE","height","PortfolioItemDetailToolbar","url","product","fromProducts","useLocation","paddingBottom","PORTFOLIO_ITEM_ROUTE_EDIT","breadcrumbsSpacing","breadcrumbs","Level","className","path","exact","editProduct","noData","grow","alignStart","service_offering_source_ref","TextContent","Text","TextVariants","h1","minHeight","open","distributor","object","SurveyEditorDropdown","handleResetSurvey","useState","setIsOpen","onClick","restoreSurvey","SurveyEditingToolbar","handleSaveSurvey","closeUrl","isValid","modified","Flex","save","to","exports","__esModule","PencilAltIconConfig","width","svgPath","yOffset","xOffset","transform","PencilAltIcon","createIcon","messages","ItemDetailInfoBar","source","portfolio","p","DateFormat","date","created_at","updated_at","editPortfolioItemSchema","fields","componentTypes","TEXT_FIELD","validate","validatorTypes","REQUIRED","URL","UploadButton","button","UploadIconWrapper","div","ImagePreview","img","IconUpload","uploadIcon","inputRef","image","setImage","isUploading","setIsUploading","accept","onChange","event","target","files","error","portfolioItemIconTitle","errors","detail","undefined","ref","hidden","disabled","click","Spinner","createObjectURL","EditPortfolioItem","cancelUrl","owner","useHistory","Stack","hasGutter","StackItem","initialValues","values","updatePortfolioItem","metadata","user_capabilities","schema","templateProps","disableSubmit","onCancel","ItemDetailDescription","detailPaths","PORTFOLIO_ITEM_RESOURCE_TYPE","render","long_description","h6","portfolioItemOverview","support_url","href","rel","portfolioItemSupport","documentation_url","portfolioItemDocumentation","portfolioItemDocLink","requiredCapabilities","SurveyEditor","lazy","requiredParams","PortfolioItemDetail","setIsFetching","queryValues","useRouteMatch","PORTFOLIO_ITEM_ROUTE","useSelector","portfolioReducer","portfolioItem","selectedPortfolio","useEffect","appNavClick","secondaryNav","getPortfolioItemDetail","Object","keys","Section","availability_status","unavailable","notFound","Alert","isInline","objectUnavaiable","file","uploadPortfolioItemIcon","fallback","sourceUnavaiable","Grid","GridItem","md","lg"],"mappings":"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","file":"js/portfolio-item-detail~31ecd969.bbbc2dc10fafa863bbdb.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { Button } from '@patternfly/react-core';\nimport { Spinner } from '@patternfly/react-core/dist/js/components/Spinner/Spinner';\n\nconst SpinnerButton = styled(Button)`\n  display: flex !important;\n  align-items: center;\n`;\n\nconst SpinnerLabel = styled.span`\n  margin-right: ${({ showSpinner }) => (showSpinner ? '8px' : '0')};\n`;\n\nconst ButtonWithSpinner = ({ children, showSpinner, isDisabled, ...props }) => (\n  <SpinnerButton {...props} isDisabled={isDisabled}>\n    <SpinnerLabel showSpinner={showSpinner}>{children}</SpinnerLabel>\n    {showSpinner && <Spinner size=\"md\" />}\n  </SpinnerButton>\n);\n\nButtonWithSpinner.propTypes = {\n  showSpinner: PropTypes.bool,\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node)\n  ]),\n  isDisabled: PropTypes.bool\n};\n\nButtonWithSpinner.defaultProps = {\n  showSpinner: false,\n  isDisabled: false\n};\n\nexport default ButtonWithSpinner;\n","import { getWorkflowApi, getAxiosInstance } from '../shared/user-login';\nimport { APPROVAL_API_BASE } from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\n\nexport const getApprovalWorkflows = () => getWorkflowApi().listWorkflows();\n\nexport const loadWorkflowOptions = (filterValue = '', initialLookup = []) => {\n  const initialLookupQuery = initialLookup\n    .map((workflow) => `filter[id][]=${workflow}`)\n    .join('&');\n\n  return getAxiosInstance()\n    .get(\n      `${APPROVAL_API_BASE}/workflows?filter[name][contains]=${filterValue}&${initialLookupQuery ||\n        ''}`\n    )\n    .then(({ data }) =>\n      data.map(({ id, name }) => ({ label: name, value: id }))\n    );\n};\n\nexport const updateWorkflows = (unlinkIds, linkIds, resourceObject) => {\n  const unlinkPromises = unlinkIds\n    ? unlinkIds.map((wf) => getWorkflowApi().unlinkWorkflow(wf, resourceObject))\n    : [];\n  const linkPromises = linkIds\n    ? linkIds.map((wf) => getWorkflowApi().linkWorkflow(wf, resourceObject))\n    : [];\n  return Promise.all([...unlinkPromises, ...linkPromises]);\n};\n\nexport const listWorkflowsForObject = (\n  resourceObject,\n  pagination = { limit: defaultSettings.limit, offset: defaultSettings.offset },\n  filter = ''\n) => {\n  const objectQuery = `app_name=${resourceObject.appName}&object_type=${resourceObject.objectType}&object_id=${resourceObject.objectId}`;\n  const paginationQuery = `&limit=${pagination.limit}&offset=${pagination.offset}`;\n  const filterQuery = `&filter[name][contains]=${filter}`;\n  return getAxiosInstance().get(\n    `${APPROVAL_API_BASE}/workflows?${objectQuery}${filterQuery}${paginationQuery}`\n  );\n};\n","const extractFormatMessage = (getState) => getState().i18nReducer.formatMessage;\n\nexport default extractFormatMessage;\n","const { defineMessages } = require('react-intl');\n\nconst approvalMessages = defineMessages({\n  unlinkNotification: {\n    id: 'approval.notifications.unlink',\n    defaultMessage:\n      '{count, number} {count, plural, one {approval process was} other {approval processes were}} unlinked successfully.'\n  },\n  linkNotification: {\n    id: 'approval.notifications.link',\n    defaultMessage:\n      '{count, number} {count, plural, one {approval process was} other {approval processes were}} linked successfully.'\n  },\n  setWorkflow: {\n    id: 'approval.workflows.set',\n    defaultMessage:\n      'Select approval processes for <strong>{objectName}</strong>'\n  },\n  currentWorkflows: {\n    id: 'approval.workflows.current',\n    defaultMessage: 'Current approval processes'\n  }\n});\n\nexport default approvalMessages;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { updateWorkflows } from '../../redux/actions/approval-actions';\nimport { APP_NAME } from '../../utilities/constants';\nimport {\n  loadWorkflowOptions,\n  listWorkflowsForObject\n} from '../../helpers/approval/approval-helper';\nimport useQuery from '../../utilities/use-query';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\nimport { defineMessage } from 'react-intl';\nimport approvalMessages from '../../messages/approval.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport TaggingModal from './tagging-modal';\nimport { Bold } from '../../presentational-components/shared/intl-rich-text-components';\n\nconst EditApprovalWorkflow = ({\n  objectType,\n  removeSearch,\n  keepHash,\n  querySelector,\n  pushParam,\n  objectName = () => objectType,\n  onClose\n}) => {\n  const formatMessage = useFormatMessage();\n  const { current: modalTitle } = useRef(\n    formatMessage(\n      defineMessage({\n        id: 'workflows.modal.title',\n        defaultMessage: 'Set approval process'\n      })\n    )\n  );\n  const dispatch = useDispatch();\n  const history = useEnhancedHistory({ removeSearch, keepHash });\n  const [query] = useQuery([querySelector]);\n\n  const close = () => {\n    onClose && onClose();\n    history.push(pushParam);\n  };\n\n  const onSubmit = (toLink, toUnlink) => {\n    close();\n    dispatch(\n      updateWorkflows(toLink, toUnlink, {\n        object_type: objectType,\n        app_name: APP_NAME[objectType],\n        object_id: query[querySelector]\n      })\n    );\n  };\n\n  return (\n    <TaggingModal\n      title={modalTitle}\n      onClose={close}\n      onSubmit={onSubmit}\n      getInitialTags={() =>\n        listWorkflowsForObject({\n          objectType,\n          appName: APP_NAME[objectType],\n          objectId: query[querySelector]\n        }).then(({ data }) => data)\n      }\n      loadTags={loadWorkflowOptions}\n      subTitle={formatMessage(approvalMessages.setWorkflow, {\n        strong: Bold,\n        objectName: objectName(query[querySelector])\n      })}\n      existingTagsMessage={formatMessage(approvalMessages.currentWorkflows)}\n    />\n  );\n};\n\nEditApprovalWorkflow.propTypes = {\n  pushParam: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string\n    })\n  ]).isRequired,\n  objectType: PropTypes.string.isRequired,\n  objectName: PropTypes.func,\n  removeSearch: PropTypes.bool,\n  querySelector: PropTypes.oneOf([\n    'portfolio',\n    'platform',\n    'inventory',\n    'portfolio-item'\n  ]).isRequired,\n  keepHash: PropTypes.bool,\n  onClose: PropTypes.func\n};\n\nEditApprovalWorkflow.defaultProps = {\n  keepHash: false\n};\n\nexport default EditApprovalWorkflow;\n","import { ASYNC_ACTIONS } from '../action-types/approval-action-types';\nimport * as ApprovalHelper from '../../helpers/approval/approval-helper';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport extractFormatMessage from '../../utilities/extract-format-message';\nimport approvalMessages from '../../messages/approval.messages';\n\nexport const fetchWorkflows = () => ({\n  type: ASYNC_ACTIONS.FETCH_WORKFLOWS,\n  payload: ApprovalHelper.getApprovalWorkflows().then(({ data }) => [\n    ...data.map(({ id, name }) => ({ value: id, label: name }))\n  ])\n});\n\nexport const updateWorkflows = (toLinkIds, toUnlinkIds, resourceObject) => (\n  dispatch,\n  getState\n) => {\n  const formatMessage = extractFormatMessage(getState);\n  return dispatch({\n    type: ASYNC_ACTIONS.UPDATE_WORKFLOWS,\n    payload: ApprovalHelper.updateWorkflows(\n      toUnlinkIds,\n      toLinkIds,\n      resourceObject\n    ).then(() =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Success updating approval process',\n          dismissable: true,\n          description: `${\n            toUnlinkIds.length > 0\n              ? formatMessage(approvalMessages.unlinkNotification, {\n                  count: toUnlinkIds.length\n                })\n              : ''\n          }\n          ${\n            toLinkIds.length > 0\n              ? formatMessage(approvalMessages.linkNotification, {\n                  count: toLinkIds.length\n                })\n              : ''\n          }`\n        })\n      )\n    )\n  });\n};\n\nexport const listWorkflowsForObject = (\n  resourceObject,\n  meta = { limit: defaultSettings.limit, offset: defaultSettings.offset },\n  filter = ''\n) => ({\n  type: ASYNC_ACTIONS.RESOLVE_WORKFLOWS,\n  payload: ApprovalHelper.listWorkflowsForObject(resourceObject, meta, filter)\n});\n","import PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  KebabToggle,\n  LevelItem\n} from '@patternfly/react-core';\nimport ButtonWithSpinner from '../../../presentational-components/shared/button-with-spinner';\nimport CatalogLink from '../../common/catalog-link';\nimport actionMessages from '../../../messages/actions.messages';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport orderProcessesMessages from '../../../messages/order-processes.messages';\nimport { PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE } from '../../../constants/routes';\n\nconst DetailToolbarActions = ({\n  copyUrl,\n  orderUrl,\n  editUrl,\n  workflowUrl,\n  editSurveyUrl,\n  isOpen,\n  setOpen,\n  isFetching,\n  availability,\n  userCapabilities: { update, copy, set_approval }\n}) => {\n  const formatMessage = useFormatMessage();\n  const dropdownItems = [];\n  if (update) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Edit Portfolio\"\n        key=\"edit-portfolio-item\"\n        id=\"edit-portfolio-item\"\n        component={\n          <CatalogLink pathname={editUrl} preserveSearch>\n            {formatMessage(actionMessages.edit)}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (copy) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Copy Portfolio\"\n        key=\"copy-portfolio-item\"\n        id=\"copy-portfolio-item\"\n        component={\n          <CatalogLink pathname={copyUrl} preserveSearch>\n            {formatMessage(actionMessages.copy)}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (set_approval) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Set approval\"\n        key=\"set-approval_workflow\"\n        id=\"set-approval_workflow\"\n        component={\n          <CatalogLink pathname={workflowUrl} preserveSearch>\n            {formatMessage(actionMessages.setApproval)}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (window.insights.chrome.isBeta() && update) {\n    const orderProcessAction = formatMessage(\n      orderProcessesMessages.setOrderProcess\n    );\n    dropdownItems.push(\n      <DropdownItem\n        aria-label={orderProcessAction}\n        key=\"attach-order-processes\"\n        id=\"attach-order-processes\"\n        component={\n          <CatalogLink\n            preserveSearch\n            pathname={PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE}\n          >\n            {orderProcessAction}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (update) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Edit survey\"\n        key=\"edit-survey\"\n        id=\"edit-survey\"\n        component={\n          <CatalogLink pathname={editSurveyUrl} preserveSearch>\n            {formatMessage(portfolioMessages.portfolioItemSurvey)}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  return (\n    <Fragment>\n      <LevelItem>\n        <CatalogLink\n          isDisabled={isFetching || availability === 'unavailable'}\n          pathname={orderUrl}\n          preserveSearch\n        >\n          <ButtonWithSpinner\n            isDisabled={isFetching || availability === 'unavailable'}\n            showSpinner={isFetching}\n            variant=\"primary\"\n            id=\"order-portfolio-item\"\n          >\n            {formatMessage(portfolioMessages.portfolioItemOrder)}\n          </ButtonWithSpinner>\n        </CatalogLink>\n      </LevelItem>\n      <LevelItem style={{ marginLeft: 16 }}>\n        {dropdownItems.length > 0 && (\n          <Dropdown\n            isPlain\n            onToggle={setOpen}\n            onSelect={() => setOpen(false)}\n            position={DropdownPosition.right}\n            toggle={\n              <KebabToggle\n                id=\"portfolio-item-actions-toggle\"\n                onToggle={(isOpen) => setOpen(isOpen)}\n              />\n            }\n            isOpen={isOpen}\n            dropdownItems={dropdownItems}\n          />\n        )}\n      </LevelItem>\n    </Fragment>\n  );\n};\n\nDetailToolbarActions.propTypes = {\n  orderUrl: PropTypes.string.isRequired,\n  editUrl: PropTypes.string.isRequired,\n  copyUrl: PropTypes.string.isRequired,\n  editSurveyUrl: PropTypes.string.isRequired,\n  workflowUrl: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool,\n  setOpen: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool,\n  availability: PropTypes.oneOf(['available', 'unavailable']).isRequired,\n  userCapabilities: PropTypes.shape({\n    update: PropTypes.bool,\n    copy: PropTypes.bool,\n    set_approval: PropTypes.bool\n  }).isRequired\n};\n\nDetailToolbarActions.defaultProps = {\n  isFetching: false\n};\n\nexport default DetailToolbarActions;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Link, Switch, useLocation } from 'react-router-dom';\nimport {\n  Level,\n  LevelItem,\n  Text,\n  TextContent,\n  TextVariants,\n  Button,\n  Flex,\n  Dropdown,\n  KebabToggle,\n  DropdownItem\n} from '@patternfly/react-core';\n\nimport DetailToolbarActions from './detail-toolbar-actions';\nimport { CATALOG_API_BASE } from '../../../utilities/constants';\nimport CardIcon from '../../../presentational-components/shared/card-icon';\nimport TopToolbar, {\n  TopToolbarTitle\n} from '../../../presentational-components/shared/top-toolbar';\nimport ButtonWithSpinner from '../../../presentational-components/shared/button-with-spinner';\nimport { StyledLevelItem } from '../../../presentational-components/styled-components/level';\nimport actionMessages from '../../../messages/actions.messages';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport BackToProducts from '../../../presentational-components/portfolio/back-to-products';\nimport { PORTFOLIO_ITEM_ROUTE_EDIT } from '../../../constants/routes';\nimport useFormatMessage from '../../../utilities/use-format-message';\n\nconst PortfolioItemIconItem = ({ id, sourceId }) => (\n  <CardIcon\n    src={`${CATALOG_API_BASE}/portfolio_items/${id}/icon`}\n    sourceId={sourceId}\n    height={64}\n  />\n);\n\nPortfolioItemIconItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  sourceId: PropTypes.string.isRequired\n};\n\nexport const PortfolioItemDetailToolbar = ({\n  url,\n  isOpen,\n  product,\n  setOpen,\n  isFetching,\n  availability,\n  userCapabilities,\n  fromProducts\n}) => {\n  const formatMessage = useFormatMessage();\n  const { pathname } = useLocation();\n  return (\n    <TopToolbar\n      paddingBottom={pathname !== PORTFOLIO_ITEM_ROUTE_EDIT}\n      breadcrumbsSpacing={false}\n      breadcrumbs={!fromProducts}\n    >\n      {fromProducts && <BackToProducts />}\n      <Level className=\"flex-no-wrap\">\n        <Switch>\n          <Route path={PORTFOLIO_ITEM_ROUTE_EDIT} exact>\n            <TopToolbarTitle\n              title={formatMessage(portfolioMessages.editProduct)}\n              noData\n            />\n          </Route>\n          <Route>\n            <StyledLevelItem grow alignStart className=\"pf-l-flex\">\n              {userCapabilities.update ? (\n                <PortfolioItemIconItem\n                  id={product.id}\n                  sourceId={product.service_offering_source_ref}\n                />\n              ) : (\n                <CardIcon\n                  src={`${CATALOG_API_BASE}/portfolio_items/${product.id}/icon`}\n                  sourceId={product.service_offering_source_ref}\n                  height={64}\n                />\n              )}\n              <TextContent className=\"pf-u-ml-md\">\n                <Text component={TextVariants.h1}>{product.name}</Text>\n              </TextContent>\n            </StyledLevelItem>\n            <LevelItem style={{ minHeight: 36 }} className=\"flex-item-no-wrap\">\n              <Level className=\"flex-no-wrap\">\n                <DetailToolbarActions\n                  isOpen={isOpen}\n                  setOpen={(open) => setOpen(open)}\n                  orderUrl={`${url}/order`}\n                  editUrl={`${url}/edit`}\n                  copyUrl={`${url}/copy`}\n                  editSurveyUrl={`${url}/edit-survey`}\n                  workflowUrl={`${url}/edit-workflow`}\n                  isFetching={isFetching}\n                  availability={availability}\n                  userCapabilities={userCapabilities}\n                />\n              </Level>\n            </LevelItem>\n          </Route>\n        </Switch>\n      </Level>\n    </TopToolbar>\n  );\n};\n\nPortfolioItemDetailToolbar.propTypes = {\n  url: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool,\n  product: PropTypes.shape({\n    distributor: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    service_offering_source_ref: PropTypes.string.isRequired\n  }).isRequired,\n  setOpen: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool,\n  availability: PropTypes.oneOf(['available', 'unavailable']).isRequired,\n  userCapabilities: PropTypes.object,\n  fromProducts: PropTypes.bool\n};\n\nPortfolioItemDetailToolbar.defaultProps = {\n  isFetching: false\n};\n\nconst SurveyEditorDropdown = ({ handleResetSurvey }) => {\n  const formatMessage = useFormatMessage();\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <Dropdown\n      isOpen={isOpen}\n      isPlain\n      onSelect={() => setIsOpen(false)}\n      position=\"right\"\n      toggle={<KebabToggle onToggle={(isOpen) => setIsOpen(isOpen)} />}\n      dropdownItems={[\n        <DropdownItem\n          onClick={handleResetSurvey}\n          component=\"button\"\n          key=\"synchronize\"\n        >\n          {formatMessage(portfolioMessages.restoreSurvey)}\n        </DropdownItem>\n      ]}\n    />\n  );\n};\n\nSurveyEditorDropdown.propTypes = {\n  handleResetSurvey: PropTypes.func.isRequired\n};\n\nexport const SurveyEditingToolbar = ({\n  handleSaveSurvey,\n  closeUrl,\n  search,\n  isFetching,\n  isValid,\n  modified,\n  handleResetSurvey\n}) => {\n  const formatMessage = useFormatMessage();\n  return (\n    <TopToolbar breadcrumbsSpacing={false} breadcrumbs>\n      <Level>\n        <StyledLevelItem grow alignStart className=\"pf-l-flex\">\n          <TextContent>\n            <Text component={TextVariants.h1}>\n              {formatMessage(portfolioMessages.portfolioItemSurvey)}\n            </Text>\n          </TextContent>\n        </StyledLevelItem>\n        <LevelItem>\n          <Flex className=\"align-items-center\">\n            <ButtonWithSpinner\n              variant=\"primary\"\n              showSpinner={isFetching}\n              isDisabled={isFetching || !isValid}\n              onClick={handleSaveSurvey}\n            >\n              {formatMessage(actionMessages.save)}\n            </ButtonWithSpinner>\n            <Link\n              to={{\n                pathname: closeUrl,\n                search\n              }}\n            >\n              <Button variant=\"link\">Cancel</Button>\n            </Link>\n            {modified && (\n              <SurveyEditorDropdown handleResetSurvey={handleResetSurvey} />\n            )}\n          </Flex>\n        </LevelItem>\n      </Level>\n    </TopToolbar>\n  );\n};\n\nSurveyEditingToolbar.propTypes = {\n  handleSaveSurvey: PropTypes.func.isRequired,\n  closeUrl: PropTypes.string.isRequired,\n  search: PropTypes.string.isRequired,\n  isFetching: PropTypes.bool,\n  isValid: PropTypes.bool,\n  modified: PropTypes.bool,\n  handleResetSurvey: PropTypes.func,\n  fromProducts: PropTypes.bool\n};\n","\"use strict\"\nexports.__esModule = true;\nexports.PencilAltIconConfig = {\n  name: 'PencilAltIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M497.9 142.1l-46.1 46.1c-4.7 4.7-12.3 4.7-17 0l-111-111c-4.7-4.7-4.7-12.3 0-17l46.1-46.1c18.7-18.7 49.1-18.7 67.9 0l60.1 60.1c18.8 18.7 18.8 49.1 0 67.9zM284.2 99.8L21.6 362.4.4 483.9c-2.9 16.4 11.4 30.6 27.8 27.8l121.5-21.3 262.6-262.6c4.7-4.7 4.7-12.3 0-17l-111-111c-4.8-4.7-12.4-4.7-17.1 0zM124.1 339.9c-5.5-5.5-5.5-14.3 0-19.8l154-154c5.5-5.5 14.3-5.5 19.8 0s5.5 14.3 0 19.8l-154 154c-5.5 5.5-14.3 5.5-19.8 0zM88 424h48v36.3l-64.5 11.3-31.1-31.1L51.7 376H88v48z',\n  yOffset: 0,\n  xOffset: 0,\n  transform: ''\n};\nexports.PencilAltIcon = require('../createIcon').createIcon(exports.PencilAltIconConfig);\nexports[\"default\"] = exports.PencilAltIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\nimport useFormatMessage from '../../../utilities/use-format-message';\n\nconst messages = {\n  platform: {\n    id: 'portfolio.item.detail.info.platform',\n    defaultMessage: 'Platform'\n  },\n  portfolio: {\n    id: 'portfolio.item.detail.info.portfolio',\n    defaultMessage: 'Portfolio'\n  },\n  vendor: {\n    id: 'portfolio.item.detail.info.vendor',\n    defaultMessage: 'Vendor'\n  },\n  created: {\n    id: 'portfolio.item.detail.info.created',\n    defaultMessage: 'Created'\n  }\n};\n\nconst ItemDetailInfoBar = ({ product, source, portfolio }) => {\n  const formatMessage = useFormatMessage();\n  return (\n    <TextContent className=\"pf-u-mb-md\">\n      <Text className=\"font-14\">{formatMessage(messages.platform)}</Text>\n      <Text\n        id=\"source-name\"\n        className=\"overflow-wrap\"\n        component={TextVariants.p}\n      >\n        {source.name}\n      </Text>\n      <Text className=\"font-14\">{formatMessage(messages.portfolio)}</Text>\n      <Text\n        id=\"portfolio-name\"\n        className=\"overflow-wrap\"\n        component={TextVariants.p}\n      >\n        {portfolio.name}\n      </Text>\n      {product.distributor && (\n        <span id=\"distributor\">\n          <Text className=\"font-14\">{formatMessage(messages.vendor)}</Text>\n          <Text className=\"overflow-wrap\" component={TextVariants.p}>\n            {product.distributor}\n          </Text>\n        </span>\n      )}\n      <Text className=\"font-14\">{formatMessage(messages.created)}</Text>\n      <Text id=\"created_at\" component={TextVariants.p}>\n        <DateFormat variant=\"relative\" date={product.created_at} />\n      </Text>\n    </TextContent>\n  );\n};\n\nItemDetailInfoBar.propTypes = {\n  product: PropTypes.shape({\n    distributor: PropTypes.string,\n    updated_at: PropTypes.string,\n    created_at: PropTypes.string.isRequired\n  }).isRequired,\n  source: PropTypes.shape({\n    name: PropTypes.string\n  }).isRequired,\n  portfolio: PropTypes.shape({\n    name: PropTypes.string\n  }).isRequired\n};\n\nexport default ItemDetailInfoBar;\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nconst editPortfolioItemSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'schemas.portfolio-item.name',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }]\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'description',\n      label: 'schemas.portfolio-item.description'\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'long_description',\n      label: 'schemas.portfolio-item.long_description'\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'distributor',\n      label: 'schemas.portfolio-item.vendor'\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'documentation_url',\n      label: 'schemas.portfolio-item.documentation_url',\n      validate: [\n        {\n          type: validatorTypes.URL\n        }\n      ]\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'support_url',\n      label: 'schemas.portfolio-item.support_url',\n      validate: [\n        {\n          type: validatorTypes.URL\n        }\n      ]\n    }\n  ]\n};\n\nexport default editPortfolioItemSchema;\n","import React, { useState, useRef } from 'react';\nimport { PencilAltIcon } from '@patternfly/react-icons';\nimport { Spinner } from '@patternfly/react-core/dist/js/components/Spinner/Spinner';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport styled from 'styled-components';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\n\nconst UploadButton = styled.button`\n  border: none;\n  position: absolute;\n  top: 0;\n  left: 0;\n  padding-left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: transparent;\n  &::after {\n    content: ' ';\n    position: absolute;\n    display: block;\n    top: -0.3em;\n    right: -0.3em;\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    background-color: rgba(255, 255, 255, 0.8);\n    z-index: 0;\n  }\n  svg {\n    z-index: 1;\n    position: absolute;\n    top: 0;\n    right: 0;\n  }\n`;\n\nconst UploadIconWrapper = styled.div`\n  position: relative;\n  display: inline-block;\n`;\n\nconst ImagePreview = styled.img`\n  height: 64px;\n  max-width: 300px;\n  object-fit: cover;\n`;\n\nconst IconUpload = ({ uploadIcon, children }) => {\n  const formatMessage = useFormatMessage();\n  const inputRef = useRef();\n  const [image, setImage] = useState();\n  const [isUploading, setIsUploading] = useState(false);\n  const handleClick = () => inputRef.current.click();\n  const dispatch = useDispatch();\n\n  return (\n    <UploadIconWrapper>\n      <input\n        accept=\".png,.svg,.jpeg\"\n        onChange={(event) => {\n          setImage(event.target.files[0]);\n          setIsUploading(true);\n          uploadIcon(event.target.files[0])\n            .then(() => setIsUploading(false))\n            .catch((error) => {\n              dispatch(\n                addNotification({\n                  variant: 'danger',\n                  title: formatMessage(\n                    portfolioMessages.portfolioItemIconTitle\n                  ),\n                  description: error.data.errors[0].detail,\n                  dismissable: true\n                })\n              );\n              setImage(undefined);\n              setIsUploading(false);\n            });\n        }}\n        ref={inputRef}\n        type=\"file\"\n        id=\"icon-upload\"\n        hidden\n      />\n      <UploadButton disabled={isUploading} onClick={handleClick}>\n        {isUploading ? <Spinner size=\"md\" /> : <PencilAltIcon size=\"sm\" />}\n      </UploadButton>\n      {!image && children}\n      {image && (\n        <ImagePreview\n          style={{ height: 64 }}\n          src={URL.createObjectURL(image)}\n          id={image.name}\n        />\n      )}\n    </UploadIconWrapper>\n  );\n};\n\nIconUpload.propTypes = {\n  uploadIcon: PropTypes.func.isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node)\n  ])\n};\n\nexport default IconUpload;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nimport FormRenderer from '../../common/form-renderer';\nimport editPortfolioItemSchema from '../../../forms/edit-portfolio-item-form.schema';\nimport { updatePortfolioItem } from '../../../redux/actions/portfolio-actions';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport IconUpload from './icon-upload';\nimport { CATALOG_API_BASE } from '../../../utilities/constants';\nimport CardIcon from '../../../presentational-components/shared/card-icon';\n\nconst EditPortfolioItem = ({\n  cancelUrl,\n  uploadIcon,\n  product: { owner, created_at, updated_at, ...product },\n  userCapabilities\n}) => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const { search } = useLocation();\n  return (\n    <Stack hasGutter>\n      <StackItem>\n        <IconUpload uploadIcon={uploadIcon}>\n          <CardIcon\n            src={`${CATALOG_API_BASE}/portfolio_items/${product.id}/icon`}\n            sourceId={product.service_offering_source_ref}\n            height={64}\n          />\n        </IconUpload>\n      </StackItem>\n      <StackItem>\n        <FormRenderer\n          initialValues={{ ...product }}\n          onSubmit={(values) => {\n            push({\n              pathname: cancelUrl,\n              search\n            });\n            return dispatch(\n              updatePortfolioItem({\n                ...values,\n                metadata: { user_capabilities: userCapabilities }\n              })\n            );\n          }}\n          schema={editPortfolioItemSchema}\n          templateProps={{\n            disableSubmit: ['pristine']\n          }}\n          onCancel={() =>\n            push({\n              pathname: cancelUrl,\n              search\n            })\n          }\n        />\n      </StackItem>\n    </Stack>\n  );\n};\n\nEditPortfolioItem.propTypes = {\n  cancelUrl: PropTypes.string.isRequired,\n  product: PropTypes.object.isRequired,\n  userCapabilities: PropTypes.object.isRequired,\n  uploadIcon: PropTypes.func.isRequired\n};\n\nexport default EditPortfolioItem;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Switch } from 'react-router-dom';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\n\nimport EditPortfolioItem from './edit-portfolio-item';\nimport EditApprovalWorkflow from '../../../smart-components/common/edit-approval-workflow';\nimport { PORTFOLIO_ITEM_RESOURCE_TYPE } from '../../../utilities/constants';\nimport CatalogRoute from '../../../routing/catalog-route';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport SetOrderProcessModal from '../../order-process/set-order-process-modal';\nimport { PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE } from '../../../constants/routes';\n\nconst ItemDetailDescription = ({\n  userCapabilities,\n  product,\n  url,\n  search,\n  detailPaths,\n  uploadIcon\n}) => {\n  const formatMessage = useFormatMessage();\n  return (\n    <Switch>\n      <Route path={`${url}/edit-workflow`}>\n        <EditApprovalWorkflow\n          pushParam={{ pathname: url, search }}\n          objectType={PORTFOLIO_ITEM_RESOURCE_TYPE}\n          objectId={product.id}\n          objectName={() => product.name}\n          querySelector=\"portfolio-item\"\n        />\n      </Route>\n      <Route path={PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE}>\n        <SetOrderProcessModal\n          querySelector=\"portfolio-item\"\n          objectType={PORTFOLIO_ITEM_RESOURCE_TYPE}\n          pushParam={{ pathname: url, search }}\n        />\n      </Route>\n      <Route\n        exact\n        path={detailPaths}\n        render={() => (\n          <TextContent>\n            {(product.description || product.long_description) && (\n              <Text component={TextVariants.h6}>\n                {formatMessage(portfolioMessages.portfolioItemOverview)}\n              </Text>\n            )}\n            {product.description && (\n              <Text id=\"description\" component={TextVariants.p}>\n                {product.description}\n              </Text>\n            )}\n            {product.long_description && (\n              <Text id=\"long_description\" component={TextVariants.p}>\n                {product.long_description}\n              </Text>\n            )}\n            {product.support_url && (\n              <Text id=\"support_url\" component={TextVariants.p}>\n                <a\n                  href={product.support_url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {formatMessage(portfolioMessages.portfolioItemSupport)}\n                </a>\n              </Text>\n            )}\n            {product.documentation_url && (\n              <Fragment>\n                <Text component={TextVariants.h6}>\n                  {formatMessage(portfolioMessages.portfolioItemDocumentation)}\n                </Text>\n                <Text id=\"documentation_url\" component={TextVariants.p}>\n                  <a\n                    href={product.documentation_url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {formatMessage(portfolioMessages.portfolioItemDocLink)}\n                  </a>\n                </Text>\n              </Fragment>\n            )}\n          </TextContent>\n        )}\n      />\n      <CatalogRoute\n        exact\n        path={`${url}/edit`}\n        requiredCapabilities=\"update\"\n        userCapabilities={userCapabilities}\n      >\n        <EditPortfolioItem\n          cancelUrl={url}\n          product={product}\n          userCapabilities={userCapabilities}\n          uploadIcon={uploadIcon}\n        />\n      </CatalogRoute>\n    </Switch>\n  );\n};\n\nItemDetailDescription.propTypes = {\n  product: PropTypes.shape({\n    name: PropTypes.string,\n    long_description: PropTypes.string,\n    support_url: PropTypes.string,\n    documentation_url: PropTypes.string,\n    description: PropTypes.string,\n    id: PropTypes.string.isRequired\n  }).isRequired,\n  url: PropTypes.string.isRequired,\n  search: PropTypes.string.isRequired,\n  userCapabilities: PropTypes.object.isRequired,\n  detailPaths: PropTypes.arrayOf(PropTypes.string),\n  uploadIcon: PropTypes.func.isRequired\n};\n\nexport default ItemDetailDescription;\n","import React, { useEffect, useState, Fragment, lazy, Suspense } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Route, Switch, useRouteMatch, useLocation } from 'react-router-dom';\nimport { Grid, GridItem, Alert } from '@patternfly/react-core';\nimport { Section } from '@redhat-cloud-services/frontend-components/components/cjs/Section';\n\nimport ItemDetailInfoBar from './item-detail-info-bar';\nimport ItemDetailDescription from './item-detail-description';\nimport { PortfolioItemDetailToolbar } from './portfolio-item-detail-toolbar';\nimport TopToolbar from '../../../presentational-components/shared/top-toolbar';\nimport { getPortfolioItemDetail } from '../../../redux/actions/portfolio-actions';\nimport {\n  ProductLoaderPlaceholder,\n  AppPlaceholder\n} from '../../../presentational-components/shared/loader-placeholders';\nimport { uploadPortfolioItemIcon } from '../../../helpers/portfolio/portfolio-helper';\nimport useQuery from '../../../utilities/use-query';\nimport {\n  PORTFOLIO_ITEM_ROUTE,\n  PORTFOLIO_ITEM_ROUTE_EDIT,\n  PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE\n} from '../../../constants/routes';\nimport CatalogRoute from '../../../routing/catalog-route';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport BackToProducts from '../../../presentational-components/portfolio/back-to-products';\nimport useFormatMessage from '../../../utilities/use-format-message';\n\nconst SurveyEditor = lazy(() =>\n  import(\n    /* webpackChunkName: \"survey-editor\" */ '../../survey-editing/survey-editor'\n  )\n);\n\nconst requiredParams = [\n  'portfolio',\n  'source',\n  'portfolio-item',\n  'from-products'\n];\n\nconst PortfolioItemDetail = () => {\n  const formatMessage = useFormatMessage();\n  const [isOpen, setOpen] = useState(false);\n  const [isFetching, setIsFetching] = useState(true);\n  const dispatch = useDispatch();\n  const [queryValues, search] = useQuery(requiredParams);\n  const { pathname } = useLocation();\n  const { url } = useRouteMatch(PORTFOLIO_ITEM_ROUTE);\n  const {\n    portfolioItem: {\n      metadata: { user_capabilities: userCapabilities },\n      ...portfolioItem\n    },\n    source\n  } = useSelector(({ portfolioReducer: { portfolioItem } }) => portfolioItem);\n  const portfolio = useSelector(\n    ({ portfolioReducer: { selectedPortfolio } }) => selectedPortfolio\n  );\n  const fromProducts = queryValues['from-products'] === 'true';\n\n  useEffect(() => {\n    setIsFetching(true);\n    insights.chrome.appNavClick({\n      id: fromProducts ? 'products' : 'portfolios',\n      secondaryNav: true\n    });\n    dispatch(\n      getPortfolioItemDetail({\n        portfolioItem: queryValues['portfolio-item'],\n        ...queryValues\n      })\n    )\n      .then(() => setIsFetching(false))\n      .catch(() => setIsFetching(false));\n  }, [queryValues['portfolio-item']]);\n\n  if (isFetching || Object.keys(portfolioItem).length === 0) {\n    return (\n      <Section className=\"global-primary-background full-height\">\n        <TopToolbar breadcrumbs={!fromProducts}>\n          {fromProducts && <BackToProducts />}\n          <ProductLoaderPlaceholder />\n        </TopToolbar>\n      </Section>\n    );\n  }\n\n  const availability = source.availability_status || 'unavailable';\n  const unavailable = [source]\n    .filter(({ notFound }) => notFound)\n    .map(({ object }) => (\n      <Alert\n        className=\"pf-u-mb-sm\"\n        key={object}\n        variant=\"warning\"\n        isInline\n        title={formatMessage(portfolioMessages.objectUnavaiable, { object })}\n      />\n    ));\n  const uploadIcon = (file) => uploadPortfolioItemIcon(portfolioItem.id, file);\n  const detailPaths = [\n    PORTFOLIO_ITEM_ROUTE,\n    `${url}/order`,\n    `${url}/copy`,\n    `${url}/edit-workflow`,\n    PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE\n  ];\n  return (\n    <Fragment>\n      <Switch>\n        <CatalogRoute\n          requiredCapabilities=\"update\"\n          userCapabilities={userCapabilities}\n          path={`${url}/edit-survey`}\n        >\n          <Suspense fallback={<AppPlaceholder />}>\n            <SurveyEditor\n              closeUrl={url}\n              search={search}\n              uploadIcon={uploadIcon}\n              portfolioItem={portfolioItem}\n              portfolio={portfolio}\n            />\n          </Suspense>\n        </CatalogRoute>\n        <Route>\n          <Section className=\"full-height global-primary-background\">\n            <PortfolioItemDetailToolbar\n              fromProducts={fromProducts}\n              url={url}\n              isOpen={isOpen}\n              product={portfolioItem}\n              setOpen={setOpen}\n              isFetching={isFetching}\n              availability={availability}\n              userCapabilities={userCapabilities}\n            />\n            {unavailable.length > 0 && (\n              <div className=\"pf-u-mr-lg pf-u-ml-lg\">{unavailable}</div>\n            )}\n            {source.availability_status === 'unavailable' && (\n              <Alert\n                className=\"pf-u-ml-lg pf-u-mr-lg\"\n                id=\"unavailable-alert-info\"\n                variant=\"info\"\n                isInline\n                title={formatMessage(portfolioMessages.sourceUnavaiable)}\n              />\n            )}\n            <Grid hasGutter className=\"pf-u-p-lg\">\n              <Route path={detailPaths} exact>\n                <GridItem md={3} lg={2}>\n                  <ItemDetailInfoBar\n                    product={portfolioItem}\n                    portfolio={portfolio}\n                    source={source}\n                  />\n                </GridItem>\n              </Route>\n              <GridItem\n                md={pathname === PORTFOLIO_ITEM_ROUTE_EDIT ? 12 : 9}\n                lg={pathname === PORTFOLIO_ITEM_ROUTE_EDIT ? 12 : 10}\n              >\n                <ItemDetailDescription\n                  uploadIcon={uploadIcon}\n                  product={portfolioItem}\n                  userCapabilities={userCapabilities}\n                  url={url}\n                  detailPaths={detailPaths}\n                  search={search}\n                />\n              </GridItem>\n            </Grid>\n          </Section>\n        </Route>\n      </Switch>\n    </Fragment>\n  );\n};\n\nexport default PortfolioItemDetail;\n"],"sourceRoot":""}