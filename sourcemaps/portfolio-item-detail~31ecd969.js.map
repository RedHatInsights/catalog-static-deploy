{"version":3,"sources":["webpack:///./src/presentational-components/shared/button-with-spinner.tsx","webpack:///./src/helpers/approval/approval-helper.ts","webpack:///./src/utilities/extract-format-message.ts","webpack:///./src/messages/approval.messages.ts","webpack:///./src/smart-components/common/edit-approval-workflow.js","webpack:///./src/redux/actions/approval-actions.ts","webpack:///./src/smart-components/portfolio/portfolio-item-detail/detail-toolbar-actions.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/portfolio-item-detail-toolbar.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/pencil-alt-icon.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/item-detail-info-bar.js","webpack:///./src/forms/edit-portfolio-item-form.schema.ts","webpack:///./src/messages/icon.messages.ts","webpack:///./src/smart-components/portfolio/portfolio-item-detail/icon-upload.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/edit-portfolio-item.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/item-detail-description.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/portfolio-item-detail.js"],"names":["SpinnerButton","SpinnerLabel","span","ButtonWithSpinner","ref","children","showSpinner","isDisabled","props","size","displayName","loadWorkflowOptions","filterValue","initialLookup","initialLookupQuery","map","workflow","join","get","then","id","label","value","updateWorkflows","unlinkIds","linkIds","resourceObject","unlinkPromises","wf","unlinkWorkflow","linkPromises","linkWorkflow","Promise","all","listWorkflowsForObject","pagination","filter","limit","offset","objectQuery","appName","objectType","objectId","paginationQuery","filterQuery","getState","i18nReducer","formatMessage","unlinkNotification","defaultMessage","linkNotification","setWorkflow","currentWorkflows","EditApprovalWorkflow","removeSearch","keepHash","querySelector","pushParam","objectName","onClose","useFormatMessage","modalTitle","useRef","defineMessage","current","dispatch","useDispatch","history","useEnhancedHistory","useQuery","query","close","push","title","onSubmit","toLink","toUnlink","toLinkIds","toUnlinkIds","object_type","app_name","APP_NAME","object_id","type","UPDATE_WORKFLOWS","payload","variant","dismissable","description","length","count","getInitialTags","data","loadTags","subTitle","approvalMessages","strong","Bold","existingTagsMessage","propTypes","PropTypes","oneOfType","string","shape","pathname","isRequired","search","func","bool","oneOf","defaultProps","DetailToolbarActions","copyUrl","orderUrl","editUrl","workflowUrl","editSurveyUrl","isOpen","setOpen","isFetching","availability","userCapabilities","update","copy","set_approval","dropdownItems","DropdownItem","aria-label","key","component","preserveSearch","actionMessages","edit","role","setApproval","window","insights","chrome","isBeta","orderProcessAction","orderProcessesMessages","setOrderProcess","PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE","portfolioMessages","portfolioItemSurvey","LevelItem","portfolioItemOrder","style","marginLeft","Dropdown","isPlain","onToggle","onSelect","position","DropdownPosition","right","toggle","KebabToggle","PortfolioItemIconItem","sourceId","src","CATALOG_API_BASE","height","PortfolioItemDetailToolbar","url","product","fromProducts","useLocation","paddingBottom","PORTFOLIO_ITEM_ROUTE_EDIT","breadcrumbs","Level","className","path","exact","editProduct","noData","grow","alignStart","service_offering_source_ref","TextContent","Text","TextVariants","h1","name","minHeight","open","distributor","object","SurveyEditorDropdown","handleResetSurvey","useState","setIsOpen","onClick","restoreSurvey","SurveyEditingToolbar","handleSaveSurvey","closeUrl","isValid","modified","Flex","save","to","Button","exports","__esModule","PencilAltIconConfig","width","svgPath","yOffset","xOffset","transform","PencilAltIcon","createIcon","messages","ItemDetailInfoBar","source","portfolio","p","DateFormat","date","created_at","updated_at","fields","TEXT_FIELD","validate","REQUIRED","URL","changeIcon","resetIcon","UploadButton","styled","UploadIconWrapper","div","ImagePreview","img","StyledDropdown","IconUpload","uploadIcon","enableReset","inputRef","image","setImage","isUploading","setIsUploading","click","iconMessages","undefined","accept","onChange","event","target","files","error","addNotification","portfolioItemIconTitle","errors","detail","hidden","disabled","DropdownToggle","toggleIndicator","stopPropagation","Spinner","createObjectURL","node","arrayOf","EditPortfolioItem","cancelUrl","owner","useHistory","Stack","hasGutter","StackItem","icon_id","initialValues","values","updatePortfolioItem","metadata","user_capabilities","schema","editPortfolioItemSchema","templateProps","disableSubmit","onCancel","ItemDetailDescription","detailPaths","PORTFOLIO_ITEM_RESOURCE_TYPE","render","long_description","h6","portfolioItemOverview","support_url","href","rel","portfolioItemSupport","documentation_url","portfolioItemDocumentation","portfolioItemDocLink","requiredCapabilities","SurveyEditor","lazy","requiredParams","PortfolioItemDetail","setIsFetching","queryValues","useRouteMatch","PORTFOLIO_ITEM_ROUTE","useSelector","portfolioReducer","portfolioItem","selectedPortfolio","fetchData","skipLoading","getPortfolioItemDetail","useEffect","appNavClick","secondaryNav","Object","keys","Section","availability_status","unavailable","notFound","Alert","isInline","objectUnavaiable","file","uploadPortfolioItemIcon","fallback","sourceUnavaiable","Grid","GridItem","md","lg","resetPortfolioItemIcon"],"mappings":"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","file":"js/portfolio-item-detail~31ecd969.cbd8304d966ceb59d002.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { forwardRef } from 'react';\nimport styled from 'styled-components';\nimport { Button } from '@patternfly/react-core';\nimport { Spinner } from '@patternfly/react-core/dist/js/components/Spinner/Spinner';\nimport { AnyObject } from '../../types/common-types';\n\nconst SpinnerButton = styled(Button)`\n  display: flex !important;\n  align-items: center;\n`;\n\nconst SpinnerLabel = styled.span<{ showSpinner: boolean }>`\n  margin-right: ${({ showSpinner }) => (showSpinner ? '8px' : '0')};\n`;\n\nexport interface ButtonWithSpinnerProps extends AnyObject {\n  showSpinner?: boolean;\n  isDisabled?: boolean;\n}\nconst ButtonWithSpinner = forwardRef<HTMLButtonElement, ButtonWithSpinnerProps>(\n  ({ children, showSpinner = false, isDisabled = false, ...props }, ref) => (\n    <SpinnerButton ref={ref} {...props} isDisabled={isDisabled}>\n      <SpinnerLabel showSpinner={showSpinner}>{children}</SpinnerLabel>\n      {showSpinner && <Spinner size=\"md\" />}\n    </SpinnerButton>\n  )\n);\n\nButtonWithSpinner.displayName = 'ButtonWithSpinner';\n\nexport default ButtonWithSpinner;\n","import {\n  Workflow,\n  ResourceObject\n} from '@redhat-cloud-services/approval-client';\nimport { getWorkflowApi, getAxiosInstance } from '../shared/user-login';\nimport { APPROVAL_API_BASE } from '../../utilities/constants';\nimport { defaultSettings, PaginationConfiguration } from '../shared/pagination';\nimport {\n  ApiCollectionResponse,\n  SelectOptions,\n  InternalResourceObject\n} from '../../types/common-types';\n\nexport const getApprovalWorkflows = (): Promise<ApiCollectionResponse<\n  Workflow\n>> =>\n  (getWorkflowApi().listWorkflows() as unknown) as Promise<\n    ApiCollectionResponse<Workflow>\n  >;\n\nexport const loadWorkflowOptions = (\n  filterValue = '',\n  initialLookup: string[] = []\n): Promise<SelectOptions> => {\n  const initialLookupQuery = initialLookup\n    .map((workflow) => `filter[id][]=${workflow}`)\n    .join('&');\n\n  return getAxiosInstance()\n    .get(\n      `${APPROVAL_API_BASE}/workflows?filter[name][contains]=${filterValue}&${initialLookupQuery ||\n        ''}`\n    )\n    .then(({ data }) =>\n      data.map(({ id, name }: Workflow) => ({ label: name, value: id }))\n    );\n};\n\nexport const updateWorkflows = (\n  unlinkIds: string[],\n  linkIds: string[],\n  resourceObject: ResourceObject\n): Promise<void[]> => {\n  const unlinkPromises = unlinkIds\n    ? unlinkIds.map((wf) => getWorkflowApi().unlinkWorkflow(wf, resourceObject))\n    : [];\n  const linkPromises = linkIds\n    ? linkIds.map((wf) => getWorkflowApi().linkWorkflow(wf, resourceObject))\n    : [];\n  return (Promise.all([\n    ...unlinkPromises,\n    ...linkPromises\n  ]) as unknown) as Promise<void[]>;\n};\n\nexport const listWorkflowsForObject = (\n  resourceObject: InternalResourceObject,\n  pagination: PaginationConfiguration = {\n    limit: defaultSettings.limit,\n    offset: defaultSettings.offset\n  },\n  filter = ''\n): Promise<ApiCollectionResponse<Workflow>> => {\n  const objectQuery = `app_name=${resourceObject.appName}&object_type=${resourceObject.objectType}&object_id=${resourceObject.objectId}`;\n  const paginationQuery = `&limit=${pagination.limit}&offset=${pagination.offset}`;\n  const filterQuery = `&filter[name][contains]=${filter}`;\n  return getAxiosInstance().get(\n    `${APPROVAL_API_BASE}/workflows?${objectQuery}${filterQuery}${paginationQuery}`\n  );\n};\n","import { I18nFormatMessage } from '../redux/reducers/i18n-reducer';\nimport { GetReduxState } from '../types/redux';\n\nconst extractFormatMessage = (getState: GetReduxState): I18nFormatMessage =>\n  getState().i18nReducer.formatMessage!;\n\nexport default extractFormatMessage;\n","import { defineMessages } from 'react-intl';\n\nconst approvalMessages = defineMessages({\n  unlinkNotification: {\n    id: 'approval.notifications.unlink',\n    defaultMessage:\n      '{count, number} {count, plural, one {approval process was} other {approval processes were}} unlinked successfully.'\n  },\n  linkNotification: {\n    id: 'approval.notifications.link',\n    defaultMessage:\n      '{count, number} {count, plural, one {approval process was} other {approval processes were}} linked successfully.'\n  },\n  setWorkflow: {\n    id: 'approval.workflows.set',\n    defaultMessage:\n      'Select approval processes for <strong>{objectName}</strong>'\n  },\n  currentWorkflows: {\n    id: 'approval.workflows.current',\n    defaultMessage: 'Current approval processes'\n  }\n});\n\nexport default approvalMessages;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { updateWorkflows } from '../../redux/actions/approval-actions';\nimport { APP_NAME } from '../../utilities/constants';\nimport {\n  loadWorkflowOptions,\n  listWorkflowsForObject\n} from '../../helpers/approval/approval-helper';\nimport useQuery from '../../utilities/use-query';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\nimport { defineMessage } from 'react-intl';\nimport approvalMessages from '../../messages/approval.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport TaggingModal from './tagging-modal';\nimport { Bold } from '../../presentational-components/shared/intl-rich-text-components';\n\nconst EditApprovalWorkflow = ({\n  objectType,\n  removeSearch,\n  keepHash,\n  querySelector,\n  pushParam,\n  objectName = () => objectType,\n  onClose\n}) => {\n  const formatMessage = useFormatMessage();\n  const { current: modalTitle } = useRef(\n    formatMessage(\n      defineMessage({\n        id: 'workflows.modal.title',\n        defaultMessage: 'Set approval process'\n      })\n    )\n  );\n  const dispatch = useDispatch();\n  const history = useEnhancedHistory({ removeSearch, keepHash });\n  const [query] = useQuery([querySelector]);\n\n  const close = () => {\n    onClose && onClose();\n    history.push(pushParam);\n  };\n\n  const onSubmit = (toLink, toUnlink) => {\n    close();\n    dispatch(\n      updateWorkflows(toLink, toUnlink, {\n        object_type: objectType,\n        app_name: APP_NAME[objectType],\n        object_id: query[querySelector]\n      })\n    );\n  };\n\n  return (\n    <TaggingModal\n      title={modalTitle}\n      onClose={close}\n      onSubmit={onSubmit}\n      getInitialTags={() =>\n        listWorkflowsForObject({\n          objectType,\n          appName: APP_NAME[objectType],\n          objectId: query[querySelector]\n        }).then(({ data }) => data)\n      }\n      loadTags={loadWorkflowOptions}\n      subTitle={formatMessage(approvalMessages.setWorkflow, {\n        strong: Bold,\n        objectName: objectName(query[querySelector])\n      })}\n      existingTagsMessage={formatMessage(approvalMessages.currentWorkflows)}\n    />\n  );\n};\n\nEditApprovalWorkflow.propTypes = {\n  pushParam: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string\n    })\n  ]).isRequired,\n  objectType: PropTypes.string.isRequired,\n  objectName: PropTypes.func,\n  removeSearch: PropTypes.bool,\n  querySelector: PropTypes.oneOf([\n    'portfolio',\n    'platform',\n    'inventory',\n    'portfolio-item'\n  ]).isRequired,\n  keepHash: PropTypes.bool,\n  onClose: PropTypes.func\n};\n\nEditApprovalWorkflow.defaultProps = {\n  keepHash: false\n};\n\nexport default EditApprovalWorkflow;\n","import { Dispatch } from 'redux';\nimport {\n  ApiCollectionResponse,\n  ApiMetadata,\n  InternalResourceObject\n} from '../../types/common-types';\nimport { ASYNC_ACTIONS } from '../action-types/approval-action-types';\nimport * as ApprovalHelper from '../../helpers/approval/approval-helper';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport extractFormatMessage from '../../utilities/extract-format-message';\nimport approvalMessages from '../../messages/approval.messages';\nimport { AsyncMiddlewareAction, GetReduxState } from '../../types/redux';\nimport {\n  ResourceObject,\n  Workflow\n} from '@redhat-cloud-services/approval-client';\n\nexport const fetchWorkflows = (): AsyncMiddlewareAction<{\n  value?: string;\n  label?: string;\n}[]> => ({\n  type: ASYNC_ACTIONS.FETCH_WORKFLOWS,\n  payload: ApprovalHelper.getApprovalWorkflows().then(({ data }) =>\n    data.map(({ id, name }) => ({ value: id, label: name }))\n  )\n});\n\nexport const updateWorkflows = (\n  toLinkIds: string[],\n  toUnlinkIds: string[],\n  resourceObject: ResourceObject\n) => (dispatch: Dispatch, getState: GetReduxState): AsyncMiddlewareAction => {\n  const formatMessage = extractFormatMessage(getState);\n  return dispatch({\n    type: ASYNC_ACTIONS.UPDATE_WORKFLOWS,\n    payload: ApprovalHelper.updateWorkflows(\n      toUnlinkIds,\n      toLinkIds,\n      resourceObject\n    ).then(() =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Success updating approval process',\n          dismissable: true,\n          description: `${\n            toUnlinkIds.length > 0\n              ? formatMessage &&\n                formatMessage(approvalMessages.unlinkNotification, {\n                  count: toUnlinkIds.length\n                })\n              : ''\n          }\n          ${\n            toLinkIds.length > 0\n              ? formatMessage(approvalMessages.linkNotification, {\n                  count: toLinkIds.length\n                })\n              : ''\n          }`\n        })\n      )\n    )\n  });\n};\n\nexport const listWorkflowsForObject = (\n  resourceObject: InternalResourceObject,\n  meta: ApiMetadata = {\n    limit: defaultSettings.limit,\n    offset: defaultSettings.offset\n  },\n  filter = ''\n): AsyncMiddlewareAction<ApiCollectionResponse<Workflow>> => ({\n  type: ASYNC_ACTIONS.RESOLVE_WORKFLOWS,\n  payload: ApprovalHelper.listWorkflowsForObject(resourceObject, meta, filter)\n});\n","import PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  KebabToggle,\n  LevelItem\n} from '@patternfly/react-core';\nimport ButtonWithSpinner from '../../../presentational-components/shared/button-with-spinner';\nimport CatalogLink from '../../common/catalog-link';\nimport actionMessages from '../../../messages/actions.messages';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport orderProcessesMessages from '../../../messages/order-processes.messages';\nimport { PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE } from '../../../constants/routes';\n\nconst DetailToolbarActions = ({\n  copyUrl,\n  orderUrl,\n  editUrl,\n  workflowUrl,\n  editSurveyUrl,\n  isOpen,\n  setOpen,\n  isFetching,\n  availability,\n  userCapabilities: { update, copy, set_approval }\n}) => {\n  const formatMessage = useFormatMessage();\n  const dropdownItems = [];\n  if (update) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Edit Portfolio\"\n        key=\"edit-portfolio-item\"\n        id=\"edit-portfolio-item\"\n        component={\n          <CatalogLink pathname={editUrl} preserveSearch>\n            {formatMessage(actionMessages.edit)}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (copy) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Copy Portfolio\"\n        key=\"copy-portfolio-item\"\n        id=\"copy-portfolio-item\"\n        component={\n          <CatalogLink pathname={copyUrl} preserveSearch>\n            {formatMessage(actionMessages.copy)}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (set_approval) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Set approval\"\n        key=\"set-approval_workflow\"\n        id=\"set-approval_workflow\"\n        component={\n          <CatalogLink pathname={workflowUrl} preserveSearch>\n            {formatMessage(actionMessages.setApproval)}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (window.insights.chrome.isBeta() && update) {\n    const orderProcessAction = formatMessage(\n      orderProcessesMessages.setOrderProcess\n    );\n    dropdownItems.push(\n      <DropdownItem\n        aria-label={orderProcessAction}\n        key=\"attach-order-processes\"\n        id=\"attach-order-processes\"\n        component={\n          <CatalogLink\n            preserveSearch\n            pathname={PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE}\n          >\n            {orderProcessAction}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (update) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Edit survey\"\n        key=\"edit-survey\"\n        id=\"edit-survey\"\n        component={\n          <CatalogLink pathname={editSurveyUrl} preserveSearch>\n            {formatMessage(portfolioMessages.portfolioItemSurvey)}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  return (\n    <Fragment>\n      <LevelItem>\n        <CatalogLink\n          isDisabled={isFetching || availability === 'unavailable'}\n          pathname={orderUrl}\n          preserveSearch\n        >\n          <ButtonWithSpinner\n            isDisabled={isFetching || availability === 'unavailable'}\n            showSpinner={isFetching}\n            variant=\"primary\"\n            id=\"order-portfolio-item\"\n          >\n            {formatMessage(portfolioMessages.portfolioItemOrder)}\n          </ButtonWithSpinner>\n        </CatalogLink>\n      </LevelItem>\n      <LevelItem style={{ marginLeft: 16 }}>\n        {dropdownItems.length > 0 && (\n          <Dropdown\n            isPlain\n            onToggle={setOpen}\n            onSelect={() => setOpen(false)}\n            position={DropdownPosition.right}\n            toggle={\n              <KebabToggle\n                id=\"portfolio-item-actions-toggle\"\n                onToggle={(isOpen) => setOpen(isOpen)}\n              />\n            }\n            isOpen={isOpen}\n            dropdownItems={dropdownItems}\n          />\n        )}\n      </LevelItem>\n    </Fragment>\n  );\n};\n\nDetailToolbarActions.propTypes = {\n  orderUrl: PropTypes.string.isRequired,\n  editUrl: PropTypes.string.isRequired,\n  copyUrl: PropTypes.string.isRequired,\n  editSurveyUrl: PropTypes.string.isRequired,\n  workflowUrl: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool,\n  setOpen: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool,\n  availability: PropTypes.oneOf(['available', 'unavailable']).isRequired,\n  userCapabilities: PropTypes.shape({\n    update: PropTypes.bool,\n    copy: PropTypes.bool,\n    set_approval: PropTypes.bool\n  }).isRequired\n};\n\nDetailToolbarActions.defaultProps = {\n  isFetching: false\n};\n\nexport default DetailToolbarActions;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Link, Switch, useLocation } from 'react-router-dom';\nimport {\n  Level,\n  LevelItem,\n  Text,\n  TextContent,\n  TextVariants,\n  Button,\n  Flex,\n  Dropdown,\n  KebabToggle,\n  DropdownItem\n} from '@patternfly/react-core';\n\nimport DetailToolbarActions from './detail-toolbar-actions';\nimport { CATALOG_API_BASE } from '../../../utilities/constants';\nimport CardIcon from '../../../presentational-components/shared/card-icon';\nimport TopToolbar, {\n  TopToolbarTitle\n} from '../../../presentational-components/shared/top-toolbar';\nimport ButtonWithSpinner from '../../../presentational-components/shared/button-with-spinner';\nimport { StyledLevelItem } from '../../../presentational-components/styled-components/level';\nimport actionMessages from '../../../messages/actions.messages';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport BackToProducts from '../../../presentational-components/portfolio/back-to-products';\nimport { PORTFOLIO_ITEM_ROUTE_EDIT } from '../../../constants/routes';\nimport useFormatMessage from '../../../utilities/use-format-message';\n\nconst PortfolioItemIconItem = ({ id, sourceId }) => (\n  <CardIcon\n    src={`${CATALOG_API_BASE}/portfolio_items/${id}/icon`}\n    sourceId={sourceId}\n    height={64}\n  />\n);\n\nPortfolioItemIconItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  sourceId: PropTypes.string.isRequired\n};\n\nexport const PortfolioItemDetailToolbar = ({\n  url,\n  isOpen,\n  product,\n  setOpen,\n  isFetching,\n  availability,\n  userCapabilities,\n  fromProducts\n}) => {\n  const formatMessage = useFormatMessage();\n  const { pathname } = useLocation();\n  return (\n    <TopToolbar\n      paddingBottom={pathname !== PORTFOLIO_ITEM_ROUTE_EDIT}\n      breadcrumbs={!fromProducts}\n    >\n      {fromProducts && <BackToProducts />}\n      <Level className=\"flex-no-wrap\">\n        <Switch>\n          <Route path={PORTFOLIO_ITEM_ROUTE_EDIT} exact>\n            <TopToolbarTitle\n              title={formatMessage(portfolioMessages.editProduct)}\n              noData\n            />\n          </Route>\n          <Route>\n            <StyledLevelItem grow alignStart className=\"pf-l-flex\">\n              {userCapabilities.update ? (\n                <PortfolioItemIconItem\n                  id={product.id}\n                  sourceId={product.service_offering_source_ref}\n                />\n              ) : (\n                <CardIcon\n                  src={`${CATALOG_API_BASE}/portfolio_items/${product.id}/icon`}\n                  sourceId={product.service_offering_source_ref}\n                  height={64}\n                />\n              )}\n              <TextContent className=\"pf-u-ml-md\">\n                <Text component={TextVariants.h1}>{product.name}</Text>\n              </TextContent>\n            </StyledLevelItem>\n            <LevelItem style={{ minHeight: 36 }} className=\"flex-item-no-wrap\">\n              <Level className=\"flex-no-wrap\">\n                <DetailToolbarActions\n                  isOpen={isOpen}\n                  setOpen={(open) => setOpen(open)}\n                  orderUrl={`${url}/order`}\n                  editUrl={`${url}/edit`}\n                  copyUrl={`${url}/copy`}\n                  editSurveyUrl={`${url}/edit-survey`}\n                  workflowUrl={`${url}/edit-workflow`}\n                  isFetching={isFetching}\n                  availability={availability}\n                  userCapabilities={userCapabilities}\n                />\n              </Level>\n            </LevelItem>\n          </Route>\n        </Switch>\n      </Level>\n    </TopToolbar>\n  );\n};\n\nPortfolioItemDetailToolbar.propTypes = {\n  url: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool,\n  product: PropTypes.shape({\n    distributor: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    service_offering_source_ref: PropTypes.string.isRequired\n  }).isRequired,\n  setOpen: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool,\n  availability: PropTypes.oneOf(['available', 'unavailable']).isRequired,\n  userCapabilities: PropTypes.object,\n  fromProducts: PropTypes.bool\n};\n\nPortfolioItemDetailToolbar.defaultProps = {\n  isFetching: false\n};\n\nconst SurveyEditorDropdown = ({ handleResetSurvey }) => {\n  const formatMessage = useFormatMessage();\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <Dropdown\n      isOpen={isOpen}\n      isPlain\n      onSelect={() => setIsOpen(false)}\n      position=\"right\"\n      toggle={<KebabToggle onToggle={(isOpen) => setIsOpen(isOpen)} />}\n      dropdownItems={[\n        <DropdownItem\n          onClick={handleResetSurvey}\n          component=\"button\"\n          key=\"synchronize\"\n        >\n          {formatMessage(portfolioMessages.restoreSurvey)}\n        </DropdownItem>\n      ]}\n    />\n  );\n};\n\nSurveyEditorDropdown.propTypes = {\n  handleResetSurvey: PropTypes.func.isRequired\n};\n\nexport const SurveyEditingToolbar = ({\n  handleSaveSurvey,\n  closeUrl,\n  search,\n  isFetching,\n  isValid,\n  modified,\n  handleResetSurvey\n}) => {\n  const formatMessage = useFormatMessage();\n  return (\n    <TopToolbar breadcrumbs>\n      <Level>\n        <StyledLevelItem grow alignStart className=\"pf-l-flex\">\n          <TextContent>\n            <Text component={TextVariants.h1}>\n              {formatMessage(portfolioMessages.portfolioItemSurvey)}\n            </Text>\n          </TextContent>\n        </StyledLevelItem>\n        <LevelItem>\n          <Flex className=\"align-items-center\">\n            <ButtonWithSpinner\n              variant=\"primary\"\n              showSpinner={isFetching}\n              isDisabled={isFetching || !isValid}\n              onClick={handleSaveSurvey}\n            >\n              {formatMessage(actionMessages.save)}\n            </ButtonWithSpinner>\n            <Link\n              to={{\n                pathname: closeUrl,\n                search\n              }}\n            >\n              <Button variant=\"link\">Cancel</Button>\n            </Link>\n            {modified && (\n              <SurveyEditorDropdown handleResetSurvey={handleResetSurvey} />\n            )}\n          </Flex>\n        </LevelItem>\n      </Level>\n    </TopToolbar>\n  );\n};\n\nSurveyEditingToolbar.propTypes = {\n  handleSaveSurvey: PropTypes.func.isRequired,\n  closeUrl: PropTypes.string.isRequired,\n  search: PropTypes.string.isRequired,\n  isFetching: PropTypes.bool,\n  isValid: PropTypes.bool,\n  modified: PropTypes.bool,\n  handleResetSurvey: PropTypes.func,\n  fromProducts: PropTypes.bool\n};\n","\"use strict\"\nexports.__esModule = true;\nexports.PencilAltIconConfig = {\n  name: 'PencilAltIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M497.9 142.1l-46.1 46.1c-4.7 4.7-12.3 4.7-17 0l-111-111c-4.7-4.7-4.7-12.3 0-17l46.1-46.1c18.7-18.7 49.1-18.7 67.9 0l60.1 60.1c18.8 18.7 18.8 49.1 0 67.9zM284.2 99.8L21.6 362.4.4 483.9c-2.9 16.4 11.4 30.6 27.8 27.8l121.5-21.3 262.6-262.6c4.7-4.7 4.7-12.3 0-17l-111-111c-4.8-4.7-12.4-4.7-17.1 0zM124.1 339.9c-5.5-5.5-5.5-14.3 0-19.8l154-154c5.5-5.5 14.3-5.5 19.8 0s5.5 14.3 0 19.8l-154 154c-5.5 5.5-14.3 5.5-19.8 0zM88 424h48v36.3l-64.5 11.3-31.1-31.1L51.7 376H88v48z',\n  yOffset: 0,\n  xOffset: 0,\n  transform: ''\n};\nexports.PencilAltIcon = require('../createIcon').createIcon(exports.PencilAltIconConfig);\nexports[\"default\"] = exports.PencilAltIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\nimport useFormatMessage from '../../../utilities/use-format-message';\n\nconst messages = {\n  platform: {\n    id: 'portfolio.item.detail.info.platform',\n    defaultMessage: 'Platform'\n  },\n  portfolio: {\n    id: 'portfolio.item.detail.info.portfolio',\n    defaultMessage: 'Portfolio'\n  },\n  vendor: {\n    id: 'portfolio.item.detail.info.vendor',\n    defaultMessage: 'Vendor'\n  },\n  created: {\n    id: 'portfolio.item.detail.info.created',\n    defaultMessage: 'Created'\n  }\n};\n\nconst ItemDetailInfoBar = ({ product, source, portfolio }) => {\n  const formatMessage = useFormatMessage();\n  return (\n    <TextContent className=\"pf-u-mb-md\">\n      <Text className=\"font-14\">{formatMessage(messages.platform)}</Text>\n      <Text\n        id=\"source-name\"\n        className=\"overflow-wrap\"\n        component={TextVariants.p}\n      >\n        {source.name}\n      </Text>\n      <Text className=\"font-14\">{formatMessage(messages.portfolio)}</Text>\n      <Text\n        id=\"portfolio-name\"\n        className=\"overflow-wrap\"\n        component={TextVariants.p}\n      >\n        {portfolio.name}\n      </Text>\n      {product.distributor && (\n        <span id=\"distributor\">\n          <Text className=\"font-14\">{formatMessage(messages.vendor)}</Text>\n          <Text className=\"overflow-wrap\" component={TextVariants.p}>\n            {product.distributor}\n          </Text>\n        </span>\n      )}\n      <Text className=\"font-14\">{formatMessage(messages.created)}</Text>\n      <Text id=\"created_at\" component={TextVariants.p}>\n        <DateFormat variant=\"relative\" date={product.created_at} />\n      </Text>\n    </TextContent>\n  );\n};\n\nItemDetailInfoBar.propTypes = {\n  product: PropTypes.shape({\n    distributor: PropTypes.string,\n    updated_at: PropTypes.string,\n    created_at: PropTypes.string.isRequired\n  }).isRequired,\n  source: PropTypes.shape({\n    name: PropTypes.string\n  }).isRequired,\n  portfolio: PropTypes.shape({\n    name: PropTypes.string\n  }).isRequired\n};\n\nexport default ItemDetailInfoBar;\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport Schema from '@data-driven-forms/react-form-renderer/dist/cjs/schema';\n\nconst editPortfolioItemSchema: Schema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'schemas.portfolio-item.name',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }]\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'description',\n      label: 'schemas.portfolio-item.description'\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'long_description',\n      label: 'schemas.portfolio-item.long_description'\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'distributor',\n      label: 'schemas.portfolio-item.vendor'\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'documentation_url',\n      label: 'schemas.portfolio-item.documentation_url',\n      validate: [\n        {\n          type: validatorTypes.URL\n        }\n      ]\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'support_url',\n      label: 'schemas.portfolio-item.support_url',\n      validate: [\n        {\n          type: validatorTypes.URL\n        }\n      ]\n    }\n  ]\n};\n\nexport default editPortfolioItemSchema;\n","import { defineMessages } from 'react-intl';\n\nconst iconMessages = defineMessages({\n  changeIcon: {\n    id: 'icons.actions.change',\n    defaultMessage: 'Upload image'\n  },\n  resetIcon: {\n    id: 'icons.actions.reset',\n    defaultMessage: 'Reset image'\n  }\n});\n\nexport default iconMessages;\n","import React, { useState, useRef } from 'react';\nimport { PencilAltIcon } from '@patternfly/react-icons';\nimport {\n  Spinner,\n  Dropdown,\n  DropdownToggle,\n  DropdownItem\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport styled from 'styled-components';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport iconMessages from '../../../messages/icon.messages';\n\nconst UploadButton = styled.span`\n  border: none;\n  position: absolute;\n  top: 0;\n  left: 0;\n  padding-left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: transparent;\n  &::after {\n    content: ' ';\n    position: absolute;\n    display: block;\n    top: -0.3em;\n    right: -0.3em;\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    background-color: rgba(255, 255, 255, 0.8);\n    z-index: 0;\n  }\n  svg,\n  .pf-c-spinner {\n    z-index: 1;\n    position: absolute;\n    top: 0;\n    right: 0;\n  }\n`;\n\nconst UploadIconWrapper = styled.div`\n  position: relative;\n  display: inline-block;\n`;\n\nconst ImagePreview = styled.img`\n  height: 64px;\n  max-width: 300px;\n  object-fit: cover;\n`;\n\nconst StyledDropdown = styled(Dropdown)`\n  .pf-c-dropdown__menu {\n    top: 24px;\n    left: calc(100% - 24px);\n  }\n`;\n\nconst IconUpload = ({ uploadIcon, resetIcon, enableReset, children }) => {\n  const formatMessage = useFormatMessage();\n  const inputRef = useRef();\n  const [image, setImage] = useState();\n  const [isUploading, setIsUploading] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const handleClick = () => {\n    setIsOpen(false);\n    return inputRef.current.click();\n  };\n\n  const handleReset = () => {\n    setImage(undefined);\n    setIsUploading(true);\n    return resetIcon().then(() => setIsUploading(false));\n  };\n\n  const dispatch = useDispatch();\n\n  const dropdownItems = [\n    <DropdownItem onClick={handleClick} key=\"change-icon\">\n      {formatMessage(iconMessages.changeIcon)}\n    </DropdownItem>,\n    <DropdownItem\n      isDisabled={!enableReset}\n      onClick={handleReset}\n      key=\"reset-icon\"\n    >\n      {formatMessage(iconMessages.resetIcon)}\n    </DropdownItem>\n  ];\n\n  return (\n    <UploadIconWrapper>\n      <input\n        accept=\".png,.svg,.jpeg\"\n        onChange={(event) => {\n          setImage(event.target.files[0]);\n          setIsUploading(true);\n          uploadIcon(event.target.files[0])\n            .then(() => setIsUploading(false))\n            .catch((error) => {\n              dispatch(\n                addNotification({\n                  variant: 'danger',\n                  title: formatMessage(\n                    portfolioMessages.portfolioItemIconTitle\n                  ),\n                  description: error.data.errors[0].detail,\n                  dismissable: true\n                })\n              );\n              setImage(undefined);\n              setIsUploading(false);\n            });\n        }}\n        ref={inputRef}\n        type=\"file\"\n        id=\"icon-upload\"\n        hidden\n      />\n      <StyledDropdown\n        onSelect={() => setIsOpen(false)}\n        isOpen={isOpen}\n        isPlain\n        disabled={isUploading}\n        dropdownItems={dropdownItems}\n        toggle={\n          <DropdownToggle\n            disabled={isUploading}\n            toggleIndicator={null}\n            onToggle={(isOpen, event) => {\n              event.stopPropagation();\n              setIsOpen(isOpen);\n            }}\n          >\n            <UploadButton>\n              {isUploading ? (\n                <Spinner size=\"md\" />\n              ) : (\n                <PencilAltIcon size=\"sm\" />\n              )}\n            </UploadButton>\n            {!image && children}\n            {image && (\n              <ImagePreview\n                style={{ height: 64 }}\n                src={URL.createObjectURL(image)}\n                id={image.name}\n              />\n            )}\n          </DropdownToggle>\n        }\n      />\n    </UploadIconWrapper>\n  );\n};\n\nIconUpload.propTypes = {\n  uploadIcon: PropTypes.func.isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node)\n  ]),\n  resetIcon: PropTypes.func.isRequired,\n  enableReset: PropTypes.bool\n};\n\nexport default IconUpload;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nimport FormRenderer from '../../common/form-renderer';\nimport editPortfolioItemSchema from '../../../forms/edit-portfolio-item-form.schema';\nimport { updatePortfolioItem } from '../../../redux/actions/portfolio-actions';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport IconUpload from './icon-upload';\nimport { CATALOG_API_BASE } from '../../../utilities/constants';\nimport CardIcon from '../../../presentational-components/shared/card-icon';\n\nconst EditPortfolioItem = ({\n  cancelUrl,\n  uploadIcon,\n  resetIcon,\n  product: { owner, created_at, updated_at, ...product },\n  userCapabilities\n}) => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const { search } = useLocation();\n  return (\n    <Stack hasGutter>\n      <StackItem key={product.icon_id || 'default'}>\n        <IconUpload\n          uploadIcon={uploadIcon}\n          resetIcon={resetIcon}\n          enableReset={!!product.icon_id}\n        >\n          <CardIcon\n            src={`${CATALOG_API_BASE}/portfolio_items/${\n              product.id\n            }/icon?cache_id=${product.icon_id || 'default'}`} // we need ho add the query to prevent the browser caching when reseting the image\n            sourceId={product.service_offering_source_ref}\n            height={64}\n          />\n        </IconUpload>\n      </StackItem>\n      <StackItem>\n        <FormRenderer\n          initialValues={{ ...product }}\n          onSubmit={(values) => {\n            push({\n              pathname: cancelUrl,\n              search\n            });\n            return dispatch(\n              updatePortfolioItem({\n                ...values,\n                metadata: { user_capabilities: userCapabilities }\n              })\n            );\n          }}\n          schema={editPortfolioItemSchema}\n          templateProps={{\n            disableSubmit: ['pristine']\n          }}\n          onCancel={() =>\n            push({\n              pathname: cancelUrl,\n              search\n            })\n          }\n        />\n      </StackItem>\n    </Stack>\n  );\n};\n\nEditPortfolioItem.propTypes = {\n  cancelUrl: PropTypes.string.isRequired,\n  product: PropTypes.object.isRequired,\n  userCapabilities: PropTypes.object.isRequired,\n  uploadIcon: PropTypes.func.isRequired,\n  resetIcon: PropTypes.func.isRequired\n};\n\nexport default EditPortfolioItem;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Switch } from 'react-router-dom';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\n\nimport EditPortfolioItem from './edit-portfolio-item';\nimport EditApprovalWorkflow from '../../../smart-components/common/edit-approval-workflow';\nimport { PORTFOLIO_ITEM_RESOURCE_TYPE } from '../../../utilities/constants';\nimport CatalogRoute from '../../../routing/catalog-route';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport SetOrderProcessModal from '../../order-process/set-order-process-modal';\nimport { PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE } from '../../../constants/routes';\n\nconst ItemDetailDescription = ({\n  userCapabilities,\n  product,\n  url,\n  search,\n  detailPaths,\n  uploadIcon,\n  resetIcon\n}) => {\n  const formatMessage = useFormatMessage();\n  return (\n    <Switch>\n      <Route path={`${url}/edit-workflow`}>\n        <EditApprovalWorkflow\n          pushParam={{ pathname: url, search }}\n          objectType={PORTFOLIO_ITEM_RESOURCE_TYPE}\n          objectId={product.id}\n          objectName={() => product.name}\n          querySelector=\"portfolio-item\"\n        />\n      </Route>\n      <Route path={PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE}>\n        <SetOrderProcessModal\n          querySelector=\"portfolio-item\"\n          objectType={PORTFOLIO_ITEM_RESOURCE_TYPE}\n          objectName={() => product.name}\n          pushParam={{ pathname: url, search }}\n        />\n      </Route>\n      <Route\n        exact\n        path={detailPaths}\n        render={() => (\n          <TextContent>\n            {(product.description || product.long_description) && (\n              <Text component={TextVariants.h6}>\n                {formatMessage(portfolioMessages.portfolioItemOverview)}\n              </Text>\n            )}\n            {product.description && (\n              <Text id=\"description\" component={TextVariants.p}>\n                {product.description}\n              </Text>\n            )}\n            {product.long_description && (\n              <Text id=\"long_description\" component={TextVariants.p}>\n                {product.long_description}\n              </Text>\n            )}\n            {product.support_url && (\n              <Text id=\"support_url\" component={TextVariants.p}>\n                <a\n                  href={product.support_url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {formatMessage(portfolioMessages.portfolioItemSupport)}\n                </a>\n              </Text>\n            )}\n            {product.documentation_url && (\n              <Fragment>\n                <Text component={TextVariants.h6}>\n                  {formatMessage(portfolioMessages.portfolioItemDocumentation)}\n                </Text>\n                <Text id=\"documentation_url\" component={TextVariants.p}>\n                  <a\n                    href={product.documentation_url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {formatMessage(portfolioMessages.portfolioItemDocLink)}\n                  </a>\n                </Text>\n              </Fragment>\n            )}\n          </TextContent>\n        )}\n      />\n      <CatalogRoute\n        exact\n        path={`${url}/edit`}\n        requiredCapabilities=\"update\"\n        userCapabilities={userCapabilities}\n      >\n        <EditPortfolioItem\n          cancelUrl={url}\n          product={product}\n          userCapabilities={userCapabilities}\n          uploadIcon={uploadIcon}\n          resetIcon={resetIcon}\n        />\n      </CatalogRoute>\n    </Switch>\n  );\n};\n\nItemDetailDescription.propTypes = {\n  product: PropTypes.shape({\n    name: PropTypes.string,\n    long_description: PropTypes.string,\n    support_url: PropTypes.string,\n    documentation_url: PropTypes.string,\n    description: PropTypes.string,\n    id: PropTypes.string.isRequired\n  }).isRequired,\n  url: PropTypes.string.isRequired,\n  search: PropTypes.string.isRequired,\n  userCapabilities: PropTypes.object.isRequired,\n  detailPaths: PropTypes.arrayOf(PropTypes.string),\n  uploadIcon: PropTypes.func.isRequired,\n  resetIcon: PropTypes.func.isRequired\n};\n\nexport default ItemDetailDescription;\n","import React, { useEffect, useState, Fragment, lazy, Suspense } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Route, Switch, useRouteMatch, useLocation } from 'react-router-dom';\nimport { Grid, GridItem, Alert } from '@patternfly/react-core';\nimport { Section } from '@redhat-cloud-services/frontend-components/components/cjs/Section';\n\nimport ItemDetailInfoBar from './item-detail-info-bar';\nimport ItemDetailDescription from './item-detail-description';\nimport { PortfolioItemDetailToolbar } from './portfolio-item-detail-toolbar';\nimport TopToolbar from '../../../presentational-components/shared/top-toolbar';\nimport { getPortfolioItemDetail } from '../../../redux/actions/portfolio-actions';\nimport {\n  ProductLoaderPlaceholder,\n  AppPlaceholder\n} from '../../../presentational-components/shared/loader-placeholders';\nimport {\n  uploadPortfolioItemIcon,\n  resetPortfolioItemIcon\n} from '../../../helpers/portfolio/portfolio-helper';\nimport useQuery from '../../../utilities/use-query';\nimport {\n  PORTFOLIO_ITEM_ROUTE,\n  PORTFOLIO_ITEM_ROUTE_EDIT,\n  PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE\n} from '../../../constants/routes';\nimport CatalogRoute from '../../../routing/catalog-route';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport BackToProducts from '../../../presentational-components/portfolio/back-to-products';\nimport useFormatMessage from '../../../utilities/use-format-message';\n\nconst SurveyEditor = lazy(() =>\n  import(\n    /* webpackChunkName: \"survey-editor\" */ '../../survey-editing/survey-editor'\n  )\n);\n\nconst requiredParams = [\n  'portfolio',\n  'source',\n  'portfolio-item',\n  'from-products'\n];\n\nconst PortfolioItemDetail = () => {\n  const formatMessage = useFormatMessage();\n  const [isOpen, setOpen] = useState(false);\n  const [isFetching, setIsFetching] = useState(true);\n  const dispatch = useDispatch();\n  const [queryValues, search] = useQuery(requiredParams);\n  const { pathname } = useLocation();\n  const { url } = useRouteMatch(PORTFOLIO_ITEM_ROUTE);\n  const {\n    portfolioItem: {\n      metadata: { user_capabilities: userCapabilities },\n      ...portfolioItem\n    },\n    source\n  } = useSelector(({ portfolioReducer: { portfolioItem } }) => portfolioItem);\n  const portfolio = useSelector(\n    ({ portfolioReducer: { selectedPortfolio } }) => selectedPortfolio\n  );\n  const fromProducts = queryValues['from-products'] === 'true';\n\n  const fetchData = (skipLoading) => {\n    if (!skipLoading) {\n      setIsFetching(true);\n    }\n\n    dispatch(\n      getPortfolioItemDetail({\n        portfolioItem: queryValues['portfolio-item'],\n        ...queryValues\n      })\n    )\n      .then(() => setIsFetching(false))\n      .catch(() => setIsFetching(false));\n  };\n\n  useEffect(() => {\n    insights.chrome.appNavClick({\n      id: fromProducts ? 'products' : 'portfolios',\n      secondaryNav: true\n    });\n    fetchData();\n  }, [queryValues['portfolio-item']]);\n\n  if (isFetching || Object.keys(portfolioItem).length === 0) {\n    return (\n      <Section className=\"global-primary-background full-height\">\n        <TopToolbar breadcrumbs={!fromProducts}>\n          {fromProducts && <BackToProducts />}\n          <ProductLoaderPlaceholder />\n        </TopToolbar>\n      </Section>\n    );\n  }\n\n  const availability = source.availability_status || 'unavailable';\n  const unavailable = [source]\n    .filter(({ notFound }) => notFound)\n    .map(({ object }) => (\n      <Alert\n        className=\"pf-u-mb-sm\"\n        key={object}\n        variant=\"warning\"\n        isInline\n        title={formatMessage(portfolioMessages.objectUnavaiable, { object })}\n      />\n    ));\n  const uploadIcon = (file) =>\n    uploadPortfolioItemIcon(portfolioItem.id, file).then(() => fetchData(true));\n  const resetIcon = () =>\n    resetPortfolioItemIcon(portfolioItem.icon_id).then(fetchData);\n  const detailPaths = [\n    PORTFOLIO_ITEM_ROUTE,\n    `${url}/order`,\n    `${url}/copy`,\n    `${url}/edit-workflow`,\n    PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE\n  ];\n  return (\n    <Fragment>\n      <Switch>\n        <CatalogRoute\n          requiredCapabilities=\"update\"\n          userCapabilities={userCapabilities}\n          path={`${url}/edit-survey`}\n        >\n          <Suspense fallback={<AppPlaceholder />}>\n            <SurveyEditor\n              closeUrl={url}\n              search={search}\n              uploadIcon={uploadIcon}\n              portfolioItem={portfolioItem}\n              portfolio={portfolio}\n            />\n          </Suspense>\n        </CatalogRoute>\n        <Route>\n          <Section className=\"full-height global-primary-background\">\n            <PortfolioItemDetailToolbar\n              fromProducts={fromProducts}\n              url={url}\n              isOpen={isOpen}\n              product={portfolioItem}\n              setOpen={setOpen}\n              isFetching={isFetching}\n              availability={availability}\n              userCapabilities={userCapabilities}\n            />\n            {unavailable.length > 0 && (\n              <div className=\"pf-u-mr-lg pf-u-ml-lg\">{unavailable}</div>\n            )}\n            {source.availability_status === 'unavailable' && (\n              <Alert\n                className=\"pf-u-ml-lg pf-u-mr-lg\"\n                id=\"unavailable-alert-info\"\n                variant=\"info\"\n                isInline\n                title={formatMessage(portfolioMessages.sourceUnavaiable)}\n              />\n            )}\n            <Grid hasGutter className=\"pf-u-p-lg\">\n              <Route path={detailPaths} exact>\n                <GridItem md={3} lg={2}>\n                  <ItemDetailInfoBar\n                    product={portfolioItem}\n                    portfolio={portfolio}\n                    source={source}\n                  />\n                </GridItem>\n              </Route>\n              <GridItem\n                md={pathname === PORTFOLIO_ITEM_ROUTE_EDIT ? 12 : 9}\n                lg={pathname === PORTFOLIO_ITEM_ROUTE_EDIT ? 12 : 10}\n              >\n                <ItemDetailDescription\n                  resetIcon={resetIcon}\n                  uploadIcon={uploadIcon}\n                  product={portfolioItem}\n                  userCapabilities={userCapabilities}\n                  url={url}\n                  detailPaths={detailPaths}\n                  search={search}\n                />\n              </GridItem>\n            </Grid>\n          </Section>\n        </Route>\n      </Switch>\n    </Fragment>\n  );\n};\n\nexport default PortfolioItemDetail;\n"],"sourceRoot":""}