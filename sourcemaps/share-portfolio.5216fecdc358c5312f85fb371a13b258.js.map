{"version":3,"file":"js/share-portfolio.839da189dda6e114fcdf.js","mappings":"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","sources":["webpack:///./src/forms/portfolio-share-form.schema.ts","webpack:///./src/helpers/share/share-helper.ts","webpack:///./src/redux/actions/share-actions.ts","webpack:///./src/helpers/rbac/rbac-helper.ts","webpack:///./src/helpers/portfolio/share-portfolio-message.ts","webpack:///./src/smart-components/portfolio/share-portfolio-modal.tsx"],"sourcesContent":["import Field from '@data-driven-forms/react-form-renderer/common-types/field';\nimport Schema from '@data-driven-forms/react-form-renderer/common-types/schema';\nimport { SelectOptions } from '../types/common-types';\n\n/**\n * Creates a data-driven-form schema for sharing/un-sharing portfolio\n */\nconst newShareSchema = (\n  loadGroupOptions: (inputValue?: string) => Promise<SelectOptions>,\n  permissionVerbs: SelectOptions\n): Field[] => [\n  {\n    component: 'sub-form',\n    description: 'share.new.description',\n    name: 'new_share',\n    key: '1',\n    fields: [\n      {\n        name: 'group-selection',\n        component: 'share-group-select',\n        loadOptions: loadGroupOptions,\n        isSearchable: true,\n        permissions: permissionVerbs\n      }\n    ]\n  }\n];\n\nconst groupShareSchema = (permissionVerbs: SelectOptions): Field[] => [\n  {\n    component: 'sub-form',\n    name: 'current-groups-sub-form',\n    fields: [\n      {\n        name: 'shared-groups',\n        permissionVerbs,\n        component: 'share-group-edit'\n      }\n    ]\n  }\n];\n\nexport const createPortfolioShareSchema = (\n  loadGroupOptions: (inputValue?: string) => Promise<SelectOptions>,\n  permissionVerbs: SelectOptions,\n  canShare: boolean,\n  canUnshare: boolean\n): Schema => {\n  const portfolioSchema = {\n    fields: [\n      ...(canShare ? newShareSchema(loadGroupOptions, permissionVerbs) : []),\n      ...(canUnshare ? groupShareSchema(permissionVerbs) : [])\n    ]\n  };\n  return portfolioSchema;\n};\n","import { getAxiosInstance, getPortfolioApi } from '../shared/user-login';\nimport { CATALOG_API_BASE } from '../../utilities/constants';\nimport {\n  ShareInfo,\n  SharePolicy,\n  SharePolicyPermissionsEnum,\n  UnsharePolicyPermissionsEnum,\n  UnsharePolicy\n} from '@redhat-cloud-services/catalog-client';\n\nconst axiosInstance = getAxiosInstance();\nconst userApi = getPortfolioApi();\n\nexport const getShareInfo = (portfolioId: string): Promise<ShareInfo> =>\n  axiosInstance.get(`${CATALOG_API_BASE}/portfolios/${portfolioId}/share_info`);\n\nexport interface ShareData<T = SharePolicyPermissionsEnum> {\n  permissions: T;\n  group_uuid: string;\n  id: string;\n}\nexport const sharePortfolio = (data: ShareData): Promise<void> => {\n  const policy: SharePolicy = {\n    permissions: data.permissions.split(',') as SharePolicyPermissionsEnum[],\n    group_uuids: [data.group_uuid]\n  };\n  return (userApi.sharePortfolio(data.id, policy) as unknown) as Promise<void>;\n};\n\nexport const unsharePortfolio = (\n  data: ShareData<UnsharePolicyPermissionsEnum[]>\n): Promise<void> => {\n  const policy: UnsharePolicy = {\n    permissions: data.permissions,\n    group_uuids: [data.group_uuid]\n  };\n  return (userApi.unsharePortfolio(data.id, policy) as unknown) as Promise<\n    void\n  >;\n};\n","import {\n  ShareInfo,\n  UnsharePolicyPermissionsEnum\n} from '@redhat-cloud-services/catalog-client';\nimport * as ShareHelper from '../../helpers/share/share-helper';\nimport { AsyncMiddlewareAction } from '../../types/redux';\nimport * as ActionTypes from '../action-types';\n\nexport const fetchShareInfo = (\n  portfolioId: string\n): AsyncMiddlewareAction<ShareInfo> => ({\n  type: ActionTypes.QUERY_PORTFOLIO,\n  payload: ShareHelper.getShareInfo(portfolioId)\n});\n\nexport const sharePortfolio = (\n  portfolioData: ShareHelper.ShareData\n): AsyncMiddlewareAction<void> => ({\n  type: ActionTypes.SHARE_PORTFOLIO,\n  payload: ShareHelper.sharePortfolio({\n    ...portfolioData\n  })\n});\n\nexport const unsharePortfolio = (\n  portfolioData: ShareHelper.ShareData<UnsharePolicyPermissionsEnum[]>\n): AsyncMiddlewareAction<void> => ({\n  type: ActionTypes.UNSHARE_PORTFOLIO,\n  payload: ShareHelper.unsharePortfolio({\n    ...portfolioData\n  })\n});\n","import { getAxiosInstance, getRbacGroupApi } from '../shared/user-login';\nimport { RBAC_API_BASE } from '../../utilities/constants';\nimport { GroupPagination } from '@redhat-cloud-services/rbac-client';\nimport { SelectOptions } from '../../types/common-types';\n\nconst api = getRbacGroupApi();\n\nexport const getRbacGroups = (): Promise<GroupPagination> =>\n  (api.listGroups() as unknown) as Promise<GroupPagination>;\n\nexport const fetchFilterGroups = (filterValue = ''): Promise<SelectOptions> =>\n  getAxiosInstance()\n    .get(\n      `${RBAC_API_BASE}/groups/${\n        filterValue.length > 0 ? `?name=${filterValue}` : ''\n      }`\n    )\n    .then(({ data }: GroupPagination) =>\n      data.map(({ uuid, name }) => ({ label: name, value: uuid }))\n    );\n","import portfolioMessages from '../../messages/portfolio.messages';\nimport { Bold } from '../../presentational-components/shared/intl-rich-text-components';\nimport { ReactNode } from 'react';\nimport { MessageDescriptor } from 'react-intl';\nimport { AnyObject } from '../../types/common-types';\n\nconst groupMessage = (\n  groupNames: string[],\n  formatMessage: (message: MessageDescriptor, values?: AnyObject) => ReactNode\n) => {\n  switch (groupNames.length) {\n    case 1:\n      return groupNames[0];\n    case 2:\n      return formatMessage(portfolioMessages.shareSuccessTwoGroup, {\n        group1: groupNames[0],\n        group2: groupNames[1]\n      });\n    default:\n      return formatMessage(portfolioMessages.shareSuccessMultipleGroups, {\n        count: groupNames.length\n      });\n  }\n};\n\n// TODO This will be the form type\nexport interface SharePortfolioData {\n  id?: string;\n  group_uuid: string;\n  permissions: string;\n  groupName: string;\n}\nconst sharePorfolioMessage = ({\n  shareData,\n  initialGroups,\n  removedGroups,\n  newGroups,\n  formatMessage,\n  portfolioName\n}: {\n  shareData: SharePortfolioData[];\n  initialGroups: SharePortfolioData[];\n  removedGroups: SharePortfolioData[];\n  newGroups: SharePortfolioData[];\n  formatMessage: (message: MessageDescriptor, values?: AnyObject) => ReactNode;\n  portfolioName: (...args: any[]) => string | undefined;\n}): { title: ReactNode; description: ReactNode } => {\n  let title = formatMessage(portfolioMessages.shareSuccessTitle);\n  let description;\n\n  const changedPermissions = shareData.filter(({ permissions, group_uuid }) => {\n    const originalGroup = initialGroups.find(\n      (group) => group.group_uuid === group_uuid\n    );\n\n    return (\n      originalGroup &&\n      permissions?.split(',').length !==\n        originalGroup.permissions?.split(',').length\n    );\n  });\n  const unshared =\n    removedGroups.filter(\n      ({ group_uuid }) =>\n        !changedPermissions.find((group) => group.group_uuid === group_uuid)\n    ).length > 0;\n  const shared =\n    newGroups.filter(\n      ({ group_uuid }) =>\n        !initialGroups.find((group) => group.group_uuid === group_uuid)\n    ).length > 0;\n\n  if (unshared && !shared && changedPermissions.length === 0) {\n    title = formatMessage(portfolioMessages.shareSuccessTitleOnlyUnsharing);\n    description = formatMessage(\n      portfolioMessages.shareSuccessDescriptionOnlyUnsharing,\n      {\n        name: portfolioName(),\n        group: groupMessage(\n          removedGroups.map(({ groupName }) => groupName),\n          formatMessage\n        ),\n        b: Bold\n      }\n    );\n  }\n\n  if (!unshared && shared && changedPermissions.length === 0) {\n    title = formatMessage(portfolioMessages.shareSuccessTitleOnlySharing);\n    description = formatMessage(\n      portfolioMessages.shareSuccessDescriptionOnlySharing,\n      {\n        name: portfolioName(),\n        group: groupMessage(\n          newGroups.map(({ groupName }) => groupName),\n          formatMessage\n        ),\n        b: Bold\n      }\n    );\n  }\n\n  if (!unshared && !shared && changedPermissions.length > 0) {\n    title = formatMessage(\n      portfolioMessages.shareSuccessTitleOnlyChaningPermissions\n    );\n    description = formatMessage(\n      portfolioMessages.shareSuccessDescriptionOnlyChaningPermissions,\n      {\n        group: groupMessage(\n          changedPermissions.map(({ groupName }) => groupName),\n          formatMessage\n        ),\n        b: Bold\n      }\n    );\n  }\n\n  return { title, description };\n};\n\nexport default sharePorfolioMessage;\n","/* eslint-disable react/prop-types */\nimport React, { ReactNode, useEffect, useState } from 'react';\nimport FormRenderer from '../common/form-renderer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport isEqual from 'lodash/isEqual';\nimport {\n  Modal,\n  TextContent,\n  Text,\n  Stack,\n  StackItem\n} from '@patternfly/react-core';\nimport { createPortfolioShareSchema } from '../../forms/portfolio-share-form.schema';\nimport {\n  fetchPortfolios,\n  resetSelectedPortfolio\n} from '../../redux/actions/portfolio-actions';\nimport {\n  fetchShareInfo,\n  sharePortfolio,\n  unsharePortfolio\n} from '../../redux/actions/share-actions';\nimport { ShareLoader } from '../../presentational-components/shared/loader-placeholders';\nimport { permissionOptions, permissionValues } from '../../utilities/constants';\nimport { fetchFilterGroups } from '../../helpers/rbac/rbac-helper';\nimport useQuery from '../../utilities/use-query';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\nimport { UnauthorizedRedirect } from '../error-pages/error-redirects';\nimport portfolioMessages from '../../messages/portfolio.messages';\nimport { ADD_NOTIFICATION } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport filteringMessages from '../../messages/filtering.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport sharePorfolioMessage, {\n  SharePortfolioData\n} from '../../helpers/portfolio/share-portfolio-message';\nimport { CatalogRootState } from '../../types/redux';\nimport {\n  ShareInfo,\n  SharePolicyPermissionsEnum,\n  UnsharePolicyPermissionsEnum\n} from '@redhat-cloud-services/catalog-client';\nimport { FormApi, Full, InternalPortfolio } from '../../types/common-types';\n\nexport type UniversalSharePolicy =\n  | (UnsharePolicyPermissionsEnum[] & SharePolicyPermissionsEnum.Read)\n  | (UnsharePolicyPermissionsEnum[] & SharePolicyPermissionsEnum.Update)\n  | (UnsharePolicyPermissionsEnum[] & SharePolicyPermissionsEnum.Delete)\n  | (UnsharePolicyPermissionsEnum[] & SharePolicyPermissionsEnum.Order);\n\nexport interface SharePortfolioModalProps {\n  closeUrl: string;\n  removeSearch?: boolean;\n  portfolioName?: (portfolio: string) => string | undefined;\n  viewState?: {\n    count: number;\n    limit: number;\n    offset: number;\n    filter: string;\n  };\n}\nconst SharePortfolioModal: React.ComponentType<SharePortfolioModalProps> = ({\n  closeUrl,\n  removeSearch,\n  viewState,\n  portfolioName = () => ''\n}) => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const { push } = useEnhancedHistory({ removeSearch, keepHash: true });\n  const [{ portfolio }, search] = useQuery(['portfolio']);\n  const [isFetching, setFetching] = useState(true);\n\n  const { selectedPortfolio: initialValues, isLoading } = useSelector<\n    CatalogRootState,\n    {\n      selectedPortfolio: InternalPortfolio;\n      isLoading: boolean;\n    }\n  >(({ portfolioReducer: { selectedPortfolio, isLoading } }) => ({\n    selectedPortfolio: selectedPortfolio as InternalPortfolio,\n    isLoading\n  }));\n\n  const { shareInfo } = useSelector<\n    CatalogRootState,\n    {\n      shareInfo: ShareInfo[];\n    }\n  >(({ shareReducer: { shareInfo } }) => ({\n    shareInfo\n  }));\n  useEffect(() => {\n    setFetching(true);\n    dispatch(fetchShareInfo(portfolio) as Promise<any>)\n      .then(() => setFetching(false))\n      .catch(() => setFetching(false));\n  }, []);\n\n  const onCancel = () => {\n    dispatch(resetSelectedPortfolio());\n    push({ pathname: closeUrl, search });\n  };\n\n  const initialShares = () => {\n    const initialGroupShareList = (shareInfo as Full<ShareInfo>[]).map(\n      (group) => {\n        const groupPermissions = group.permissions.filter(\n          (permission) => permissionValues.indexOf(permission) > -1\n        );\n        const groupName = group.group_name;\n        const options = permissionOptions.find(\n          (perm) => perm.value === groupPermissions.sort().join(',')\n        );\n        return {\n          groupName,\n          group_uuid: group.group_uuid,\n          permissions: options\n            ? options.value\n            : formatMessage(filteringMessages.unknown)\n        };\n      }\n    );\n    return initialGroupShareList;\n  };\n\n  const loadGroupOptions = (inputValue?: string) =>\n    fetchFilterGroups(inputValue);\n\n  const onSubmit = (\n    data: { 'shared-groups': SharePortfolioData[] },\n    formApi: FormApi\n  ) => {\n    const shareData = data['shared-groups'];\n    const newGroups: SharePortfolioData[] = [];\n    const initialGroups: SharePortfolioData[] = formApi.getState()\n      .initialValues['shared-groups'];\n    const removedGroups = initialGroups\n      .filter(\n        (group) =>\n          !shareData.find((item) => item.group_uuid === group.group_uuid)\n      )\n      .map(({ permissions, ...group }) => ({\n        ...group,\n        permissions: permissions.split(',')\n      }));\n    shareData.forEach((group) => {\n      const initialEntry = initialGroups.find(\n        (item) => item.group_uuid === group.group_uuid\n      );\n      if (initialEntry && !isEqual(initialEntry, group)) {\n        if (initialEntry.permissions!.length > group.permissions.length) {\n          removedGroups.push({\n            id: portfolio,\n            permissions: ['update'],\n            group_uuid: group.group_uuid,\n            groupName: group.groupName\n          });\n        } else {\n          newGroups.push(group);\n        }\n      }\n\n      if (!initialEntry) {\n        newGroups.push(group);\n      }\n    });\n\n    const createSharePromise = (group: SharePortfolioData, unshare = false) => {\n      const action = unshare ? unsharePortfolio : sharePortfolio;\n      return dispatch(\n        action({\n          id: portfolio,\n          permissions: (group.permissions as unknown) as UniversalSharePolicy,\n          group_uuid: group.group_uuid\n        })\n      );\n    };\n\n    const sharePromises = [\n      ...newGroups.map((group) => createSharePromise(group)),\n      ...removedGroups.map((group) =>\n        createSharePromise((group as unknown) as Full<SharePortfolioData>, true)\n      )\n    ];\n\n    onCancel();\n\n    const { title, description } = sharePorfolioMessage({\n      shareData,\n      initialGroups,\n      removedGroups: removedGroups.map(({ permissions, ...rest }) => ({\n        ...rest,\n        permissions: permissions.join(',')\n      })),\n      newGroups,\n      formatMessage,\n      portfolioName\n    });\n\n    return Promise.all(sharePromises).then(() => {\n      dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          dismissable: true,\n          variant: 'success',\n          title,\n          description\n        }\n      });\n      return dispatch(fetchPortfolios(viewState));\n    });\n  };\n\n  if (\n    initialValues?.metadata?.user_capabilities?.share === false &&\n    initialValues?.metadata?.user_capabilities?.unshare === false\n  ) {\n    return <UnauthorizedRedirect />;\n  }\n\n  const validateShares = (values: {\n    group_uuid?: string;\n    permissions?: string[];\n  }) => {\n    const errors: {\n      permissions?: ReactNode;\n      group_uuid?: ReactNode;\n    } = {};\n    if (values.group_uuid && !values.permissions) {\n      errors.permissions = formatMessage(\n        portfolioMessages.portfolioSharePermissions\n      );\n    }\n\n    if (values.permissions && !values.group_uuid) {\n      errors.group_uuid = formatMessage(portfolioMessages.portfolioShareGroups);\n    }\n\n    return errors;\n  };\n\n  const isLoadingFinal = isFetching || isLoading;\n\n  return (\n    <Modal\n      title={formatMessage(portfolioMessages.portfolioShareTitle) as string}\n      isOpen\n      variant=\"small\"\n      onClose={onCancel}\n    >\n      {isLoadingFinal && <ShareLoader />}\n      {!isLoadingFinal && (\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              <Text>\n                {formatMessage(portfolioMessages.portfolioShareDescription, {\n                  name: portfolioName(portfolio),\n                  // eslint-disable-next-line react/display-name\n                  strong: (chunks: ReactNode) => (\n                    <strong key=\"strong\">{chunks}</strong>\n                  )\n                })}\n              </Text>\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <FormRenderer\n              schema={createPortfolioShareSchema(\n                loadGroupOptions,\n                permissionOptions,\n                initialValues?.metadata?.user_capabilities?.share !== false,\n                initialValues?.metadata?.user_capabilities?.unshare !== false\n              )}\n              onSubmit={onSubmit}\n              onCancel={onCancel}\n              validate={validateShares}\n              initialValues={{\n                ...initialValues,\n                'shared-groups': initialShares()\n              }}\n              templateProps={{\n                disableSubmit: ['pristine', 'validating'],\n                submitLabel: formatMessage(\n                  portfolioMessages.portfolioShareApply\n                )\n              }}\n            />\n          </StackItem>\n        </Stack>\n      )}\n    </Modal>\n  );\n};\n\nexport default SharePortfolioModal;\n"],"names":["newShareSchema","loadGroupOptions","permissionVerbs","component","description","name","key","fields","loadOptions","isSearchable","permissions","groupShareSchema","axiosInstance","userApi","getShareInfo","portfolioId","get","portfolioData","type","payload","data","policy","split","group_uuids","group_uuid","sharePortfolio","id","unsharePortfolio","groupMessage","groupNames","formatMessage","length","group1","group2","count","closeUrl","removeSearch","viewState","portfolioName","dispatch","useDispatch","push","keepHash","portfolio","search","useState","isFetching","setFetching","useSelector","portfolioReducer","selectedPortfolio","isLoading","initialValues","shareInfo","useEffect","then","catch","onCancel","pathname","metadata","user_capabilities","share","unshare","canShare","canUnshare","isLoadingFinal","Modal","title","isOpen","variant","onClose","Stack","hasGutter","StackItem","TextContent","Text","strong","chunks","schema","inputValue","filterValue","map","uuid","label","value","onSubmit","formApi","shareData","newGroups","initialGroups","getState","removedGroups","filter","group","find","item","forEach","initialEntry","groupName","createSharePromise","sharePromises","changedPermissions","originalGroup","unshared","shared","b","rest","join","Promise","all","dismissable","validate","values","errors","groupPermissions","permission","group_name","options","perm","sort","templateProps","disableSubmit","submitLabel"],"sourceRoot":""}