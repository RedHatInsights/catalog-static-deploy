{"version":3,"file":"js/5167.9061111c4c435d5c1c80.js","mappings":"iSAOMA,EAAe,SAAU,mEAIlBC,GAAc,QAAO,EAAAC,UAAP,CAAiB,qJAK/BC,GAAc,QAAO,EAAAC,MAAP,CAAa,yDA6BxC,QArB2D,SAAC,GAC1D,QAAAC,UAAAA,OAAS,IAAG,KAAE,EACXC,E,yUAAI,GAFmD,eAGtD,OACJ,kBAAC,EAAAC,SAAQ,KACNF,EAAUG,KAAI,SAACC,GAAS,OACvB,kBAAC,IAAQ,CACPC,IAAK,cAAcD,EACnBE,MAAO,EACPC,SACE,kBAAC,EAAAC,QAAO,CAACC,QAAS,6BAAMR,EAAKG,KAC3B,uCAIH,kBAACT,EAAY,CAACU,IAAK,aAAaD,GAASH,EAAKG,U,4ECpC1CM,GAAiB,QAAO,EAAAC,SAAP,CAAgB,I,EAAA,gG,EAAA,gG,uEAAA,E,sCCK9C,Q,SAN8B,OAAU,I,EAAA,gF,EAAA,gF,uEAAA,E,0ZCE3BC,GAAa,QAAO,EAAAC,KAAP,CAAY,2GAKzBC,GAAoB,SAAO,SAAC,GAAY,aAAV,IAAeC,E,yUAAK,GAAtB,gBAA6B,OACpE,kBAAC,EAAAC,YAAW,KAAKD,MADc,CAE/B,gUAGgE,6MAAnD,SAAC,GAAmB,OAAP,aAAqB,QAAU,W,+GCLrDE,EAAU,WACd,IAAMC,GAAgB,SACtB,OACE,6BACE,kBAAC,EAAAC,KAAI,CAACC,UAAW,EAAAC,aAAA,IACdH,EAAc,gBAmCvB,QAxBiE,SAAC,G,IAChEI,EAAS,YACTC,EAAK,QACLC,EAAgB,mBACZ,OACJ,kBAAC,EAAAtB,SAAQ,KACNoB,EACC,kBAAC,KAAU,MACS,KAAlBC,MAAAA,OAAK,EAALA,EAAOE,QACTD,EACEA,IAEA,kBAACP,EAAO,MAGV,kBAAC,IAAO,CAACS,KAAK,WACZ,kBAAC,EAAAC,QAAO,CAACC,WAAS,EAACC,UAAU,mBAC1BN","sources":["webpack:///./src/presentational-components/shared/card-common.tsx","webpack:///./src/presentational-components/styled-components/card.ts","webpack:///./src/presentational-components/styled-components/ellipsis-text-container.ts","webpack:///./src/presentational-components/styled-components/styled-gallery.tsx","webpack:///./src/smart-components/content-gallery/content-gallery.tsx"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { Fragment } from 'react';\nimport styled from 'styled-components';\nimport { AnyObject } from '../../types/common-types';\nimport Truncate from 'react-truncate';\nimport { Level, LevelItem, Tooltip } from '@patternfly/react-core';\n\nconst CardPropText = styled.div`\n  overflow: hidden;\n`;\n\nexport const HeaderTitle = styled(LevelItem)`\n  max-width: calc(100% - 80px);\n  width: calc(100% - 80px);\n`;\n\nexport const HeaderLevel = styled(Level)`\n  width: 100%;\n`;\n\nexport interface ItemDetailsProps extends AnyObject {\n  toDisplay?: string[];\n}\n\nconst ItemDetails: React.ComponentType<ItemDetailsProps> = ({\n  toDisplay = [],\n  ...item\n}) => (\n  <Fragment>\n    {toDisplay.map((prop) => (\n      <Truncate\n        key={`tcard-prop-${prop}`}\n        lines={3}\n        ellipsis={\n          <Tooltip content={<div>{item[prop]}</div>}>\n            <span>...</span>\n          </Tooltip>\n        }\n      >\n        {<CardPropText key={`card-prop-${prop}`}>{item[prop]}</CardPropText>}\n      </Truncate>\n    ))}\n  </Fragment>\n);\n\nexport default ItemDetails;\n","import styled from 'styled-components';\nimport { CardBody } from '@patternfly/react-core';\n\nexport const StyledCardBody = styled(CardBody)`\n  height: 230px;\n  overflow: hidden;\n  padding: 0 !important;\n  margin: 0 24px 16px;\n`;\n","import styled from 'styled-components';\n\nconst EllipsisTextContainer = styled.div`\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n`;\n\nexport default EllipsisTextContainer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Card, GalleryItem } from '@patternfly/react-core';\n\nexport const StyledCard = styled(Card)`\n  height: 330px;\n  position: relative;\n`;\n\nexport const StyledGalleryItem = styled(({ isDisabled, ...props }) => (\n  <GalleryItem {...props} />\n))`\n  position: relative;\n  ::after {\n    display: ${({ isDisabled }) => (isDisabled ? 'block' : 'none')};\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    content: '';\n    background-color: rgba(210, 210, 210, 0.5);\n    z-index: 1;\n    cursor: progress;\n  }\n`;\n","/* eslint-disable react/prop-types */\nimport React, { Fragment, ReactNode } from 'react';\nimport { Section } from '@redhat-cloud-services/frontend-components/Section';\nimport { Text, TextVariants, Gallery } from '@patternfly/react-core';\n\nimport { CardLoader } from '../../presentational-components/shared/loader-placeholders';\nimport filteringMessages from '../../messages/filtering.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\n\nconst NoItems = () => {\n  const formatMessage = useFormatMessage();\n  return (\n    <div>\n      <Text component={TextVariants.h1}>\n        {formatMessage(filteringMessages.noItems)}\n      </Text>\n    </div>\n  );\n};\n\nexport interface ContentGalleryProps {\n  isLoading?: boolean;\n  items?: ReactNode[];\n  renderEmptyState?: () => ReactNode;\n}\nconst ContentGallery: React.ComponentType<ContentGalleryProps> = ({\n  isLoading,\n  items,\n  renderEmptyState\n}) => (\n  <Fragment>\n    {isLoading ? (\n      <CardLoader />\n    ) : items?.length === 0 ? (\n      renderEmptyState ? (\n        renderEmptyState()\n      ) : (\n        <NoItems />\n      )\n    ) : (\n      <Section type=\"content\">\n        <Gallery hasGutter className=\"content-gallery\">\n          {items}\n        </Gallery>\n      </Section>\n    )}\n  </Fragment>\n);\n\nexport default ContentGallery;\n"],"names":["CardPropText","HeaderTitle","LevelItem","HeaderLevel","Level","toDisplay","item","Fragment","map","prop","key","lines","ellipsis","Tooltip","content","StyledCardBody","CardBody","StyledCard","Card","StyledGalleryItem","props","GalleryItem","NoItems","formatMessage","Text","component","TextVariants","isLoading","items","renderEmptyState","length","type","Gallery","hasGutter","className"],"sourceRoot":""}