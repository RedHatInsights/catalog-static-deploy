{"version":3,"sources":["webpack:///./src/smart-components/order/order-detail/progress-messages.tsx","webpack:///./src/smart-components/order/order-detail/order-provision.tsx","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/info-icon.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/layouts/Flex/Flex.js"],"names":["orderItem","progressMessages","formatMessage","Grid","hasGutter","GridItem","md","lg","xl","Stack","StackItem","Card","CardBody","TextContent","Text","className","component","h2","orderItemParameters","service_parameters","src","orderProgressMessages","isFetching","setIsFetching","dispatch","order","orderProvision","userPermissions","showProgressMessages","orderItems","length","isEmpty","Bullseye","id","Flex","direction","default","grow","size","Title","headingLevel","noOrderProvision","columns","title","cellFormatters","createOrderItemMainRow","item","str","translatableState","state","isOpen","cells","small","DateFormat","date","updated_at","type","TableText","process_scope","defaultOrderItemType","charAt","toUpperCase","slice","name","style","color","icon","createOrderRow","key","orderRow","progressMessageItems","progressMessageItem","find","msgItem","orderItemId","push","parent","createOrderItemExpandedRow","createRows","reduce","acc","row","rows","setRows","Promise","all","then","fetchingOrderProvision","Spinner","activity","Table","onCollapse","event","rowIndex","rowData","data","rowId","u_rows","map","undefined","exports","__esModule","InfoIconConfig","height","width","svgPath","yOffset","xOffset","InfoIcon","createIcon","_a","children","spacer","spaceItems","shrink","flex","alignItems","alignContent","alignSelf","align","justifyContent","display","fullWidth","flexWrap","props","Object","assign","displayName"],"mappings":"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","file":"js/order-provision~31ecd969.dad7a25c9ec045335f61.js","sourcesContent":["import React from 'react';\n\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  Grid,\n  Card,\n  CardBody,\n  GridItem,\n  Stack,\n  StackItem\n} from '@patternfly/react-core';\n\nimport ReactJsonView from 'react-json-view';\nimport ordersMessages from '../../../messages/orders.messages';\nimport { FormatMessage } from '../../../types/common-types';\nimport {\n  OrderItem,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\n\nexport interface ProgressMessagesParams {\n  orderItem: OrderItem;\n  progressMessages: ProgressMessage[];\n  formatMessage: FormatMessage;\n}\n\nconst ProgressMessages: React.ComponentType<ProgressMessagesParams> = ({\n  orderItem,\n  progressMessages,\n  formatMessage\n}) => {\n  return (\n    <Grid hasGutter>\n      <GridItem md={12} lg={6} xl={4}>\n        <Stack hasGutter>\n          <StackItem>\n            <Card>\n              <CardBody>\n                <TextContent>\n                  <Text className=\"pf-u-mb-md\" component={TextVariants.h2}>\n                    {formatMessage(ordersMessages.orderItemParameters)}\n                  </Text>\n                </TextContent>\n                {orderItem?.service_parameters && (\n                  <ReactJsonView src={orderItem.service_parameters} />\n                )}\n              </CardBody>\n            </Card>\n          </StackItem>\n        </Stack>\n      </GridItem>\n      <GridItem md={12} lg={6} xl={8}>\n        <Card>\n          <CardBody>\n            <TextContent>\n              <Text className=\"pf-u-mb-md\" component={TextVariants.h2}>\n                {formatMessage(ordersMessages.orderProgressMessages)}\n              </Text>\n            </TextContent>\n            {<ReactJsonView src={progressMessages} />}\n          </CardBody>\n        </Card>\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default ProgressMessages;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Bullseye,\n  Card,\n  CardBody,\n  Flex,\n  Spinner,\n  Text,\n  TextContent,\n  TextVariants,\n  Title\n} from '@patternfly/react-core';\n\nimport {\n  expandable,\n  ICell,\n  IRowData,\n  Table,\n  TableBody,\n  TableHeader,\n  TableText\n} from '@patternfly/react-table';\n\nimport InfoIcon from '@patternfly/react-icons/dist/js/icons/info-icon';\nimport { fetchOrderProvision } from '../../../redux/actions/order-actions';\nimport ordersMessages from '../../../messages/orders.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport { CatalogRootState } from '../../../types/redux';\nimport {\n  OrderDetail,\n  OrderProvisionType\n} from '../../../redux/reducers/order-reducer';\nimport statesMessages, {\n  getTranslatableState\n} from '../../../messages/states.messages';\nimport orderStatusMapper from '../order-status-mapper';\nimport {\n  OrderItem,\n  OrderItemStateEnum,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\nimport { FormatMessage } from '../../../types/common-types';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\nimport ProgressMessages from './progress-messages';\nimport UserContext from '../../../user-context';\nimport { hasPermission } from '../../../helpers/shared/helpers';\n\nexport interface RowType {\n  id?: string;\n  parent?: number;\n  isOpen?: boolean;\n  cells: { title: any }[];\n}\n\nexport interface ExpandedRowType {\n  parent: number;\n  isOpen: boolean;\n  cells: { title: any }[];\n}\n\nconst isEmpty = (orderProvision?: OrderProvisionType) =>\n  !orderProvision ||\n  !orderProvision.orderItems ||\n  orderProvision.orderItems.length === 0;\n\nconst OrderProvision: React.ComponentType = () => {\n  const formatMessage = useFormatMessage();\n  const [isFetching, setIsFetching] = useState(true);\n  const dispatch = useDispatch();\n  const { order } = useSelector<CatalogRootState, OrderDetail>(\n    ({ orderReducer: { orderDetail } }) => orderDetail\n  );\n\n  const orderProvision = useSelector<CatalogRootState, OrderProvisionType>(\n    ({ orderReducer: { orderProvision } }) => orderProvision\n  );\n  const { permissions: userPermissions } = useContext(UserContext);\n  const showProgressMessages = hasPermission(userPermissions, [\n    'catalog:order_processes:link'\n  ]);\n\n  if (!isFetching && isEmpty(orderProvision)) {\n    return (\n      <Bullseye id=\"no-order-provision\">\n        <Flex direction={{ default: 'column' }} grow={{ default: 'grow' }}>\n          <Bullseye>\n            <InfoIcon size=\"xl\" />\n          </Bullseye>\n          <Bullseye>\n            <Title headingLevel=\"h1\" size=\"2xl\">\n              {formatMessage(ordersMessages.noOrderProvision)}\n            </Title>\n          </Bullseye>\n        </Flex>\n      </Bullseye>\n    );\n  }\n\n  const capitalize = (str: any) => str?.charAt(0).toUpperCase() + str?.slice(1);\n\n  const columns: Array<ICell> = [\n    {\n      title: 'Updated',\n      cellFormatters: showProgressMessages ? [expandable] : []\n    },\n    { title: 'Type' },\n    { title: 'Activity' },\n    { title: '' }\n  ];\n\n  const createOrderItemMainRow = (\n    item: OrderItem,\n    formatMessage: FormatMessage\n  ): RowType => {\n    const translatableState = getTranslatableState(\n      item.state as OrderItemStateEnum\n    );\n    return {\n      id: item.id,\n      isOpen: false,\n      cells: [\n        {\n          title: (\n            <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n              <DateFormat date={item.updated_at} type=\"exact\" />\n            </Text>\n          )\n        },\n        {\n          title: (\n            <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n              <TableText>\n                {capitalize(\n                  item.process_scope ||\n                    formatMessage(ordersMessages.defaultOrderItemType)\n                )}\n              </TableText>\n            </Text>\n          )\n        },\n        {\n          title: (\n            <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n              <TableText>{item.name}</TableText>\n            </Text>\n          )\n        },\n        {\n          title: (\n            <TableText>\n              <TextContent\n                style={{\n                  color:\n                    orderStatusMapper[\n                      item.state as keyof typeof orderStatusMapper\n                    ].color\n                }}\n              >\n                {\n                  orderStatusMapper[\n                    item.state as keyof typeof orderStatusMapper\n                  ].icon\n                }\n                &nbsp;\n                {formatMessage(statesMessages[translatableState])}\n              </TextContent>\n            </TableText>\n          )\n        }\n      ]\n    };\n  };\n\n  const createOrderItemExpandedRow = (\n    item: OrderItem,\n    progressMessages: ProgressMessage[],\n    formatMessage: FormatMessage,\n    key: number\n  ): RowType => {\n    return {\n      parent: key * 2,\n      cells: [\n        {\n          title: (\n            <ProgressMessages\n              orderItem={item}\n              progressMessages={progressMessages}\n              formatMessage={formatMessage}\n            />\n          )\n        }\n      ]\n    };\n  };\n\n  const createOrderRow = (\n    item: OrderItem,\n    formatMessage: FormatMessage,\n    key: number\n  ): RowType[] => {\n    const orderRow = [createOrderItemMainRow(item, formatMessage)];\n    if (\n      showProgressMessages &&\n      orderProvision.progressMessageItems &&\n      orderProvision.progressMessageItems.length > 0\n    ) {\n      const progressMessageItem = orderProvision.progressMessageItems.find(\n        (msgItem) => msgItem.orderItemId === item.id\n      );\n      if (progressMessageItem) {\n        orderRow.push(\n          createOrderItemExpandedRow(\n            item,\n            progressMessageItem.progressMessages,\n            formatMessage,\n            key\n          )\n        );\n      }\n    }\n\n    return orderRow;\n  };\n\n  const createRows = (): RowType[] =>\n    orderProvision.orderItems.reduce((acc: RowType[], item: OrderItem, key) => {\n      const row = createOrderRow(item, formatMessage, key);\n      return [...acc, ...row];\n    }, []);\n\n  const [rows, setRows] = useState<RowType[]>(createRows());\n\n  useEffect(() => {\n    setIsFetching(true);\n    Promise.all([dispatch(fetchOrderProvision(order.id))]).then(() =>\n      setIsFetching(false)\n    );\n  }, []);\n\n  useEffect((): void => {\n    setRows(createRows());\n  }, [orderProvision?.orderItems]);\n\n  const setOpen = (data: RowType[], rowId: any) =>\n    data.map((row) =>\n      row.id === rowId\n        ? {\n            ...row,\n            isOpen: !row.isOpen\n          }\n        : {\n            ...row\n          }\n    );\n\n  const onCollapse = (\n    event: React.MouseEvent,\n    rowIndex: number,\n    isOpen: boolean,\n    rowData: IRowData\n  ): void => {\n    const u_rows = setOpen(rows, rowData.id);\n    setRows(u_rows);\n  };\n\n  return (\n    <TextContent>\n      {isFetching ? (\n        <Bullseye>\n          <Flex direction={{ default: 'column' }} grow={{ default: 'grow' }}>\n            <Bullseye id=\"fetching-order-provision\">\n              <Title headingLevel=\"h1\" size=\"xl\">\n                {formatMessage(ordersMessages.fetchingOrderProvision)}\n              </Title>\n            </Bullseye>\n            <Bullseye>\n              <Spinner size=\"xl\" />\n            </Bullseye>\n          </Flex>\n        </Bullseye>\n      ) : (\n        <Card>\n          <CardBody>\n            <Text className=\"pf-u-mb-md\" component={TextVariants.h2}>\n              {formatMessage(ordersMessages.activity)}\n            </Text>\n            <Table\n              aria-label=\"Order provisioning activity\"\n              cells={columns}\n              rows={rows}\n              onCollapse={showProgressMessages ? onCollapse : undefined}\n            >\n              <TableHeader />\n              <TableBody />\n            </Table>\n          </CardBody>\n        </Card>\n      )}\n    </TextContent>\n  );\n};\n\nexport default OrderProvision;\n","\"use strict\"\nexports.__esModule = true;\nexports.InfoIconConfig = {\n  name: 'InfoIcon',\n  height: 512,\n  width: 192,\n  svgPath: 'M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.InfoIcon = require('../createIcon').createIcon(exports.InfoIconConfig);\nexports[\"default\"] = exports.InfoIcon;","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/layouts/Flex/flex';\nimport { formatBreakpointMods } from '../../helpers/util';\nexport const Flex = (_a) => {\n    var { children = null, className = '', spacer, spaceItems, grow, shrink, flex, direction, alignItems, alignContent, alignSelf, align, justifyContent, display, fullWidth, flexWrap } = _a, props = __rest(_a, [\"children\", \"className\", \"spacer\", \"spaceItems\", \"grow\", \"shrink\", \"flex\", \"direction\", \"alignItems\", \"alignContent\", \"alignSelf\", \"align\", \"justifyContent\", \"display\", \"fullWidth\", \"flexWrap\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.flex, formatBreakpointMods(spacer, styles), formatBreakpointMods(spaceItems, styles), formatBreakpointMods(grow, styles), formatBreakpointMods(shrink, styles), formatBreakpointMods(flex, styles), formatBreakpointMods(direction, styles), formatBreakpointMods(alignItems, styles), formatBreakpointMods(alignContent, styles), formatBreakpointMods(alignSelf, styles), formatBreakpointMods(align, styles), formatBreakpointMods(justifyContent, styles), formatBreakpointMods(display, styles), formatBreakpointMods(fullWidth, styles), formatBreakpointMods(flexWrap, styles), className) }, props), children));\n};\nFlex.displayName = 'Flex';\n//# sourceMappingURL=Flex.js.map"],"sourceRoot":""}