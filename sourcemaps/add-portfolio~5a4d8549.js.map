{"version":3,"sources":["webpack:///./src/utilities/use-enhanced-history.ts","webpack:///./src/forms/portfolio-form.schema.ts","webpack:///./src/smart-components/portfolio/add-portfolio-modal.js"],"names":["removeSearch","keepHash","history","push","target","internalTarget","location","hash","length","split","search","undefined","removeSearchQuery","debouncedValidator","name","portfolioId","then","data","trim","find","portfolio","id","createPortfolioSchema","openApiSchema","fields","label","component","TEXT_FIELD","isRequired","maxLength","components","schemas","Portfolio","properties","validate","value","TEXTAREA","AddPortfolioModal","removeQuery","closeTarget","viewState","formatMessage","useFormatMessage","dispatch","useDispatch","useState","isOpen","setIsOpen","useContext","UserContext","useQuery","useEnhancedHistory","initialValues","useSelector","portfolioReducer","getPortfolioFromState","onAddPortfolio","a","notification","variant","title","portfolioMessages","addSuccessTitle","description","addSuccessDescription","b","chunks","key","addPortfolio","newPortfolio","pathname","PORTFOLIO_ROUTE","editVariant","Object","keys","metadata","user_capabilities","update","schema","onSubmit","updatePortfolio","onCancel","isModal","modalProps","modalEditTitle","modalCreateTitle","onClose","loading","templateProps","submitLabel","actionMessages","save","labelMessages","create","propTypes","PropTypes","bool","oneOfType","string","shape","count","number","limit","offset","filter"],"mappings":"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","file":"js/add-portfolio~5a4d8549.5518d22b36de899dc7b3.js","sourcesContent":["import { useHistory } from 'react-router-dom';\nimport { History, Path } from 'history';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\n\nexport type EnhancedHistoryPushtarget =\n  | Path\n  | { pathname: string; hash?: string; search?: string; state?: AnyObject };\n\nconst removeSearchQuery = (target: EnhancedHistoryPushtarget) => {\n  if (typeof target === 'string') {\n    return target.split('?')[0];\n  }\n\n  if (typeof target === 'object') {\n    return {\n      ...target,\n      search: undefined\n    };\n  }\n\n  return target;\n};\n\n/**\n * Wrapper around useHistory hook which adds aditional settings to standard history methods\n * @param {Boolean} removeSearch if true, using history navigation methods will remove search string from path\n * @param {Boolean} keepHash if true, using history navigation methods will not remove hash from URL\n */\nconst useEnhancedHistory = ({\n  removeSearch,\n  keepHash\n}: {\n  removeSearch?: boolean;\n  keepHash?: boolean;\n} = {}): History<History.UnknownFacade> => {\n  const history = useHistory();\n  return {\n    ...history,\n    push: (target: EnhancedHistoryPushtarget) => {\n      let internalTarget = target;\n      if (keepHash && history.location.hash.length > 0) {\n        internalTarget =\n          typeof internalTarget === 'object'\n            ? { ...internalTarget, hash: history.location.hash }\n            : `${internalTarget}${history.location.hash}`;\n      }\n\n      if (removeSearch) {\n        return history.push(removeSearchQuery(internalTarget));\n      }\n\n      return history.push(internalTarget);\n    }\n  };\n};\n\nexport default useEnhancedHistory;\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport Schema from '@data-driven-forms/react-form-renderer/dist/cjs/schema';\nimport { DEFAULT_MAX_LENGTH } from '../utilities/constants';\n\nimport asyncFormValidator from '../utilities/async-form-validator';\nimport { fetchPortfolioByName } from '../helpers/portfolio/portfolio-helper';\nimport { AnyObject } from '../types/common-types';\n\nexport const validateName = (\n  name: string,\n  portfolioId: string\n): Promise<void> =>\n  fetchPortfolioByName(name).then(({ data }) => {\n    if (!name || name.trim().length === 0) {\n      throw 'Required';\n    }\n\n    const conflict = data.find(\n      (portfolio) => portfolio.name === name && portfolio.id !== portfolioId\n    );\n    if (conflict) {\n      throw 'Name has already been taken';\n    }\n  });\n\nconst debouncedValidator = asyncFormValidator(validateName);\n\n/**\n * Creates a data-driven-form schema for adding/editing portfolio\n * @param {bool} newRecord sets the variant of portfolio form\n * @param openApiSchema\n * @param portfolioId\n */\nexport const createPortfolioSchema = (\n  openApiSchema: AnyObject,\n  portfolioId: string\n): Schema => ({\n  fields: [\n    {\n      label: 'schemas.portfolio.name',\n      name: 'name',\n      component: componentTypes.TEXT_FIELD,\n      isRequired: true,\n      maxLength:\n        openApiSchema?.components?.schemas?.Portfolio?.properties?.name\n          ?.maxLength || DEFAULT_MAX_LENGTH,\n      validate: [(value: string) => debouncedValidator(value, portfolioId)]\n    },\n    {\n      label: 'schemas.portfolio.description',\n      component: componentTypes.TEXTAREA,\n      name: 'description'\n    }\n  ]\n});\n","import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FormRenderer from '../common/form-renderer';\nimport { createPortfolioSchema } from '../../forms/portfolio-form.schema';\nimport {\n  addPortfolio,\n  updatePortfolio\n} from '../../redux/actions/portfolio-actions';\nimport useQuery from '../../utilities/use-query';\nimport { getPortfolioFromState } from '../../helpers/portfolio/portfolio-helper';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\nimport { UnauthorizedRedirect } from '../error-pages/error-redirects';\nimport { PORTFOLIO_ROUTE } from '../../constants/routes';\nimport UserContext from '../../user-context';\nimport actionMessages from '../../messages/actions.messages';\nimport portfolioMessages from '../../messages/portfolio.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\n\nconst AddPortfolioModal = ({ removeQuery, closeTarget, viewState }) => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const [isOpen, setIsOpen] = useState(true);\n  const { openApiSchema: openApiSchema } = useContext(UserContext);\n  const [{ portfolio: portfolioId }] = useQuery(['portfolio']);\n  const { push } = useEnhancedHistory({ removeQuery, keepHash: true });\n  const initialValues = useSelector(({ portfolioReducer }) =>\n    getPortfolioFromState(portfolioReducer, portfolioId)\n  );\n\n  const onAddPortfolio = async (data) => {\n    const notification = {\n      variant: 'success',\n      title: formatMessage(portfolioMessages.addSuccessTitle),\n      description: formatMessage(portfolioMessages.addSuccessDescription, {\n        name: data.name,\n        // eslint-disable-next-line react/display-name\n        b: (chunks) => <b key=\"strong\">{chunks}</b>\n      })\n    };\n    const newPortfolio = await dispatch(addPortfolio(data, notification));\n    return newPortfolio && newPortfolio.value && newPortfolio.value.id\n      ? push({\n          pathname: PORTFOLIO_ROUTE,\n          search: `?portfolio=${newPortfolio.value.id}`\n        })\n      : push(closeTarget);\n  };\n\n  const onSubmit = (data) => {\n    if (initialValues) {\n      /**\n       * Fake the redirect by closing the modal\n       */\n      setIsOpen(false);\n      return dispatch(updatePortfolio(data, viewState)).then(() =>\n        /**\n         * Redirect only after the update was finished.\n         * This will ensure that API requests are triggered in correct order when chaning the router pathname\n         * */\n        push(closeTarget)\n      );\n    } else {\n      return onAddPortfolio(data, viewState);\n    }\n  };\n\n  const editVariant =\n    portfolioId && initialValues && Object.keys(initialValues).length > 0;\n\n  if (initialValues?.metadata?.user_capabilities?.update === false) {\n    return <UnauthorizedRedirect />;\n  }\n\n  return (\n    <FormRenderer\n      schema={createPortfolioSchema(openApiSchema, portfolioId)}\n      onSubmit={onSubmit}\n      onCancel={() => push(closeTarget)}\n      initialValues={{ ...initialValues }}\n      isModal\n      modalProps={{\n        title: portfolioId\n          ? formatMessage(portfolioMessages.modalEditTitle)\n          : formatMessage(portfolioMessages.modalCreateTitle),\n        isOpen,\n        onClose: () => push(closeTarget),\n        variant: 'small',\n        loading: !portfolioId || editVariant\n      }}\n      templateProps={{\n        submitLabel: portfolioId\n          ? formatMessage(actionMessages.save)\n          : formatMessage(labelMessages.create)\n      }}\n    />\n  );\n};\n\nAddPortfolioModal.propTypes = {\n  removeQuery: PropTypes.bool,\n  closeTarget: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string\n    })\n  ]).isRequired,\n  viewState: PropTypes.shape({\n    count: PropTypes.number,\n    limit: PropTypes.number,\n    offset: PropTypes.number,\n    filter: PropTypes.string\n  })\n};\n\nexport default AddPortfolioModal;\n"],"sourceRoot":""}