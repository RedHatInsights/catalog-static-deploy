{"version":3,"sources":["webpack:///./src/utilities/use-enhanced-history.js","webpack:///./src/presentational-components/styled-components/spinner-wrapper.js","webpack:///./src/forms/portfolio-form.schema.js","webpack:///./src/smart-components/portfolio/add-portfolio-modal.js"],"names":["removeSearchQuery","target","split","search","undefined","useEnhancedHistory","removeSearch","keepHash","history","useHistory","push","internalTarget","location","hash","length","SpinnerWrapper","styled","Bullseye","debouncedValidator","asyncFormValidator","name","portfolioId","fetchPortfolioByName","then","data","trim","find","portfolio","id","createPortfolioSchema","newRecord","openApiSchema","fields","label","component","componentTypes","TEXT_FIELD","isRequired","maxLength","components","schemas","Portfolio","properties","DEFAULT_MAX_LENGTH","validate","value","TEXTAREA","AddPortfolioModal","removeQuery","closeTarget","viewState","formatMessage","useFormatMessage","dispatch","useDispatch","useState","isOpen","setIsOpen","useContext","UserContext","useQuery","initialValues","useSelector","portfolioReducer","getPortfolioFromState","onAddPortfolio","a","notification","variant","title","portfolioMessages","addSuccessTitle","description","addSuccessDescription","b","chunks","key","addPortfolio","newPortfolio","pathname","PORTFOLIO_ROUTE","editVariant","Object","keys","metadata","user_capabilities","update","Modal","modalEditTitle","modalCreateTitle","onClose","schema","schemaType","onSubmit","updatePortfolio","onCancel","formContainer","templateProps","submitLabel","actionMessages","save","labelMessages","create","disableSubmit","className","Spinner","propTypes","PropTypes","bool","oneOfType","string","shape","count","number","limit","offset","filter"],"mappings":"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","file":"js/add-portfolio~5a4d8549.c08287c1666c6ed09f86.js","sourcesContent":["import { useHistory } from 'react-router-dom';\n\nconst removeSearchQuery = (target) => {\n  if (typeof target === 'string') {\n    return target.split('?')[0];\n  }\n\n  if (typeof target === 'object') {\n    return {\n      ...target,\n      search: undefined\n    };\n  }\n\n  return target;\n};\n\n/**\n * Wrapper around useHistory hook which adds aditional settings to standard history methods\n * @param {Boolean} removeSearch if true, using history navigation methods will remove search string from path\n * @param {Boolean} keepHash if true, using history navigation methods will not remove hash from URL\n */\nconst useEnhancedHistory = ({ removeSearch, keepHash } = {}) => {\n  const history = useHistory();\n  return {\n    ...history,\n    push: (target) => {\n      let internalTarget = target;\n      if (keepHash && history.location.hash.length > 0) {\n        internalTarget =\n          typeof internalTarget === 'object'\n            ? { ...internalTarget, hash: history.location.hash }\n            : `${internalTarget}${history.location.hash}`;\n      }\n\n      if (removeSearch) {\n        return history.push(removeSearchQuery(internalTarget));\n      }\n\n      return history.push(internalTarget);\n    }\n  };\n};\n\nexport default useEnhancedHistory;\n","import styled from 'styled-components';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye/Bullseye';\n\nconst SpinnerWrapper = styled(Bullseye)`\n  overflow: hidden;\n`;\n\nexport default SpinnerWrapper;\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport { DEFAULT_MAX_LENGTH } from '../utilities/constants';\n\nimport asyncFormValidator from '../utilities/async-form-validator';\nimport { fetchPortfolioByName } from '../helpers/portfolio/portfolio-helper';\n\nexport const validateName = (name, portfolioId) =>\n  fetchPortfolioByName(name).then(({ data }) => {\n    if (!name || name.trim().length === 0) {\n      throw 'Required';\n    }\n\n    const conflict = data.find(\n      (portfolio) => portfolio.name === name && portfolio.id !== portfolioId\n    );\n    if (conflict) {\n      throw 'Name has already been taken';\n    }\n  });\n\nconst debouncedValidator = asyncFormValidator(validateName);\n\n/**\n * Creates a data-driven-form schema for adding/editing portfolio\n * @param {bool} newRecord sets the variant of portfolio form\n * @param openApiSchema\n * @param portfolioId\n */\nexport const createPortfolioSchema = (\n  newRecord,\n  openApiSchema,\n  portfolioId\n) => {\n  return {\n    fields: [\n      {\n        label: 'schemas.portfolio.name',\n        name: 'name',\n        component: componentTypes.TEXT_FIELD,\n        isRequired: true,\n        maxLength:\n          openApiSchema?.components?.schemas?.Portfolio?.properties?.name\n            ?.maxLength || DEFAULT_MAX_LENGTH,\n        validate: [(value) => debouncedValidator(value, portfolioId)]\n      },\n      {\n        label: 'schemas.portfolio.description',\n        component: componentTypes.TEXTAREA,\n        name: 'description'\n      }\n    ]\n  };\n};\n","import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Modal } from '@patternfly/react-core';\nimport { Spinner } from '@patternfly/react-core/dist/js/components/Spinner/Spinner';\nimport FormRenderer from '../common/form-renderer';\nimport { createPortfolioSchema } from '../../forms/portfolio-form.schema';\nimport {\n  addPortfolio,\n  updatePortfolio\n} from '../../redux/actions/portfolio-actions';\nimport useQuery from '../../utilities/use-query';\nimport { getPortfolioFromState } from '../../helpers/portfolio/portfolio-helper';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\nimport SpinnerWrapper from '../../presentational-components/styled-components/spinner-wrapper';\nimport { UnauthorizedRedirect } from '../error-pages/error-redirects';\nimport { PORTFOLIO_ROUTE } from '../../constants/routes';\nimport UserContext from '../../user-context';\nimport actionMessages from '../../messages/actions.messages';\nimport portfolioMessages from '../../messages/portfolio.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\n\nconst AddPortfolioModal = ({ removeQuery, closeTarget, viewState }) => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const [isOpen, setIsOpen] = useState(true);\n  const { openApiSchema: openApiSchema } = useContext(UserContext);\n  const [{ portfolio: portfolioId }] = useQuery(['portfolio']);\n  const { push } = useEnhancedHistory({ removeQuery, keepHash: true });\n  const initialValues = useSelector(({ portfolioReducer }) =>\n    getPortfolioFromState(portfolioReducer, portfolioId)\n  );\n\n  const onAddPortfolio = async (data) => {\n    const notification = {\n      variant: 'success',\n      title: formatMessage(portfolioMessages.addSuccessTitle),\n      description: formatMessage(portfolioMessages.addSuccessDescription, {\n        name: data.name,\n        // eslint-disable-next-line react/display-name\n        b: (chunks) => <b key=\"strong\">{chunks}</b>\n      })\n    };\n    const newPortfolio = await dispatch(addPortfolio(data, notification));\n    return newPortfolio && newPortfolio.value && newPortfolio.value.id\n      ? push({\n          pathname: PORTFOLIO_ROUTE,\n          search: `?portfolio=${newPortfolio.value.id}`\n        })\n      : push(closeTarget);\n  };\n\n  const onSubmit = (data) => {\n    if (initialValues) {\n      /**\n       * Fake the redirect by closing the modal\n       */\n      setIsOpen(false);\n      return dispatch(updatePortfolio(data, viewState)).then(() =>\n        /**\n         * Redirect only after the update was finished.\n         * This will ensure that API requests are triggered in correct order when chaning the router pathname\n         * */\n        push(closeTarget)\n      );\n    } else {\n      return onAddPortfolio(data, viewState);\n    }\n  };\n\n  const editVariant =\n    portfolioId && initialValues && Object.keys(initialValues).length > 0;\n\n  if (initialValues?.metadata?.user_capabilities?.update === false) {\n    return <UnauthorizedRedirect />;\n  }\n\n  return (\n    <Modal\n      title={\n        portfolioId\n          ? formatMessage(portfolioMessages.modalEditTitle)\n          : formatMessage(portfolioMessages.modalCreateTitle)\n      }\n      isOpen={isOpen}\n      onClose={() => push(closeTarget)}\n      variant=\"small\"\n    >\n      {!portfolioId || editVariant ? (\n        <FormRenderer\n          schema={createPortfolioSchema(\n            !initialValues,\n            openApiSchema,\n            portfolioId\n          )}\n          schemaType=\"default\"\n          onSubmit={onSubmit}\n          onCancel={() => push(closeTarget)}\n          initialValues={{ ...initialValues }}\n          formContainer=\"modal\"\n          templateProps={{\n            submitLabel: portfolioId\n              ? formatMessage(actionMessages.save)\n              : formatMessage(labelMessages.create),\n            disableSubmit: ['pristine', 'submitting']\n          }}\n        />\n      ) : (\n        <SpinnerWrapper className=\"pf-u-m-md\">\n          <Spinner />\n        </SpinnerWrapper>\n      )}\n    </Modal>\n  );\n};\n\nAddPortfolioModal.propTypes = {\n  removeQuery: PropTypes.bool,\n  closeTarget: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string\n    })\n  ]).isRequired,\n  viewState: PropTypes.shape({\n    count: PropTypes.number,\n    limit: PropTypes.number,\n    offset: PropTypes.number,\n    filter: PropTypes.string\n  })\n};\n\nexport default AddPortfolioModal;\n"],"sourceRoot":""}