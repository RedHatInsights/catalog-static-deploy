{"version":3,"sources":["webpack:///./src/forms/portfolio-form.schema.ts","webpack:///./src/smart-components/portfolio/add-portfolio-modal.tsx","webpack:///./src/utilities/use-enhanced-history.ts"],"names":["debouncedValidator","name","portfolioId","then","data","trim","length","find","portfolio","id","createPortfolioSchema","openApiSchema","fields","label","component","TEXT_FIELD","isRequired","maxLength","components","schemas","Portfolio","properties","validate","value","TEXTAREA","removeQuery","closeTarget","viewState","formatMessage","dispatch","isOpen","setIsOpen","push","removeSearch","keepHash","initialValues","portfolioReducer","metadata","user_capabilities","update","schema","onSubmit","notification","variant","title","addSuccessTitle","description","addSuccessDescription","b","chunks","key","newPortfolio","pathname","search","onAddPortfolio","onCancel","isModal","modalProps","modalEditTitle","modalCreateTitle","onClose","templateProps","submitLabel","save","create","history","target","internalTarget","location","hash","split","undefined","removeSearchQuery"],"mappings":"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","file":"js/add-portfolio~5a4d8549.3bb1bd269788d4ad1c34.js","sourcesContent":["import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport Schema from '@data-driven-forms/react-form-renderer/dist/cjs/schema';\nimport { DEFAULT_MAX_LENGTH } from '../utilities/constants';\n\nimport asyncFormValidator from '../utilities/async-form-validator';\nimport { fetchPortfolioByName } from '../helpers/portfolio/portfolio-helper';\nimport { AnyObject } from '../types/common-types';\n\nexport const validateName = (\n  name: string,\n  portfolioId: string\n): Promise<void> =>\n  fetchPortfolioByName(name).then(({ data }) => {\n    if (!name || name.trim().length === 0) {\n      throw 'Required';\n    }\n\n    const conflict = data.find(\n      (portfolio) => portfolio.name === name && portfolio.id !== portfolioId\n    );\n    if (conflict) {\n      throw 'Name has already been taken';\n    }\n  });\n\nconst debouncedValidator = asyncFormValidator(validateName);\n\n/**\n * Creates a data-driven-form schema for adding/editing portfolio\n * @param {bool} newRecord sets the variant of portfolio form\n * @param openApiSchema\n * @param portfolioId\n */\nexport const createPortfolioSchema = (\n  openApiSchema: AnyObject,\n  portfolioId: string\n): Schema => ({\n  fields: [\n    {\n      label: 'schemas.portfolio.name',\n      name: 'name',\n      component: componentTypes.TEXT_FIELD,\n      isRequired: true,\n      maxLength:\n        openApiSchema?.components?.schemas?.Portfolio?.properties?.name\n          ?.maxLength || DEFAULT_MAX_LENGTH,\n      validate: [(value: string) => debouncedValidator(value, portfolioId)]\n    },\n    {\n      label: 'schemas.portfolio.description',\n      component: componentTypes.TEXTAREA,\n      name: 'description'\n    }\n  ]\n});\n","/* eslint-disable react/prop-types */\nimport React, { ReactNode, useContext, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FormRenderer from '../common/form-renderer';\nimport { createPortfolioSchema } from '../../forms/portfolio-form.schema';\nimport {\n  addPortfolio,\n  updatePortfolio\n} from '../../redux/actions/portfolio-actions';\nimport useQuery from '../../utilities/use-query';\nimport { getPortfolioFromState } from '../../helpers/portfolio/portfolio-helper';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\nimport { UnauthorizedRedirect } from '../error-pages/error-redirects';\nimport { PORTFOLIO_ROUTE } from '../../constants/routes';\nimport UserContext from '../../user-context';\nimport actionMessages from '../../messages/actions.messages';\nimport portfolioMessages from '../../messages/portfolio.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport { CatalogLinkTo } from '../common/catalog-link';\nimport { PaginationConfiguration } from '../../helpers/shared/pagination';\nimport { CatalogRootState } from '../../types/redux';\nimport { Portfolio } from '@redhat-cloud-services/catalog-client';\nimport { InternalPortfolio } from '../../types/common-types';\n\nexport interface AddPortfolioModalProps {\n  removeQuery?: boolean;\n  closeTarget: CatalogLinkTo;\n  viewState?: PaginationConfiguration;\n}\nconst AddPortfolioModal: React.ComponentType<AddPortfolioModalProps> = ({\n  removeQuery,\n  closeTarget,\n  viewState\n}) => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const [isOpen, setIsOpen] = useState(true);\n  const { openApiSchema: openApiSchema } = useContext(UserContext);\n  const [{ portfolio: portfolioId }] = useQuery(['portfolio']);\n  const { push } = useEnhancedHistory({\n    removeSearch: removeQuery,\n    keepHash: true\n  });\n  const initialValues = useSelector<\n    CatalogRootState,\n    InternalPortfolio | undefined\n  >(\n    ({ portfolioReducer }) =>\n      getPortfolioFromState(portfolioReducer, portfolioId) as\n        | InternalPortfolio\n        | undefined\n  );\n\n  const onAddPortfolio = async (data: Partial<Portfolio>) => {\n    const notification = {\n      variant: 'success',\n      title: formatMessage(portfolioMessages.addSuccessTitle),\n      description: formatMessage(portfolioMessages.addSuccessDescription, {\n        name: data.name,\n        // eslint-disable-next-line react/display-name\n        b: (chunks: ReactNode) => <b key=\"strong\">{chunks}</b>\n      })\n    };\n    const newPortfolio = await dispatch(\n      addPortfolio(data, notification) as Promise<{ value: Portfolio }>\n    );\n    return newPortfolio && newPortfolio.value && newPortfolio.value.id\n      ? push({\n          pathname: PORTFOLIO_ROUTE,\n          search: `?portfolio=${newPortfolio.value.id}`\n        })\n      : push(closeTarget);\n  };\n\n  const onSubmit = (data: Portfolio) => {\n    if (initialValues) {\n      /**\n       * Fake the redirect by closing the modal\n       */\n      setIsOpen(false);\n      return dispatch(\n        (updatePortfolio(data, viewState) as unknown) as Promise<void>\n      ).then(() =>\n        /**\n         * Redirect only after the update was finished.\n         * This will ensure that API requests are triggered in correct order when chaning the router pathname\n         * */\n        push(closeTarget)\n      );\n    } else {\n      return onAddPortfolio(data);\n    }\n  };\n\n  if (initialValues?.metadata?.user_capabilities?.update === false) {\n    return <UnauthorizedRedirect />;\n  }\n\n  return (\n    <FormRenderer\n      schema={createPortfolioSchema(openApiSchema, portfolioId)}\n      onSubmit={onSubmit}\n      onCancel={() => push(closeTarget)}\n      initialValues={{ ...initialValues }}\n      isModal\n      modalProps={{\n        title: portfolioId\n          ? (formatMessage(portfolioMessages.modalEditTitle) as string)\n          : (formatMessage(portfolioMessages.modalCreateTitle) as string),\n        isOpen,\n        onClose: () => push(closeTarget),\n        variant: 'small'\n      }}\n      templateProps={{\n        submitLabel: portfolioId\n          ? formatMessage(actionMessages.save)\n          : formatMessage(labelMessages.create)\n      }}\n    />\n  );\n};\n\nexport default AddPortfolioModal;\n","import { useHistory } from 'react-router-dom';\nimport { History, Path } from 'history';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\n\nexport type EnhancedHistoryPushtarget =\n  | Path\n  | { pathname: string; hash?: string; search?: string; state?: AnyObject };\n\nconst removeSearchQuery = (target: EnhancedHistoryPushtarget) => {\n  if (typeof target === 'string') {\n    return target.split('?')[0];\n  }\n\n  if (typeof target === 'object') {\n    return {\n      ...target,\n      search: undefined\n    };\n  }\n\n  return target;\n};\n\n/**\n * Wrapper around useHistory hook which adds aditional settings to standard history methods\n * @param {Boolean} removeSearch if true, using history navigation methods will remove search string from path\n * @param {Boolean} keepHash if true, using history navigation methods will not remove hash from URL\n */\nconst useEnhancedHistory = ({\n  removeSearch,\n  keepHash\n}: {\n  removeSearch?: boolean;\n  keepHash?: boolean;\n} = {}): History<History.UnknownFacade> => {\n  const history = useHistory();\n  return {\n    ...history,\n    push: (target: EnhancedHistoryPushtarget) => {\n      let internalTarget = target;\n      if (keepHash && history.location.hash.length > 0) {\n        internalTarget =\n          typeof internalTarget === 'object'\n            ? { ...internalTarget, hash: history.location.hash }\n            : `${internalTarget}${history.location.hash}`;\n      }\n\n      if (removeSearch) {\n        return history.push(removeSearchQuery(internalTarget));\n      }\n\n      return history.push(internalTarget);\n    }\n  };\n};\n\nexport default useEnhancedHistory;\n"],"sourceRoot":""}