{"version":3,"sources":["webpack:///./node_modules/@patternfly/react-tokens/dist/esm/l_flex_item_Order.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/info-icon.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/layouts/Flex/Flex.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Text/TextList.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Text/TextListItem.js","webpack:///./src/smart-components/order/order-detail/approval-request.tsx"],"names":["l_flex_item_Order","exports","__esModule","InfoIconConfig","name","height","width","svgPath","yOffset","xOffset","InfoIcon","createIcon","Flex","_a","children","className","spacer","spaceItems","grow","shrink","flex","direction","alignItems","alignContent","alignSelf","align","justifyContent","display","fullWidth","flexWrap","order","style","props","Object","assign","undefined","displayName","TextListVariants","TextList","component","ul","Component","TextListItemVariants","TextListItem","li","rowOrder","isEmpty","approvalRequest","data","length","formatMessage","dispatch","sortBy","setSortBy","platform","orderItem","portfolio","portfolioItem","isFetching","setFetching","fetchRequests","id","retries","result","then","default","size","headingLevel","noApprovalRequests","columns","title","transforms","approvalRequestDecision","request","decision","defaultMessage","rows","map","key","color","icon","date","type","sort","a","b","index","creatingApprovalRequest","hasGutter","md","lg","xl","h2","approvalTitle","dl","dt","product","dd","orderID","orderDate","created_at","variant","orderedByLabel","owner","approvalParameters","entries","service_parameters","value","activity","onSort","_e","cells","asc","reverse"],"mappings":"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","file":"js/approval-request~31ecd969.a755ec9b30c36aa36e39.js","sourcesContent":["export const l_flex_item_Order = {\n  \"name\": \"--pf-l-flex--item--Order\",\n  \"value\": \"0\",\n  \"var\": \"var(--pf-l-flex--item--Order)\"\n};\nexport default l_flex_item_Order;","\"use strict\"\nexports.__esModule = true;\nexports.InfoIconConfig = {\n  name: 'InfoIcon',\n  height: 512,\n  width: 192,\n  svgPath: 'M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.InfoIcon = require('../createIcon').createIcon(exports.InfoIconConfig);\nexports[\"default\"] = exports.InfoIcon;","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/layouts/Flex/flex';\nimport * as flexToken from \"@patternfly/react-tokens/dist/esm/l_flex_item_Order\";\nimport { formatBreakpointMods, setBreakpointCssVars } from '../../helpers/util';\nexport const Flex = (_a) => {\n    var { children = null, className = '', spacer, spaceItems, grow, shrink, flex, direction, alignItems, alignContent, alignSelf, align, justifyContent, display, fullWidth, flexWrap, order, style } = _a, props = __rest(_a, [\"children\", \"className\", \"spacer\", \"spaceItems\", \"grow\", \"shrink\", \"flex\", \"direction\", \"alignItems\", \"alignContent\", \"alignSelf\", \"align\", \"justifyContent\", \"display\", \"fullWidth\", \"flexWrap\", \"order\", \"style\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.flex, formatBreakpointMods(spacer, styles), formatBreakpointMods(spaceItems, styles), formatBreakpointMods(grow, styles), formatBreakpointMods(shrink, styles), formatBreakpointMods(flex, styles), formatBreakpointMods(direction, styles), formatBreakpointMods(alignItems, styles), formatBreakpointMods(alignContent, styles), formatBreakpointMods(alignSelf, styles), formatBreakpointMods(align, styles), formatBreakpointMods(justifyContent, styles), formatBreakpointMods(display, styles), formatBreakpointMods(fullWidth, styles), formatBreakpointMods(flexWrap, styles), className), style: style || order ? Object.assign(Object.assign({}, style), setBreakpointCssVars(order, flexToken.l_flex_item_Order.name)) : undefined }, props), children));\n};\nFlex.displayName = 'Flex';\n//# sourceMappingURL=Flex.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nexport var TextListVariants;\n(function (TextListVariants) {\n    TextListVariants[\"ul\"] = \"ul\";\n    TextListVariants[\"ol\"] = \"ol\";\n    TextListVariants[\"dl\"] = \"dl\";\n})(TextListVariants || (TextListVariants = {}));\nexport const TextList = (_a) => {\n    var { children = null, className = '', component = TextListVariants.ul } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { \"data-pf-content\": true, className: css(className) }), children));\n};\nTextList.displayName = 'TextList';\n//# sourceMappingURL=TextList.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nexport var TextListItemVariants;\n(function (TextListItemVariants) {\n    TextListItemVariants[\"li\"] = \"li\";\n    TextListItemVariants[\"dt\"] = \"dt\";\n    TextListItemVariants[\"dd\"] = \"dd\";\n})(TextListItemVariants || (TextListItemVariants = {}));\nexport const TextListItem = (_a) => {\n    var { children = null, className = '', component = TextListItemVariants.li } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { \"data-pf-content\": true, className: css(className) }), children));\n};\nTextListItem.displayName = 'TextListItem';\n//# sourceMappingURL=TextListItem.js.map","import React, { Fragment, useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Bullseye,\n  Flex,\n  Spinner,\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n  Title,\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n  Card,\n  CardBody\n} from '@patternfly/react-core';\n\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n  ISortBy,\n  TableText\n} from '@patternfly/react-table';\n\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport InfoIcon from '@patternfly/react-icons/dist/js/icons/info-icon';\nimport { fetchApprovalRequests } from '../../../redux/actions/order-actions';\nimport ordersMessages from '../../../messages/orders.messages';\nimport statesMessages, {\n  getTranslatableState\n} from '../../../messages/states.messages';\nimport labelMessages from '../../../messages/labels.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport {\n  AnyObject,\n  ApiCollectionResponse,\n  StringObject\n} from '../../../types/common-types';\nimport {\n  ApprovalRequest,\n  OrderItemStateEnum\n} from '@redhat-cloud-services/catalog-client';\nimport { CatalogRootState } from '../../../types/redux';\nimport { OrderDetail } from '../../../redux/reducers/order-reducer';\nimport orderStatusMapper from '../order-status-mapper';\nimport { MAX_RETRY_LIMIT } from '../../../utilities/constants';\nimport { delay } from '../../../helpers/shared/helpers';\n\n/**\n * We are using type conversion of **request as StringObject** because the generated client does not have correct states listed\n * Probably a discrepancy inside the OpenAPI spec\n */\n\nconst rowOrder = ['updated', 'group_name', 'decision'];\n\nconst checkRequest = async (\n  fetchRequests: () => Promise<ApiCollectionResponse<any>>\n) => {\n  // eslint-disable-next-line no-constant-condition\n  let retries = 0;\n  while (retries <= MAX_RETRY_LIMIT) {\n    const result = await fetchRequests();\n    if (result?.data.length > 0 || retries++ >= MAX_RETRY_LIMIT) {\n      return 'Finished';\n    }\n\n    await delay(3000);\n  }\n};\n\nconst isEmpty = (approvalRequest?: ApiCollectionResponse<ApprovalRequest>) =>\n  !approvalRequest ||\n  !approvalRequest.data ||\n  approvalRequest.data.length === 0;\n\nconst ApprovalRequests: React.ComponentType = () => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const [sortBy, setSortBy] = useState<ISortBy>({});\n  const {\n    order,\n    approvalRequest,\n    platform,\n    orderItem,\n    portfolio,\n    portfolioItem\n  } = useSelector<CatalogRootState, OrderDetail>(\n    ({ orderReducer: { orderDetail } }) => orderDetail\n  );\n  const [isFetching, setFetching] = useState(true);\n\n  useEffect(() => {\n    if (orderItem?.id && isEmpty(approvalRequest)) {\n      setFetching(true);\n      checkRequest(() =>\n        dispatch(\n          (fetchApprovalRequests(orderItem.id!) as unknown) as Promise<\n            ApiCollectionResponse<ApprovalRequest>\n          >\n        )\n      ).then(() => setFetching(false));\n    }\n  }, []);\n\n  const handleSort = (\n    _e: React.SyntheticEvent,\n    index: number,\n    direction: SortByDirection\n  ) => setSortBy({ index, direction });\n\n  if (isEmpty(approvalRequest) && !isFetching) {\n    return (\n      <Bullseye id=\"no-approval-requests\">\n        <Flex direction={{ default: 'column' }} grow={{ default: 'grow' }}>\n          <Bullseye>\n            <InfoIcon size=\"xl\" />\n          </Bullseye>\n          <Bullseye>\n            <Title headingLevel=\"h1\" size=\"2xl\">\n              {formatMessage(ordersMessages.noApprovalRequests)}\n            </Title>\n          </Bullseye>\n        </Flex>\n      </Bullseye>\n    );\n  }\n\n  const columns = [\n    { title: 'Updated', transforms: [sortable] },\n    { title: 'Name', transforms: [sortable] },\n    'Decision'\n  ];\n\n  const approvalRequestDecision = (request: StringObject) =>\n    orderStatusMapper[\n      (statesMessages[getTranslatableState(request.decision)].defaultMessage ||\n        'Unknown') as keyof typeof orderStatusMapper\n    ];\n\n  const rows =\n    approvalRequest?.data\n      .map((request) =>\n        rowOrder.map((key) => {\n          if (key === 'decision') {\n            return (\n              <TableText>\n                <TextContent\n                  style={{\n                    color: approvalRequestDecision(request as StringObject)\n                      .color\n                  }}\n                >\n                  {approvalRequestDecision(request as StringObject).icon}\n                  &nbsp;\n                  {formatMessage(\n                    statesMessages[\n                      getTranslatableState(\n                        (request as StringObject)[key] as OrderItemStateEnum\n                      )\n                    ]\n                  )}\n                </TextContent>\n              </TableText>\n            );\n          }\n\n          if (key === 'updated') {\n            /**\n             * The fragment here is required other wise the super smart PF table will delete the first React element\n             */\n            return (\n              <Fragment>\n                <DateFormat\n                  date={(request as StringObject)[key]}\n                  type=\"exact\"\n                />\n              </Fragment>\n            );\n          }\n\n          return (request as AnyObject)[key];\n        })\n      )\n      .sort((a: AnyObject, b: AnyObject) =>\n        a[sortBy.index!] < b[sortBy.index!]\n          ? -1\n          : a[sortBy.index!] < b[sortBy.index!]\n          ? 1\n          : 0\n      ) || [];\n\n  return (\n    <TextContent>\n      {isEmpty(approvalRequest) ? (\n        <Bullseye>\n          <Flex direction={{ default: 'column' }} grow={{ default: 'grow' }}>\n            <Bullseye id=\"creating-approval-request\">\n              <Title headingLevel=\"h1\" size=\"xl\">\n                {formatMessage(ordersMessages.creatingApprovalRequest)}\n              </Title>\n            </Bullseye>\n            <Bullseye>\n              <Spinner size=\"xl\" />\n            </Bullseye>\n          </Flex>\n        </Bullseye>\n      ) : (\n        <Grid hasGutter>\n          <GridItem md={12} lg={6} xl={4}>\n            <Stack hasGutter>\n              <StackItem>\n                <Card>\n                  <CardBody>\n                    <Text className=\"pf-u-mb-md\" component={TextVariants.h2}>\n                      {formatMessage(ordersMessages.approvalTitle)}\n                    </Text>\n                    <TextList component={TextListVariants.dl}>\n                      <TextListItem component={TextListItemVariants.dt}>\n                        {formatMessage(labelMessages.product)}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dd}>\n                        {portfolioItem.name}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dt}>\n                        {formatMessage(ordersMessages.orderID)}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dd}>\n                        {order.id}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dt}>\n                        {formatMessage(ordersMessages.orderDate)}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dd}>\n                        <DateFormat\n                          date={order.created_at}\n                          variant=\"relative\"\n                        />\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dt}>\n                        {formatMessage(ordersMessages.orderedByLabel)}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dd}>\n                        {order.owner}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dt}>\n                        {formatMessage(labelMessages.portfolio)}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dd}>\n                        {portfolio.name}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dt}>\n                        {formatMessage(labelMessages.platform)}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dd}>\n                        {platform.name}\n                      </TextListItem>\n                    </TextList>\n                  </CardBody>\n                </Card>\n              </StackItem>\n              <StackItem>\n                <Card>\n                  <CardBody>\n                    <Text className=\"pf-u-mb-md\" component={TextVariants.h2}>\n                      {formatMessage(ordersMessages.approvalParameters)}\n                    </Text>\n                    <TextList\n                      className=\"overflow-wrap\"\n                      component={TextListVariants.dl}\n                    >\n                      {Object.entries(orderItem?.service_parameters || []).map(\n                        ([key, value]) => (\n                          <Fragment key={key}>\n                            <TextListItem component={TextListItemVariants.dt}>\n                              {key}\n                            </TextListItem>\n                            <TextListItem component={TextListItemVariants.dd}>\n                              {value}\n                            </TextListItem>\n                          </Fragment>\n                        )\n                      )}\n                    </TextList>\n                  </CardBody>\n                </Card>\n              </StackItem>\n            </Stack>\n          </GridItem>\n          <GridItem md={12} lg={6} xl={8}>\n            <Card>\n              <CardBody>\n                <Text className=\"pf-u-mb-md\" component={TextVariants.h2}>\n                  {formatMessage(ordersMessages.activity)}\n                </Text>\n                <Table\n                  aria-label=\"Approval request activity\"\n                  onSort={handleSort}\n                  sortBy={sortBy}\n                  cells={columns}\n                  rows={\n                    sortBy.direction === SortByDirection.asc\n                      ? rows\n                      : rows.reverse()\n                  }\n                >\n                  <TableHeader />\n                  <TableBody />\n                </Table>\n              </CardBody>\n            </Card>\n          </GridItem>\n        </Grid>\n      )}\n    </TextContent>\n  );\n};\n\nexport default ApprovalRequests;\n"],"sourceRoot":""}