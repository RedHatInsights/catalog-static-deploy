{"version":3,"file":"js/3452.1644477917539.e0a417ced58327a0f171.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/plus-circle-icon.js","webpack:///./src/toolbar/schemas/portfolio-toolbar.schema.js","webpack:///./src/smart-components/portfolio/portfolio-empty-state.js","webpack:///./src/smart-components/portfolio/portfolio-items.js","webpack:///./src/toolbar/helpers.js"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.PlusCircleIconConfig = {\n  name: 'PlusCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.PlusCircleIcon = require('../createIcon').createIcon(exports.PlusCircleIconConfig);\nexports[\"default\"] = exports.PlusCircleIcon;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Dropdown,\n  DropdownPosition,\n  KebabToggle,\n  DropdownItem\n} from '@patternfly/react-core';\n\nimport { toolbarComponentTypes } from '../toolbar-mapper';\nimport { createLinkButton } from '../helpers';\nimport AsyncPagination from '../../smart-components/common/async-pagination';\nimport CatalogLink from '../../smart-components/common/catalog-link';\nimport BackToProducts from '../../presentational-components/portfolio/back-to-products';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport orderProcessesMessages from '../../messages/order-processes.messages';\nimport { NESTED_EDIT_ORDER_PROCESS_ROUTE } from '../../constants/routes';\n\n/**\n * Cannot be anonymous function. Requires Component.displayName to work with PF4 refs\n */\nconst PortfolioActionsToolbar = ({\n  editPortfolioRoute,\n  workflowPortfolioRoute,\n  removePortfolioRoute,\n  copyInProgress,\n  copyPortfolio,\n  userCapabilities,\n  canLinkOrderProcesses\n}) => {\n  const [isOpen, setOpen] = useState(false);\n  const formatMessage = useFormatMessage();\n  const dropdownItems = [];\n\n  if (userCapabilities?.update) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Edit Portfolio\"\n        key=\"edit-portfolio\"\n        id=\"edit-portfolio\"\n        component={\n          <CatalogLink\n            id=\"edit-portfolio\"\n            preserveSearch\n            pathname={editPortfolioRoute}\n          >\n            Edit\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (userCapabilities?.copy) {\n    dropdownItems.push(\n      <DropdownItem\n        component=\"button\"\n        aria-label=\"Copy Portfolio\"\n        key=\"copy-portfolio\"\n        id=\"copy-portfolio\"\n        onClick={copyPortfolio}\n      >\n        Copy\n      </DropdownItem>\n    );\n  }\n\n  if (userCapabilities?.set_approval) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Set approval workflow\"\n        key=\"set-approval-portfolio-action\"\n        id=\"set-approval-portfolio-action\"\n        component={\n          <CatalogLink preserveSearch pathname={workflowPortfolioRoute}>\n            Set approval\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (userCapabilities?.update && canLinkOrderProcesses) {\n    const orderProcessAction = formatMessage(\n      orderProcessesMessages.setOrderProcess\n    );\n    dropdownItems.push(\n      <DropdownItem\n        aria-label={orderProcessAction}\n        key=\"attach-order-processes\"\n        id=\"attach-order-processes\"\n        component={\n          <CatalogLink\n            preserveSearch\n            pathname={NESTED_EDIT_ORDER_PROCESS_ROUTE}\n          >\n            {orderProcessAction}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (userCapabilities?.destroy) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Remove Portfolio\"\n        key=\"delete-portfolio\"\n        id=\"delete-portfolio\"\n        component={\n          <CatalogLink preserveSearch pathname={removePortfolioRoute}>\n            Delete\n          </CatalogLink>\n        }\n        role=\"link\"\n        className=\"pf-c-dropdown__menu-item\"\n      />\n    );\n  }\n\n  return dropdownItems.length === 0 ? null : (\n    <Dropdown\n      className=\"pf-u-ml-md\"\n      onSelect={() => setOpen(false)}\n      position={DropdownPosition.right}\n      toggle={\n        <KebabToggle\n          id=\"toggle-portfolio-actions\"\n          onToggle={setOpen}\n          isDisabled={copyInProgress}\n        />\n      }\n      isOpen={isOpen}\n      isPlain\n      dropdownItems={dropdownItems}\n    />\n  );\n};\n\nPortfolioActionsToolbar.propTypes = {\n  removePortfolioRoute: PropTypes.string.isRequired,\n  editPortfolioRoute: PropTypes.string.isRequired,\n  workflowPortfolioRoute: PropTypes.string.isRequired,\n  copyPortfolio: PropTypes.func.isRequired,\n  copyInProgress: PropTypes.bool,\n  userCapabilities: PropTypes.shape({\n    copy: PropTypes.bool,\n    update: PropTypes.bool,\n    destroy: PropTypes.bool,\n    set_approval: PropTypes.bool\n  }).isRequired,\n  canLinkOrderProcesses: PropTypes.bool\n};\n\nconst createPortfolioToolbarSchema = ({\n  title,\n  addProductsRoute,\n  copyPortfolio,\n  sharePortfolioRoute,\n  editPortfolioRoute,\n  workflowPortfolioRoute,\n  removePortfolioRoute,\n  copyInProgress,\n  isLoading,\n  removeProducts,\n  itemsSelected,\n  meta,\n  fetchPortfolioItemsWithPortfolio,\n  portfolioId,\n  description,\n  fromProducts,\n  filterProps: { searchValue, onFilterChange, placeholder },\n  userCapabilities,\n  canLinkOrderProcesses\n}) => ({\n  fields: [\n    {\n      component: toolbarComponentTypes.TOP_TOOLBAR,\n      breadcrumbs: !fromProducts,\n      key: 'portfolio-top-toolbar',\n      fields: [\n        {\n          key: 'back-to-products',\n          hidden: !fromProducts,\n          component: BackToProducts\n        },\n        {\n          component: toolbarComponentTypes.TOP_TOOLBAR_TITLE,\n          key: 'portfolio-toolbar-title',\n          noData: meta?.noData,\n          title,\n          description,\n          fields: [\n            {\n              component: toolbarComponentTypes.TOOLBAR,\n              key: 'portfolio-actions',\n              noWrap: true,\n              fields: [\n                createLinkButton({\n                  pathname: sharePortfolioRoute,\n                  preserveSearch: true,\n                  variant: 'secondary',\n                  title: 'Share',\n                  isDisabled: copyInProgress,\n                  key: 'portfolio-share-button',\n                  id: 'portfolio-share-button',\n                  hidden: !userCapabilities?.share && !userCapabilities?.unshare\n                }),\n                {\n                  component: toolbarComponentTypes.TOOLBAR_ITEM,\n                  key: 'portfolio-actions-dropdown-item',\n                  fields: [\n                    {\n                      component: PortfolioActionsToolbar,\n                      editPortfolioRoute,\n                      workflowPortfolioRoute,\n                      removePortfolioRoute,\n                      copyPortfolio,\n                      copyInProgress,\n                      userCapabilities,\n                      canLinkOrderProcesses,\n                      key: 'portfolio-actions-dropdown'\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        },\n        {\n          component: toolbarComponentTypes.LEVEL,\n          key: 'portfolio-items-actions',\n          fields: meta?.noData\n            ? []\n            : [\n                {\n                  component: toolbarComponentTypes.TOOLBAR,\n                  key: 'portfolio-items-actions',\n                  fields: [\n                    {\n                      groupName: 'filter-portfolio-items',\n                      component: toolbarComponentTypes.FILTER_TOOLBAR_ITEM,\n                      isClearable: true,\n                      key: 'portfolio-items-filter',\n                      searchValue,\n                      onFilterChange,\n                      placeholder\n                    },\n                    {\n                      hidden: !userCapabilities?.update,\n                      groupName: 'add-portfolio-items',\n                      key: 'portfolio-items-add-group',\n                      ...createLinkButton({\n                        preserveSearch: true,\n                        pathname: addProductsRoute,\n                        isDisabled: isLoading || copyInProgress,\n                        variant: 'primary',\n                        title: 'Add',\n                        id: 'add-products-button',\n                        key: 'add-products-button'\n                      })\n                    },\n                    {\n                      component: toolbarComponentTypes.TOOLBAR_ITEM,\n                      key: 'remove-products-item',\n                      hidden: meta.count === 0 || !userCapabilities?.update,\n                      fields: [\n                        {\n                          component: toolbarComponentTypes.BUTTON,\n                          groupName: 'remove-portfolio-items',\n                          variant: 'link',\n                          title: 'Remove',\n                          key: 'remove-products-button',\n                          id: 'remove-products-button',\n                          isDisabled: !itemsSelected,\n                          onClick: removeProducts\n                        }\n                      ]\n                    }\n                  ]\n                },\n                {\n                  component: toolbarComponentTypes.LEVEL_ITEM,\n                  key: 'pagination-item',\n                  fields:\n                    meta.count > 0\n                      ? [\n                          {\n                            component: AsyncPagination,\n                            key: 'portfolio-items-pagination',\n                            meta,\n                            apiRequest: fetchPortfolioItemsWithPortfolio,\n                            apiProps: portfolioId,\n                            isCompact: true\n                          }\n                        ]\n                      : []\n                }\n              ]\n        }\n      ]\n    }\n  ]\n});\n\nexport default createPortfolioToolbarSchema;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SearchIcon, PlusCircleIcon } from '@patternfly/react-icons';\n\nimport ContentGalleryEmptyState, {\n  EmptyStatePrimaryAction\n} from '../../presentational-components/shared/content-gallery-empty-state';\nimport { Button } from '@patternfly/react-core';\nimport filteringMessages from '../../messages/filtering.messages';\nimport portfolioMessages from '../../messages/portfolio.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\n\nconst PortfolioEmptyState = ({\n  url,\n  handleFilterChange,\n  meta,\n  userCapabilities: { update }\n}) => {\n  const formatMessage = useFormatMessage();\n  const NoDataAction = () => (\n    <EmptyStatePrimaryAction\n      url={url}\n      label={formatMessage(portfolioMessages.addProducts)}\n      id=\"add-products-to-portfolio\"\n      hasPermission={update}\n    />\n  );\n\n  const FilterAction = () => (\n    <Button\n      id=\"clear-portfolio-filter\"\n      ouiaId=\"clear-portfolio-filter\"\n      variant=\"link\"\n      onClick={() => handleFilterChange('')}\n    >\n      {formatMessage(filteringMessages.clearFilters)}\n    </Button>\n  );\n\n  const emptyStateProps = {\n    PrimaryAction: meta?.noData ? NoDataAction : FilterAction,\n    title: meta?.noData\n      ? formatMessage(filteringMessages.noProducts)\n      : formatMessage(filteringMessages.noResults),\n    description: meta?.noData\n      ? formatMessage(portfolioMessages.emptyNoProducts)\n      : formatMessage(filteringMessages.noResultsDescription),\n    Icon: meta?.noData ? PlusCircleIcon : SearchIcon\n  };\n  return <ContentGalleryEmptyState {...emptyStateProps} />;\n};\n\nPortfolioEmptyState.propTypes = {\n  url: PropTypes.string.isRequired,\n  handleFilterChange: PropTypes.func.isRequired,\n  meta: PropTypes.shape({\n    noData: PropTypes.bool\n  }).isRequired,\n  userCapabilities: PropTypes.shape({\n    update: PropTypes.bool\n  }).isRequired\n};\n\nexport default PortfolioEmptyState;\n","import React, { Fragment, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport ToolbarRenderer from '../../toolbar/toolbar-renderer';\nimport createPortfolioToolbarSchema from '../../toolbar/schemas/portfolio-toolbar.schema';\nimport PortfolioEmptyState from './portfolio-empty-state';\nimport ContentGallery from '../content-gallery/content-gallery';\nimport PortfolioItem from './portfolio-item';\nimport { fetchPortfolioItemsWithPortfolio } from '../../redux/actions/portfolio-actions';\nimport { fetchPortfolioItemsWithPortfolio as fetchPortfolioItemsWithPortfolioS } from '../../redux/actions/portfolio-actions-s';\nimport AsyncPagination from '../common/async-pagination';\nimport BottomPaginationContainer from '../../presentational-components/shared/bottom-pagination-container';\nimport useQuery from '../../utilities/use-query';\nimport { PORTFOLIO_ROUTE } from '../../constants/routes';\nimport filteringMessages from '../../messages/filtering.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport UserContext from '../../user-context';\nimport { hasPermission, isStandalone } from '../../helpers/shared/helpers';\n\nconst PortfolioItems = ({\n  routes,\n  handleFilterChange,\n  removeProducts,\n  copyPortfolio,\n  stateDispatch,\n  fromProducts,\n  state: {\n    removeInProgress,\n    isFetching,\n    isFiltering,\n    copyInProgress,\n    selectedItems,\n    filterValue\n  }\n}) => {\n  const formatMessage = useFormatMessage();\n  const {\n    data,\n    results,\n    meta,\n    count,\n    name,\n    description,\n    metadata\n  } = useSelector(\n    ({\n      portfolioReducer: {\n        portfolioItems: { data, results, meta, count },\n        selectedPortfolio: { name, description, metadata }\n      }\n    }) => ({\n      data,\n      results,\n      meta,\n      count,\n      name,\n      description,\n      metadata\n    })\n  );\n  const { url } = useRouteMatch(PORTFOLIO_ROUTE);\n  const [{ portfolio: id }] = useQuery(['portfolio']);\n  const dispatch = useDispatch();\n  const { permissions: userPermissions } = useContext(UserContext);\n  const canLinkOrderProcesses = hasPermission(userPermissions, [\n    'catalog:order_processes:link'\n  ]);\n  const dataSet = data ? data : results;\n  const metaInfo = meta ? meta : { count };\n  const userCapabilities = isStandalone()\n    ? {\n        show: true,\n        update: true,\n        set_approval: true,\n        share: true,\n        unshare: true,\n        untag: true,\n        tag: true,\n        set_order_process: true,\n        create: true,\n        destroy: true,\n        restore: true,\n        copy: true\n      }\n    : metadata?.user_capabilities;\n\n  const items = dataSet.map((item) => (\n    <PortfolioItem\n      key={item.id}\n      {...item}\n      pathname={`${url}/portfolio-item`}\n      searchParams={{\n        source: item.service_offering_source_ref,\n        'portfolio-item': item.id\n      }}\n      preserveSearch\n      isSelectable={userCapabilities?.update}\n      onSelect={(selectedItem) =>\n        stateDispatch({\n          type: 'selectItem',\n          payload: { selectedItem, product: item }\n        })\n      }\n      isSelected={selectedItems.includes(item.id)}\n      removeInProgress={removeInProgress}\n    />\n  ));\n\n  return (\n    <Fragment>\n      <ToolbarRenderer\n        schema={createPortfolioToolbarSchema({\n          fromProducts,\n          filterProps: {\n            searchValue: filterValue,\n            onFilterChange: handleFilterChange,\n            placeholder: formatMessage(filteringMessages.filterByProduct)\n          },\n          title: name,\n          description,\n          ...routes,\n          copyPortfolio,\n          isLoading: isFetching || isFiltering,\n          copyInProgress,\n          removeProducts: () => removeProducts(selectedItems),\n          itemsSelected: selectedItems.length > 0,\n          meta: metaInfo,\n          fetchPortfolioItemsWithPortfolio: (...args) =>\n            dispatch(\n              isStandalone()\n                ? fetchPortfolioItemsWithPortfolioS(...args)\n                : fetchPortfolioItemsWithPortfolio(...args)\n            ),\n          portfolioId: id,\n          userCapabilities,\n          canLinkOrderProcesses\n        })}\n      />\n      <ContentGallery\n        items={items}\n        isLoading={isFetching || isFiltering}\n        renderEmptyState={() => (\n          <PortfolioEmptyState\n            handleFilterChange={handleFilterChange}\n            meta={metaInfo}\n            userCapabilities={userCapabilities}\n            url={routes.addProductsRoute}\n          />\n        )}\n      />\n      {metaInfo?.count > 0 && (\n        <BottomPaginationContainer>\n          <AsyncPagination\n            dropDirection=\"up\"\n            meta={metaInfo}\n            apiProps={id}\n            apiRequest={(...args) =>\n              dispatch(\n                isStandalone()\n                  ? fetchPortfolioItemsWithPortfolioS(...args)\n                  : fetchPortfolioItemsWithPortfolio(...args)\n              )\n            }\n          />\n        </BottomPaginationContainer>\n      )}\n    </Fragment>\n  );\n};\n\nPortfolioItems.propTypes = {\n  routes: PropTypes.shape({\n    addProductsRoute: PropTypes.string.isRequired,\n    portfolioRoute: PropTypes.string.isRequired\n  }).isRequired,\n  handleFilterChange: PropTypes.func.isRequired,\n  removeProducts: PropTypes.func.isRequired,\n  copyPortfolio: PropTypes.func.isRequired,\n  stateDispatch: PropTypes.func.isRequired,\n  state: PropTypes.shape({\n    removeInProgress: PropTypes.bool,\n    isFetching: PropTypes.bool,\n    isFiltering: PropTypes.bool,\n    copyInProgress: PropTypes.bool,\n    selectedItems: PropTypes.array,\n    filterValue: PropTypes.string\n  }).isRequired,\n  fromProducts: PropTypes.bool\n};\n\nPortfolioItems.defaultProps = {\n  state: {\n    removeInProgress: false,\n    isFetching: false,\n    isFiltering: false,\n    copyInProgress: false,\n    selectedItems: [],\n    filterValue: undefined\n  }\n};\n\nexport default PortfolioItems;\n","import { toolbarComponentTypes } from './toolbar-mapper';\n\nexport const createLinkButton = ({\n  pathname,\n  preserveSearch,\n  id,\n  ...item\n}) => ({\n  component: toolbarComponentTypes.TOOLBAR_ITEM,\n  key: `${item.key}/button-link`,\n  fields: [\n    {\n      component: toolbarComponentTypes.LINK,\n      pathname,\n      preserveSearch,\n      key: `${item.key}/button-link`,\n      isDisabled: item.isDisabled,\n      id,\n      fields: [\n        {\n          component: toolbarComponentTypes.BUTTON,\n          ...item\n        }\n      ]\n    }\n  ]\n});\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","PortfolioActionsToolbar","editPortfolioRoute","workflowPortfolioRoute","removePortfolioRoute","copyInProgress","copyPortfolio","userCapabilities","canLinkOrderProcesses","useState","isOpen","setOpen","formatMessage","useFormatMessage","dropdownItems","update","push","DropdownItem","key","id","component","preserveSearch","pathname","role","copy","onClick","set_approval","orderProcessAction","orderProcessesMessages","NESTED_EDIT_ORDER_PROCESS_ROUTE","destroy","className","length","Dropdown","onSelect","position","DropdownPosition","toggle","KebabToggle","onToggle","isDisabled","isPlain","propTypes","PropTypes","isRequired","title","addProductsRoute","sharePortfolioRoute","isLoading","removeProducts","itemsSelected","meta","fetchPortfolioItemsWithPortfolio","portfolioId","description","fromProducts","filterProps","searchValue","onFilterChange","placeholder","fields","toolbarComponentTypes","breadcrumbs","hidden","BackToProducts","noData","noWrap","createLinkButton","variant","share","unshare","groupName","isClearable","count","AsyncPagination","apiRequest","apiProps","isCompact","PortfolioEmptyState","url","handleFilterChange","emptyStateProps","PrimaryAction","label","portfolioMessages","hasPermission","Button","ouiaId","filteringMessages","Icon","PlusCircleIcon","SearchIcon","PortfolioItems","routes","stateDispatch","state","removeInProgress","isFetching","isFiltering","selectedItems","filterValue","useSelector","portfolioReducer","portfolioItems","data","results","selectedPortfolio","metadata","useRouteMatch","PORTFOLIO_ROUTE","useQuery","portfolio","dispatch","useDispatch","userPermissions","useContext","UserContext","permissions","dataSet","metaInfo","isStandalone","show","untag","tag","set_order_process","create","restore","user_capabilities","items","map","item","searchParams","source","service_offering_source_ref","isSelectable","selectedItem","type","payload","product","isSelected","includes","Fragment","schema","createPortfolioToolbarSchema","fetchPortfolioItemsWithPortfolioS","renderEmptyState","dropDirection","portfolioRoute","defaultProps","undefined"],"sourceRoot":""}