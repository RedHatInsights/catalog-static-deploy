{"version":3,"sources":["webpack:///./src/smart-components/common/async-pagination.js","webpack:///./src/messages/filtering.messages.js","webpack:///./src/messages/orders.messages.js","webpack:///./src/messages/states.messages.js","webpack:///./src/helpers/order/order-helper.js","webpack:///./src/presentational-components/order/order-notification.js","webpack:///./src/redux/actions/order-actions.js","webpack:///./src/toolbar/schemas/orders-toolbar.schema.js","webpack:///./src/smart-components/order/order-item.js","webpack:///./src/helpers/shared/orders.js","webpack:///./src/smart-components/order/orders-list.js","webpack:///./src/smart-components/order/orders.js"],"names":["AsyncPagination","meta","limit","count","offset","apiProps","apiRequest","className","isCompact","props","perPage","itemCount","onPerPageSelect","_event","page","getCurrentPage","onSetPage","number","debounce","options","getNewPage","request","debouncePromise","direction","propTypes","PropTypes","shape","isRequired","func","any","string","bool","defaultProps","filteringMessages","defineMessages","require","noItems","id","defaultMessage","filterByProduct","noResults","noResultsDescription","clearFilters","noProducts","noRecords","filterByTitle","noResultsFound","noResult","unknown","ordersMessages","orderedBy","orderedByLabel","lastUpdated","compositeTitle","detailTitle","orderSuccess","noOrdersTitle","noOrdersDescription","noApprovalRequests","creatingApprovalRequest","approvalTitle","approvalDetail","approvalCreated","approvalReason","approvalCompleted","orderDetails","menuApproval","menuLifecycle","menuSteps","objectsNotFound","orderID","orderParameters","orderProgressMessages","lifecycleLink","cancelOrder","keepOrder","cancelDescription","backToOrders","orderDate","approvalParameters","activity","statesMessages","title","ordered","approvalPending","canceled","completed","failed","undecided","approved","denied","error","pending","skipped","started","notified","getTranslatableState","state","replace","char","toLowerCase","created","labelMessages","orderApi","getOrderApi","portfolioItemApi","getOrderItemApi","getPortfolioItemApi","axiosInstance","getAxiosInstance","graphqlInstance","getGraphqlInstance","getServicePlans","portfolioItemId","listServicePlans","sendSubmitOrder","a","service_parameters","providerControlParameters","parameters","createOrder","order","orderItem","provider_control_parameters","addToOrder","orderItemResponse","submitOrder","then","getOrderItems","orderIds","get","CATALOG_API_BASE","map","orderId","join","getOrderPortfolioItems","itemIds","itemId","getOrders","filter","pagination","defaultSettings","orders","data","orderItems","portfolio_item_id","portfolioItems","order_id","getApprovalRequests","orderItemId","promises","requestId","parent_id","approval_request_ref","post","APPROVAL_API_BASE","query","requests","Promise","all","actions","updated","length","pop","created_at","undefined","OrderNotification","dispatch","portfolioId","platformId","useFormatMessage","formatMessage","link","chunks","onClick","clearNotifications","to","pathname","ORDER_ROUTE","search","fetchServicePlans","type","ActionTypes","payload","OrderHelper","portfolioItem","addNotification","variant","description","portfolio_id","service_offering_source_ref","dismissable","getState","orderDetail","orderReducer","approvalRequest","fetchOrders","filters","queryFilter","Object","entries","value","key","Array","isArray","sortBy","sortDirection","storeState","stateKey","fetchOrderDetails","params","detailPromises","status","object","notFound","push","platform","SOURCES_API_BASE","portfolio","progressMessages","fetchApprovalRequests","err","createOrdersToolbarSchema","fields","component","toolbarComponentTypes","TOP_TOOLBAR","TOP_TOOLBAR_TITLE","labelProps","Completed","icon","color","Ordered","Failed","createOrderItem","item","orderPlatform","orderPortfolio","searchParams","translatableState","TableText","height","src","sourceId","orderName","owner","Text","TextVariants","small","DateFormat","date","updated_at","Label","debouncedFilter","asyncFormValidator","filteringCallback","initialState","isOpen","isFetching","isFiltering","filterType","index","SortByDirection","desc","ordersListState","action","sortIndexMapper","0","3","4","6","OrdersList","useDispatch","viewState","useInitialUriHash","useReducer","sortIndex","stateDispatch","useSelector","columns","product","column","transforms","sortable","portfolioReducer","rows","find","getOrderPlatformId","name","getOrderPortfolioName","useEffect","fetchPlatforms","handlePagination","_apiProps","handleFilterItems","handleClearAll","Grid","hasGutter","GridItem","Section","noData","PrimaryToolbar","activeFiltersConfig","category","chips","onDelete","_e","clearAll","chip","newFilters","filterConfig","onChange","items","filterValues","label","isDisabled","Table","aria-label","onSort","cells","EmptyTable","Bullseye","EmptyState","EmptyStateIcon","SearchIcon","Title","headingLevel","size","EmptyStateBody","EmptyStateSecondaryActions","Button","TableToolbar","Flex","justifyContent","default","Orders","insights","chrome","appNavClick","secondaryNav","Stack","schema"],"mappings":"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","file":"js/orders~91f4305a.300d0af346f560fb1bdf.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport debouncePromise from 'awesome-debounce-promise';\n\nimport { Pagination } from '@patternfly/react-core';\n\nimport { getCurrentPage, getNewPage } from '../../helpers/shared/pagination';\n\nconst AsyncPagination = ({\n  meta: { limit, count, offset },\n  apiProps,\n  apiRequest,\n  className,\n  isCompact,\n  ...props\n}) => {\n  const handleOnPerPageSelect = (_event, limit) =>\n    apiRequest(apiProps, {\n      offset,\n      limit\n    });\n\n  const handleSetPage = (_event, number, debounce) => {\n    const options = {\n      offset: getNewPage(number, limit),\n      limit\n    };\n\n    const request = () => apiRequest(apiProps, options);\n    if (debounce) {\n      return debouncePromise(request, 250)();\n    }\n\n    return request();\n  };\n\n  return (\n    <div className={className}>\n      <Pagination\n        perPage={limit || 50}\n        itemCount={count || 0}\n        onPerPageSelect={handleOnPerPageSelect}\n        page={getCurrentPage(limit, offset)}\n        onSetPage={handleSetPage}\n        direction=\"down\"\n        isCompact={isCompact}\n        {...props}\n      />\n    </div>\n  );\n};\n\nAsyncPagination.propTypes = {\n  meta: PropTypes.shape({\n    count: PropTypes.number,\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number.isRequired\n  }),\n  apiRequest: PropTypes.func.isRequired,\n  apiProps: PropTypes.any,\n  className: PropTypes.string,\n  isCompact: PropTypes.bool\n};\n\nAsyncPagination.defaultProps = {\n  meta: {\n    count: 0,\n    limit: 50,\n    offset: 0\n  },\n  className: '',\n  isCompact: false\n};\n\nexport default AsyncPagination;\n","const { defineMessages } = require('react-intl');\n\nconst filteringMessages = defineMessages({\n  noItems: {\n    id: 'common.filtering.noItems',\n    defaultMessage: 'No items found'\n  },\n  filterByProduct: {\n    id: 'common.filtering.filterByProduct',\n    defaultMessage: 'Filter by product'\n  },\n  noResults: {\n    id: 'common.filtering.noResults',\n    defaultMessage: 'No results found'\n  },\n  noResultsDescription: {\n    id: 'common.filtering.noResultsDescription',\n    defaultMessage:\n      'No results match the filter criteria. Remove all filters or clear all filters to show results.'\n  },\n  clearFilters: {\n    id: 'common.filtering.clear-filters',\n    defaultMessage: 'Clear all filters'\n  },\n  noProducts: {\n    id: 'common.filtering.no-products',\n    defaultMessage: 'No products yet'\n  },\n  noRecords: {\n    id: 'commonMessages.noRecords',\n    defaultMessage: 'No records'\n  },\n  filterByTitle: {\n    id: 'tableToolbar.filterByTitle',\n    defaultMessage: 'Filter by {title}'\n  },\n  noResultsFound: {\n    id: 'tableToolbar.noResultsFound',\n    defaultMessage: 'No results found'\n  },\n  noResult: {\n    id: 'tableToolbar.noResult',\n    defaultMessage: 'No {results}'\n  },\n  unknown: {\n    id: 'commonMessages.unknown',\n    defaultMessage: 'Unknown'\n  }\n});\n\nexport default filteringMessages;\n","const { defineMessages } = require('react-intl');\n\nconst ordersMessages = defineMessages({\n  orderedBy: {\n    id: 'orders.common.orderedBy',\n    defaultMessage: 'Ordered by {owner}'\n  },\n  orderedByLabel: {\n    id: 'orders.approval.orderedBy',\n    defaultMessage: 'Ordered by'\n  },\n  lastUpdated: {\n    id: 'orders.common.lastUpdated',\n    defaultMessage: 'Last updated'\n  },\n  compositeTitle: {\n    id: 'orders.common.compositeTitle',\n    defaultMessage: '{name} - Order # {id}'\n  },\n  detailTitle: {\n    id: 'orders.detail.title',\n    defaultMessage: 'Order ID {id}'\n  },\n  orderSuccess: {\n    id: 'orders.notification.success',\n    defaultMessage:\n      'You can track the progress of Order # {id} in your <link>Orders</link> page.'\n  },\n  noOrdersTitle: {\n    id: 'orders.list.empty.title',\n    defaultMessage: 'No orders'\n  },\n  noOrdersDescription: {\n    id: 'orders.list.empty.description',\n    defaultMessage: 'No orders have been created.'\n  },\n  noApprovalRequests: {\n    id: 'orders.approval.no-requests',\n    defaultMessage:\n      'We were unable to find any approval requests for this order.'\n  },\n  creatingApprovalRequest: {\n    id: 'orders.approval.creating',\n    defaultMessage: 'Creating approval request'\n  },\n  approvalTitle: {\n    id: 'orders.approval.title',\n    defaultMessage: 'Summary'\n  },\n  approvalDetail: {\n    id: 'orders.approval.view-detail',\n    // eslint-disable-next-line quotes\n    defaultMessage: \"View this order's approval request details\"\n  },\n  approvalCreated: {\n    id: 'orders.approval.details.created',\n    defaultMessage: 'Request created'\n  },\n  approvalReason: {\n    id: 'orders.approval.details.reason',\n    defaultMessage: 'Approval reason'\n  },\n  approvalCompleted: {\n    id: 'orders.approval.details.completed',\n    defaultMessage: 'Completed at'\n  },\n  orderDetails: {\n    id: 'orders.common.details',\n    defaultMessage: 'Order details'\n  },\n  menuApproval: {\n    id: 'orders.menu.approval',\n    defaultMessage: 'Approval'\n  },\n  menuLifecycle: {\n    id: 'orders.menu.lifecycle',\n    defaultMessage: 'Lifecycle'\n  },\n  menuSteps: {\n    id: 'orders.menu.steps',\n    defaultMessage: 'Order steps'\n  },\n  objectsNotFound: {\n    id: 'order.detail.not-found',\n    defaultMessage:\n      'The {objects} for this order {count, plural, one {is} other {are}} not available'\n  },\n  orderID: {\n    id: 'orders.order.detail.ID',\n    defaultMessage: 'Order ID'\n  },\n  orderParameters: {\n    id: 'orders.order.detail.parameters',\n    defaultMessage: 'Order parameters'\n  },\n  orderProgressMessages: {\n    id: 'orders.order.detail.messages',\n    defaultMessage: 'Progress messages'\n  },\n  lifecycleLink: {\n    id: 'orders.order.lifecicle.link',\n    defaultMessage: 'Manage product'\n  },\n  cancelOrder: {\n    id: 'orders.actions.cancel',\n    defaultMessage: 'Cancel order'\n  },\n  keepOrder: {\n    id: 'orders.actions.keep',\n    defaultMessage: 'Keep order'\n  },\n  cancelDescription: {\n    id: 'orders.cancel.description',\n    defaultMessage: 'Are you sure you want to cancel {name}?'\n  },\n  backToOrders: {\n    id: 'orders.toolbar.backLink',\n    defaultMessage: 'Back to orders'\n  },\n  orderDate: {\n    id: 'orders.approval.order-date',\n    defaultMessage: 'Order date'\n  },\n  approvalParameters: {\n    id: 'orders.approval.parameters',\n    defaultMessage: 'Parameters'\n  },\n  activity: {\n    id: 'orders.approval.activity',\n    defaultMessage: 'Activity'\n  }\n});\n\nexport default ordersMessages;\n","import labelMessages from './labels.messages';\n\nconst { defineMessages } = require('react-intl');\n\nconst statesMessages = defineMessages({\n  title: {\n    id: 'common.states.title',\n    defaultMessage: 'State'\n  },\n  ordered: {\n    id: 'common.states.ordered',\n    defaultMessage: 'Ordered'\n  },\n  approvalPending: {\n    id: 'common.states.approval-pending',\n    defaultMessage: 'Approval Pending'\n  },\n  canceled: {\n    id: 'common.states.canceled',\n    defaultMessage: 'Canceled'\n  },\n  completed: {\n    id: 'common.states.completed',\n    defaultMessage: 'Completed'\n  },\n  failed: {\n    id: 'common.states.failed',\n    defaultMessage: 'Failed'\n  },\n  undecided: {\n    id: 'common.states.undecided',\n    defaultMessage: 'Undecided'\n  },\n  approved: {\n    id: 'common.states.approved',\n    defaultMessage: 'Approved'\n  },\n  denied: {\n    id: 'common.states.denied',\n    defaultMessage: 'Denied'\n  },\n  error: {\n    id: 'common.states.error',\n    defaultMessage: 'Error'\n  },\n  pending: {\n    id: 'common.states.pending',\n    defaultMessage: 'Pending'\n  },\n  skipped: {\n    id: 'common.states.skipped',\n    defaultMessage: 'Skipped'\n  },\n  started: {\n    id: 'common.states.started',\n    defaultMessage: 'Started'\n  },\n  notified: {\n    id: 'common.states.notified',\n    defaultMessage: 'Notified'\n  }\n});\n\nexport const getTranslatableState = (state) =>\n  state.replace(/\\s/g, '').replace(/^./, (char) => char.toLowerCase());\n\n/**\n * We must include the created state so the dynamic data from DB can look for these messages in one place\n * The created message is shared among other components and is just a state message\n */\nexport default { ...statesMessages, created: labelMessages.created };\n","/* eslint camelcase: 0 */\nimport {\n  getAxiosInstance,\n  getPortfolioItemApi,\n  getOrderApi,\n  getOrderItemApi,\n  getGraphqlInstance\n} from '../shared/user-login';\nimport {\n  CATALOG_API_BASE,\n  SOURCES_API_BASE,\n  APPROVAL_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\n\nconst orderApi = getOrderApi();\nconst orderItemApi = getOrderItemApi();\nconst portfolioItemApi = getPortfolioItemApi();\nconst axiosInstance = getAxiosInstance();\nconst graphqlInstance = getGraphqlInstance();\n\nexport function getServicePlans(portfolioItemId) {\n  return portfolioItemApi.listServicePlans(portfolioItemId);\n}\n\nexport async function sendSubmitOrder({\n  service_parameters: { providerControlParameters, ...service_parameters },\n  ...parameters\n}) {\n  let order = await orderApi.createOrder();\n  let orderItem = {};\n  orderItem.count = 1;\n  orderItem = {\n    ...orderItem,\n    ...parameters,\n    service_parameters,\n    provider_control_parameters: providerControlParameters || {}\n  };\n  const orderItemResponse = await orderApi.addToOrder(order.id, orderItem);\n  return orderApi\n    .submitOrder(order.id)\n    .then((order) => ({ ...order, orderItem: orderItemResponse }));\n}\n\nexport function cancelOrder(orderId) {\n  return orderApi.cancelOrder(orderId);\n}\n\nconst getOrderItems = (orderIds) =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/order_items?${orderIds\n      .map((orderId) => `filter[order_id][]=${orderId}`)\n      .join('&')}`\n  );\n\nconst getOrderPortfolioItems = (itemIds) =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolio_items?${itemIds\n      .map((itemId) => `filter[id][]=${itemId}`)\n      .join('&')}`\n  );\n\nexport const getOrders = (filter = '', pagination = defaultSettings) =>\n  axiosInstance\n    .get(\n      `${CATALOG_API_BASE}/orders?${filter}&limit=${pagination.limit}&offset=${pagination.offset}`\n    ) // eslint-disable-line max-len\n    .then((orders) =>\n      getOrderItems(orders.data.map(({ id }) => id)).then((orderItems) =>\n        getOrderPortfolioItems(\n          orderItems.data.map(({ portfolio_item_id }) => portfolio_item_id)\n        ).then((portfolioItems) => {\n          return {\n            portfolioItems,\n            ...orders,\n            data: orders.data.map((order) => ({\n              ...order,\n              orderItems: orderItems.data.filter(\n                ({ order_id }) => order_id === order.id\n              )\n            }))\n          };\n        })\n      )\n    );\n\nexport function getOrderApprovalRequests(orderItemId) {\n  return orderItemApi.listApprovalRequests(orderItemId);\n}\n\nexport const getOrderDetail = (params) => {\n  let detailPromises = [\n    axiosInstance.get(`${CATALOG_API_BASE}/orders/${params.order}`),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/order_items/${params['order-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Order item',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/portfolio_items/${params['portfolio-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Product',\n            notFound: true\n          };\n        }\n\n        throw error;\n      })\n  ];\n\n  detailPromises.push(\n    params.platform && params.platform !== 'undefined'\n      ? axiosInstance\n          .get(`${SOURCES_API_BASE}/sources/${params.platform}`)\n          .catch((error) => {\n            if (error.status === 404 || error.status === 400) {\n              return {\n                object: 'Platform',\n                notFound: true\n              };\n            }\n\n            throw error;\n          })\n      : {\n          object: 'Platform',\n          notFound: true\n        }\n  );\n\n  detailPromises.push(\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/order_items/${params['order-item']}/progress_messages`\n      )\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {};\n        }\n\n        throw error;\n      })\n  );\n\n  detailPromises.push(\n    params.portfolio && params.portfolio !== 'undefined'\n      ? axiosInstance\n          .get(`${CATALOG_API_BASE}/portfolios/${params.portfolio}`)\n          .catch((error) => {\n            if (error.status === 404 || error.status === 400) {\n              return {\n                object: 'Portfolio',\n                notFound: true\n              };\n            }\n\n            throw error;\n          })\n      : { object: 'Portfolio', notFound: true }\n  );\n\n  return Promise.all(detailPromises);\n};\n\nconst APPROVAL_REQUESTER_PERSONA = 'approval/requester';\nconst requestTranscriptQuery = (parent_id) => `query {\n  requests(id: \"${parent_id}\") {\n    group_name\n    state\n    actions {\n      created_at\n    }\n  }\n}`;\nconst fetchRequestTranscript = (requestId) =>\n  graphqlInstance\n    .post(\n      `${APPROVAL_API_BASE}/graphql`,\n      { query: requestTranscriptQuery(requestId) },\n      { 'x-rh-persona': APPROVAL_REQUESTER_PERSONA }\n    )\n    .then(({ data: { requests } }) => requests);\n\nexport const getApprovalRequests = (orderItemId) =>\n  axiosInstance\n    .get(`${CATALOG_API_BASE}/order_items/${orderItemId}/approval_requests`)\n    .then(({ data }) => {\n      const promises = data.map(({ approval_request_ref }) =>\n        fetchRequestTranscript(approval_request_ref)\n      );\n      return Promise.all(promises).then((requests) => {\n        const data = requests?.[0]?.map(({ actions, ...request }) => ({\n          ...request,\n          updated: actions?.length > 0 ? actions.pop().created_at : undefined\n        }));\n        return { data: data || [] };\n      });\n    });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport { ORDER_ROUTE } from '../../constants/routes';\nimport ordersMessages from '../../messages/orders.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\n\nconst OrderNotification = ({\n  id,\n  dispatch,\n  portfolioItemId,\n  portfolioId,\n  platformId,\n  orderItemId\n}) => {\n  const formatMessage = useFormatMessage();\n  return formatMessage(ordersMessages.orderSuccess, {\n    id,\n    // eslint-disable-next-line react/display-name\n    link: (chunks) => (\n      <Link\n        onClick={() => dispatch(clearNotifications())}\n        to={{\n          pathname: ORDER_ROUTE,\n          search: `?order=${id}&order-item=${orderItemId}&portfolio-item=${portfolioItemId}&platform=${platformId}&portfolio=${portfolioId}`\n        }}\n      >\n        {chunks}\n      </Link>\n    )\n  });\n};\n\nOrderNotification.propTypes = {\n  id: PropTypes.string.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  portfolioItemId: PropTypes.string.isRequired,\n  portfolioId: PropTypes.string.isRequired,\n  platformId: PropTypes.string.isRequired,\n  orderItemId: PropTypes.string.isRequired\n};\n\nexport default OrderNotification;\n","import React from 'react';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\n\nimport * as ActionTypes from '../action-types';\nimport * as OrderHelper from '../../helpers/order/order-helper';\nimport OrderNotification from '../../presentational-components/order/order-notification';\nimport { defaultSettings } from '../../helpers/shared/pagination';\n\nexport const fetchServicePlans = (portfolioItemId) => ({\n  type: ActionTypes.FETCH_SERVICE_PLANS,\n  payload: OrderHelper.getServicePlans(portfolioItemId)\n});\n\nexport const updateServiceData = (data) => ({\n  type: ActionTypes.UPDATE_SERVICE_DATA,\n  payload: { serviceData: data }\n});\n\nexport const setSelectedPlan = (data) => ({\n  type: ActionTypes.SET_SELECTED_PLAN,\n  payload: data\n});\n\nexport const sendSubmitOrder = (apiProps, portfolioItem) => (dispatch) =>\n  dispatch({\n    type: ActionTypes.SUBMIT_SERVICE_ORDER,\n    payload: OrderHelper.sendSubmitOrder(apiProps).then(({ id, orderItem }) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been accepted successfully',\n          description: (\n            <OrderNotification\n              id={id}\n              dispatch={dispatch}\n              portfolioItemId={portfolioItem.id}\n              portfolioId={portfolioItem.portfolio_id}\n              platformId={portfolioItem.service_offering_source_ref}\n              orderItemId={orderItem.id}\n            />\n          ),\n          dismissable: true\n        })\n      )\n    )\n  });\n\nexport const cancelOrder = (orderId) => (dispatch, getState) => {\n  dispatch({ type: `${ActionTypes.CANCEL_ORDER}_PENDING` });\n  const {\n    orderReducer: { orderDetail }\n  } = getState();\n  return OrderHelper.cancelOrder(orderId)\n    .then(() => {\n      orderDetail.order.state = 'Canceled';\n      if (\n        orderDetail.approvalRequest &&\n        orderDetail.approvalRequest.length > 0\n      ) {\n        orderDetail.approvalRequest[0].state = 'canceled';\n      }\n\n      dispatch({\n        type: ActionTypes.SET_ORDER_DETAIL,\n        payload: { ...orderDetail }\n      });\n      return orderDetail;\n    })\n    .then((orderDetail) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been canceled successfully',\n          description: `Order ${`Order #${orderDetail.order.id}`} was canceled.`,\n          dismissable: true\n        })\n      )\n    )\n    .then(() => dispatch({ type: `${ActionTypes.CANCEL_ORDER}_FULFILLED` }))\n    .catch((error) => {\n      dispatch({\n        type: `${ActionTypes.CANCEL_ORDER}_REJECTED`,\n        payload: error\n      });\n    });\n};\n\nexport const fetchOrders = (filters, pagination = defaultSettings) => (\n  dispatch\n) => {\n  let queryFilter = Object.entries(filters)\n    .filter(([, value]) => value && value.length > 0)\n    .map(([key, value]) =>\n      Array.isArray(value)\n        ? value.map((value) => `filter[${key}][]=${value}`).join('&')\n        : `filter[${key}][contains_i]=${value}`\n    )\n    .join('&');\n  if (pagination.sortBy) {\n    queryFilter = `${queryFilter}&sort_by=${\n      pagination.sortBy\n    }:${pagination.sortDirection || 'desc'}`;\n  }\n\n  dispatch({ type: `${ActionTypes.FETCH_ORDERS}_PENDING` });\n  return OrderHelper.getOrders(queryFilter, pagination)\n    .then(({ portfolioItems, ...orders }) => {\n      dispatch({\n        type: ActionTypes.SET_PORTFOLIO_ITEMS,\n        payload: portfolioItems\n      });\n      return dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_FULFILLED`,\n        meta: {\n          ...pagination,\n          filter: queryFilter,\n          filters,\n          storeState: true,\n          stateKey: 'orders'\n        },\n        payload: orders\n      });\n    })\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchOrderDetails = (params) => (dispatch) => {\n  dispatch({ type: `${ActionTypes.SET_ORDER_DETAIL}_PENDING` });\n  return OrderHelper.getOrderDetail(params)\n    .then(\n      ([\n        order,\n        orderItem,\n        portfolioItem,\n        platform,\n        progressMessages,\n        portfolio,\n        approvalRequest\n      ]) =>\n        dispatch({\n          type: `${ActionTypes.SET_ORDER_DETAIL}_FULFILLED`,\n          payload: {\n            order,\n            orderItem,\n            portfolioItem,\n            platform,\n            progressMessages,\n            portfolio,\n            approvalRequest\n          }\n        })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_DETAIL}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchApprovalRequests = (orderItemId) => (dispatch) => {\n  dispatch({ type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_PENDING` });\n  return OrderHelper.getApprovalRequests(orderItemId)\n    .then((data) => {\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_FULFILLED`,\n        payload: data\n      });\n      return data;\n    })\n    .catch((err) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_REJECTED`,\n        payload: err\n      })\n    );\n};\n","import { toolbarComponentTypes } from '../toolbar-mapper';\n\nconst createOrdersToolbarSchema = () => ({\n  fields: [\n    {\n      component: toolbarComponentTypes.TOP_TOOLBAR,\n      className: 'orders pf-u-p-lg',\n      key: 'orders-toolbar',\n      fields: [\n        {\n          component: toolbarComponentTypes.TOP_TOOLBAR_TITLE,\n          key: 'orders-toolbar-title',\n          title: 'Orders',\n          className: ''\n        }\n      ]\n    }\n  ]\n});\n\nexport default createOrdersToolbarSchema;\n","import React, { Fragment } from 'react';\nimport { Label, Text, TextVariants } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\nimport {\n  ExclamationCircleIcon,\n  InfoCircleIcon,\n  CheckCircleIcon\n} from '@patternfly/react-icons';\n\nimport CardIcon from '../../presentational-components/shared/card-icon';\nimport { getOrderIcon } from '../../helpers/shared/orders';\nimport CatalogLink from '../common/catalog-link';\nimport { ORDER_ROUTE } from '../../constants/routes';\nimport statesMessages, {\n  getTranslatableState\n} from '../../messages/states.messages';\n\nimport { TableText } from '@patternfly/react-table';\n\nconst labelProps = {\n  Completed: { icon: <CheckCircleIcon />, color: 'green' },\n  'Approval Pending': {\n    icon: <InfoCircleIcon />,\n    color: 'blue'\n  },\n  Ordered: { icon: <InfoCircleIcon />, color: 'blue' },\n  Failed: { icon: <ExclamationCircleIcon />, color: 'red' }\n};\n\n/**\n * Create order row definition for react tabular table\n * @param {Object} item order object\n * @param {Object} orderPlatform order source data\n * @param {Object} orderPortfolio order portfolio data\n * @param {function} formatMessage translation function\n */\nconst createOrderItem = (\n  item,\n  orderPlatform,\n  orderPortfolio,\n  formatMessage\n) => {\n  const orderItem = (item.orderItems[0] && item.orderItems[0]) || {};\n  const searchParams = {\n    order: item.id,\n    'order-item': orderItem.id,\n    'portfolio-item': orderItem.portfolio_item_id,\n    platform: orderPlatform,\n    portfolio: orderPortfolio\n  };\n  const translatableState = getTranslatableState(item.state);\n  return [\n    {\n      title: (\n        <TableText>\n          <CatalogLink pathname={ORDER_ROUTE} searchParams={searchParams}>\n            {item.id}\n          </CatalogLink>\n        </TableText>\n      )\n    },\n    {\n      title: (\n        <Fragment>\n          <CardIcon\n            height={60}\n            src={getOrderIcon(item)}\n            sourceId={orderPlatform}\n          />\n        </Fragment>\n      )\n    },\n    item.orderName,\n    item.owner,\n    {\n      title: (\n        <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n          <DateFormat date={item.created_at} variant=\"relative\" />\n        </Text>\n      )\n    },\n    {\n      title: (\n        <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n          <DateFormat\n            date={item.orderItems[0] && item.orderItems[0].updated_at}\n            variant=\"relative\"\n          />\n        </Text>\n      )\n    },\n    {\n      title: (\n        <TableText>\n          <Label {...labelProps[item.state]} variant=\"outline\">\n            {formatMessage(statesMessages[translatableState])}\n          </Label>\n        </TableText>\n      )\n    }\n  ];\n};\n\nexport default createOrderItem;\n","import { CATALOG_API_BASE } from '../../utilities/constants';\n\nexport const getOrderIcon = ({ orderItems }) =>\n  orderItems[0] &&\n  `${CATALOG_API_BASE}/portfolio_items/${orderItems[0].portfolio_item_id}/icon`;\n\nexport const getOrderPortfolioName = ({ orderItems, id }, portfolioItems) => {\n  const portfolioItem =\n    orderItems[0] &&\n    portfolioItems.find(({ id }) => orderItems[0].portfolio_item_id === id);\n  return portfolioItem ? portfolioItem.name : `Order ${id}`;\n};\n\nexport const getOrderPlatformId = ({ orderItems }, portfolioItems) => {\n  const portfolioItem =\n    orderItems[0] &&\n    portfolioItems.find(({ id }) => orderItems[0].portfolio_item_id === id);\n  return portfolioItem\n    ? {\n        orderPlatform: portfolioItem.service_offering_source_ref,\n        orderPortfolio: portfolioItem.portfolio_id\n      }\n    : {};\n};\n","import React, { useEffect, useReducer } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Grid,\n  GridItem,\n  Title,\n  Bullseye,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Flex,\n  EmptyStateSecondaryActions,\n  Button\n} from '@patternfly/react-core';\nimport { Section } from '@redhat-cloud-services/frontend-components/components/cjs/Section';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/components/cjs/EmptyTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/TableToolbar';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection\n} from '@patternfly/react-table';\n\nimport { fetchOrders } from '../../redux/actions/order-actions';\nimport { fetchPlatforms } from '../../redux/actions/platform-actions';\nimport { ListLoader } from '../../presentational-components/shared/loader-placeholders';\nimport createOrderItem from './order-item';\nimport AsyncPagination from '../common/async-pagination';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport useInitialUriHash from '../../routing/use-initial-uri-hash';\nimport statesMessages from '../../messages/states.messages';\nimport filteringMessages from '../../messages/filtering.messages';\nimport ordersMessages from '../../messages/orders.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport {\n  getOrderPlatformId,\n  getOrderPortfolioName\n} from '../../helpers/shared/orders';\n\nconst debouncedFilter = asyncFormValidator(\n  (filters, meta = defaultSettings, dispatch, filteringCallback) => {\n    filteringCallback(true);\n    dispatch(fetchOrders(filters, meta)).then(() => filteringCallback(false));\n  },\n  1000\n);\n\nconst initialState = {\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false,\n  filterType: 'state',\n  filters: {\n    state: [],\n    owner: ''\n  },\n  sortBy: {\n    index: 0,\n    direction: SortByDirection.desc\n  }\n};\n\nconst changeFilters = (value, type, filters) => ({\n  ...filters,\n  [type]: value\n});\n\nconst ordersListState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return {\n        ...state,\n        filters: changeFilters(action.payload, state.filterType, state.filters)\n      };\n    case 'replaceFilterChip':\n      return { ...state, filters: action.payload };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    case 'setFilterType':\n      return { ...state, filterType: action.payload };\n    case 'setSortBy':\n      return { ...state, sortBy: action.payload, isFetching: true };\n  }\n\n  return state;\n};\n\nconst sortIndexMapper = {\n  0: 'id',\n  3: 'owner',\n  4: 'created_at',\n  6: 'state'\n};\n\nconst OrdersList = () => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const viewState = useInitialUriHash();\n  const [\n    { isFetching, isFiltering, filterType, filters, sortBy },\n    stateDispatch\n  ] = useReducer(ordersListState, {\n    ...initialState,\n    filters: viewState?.orders?.filters || { state: [], owner: '' },\n    sortBy: {\n      direction: viewState?.orders?.sortDirection || SortByDirection.desc,\n      index: viewState?.orders?.sortIndex || 0\n    }\n  });\n  const { data, meta } = useSelector(({ orderReducer }) => orderReducer.orders);\n  const columns = [\n    { title: formatMessage(ordersMessages.orderID) },\n    formatMessage(labelMessages.product),\n    '', // need empty row column to correctly aling product names after the icon column\n    {\n      title: formatMessage(ordersMessages.orderedByLabel)\n    },\n    { title: formatMessage(ordersMessages.orderDate) },\n    formatMessage(labelMessages.updated),\n    { title: formatMessage(labelMessages.status) }\n  ].map((column) =>\n    typeof column === 'object' &&\n    !isFetching &&\n    !isFiltering &&\n    data.length !== 0\n      ? { ...column, transforms: [sortable] }\n      : column\n  );\n  const portfolioItems = useSelector(\n    ({\n      portfolioReducer: {\n        portfolioItems: { data }\n      }\n    }) => data\n  );\n  const onSort = (_e, index, direction) => {\n    stateDispatch({\n      type: 'setSortBy',\n      payload: { index, direction }\n    });\n    return dispatch(\n      fetchOrders(filters, {\n        ...meta,\n        sortBy: sortIndexMapper[index],\n        sortDirection: direction,\n        sortIndex: index\n      })\n    ).then(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  const rows = data.map((item) => {\n    const { orderPlatform, orderPortfolio } = getOrderPlatformId(\n      item,\n      portfolioItems\n    );\n    const orderName = getOrderPortfolioName(item, portfolioItems);\n    return createOrderItem(\n      { ...item, orderName },\n      orderPlatform,\n      orderPortfolio,\n      formatMessage\n    );\n  });\n\n  useEffect(() => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    Promise.all([\n      dispatch(fetchOrders(filters, viewState?.orders)),\n      dispatch(fetchPlatforms())\n    ]).then(() => stateDispatch({ type: 'setFetching', payload: false }));\n  }, []);\n\n  const handlePagination = (_apiProps, pagination) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    return dispatch(\n      fetchOrders(filters, {\n        ...pagination,\n        sortBy: sortIndexMapper[sortBy.index],\n        sortDirection: sortBy.direction,\n        sortIndex: sortBy.index\n      })\n    )\n      .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n      .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  const handleFilterItems = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      { ...filters, [filterType]: value },\n      {\n        ...meta,\n        sortBy: sortIndexMapper[sortBy.index],\n        sortDirection: sortBy.direction,\n        sortIndex: sortBy.index,\n        offset: 0\n      },\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering })\n    );\n  };\n\n  const handleClearAll = () => {\n    stateDispatch({\n      type: 'replaceFilterChip',\n      payload: initialState.filters\n    });\n    return debouncedFilter(\n      initialState.filters,\n      {\n        ...meta,\n        sortBy: sortIndexMapper[sortBy.index],\n        sortDirection: sortBy.direction,\n        sortIndex: sortBy.index\n      },\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({\n          type: 'setFilteringFlag',\n          payload: isFiltering\n        })\n    );\n  };\n\n  return (\n    <Grid hasGutter>\n      <GridItem>\n        <Section type=\"content\">\n          {!meta.noData && (\n            <PrimaryToolbar\n              activeFiltersConfig={{\n                filters: Object.entries(filters)\n                  .filter(([, value]) => value && value.length > 0)\n                  .map(([key, value]) => ({\n                    category: key,\n                    type: key,\n                    chips: Array.isArray(value)\n                      ? value.map((name) => ({ name }))\n                      : [{ name: value }]\n                  })),\n                onDelete: (_e, [chip], clearAll) => {\n                  if (clearAll) {\n                    return handleClearAll();\n                  }\n\n                  const newFilters = { ...filters };\n                  if (chip.type === 'state') {\n                    newFilters[chip.type] = newFilters[chip.type].filter(\n                      (value) => value !== chip.chips[0].name\n                    );\n                  } else {\n                    newFilters[chip.type] = '';\n                  }\n\n                  stateDispatch({\n                    type: 'replaceFilterChip',\n                    payload: newFilters\n                  });\n                  debouncedFilter(newFilters, meta, dispatch, (isFiltering) =>\n                    stateDispatch({\n                      type: 'setFilteringFlag',\n                      payload: isFiltering\n                    })\n                  );\n                }\n              }}\n              filterConfig={{\n                onChange: (_e, value) =>\n                  stateDispatch({ type: 'setFilterType', payload: value }),\n                value: filterType,\n                items: [\n                  {\n                    filterValues: {\n                      items: [\n                        {\n                          value: 'Approval Pending',\n                          label: formatMessage(statesMessages.approvalPending)\n                        },\n                        {\n                          value: 'Canceled',\n                          label: formatMessage(statesMessages.canceled)\n                        },\n                        {\n                          value: 'Completed',\n                          label: formatMessage(statesMessages.completed)\n                        },\n                        {\n                          value: 'Created',\n                          label: formatMessage(labelMessages.created)\n                        },\n                        {\n                          value: 'Failed',\n                          label: formatMessage(statesMessages.failed)\n                        },\n                        {\n                          value: 'Ordered',\n                          label: formatMessage(statesMessages.ordered)\n                        }\n                      ],\n                      value: filters.state,\n                      onChange: (_e, value) => handleFilterItems(value)\n                    },\n                    label: 'State',\n                    value: 'state',\n                    type: 'checkbox'\n                  },\n                  {\n                    filterValues: {\n                      value: filters.owner,\n                      onChange: (_e, value) => handleFilterItems(value)\n                    },\n                    label: 'Owner',\n                    value: 'owner'\n                  }\n                ]\n              }}\n              pagination={\n                <AsyncPagination\n                  isDisabled={isFetching || isFiltering}\n                  apiRequest={handlePagination}\n                  meta={meta}\n                  isCompact\n                />\n              }\n            />\n          )}\n          <Table\n            aria-label=\"orders\"\n            {...(!(isFetching || isFiltering) && data.length === 0\n              ? {}\n              : { sortBy, onSort })}\n            cells={columns}\n            rows={isFetching || isFiltering ? [] : rows}\n            className=\"orders-table\"\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {!(isFetching || isFiltering) && data.length === 0 && (\n            <EmptyTable>\n              <Bullseye>\n                <EmptyState>\n                  <Bullseye>\n                    <EmptyStateIcon icon={SearchIcon} />\n                  </Bullseye>\n                  <Title headingLevel=\"h1\" size=\"lg\">\n                    {meta.noData\n                      ? formatMessage(ordersMessages.noOrdersTitle)\n                      : formatMessage(filteringMessages.noResults)}\n                  </Title>\n                  <EmptyStateBody>\n                    {meta.noData\n                      ? formatMessage(ordersMessages.noOrdersDescription)\n                      : formatMessage(filteringMessages.noResultsDescription)}\n                  </EmptyStateBody>\n                  {!meta.noData && (\n                    <EmptyStateSecondaryActions>\n                      <Button variant=\"link\" onClick={handleClearAll}>\n                        {formatMessage(filteringMessages.clearFilters)}\n                      </Button>\n                    </EmptyStateSecondaryActions>\n                  )}\n                </EmptyState>\n              </Bullseye>\n            </EmptyTable>\n          )}\n          {(isFetching || isFiltering) && <ListLoader />}\n          <TableToolbar className=\"pf-u-mr-0\">\n            <div className=\"bottom-pagination-container\">\n              <Flex justifyContent={{ default: 'justifyContentFlexEnd' }}>\n                {meta.count > 0 && (\n                  <AsyncPagination\n                    className=\"pf-u-mt-0\"\n                    isDisabled={isFetching || isFiltering}\n                    apiRequest={handlePagination}\n                    meta={meta}\n                  />\n                )}\n              </Flex>\n            </div>\n          </TableToolbar>\n        </Section>\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default OrdersList;\n","import React, { useEffect } from 'react';\nimport { Stack } from '@patternfly/react-core';\n\nimport ToolbarRenderer from '../../toolbar/toolbar-renderer';\nimport createOrdersToolbarSchema from '../../toolbar/schemas/orders-toolbar.schema';\nimport OrdersList from './orders-list';\n\nconst Orders = () => {\n  useEffect(() => {\n    insights.chrome.appNavClick({ id: 'orders', secondaryNav: true });\n  }, []);\n\n  return (\n    <Stack>\n      <ToolbarRenderer schema={createOrdersToolbarSchema()} />\n      <OrdersList />\n    </Stack>\n  );\n};\n\nexport default Orders;\n"],"sourceRoot":""}