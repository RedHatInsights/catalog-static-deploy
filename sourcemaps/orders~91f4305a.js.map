{"version":3,"sources":["webpack:///./src/smart-components/common/async-pagination.tsx","webpack:///./src/presentational-components/shared/filter-toolbar-item.tsx","webpack:///./src/toolbar/toolbar-mapper.tsx","webpack:///./src/messages/filtering.messages.ts","webpack:///./src/messages/orders.messages.ts","webpack:///./src/toolbar/toolbar-renderer.tsx","webpack:///./src/presentational-components/shared/app-tabs.tsx","webpack:///./src/messages/states.messages.ts","webpack:///./src/helpers/order/new-order-helper.ts","webpack:///./src/helpers/order/order-helper.ts","webpack:///./src/presentational-components/order/order-notification.tsx","webpack:///./src/redux/actions/order-actions.tsx","webpack:///./src/smart-components/order/order-status-mapper.tsx","webpack:///./src/toolbar/schemas/orders-toolbar.schema.ts","webpack:///./src/smart-components/order/order-item.tsx","webpack:///./src/helpers/shared/orders.ts","webpack:///./src/smart-components/order/orders-list.tsx","webpack:///./src/smart-components/order/orders.tsx"],"names":["meta","limit","count","offset","apiProps","apiRequest","className","isCompact","props","perPage","itemCount","onPerPageSelect","_event","page","onSetPage","number","debounce","options","request","dropDirection","FilterInputGroup","div","FilterInput","TextInput","FilterIconsContainer","span","StyledCloseIcon","StyledSearchIcon","searchValue","onFilterChange","placeholder","isClearable","rest","ToolbarItem","id","value","type","onChange","width","height","onClick","ToolbarButton","title","Button","propTypes","string","isRequired","toolbarMapper","TopToolbar","TopToolbarTitle","Toolbar","children","ToolbarContent","ToolbarGroup","FilterToolbarItem","Link","Level","LevelItem","AppTabs","toolbarComponentTypes","TOP_TOOLBAR","TOP_TOOLBAR_TITLE","TOOLBAR","TOOLBAR_ITEM","TOOLBAR_GROUP","FILTER_TOOLBAR_ITEM","LINK","BUTTON","LEVEL","LEVEL_ITEM","TABS","filteringMessages","noItems","defaultMessage","filterByProduct","noResults","noResultsDescription","clearFilters","noProducts","noRecords","filterByTitle","noResultsFound","noResult","unknown","ordersMessages","orderedBy","orderedByLabel","lastUpdated","compositeTitle","detailTitle","orderSuccess","noOrdersTitle","noOrdersDescription","noApprovalRequests","creatingApprovalRequest","approvalTitle","approvalDetail","approvalCreated","approvalReason","approvalCompleted","orderDetails","menuApproval","menuProvision","menuLifecycle","menuSteps","objectsNotFound","orderID","orderParameters","orderItemParameters","defaultOrderItemType","orderProgressMessages","lifecycleLink","cancelOrder","reOrder","keepOrder","cancelDescription","backToOrders","orderDate","approvalParameters","activity","artifacts","noOrderProvision","fetchingOrderProvision","ToolbarContext","Component","component","Consumer","componentMapper","C","render","fields","map","hidden","key","field","schema","Provider","tabItems","push","pathname","search","activeTab","find","name","includes","activeKey","eventKey","onSelect","tabIndex","item","disabled","statesMessages","ordered","approvalPending","canceled","completed","failed","undecided","approved","denied","error","pending","skipped","started","notified","getTranslatableState","state","replace","char","toLowerCase","created","axiosInstance","fetchOrderProvisionItems","orderId","get","items","orderItems","data","status","from","location","progressMessageItems","promises","orderItem","then","orderItemId","progressMessages","Promise","all","orderApi","portfolioItemApi","graphqlInstance","getServicePlans","portfolioItemId","listServicePlans","getOrders","filter","pagination","orders","orderIds","length","join","itemIds","itemId","portfolioItems","order","getOrderDetail","params","Object","values","some","object","notFound","portfolioItem","portfolio_item_id","parallerRequests","service_offering_source_ref","catch","portfolio_id","platform","portfolio","detailPromises","getApprovalRequests","requestId","parent_id","approval_request_ref","post","query","requests","number_of_children","actions","updated","pop","created_at","dispatch","portfolioId","platformId","formatMessage","link","chunks","to","fetchServicePlans","payload","service_parameters","providerControlParameters","parameters","createOrder","provider_control_parameters","addToOrder","orderItemResponse","submitOrder","variant","description","dismissable","getState","orderDetail","Canceled","approvalRequest","fetchOrders","filters","queryFilter","entries","Array","isArray","sortBy","sortDirection","storeState","stateKey","fetchOrderDetails","fetchApprovalRequests","err","fetchOrderProvision","orderStatusMapper","Completed","icon","color","Ordered","Failed","Created","Approved","Denied","Undecided","Unknown","orderPlatform","orderPortfolio","searchParams","translatableState","TableText","src","sourceId","orderName","owner","Text","small","DateFormat","date","updated_at","Label","debouncedFilter","filteringCallback","initialState","isOpen","isFetching","isFiltering","filterType","index","direction","desc","ordersListState","action","sortIndexMapper","0","3","4","6","viewState","sortIndex","stateDispatch","columns","product","column","transforms","sortable","rows","getOrderPlatformId","getOrderPortfolioName","handlePagination","_apiProps","handleFilterItems","handleClearAll","Grid","hasGutter","GridItem","Section","noData","PrimaryToolbar","activeFiltersConfig","category","chips","onDelete","_e","clearAll","chip","newFilters","filterConfig","filterValues","label","isDisabled","Table","onSort","cells","EmptyTable","Bullseye","EmptyState","EmptyStateIcon","Title","headingLevel","size","EmptyStateBody","EmptyStateSecondaryActions","ouiaId","TableToolbar","Flex","justifyContent","default","window","insights","chrome","appNavClick","secondaryNav","Stack"],"mappings":"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","file":"js/orders~91f4305a.05a761b170ee5dca6d68.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\nimport debouncePromise from 'awesome-debounce-promise';\n\nimport { OnPerPageSelect, OnSetPage, Pagination } from '@patternfly/react-core';\n\nimport {\n  getCurrentPage,\n  getNewPage,\n  PaginationConfiguration\n} from '../../helpers/shared/pagination';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\n\nexport interface AsyncPaginationProps<T = any> extends AnyObject {\n  meta: PaginationConfiguration;\n  apiRequest: (...args: any[]) => Promise<T>;\n  apiProps?: any;\n  className?: string;\n  isCompact?: boolean;\n}\nconst AsyncPagination: React.ComponentType<AsyncPaginationProps> = ({\n  meta: { limit = 50, count = 0, offset = 0 },\n  apiProps,\n  apiRequest,\n  className = '',\n  isCompact = false,\n  ...props\n}) => {\n  const handleOnPerPageSelect: OnPerPageSelect = (_event, limit) =>\n    apiRequest(apiProps, {\n      offset,\n      limit\n    });\n\n  const handleSetPage: OnSetPage = (_event, number, debounce) => {\n    const options = {\n      offset: getNewPage(number, limit),\n      limit\n    };\n\n    const request = () => apiRequest(apiProps, options);\n    if (debounce) {\n      return debouncePromise(request, 250)();\n    }\n\n    return request();\n  };\n\n  return (\n    <div className={className}>\n      <Pagination\n        perPage={limit || 50}\n        itemCount={count || 0}\n        onPerPageSelect={handleOnPerPageSelect}\n        page={getCurrentPage(limit, offset)}\n        onSetPage={handleSetPage}\n        dropDirection=\"down\"\n        isCompact={isCompact}\n        {...props}\n      />\n    </div>\n  );\n};\n\nexport default AsyncPagination;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport styled from 'styled-components';\nimport { SearchIcon, CloseIcon } from '@patternfly/react-icons';\nimport { ToolbarItem, TextInput } from '@patternfly/react-core';\n\nconst FilterInputGroup = styled.div`\n  position: relative;\n  width: 300px;\n  height: 36px;\n`;\n\nconst FilterInput = styled(TextInput)`\n  position: absolute;\n  width: 300px;\n  padding-right: 34px;\n  background: transparent;\n`;\n\nconst FilterIconsContainer = styled.span`\n  position: absolute;\n  right: 8px;\n  top: 8px;\n`;\n\nconst StyledCloseIcon = styled(CloseIcon)`\n  z-index: 1000;\n  fill: #72767b;\n  :hover {\n    fill: var(--pf-global--Color--100);\n    cursor: pointer;\n  }\n`;\n\nconst StyledSearchIcon = styled(SearchIcon)`\n  z-index: 1000;\n  fill: #72767b;\n`;\n\nexport interface FilterToolbarItemProps {\n  searchValue?: string;\n  onFilterChange: (value: string) => void;\n  placeholder?: string;\n  isClearable?: boolean;\n}\nconst FilterToolbarItem: React.ComponentType<FilterToolbarItemProps> = ({\n  searchValue = '',\n  onFilterChange,\n  placeholder,\n  isClearable = false,\n  ...rest\n}) => (\n  <ToolbarItem>\n    <FilterInputGroup>\n      <FilterInput\n        id=\"toolbar-filter\"\n        placeholder={placeholder}\n        value={searchValue}\n        type=\"text\"\n        onChange={onFilterChange}\n        aria-label={placeholder}\n        {...rest}\n      />\n      <FilterIconsContainer>\n        {(isClearable && searchValue && (\n          <StyledCloseIcon\n            width=\"16\"\n            height=\"16\"\n            onClick={() => onFilterChange('')}\n          />\n        )) || <StyledSearchIcon />}\n      </FilterIconsContainer>\n    </FilterInputGroup>\n  </ToolbarItem>\n);\n\nexport default FilterToolbarItem;\n","/* eslint-disable react/prop-types */\nimport React, { ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Level,\n  LevelItem,\n  ToolbarItem,\n  ToolbarContent,\n  ButtonProps\n} from '@patternfly/react-core';\n\nimport FilterToolbarItem from '../presentational-components/shared/filter-toolbar-item';\nimport TopToolbar, {\n  TopToolbarTitle\n} from '../presentational-components/shared/top-toolbar';\nimport AppTabs from '../presentational-components/shared/app-tabs';\nimport CatalogLink from '../smart-components/common/catalog-link';\nimport {\n  StyledToolbar,\n  StyledToolbarGroup,\n  StyledToolbarProps\n} from '../presentational-components/styled-components/toolbars';\n\nexport interface ToolbarButtonProps extends Omit<ButtonProps, 'title'> {\n  title: ReactNode;\n}\n\nconst ToolbarButton: React.ComponentType<ToolbarButtonProps> = ({\n  title,\n  ...props\n}) => <Button {...props}>{title}</Button>;\n\nToolbarButton.propTypes = {\n  title: PropTypes.string.isRequired\n};\n\nconst AppToolbar: React.ComponentType<StyledToolbarProps> = ({\n  children,\n  ...props\n}) => (\n  <StyledToolbar className=\"pf-u-p-0\" {...props}>\n    <ToolbarContent className=\"pf-u-pl-0\">{children}</ToolbarContent>\n  </StyledToolbar>\n);\nconst toolbarMapper = {\n  TopToolbar,\n  TopToolbarTitle,\n  Toolbar: AppToolbar,\n  ToolbarGroup: StyledToolbarGroup,\n  ToolbarItem,\n  FilterToolbarItem,\n  Link: CatalogLink,\n  Level,\n  LevelItem,\n  Button: ToolbarButton,\n  AppTabs\n};\n\nexport const toolbarComponentTypes = {\n  TOP_TOOLBAR: 'TopToolbar',\n  TOP_TOOLBAR_TITLE: 'TopToolbarTitle',\n  TOOLBAR: 'Toolbar',\n  TOOLBAR_ITEM: 'ToolbarItem',\n  TOOLBAR_GROUP: 'ToolbarGroup',\n  FILTER_TOOLBAR_ITEM: 'FilterToolbarItem',\n  LINK: 'Link',\n  BUTTON: 'Button',\n  LEVEL: 'Level',\n  LEVEL_ITEM: 'LevelItem',\n  TABS: 'AppTabs'\n};\n\nexport default toolbarMapper;\n","import { defineMessages } from 'react-intl';\n\nconst filteringMessages = defineMessages({\n  noItems: {\n    id: 'common.filtering.noItems',\n    defaultMessage: 'No items found'\n  },\n  filterByProduct: {\n    id: 'common.filtering.filterByProduct',\n    defaultMessage: 'Filter by product'\n  },\n  noResults: {\n    id: 'common.filtering.noResults',\n    defaultMessage: 'No results found'\n  },\n  noResultsDescription: {\n    id: 'common.filtering.noResultsDescription',\n    defaultMessage:\n      'No results match the filter criteria. Remove all filters or clear all filters to show results.'\n  },\n  clearFilters: {\n    id: 'common.filtering.clear-filters',\n    defaultMessage: 'Clear all filters'\n  },\n  noProducts: {\n    id: 'common.filtering.no-products',\n    defaultMessage: 'No products yet'\n  },\n  noRecords: {\n    id: 'commonMessages.noRecords',\n    defaultMessage: 'No records'\n  },\n  filterByTitle: {\n    id: 'tableToolbar.filterByTitle',\n    defaultMessage: 'Filter by {title}'\n  },\n  noResultsFound: {\n    id: 'tableToolbar.noResultsFound',\n    defaultMessage: 'No results found'\n  },\n  noResult: {\n    id: 'tableToolbar.noResult',\n    defaultMessage: 'No {results}'\n  },\n  unknown: {\n    id: 'commonMessages.unknown',\n    defaultMessage: 'Unknown'\n  }\n});\n\nexport default filteringMessages;\n","import { defineMessages } from 'react-intl';\n\nconst ordersMessages = defineMessages({\n  orderedBy: {\n    id: 'orders.common.orderedBy',\n    defaultMessage: 'Ordered by {owner}'\n  },\n  orderedByLabel: {\n    id: 'orders.approval.orderedBy',\n    defaultMessage: 'Ordered by'\n  },\n  lastUpdated: {\n    id: 'orders.common.lastUpdated',\n    defaultMessage: 'Last updated'\n  },\n  compositeTitle: {\n    id: 'orders.common.compositeTitle',\n    defaultMessage: '{name} - Order # {id}'\n  },\n  detailTitle: {\n    id: 'orders.detail.title',\n    defaultMessage: 'Order ID {id}'\n  },\n  orderSuccess: {\n    id: 'orders.notification.success',\n    defaultMessage:\n      'You can track the progress of Order # {id} in your <link>Orders</link> page.'\n  },\n  noOrdersTitle: {\n    id: 'orders.list.empty.title',\n    defaultMessage: 'No orders'\n  },\n  noOrdersDescription: {\n    id: 'orders.list.empty.description',\n    defaultMessage: 'No orders have been created.'\n  },\n  noApprovalRequests: {\n    id: 'orders.approval.no-requests',\n    defaultMessage:\n      'We were unable to find any approval requests for this order.'\n  },\n  creatingApprovalRequest: {\n    id: 'orders.approval.creating',\n    defaultMessage: 'Creating approval request'\n  },\n  approvalTitle: {\n    id: 'orders.approval.title',\n    defaultMessage: 'Summary'\n  },\n  approvalDetail: {\n    id: 'orders.approval.view-detail',\n    // eslint-disable-next-line quotes\n    defaultMessage: \"View this order's approval request details\"\n  },\n  approvalCreated: {\n    id: 'orders.approval.details.created',\n    defaultMessage: 'Request created'\n  },\n  approvalReason: {\n    id: 'orders.approval.details.reason',\n    defaultMessage: 'Approval reason'\n  },\n  approvalCompleted: {\n    id: 'orders.approval.details.completed',\n    defaultMessage: 'Completed at'\n  },\n  orderDetails: {\n    id: 'orders.common.details',\n    defaultMessage: 'Order details'\n  },\n  menuApproval: {\n    id: 'orders.menu.approval',\n    defaultMessage: 'Approval'\n  },\n  menuProvision: {\n    id: 'orders.menu.provision',\n    defaultMessage: 'Provision'\n  },\n  menuLifecycle: {\n    id: 'orders.menu.lifecycle',\n    defaultMessage: 'Lifecycle'\n  },\n  menuSteps: {\n    id: 'orders.menu.steps',\n    defaultMessage: 'Order steps'\n  },\n  objectsNotFound: {\n    id: 'order.detail.not-found',\n    defaultMessage:\n      'The {objects} for this order {count, plural, one {is} other {are}} not available'\n  },\n  orderID: {\n    id: 'orders.order.detail.ID',\n    defaultMessage: 'Order ID'\n  },\n  orderParameters: {\n    id: 'orders.order.detail.parameters',\n    defaultMessage: 'Order parameters'\n  },\n  orderItemParameters: {\n    id: 'orders.order.provision.parameters',\n    defaultMessage: 'Parameters'\n  },\n  defaultOrderItemType: {\n    id: 'orders.order.default_type',\n    defaultMessage: 'Product'\n  },\n  orderProgressMessages: {\n    id: 'orders.order.detail.messages',\n    defaultMessage: 'Progress messages'\n  },\n  lifecycleLink: {\n    id: 'orders.order.lifecycle.link',\n    defaultMessage: 'Manage product'\n  },\n  cancelOrder: {\n    id: 'orders.actions.cancel',\n    defaultMessage: 'Cancel order'\n  },\n  reOrder: {\n    id: 'orders.actions.reorder',\n    defaultMessage: 'Reorder'\n  },\n  keepOrder: {\n    id: 'orders.actions.keep',\n    defaultMessage: 'Keep order'\n  },\n  cancelDescription: {\n    id: 'orders.cancel.description',\n    defaultMessage: 'Are you sure you want to cancel {name}?'\n  },\n  backToOrders: {\n    id: 'orders.toolbar.backLink',\n    defaultMessage: 'Back to orders'\n  },\n  orderDate: {\n    id: 'orders.approval.order-date',\n    defaultMessage: 'Order date'\n  },\n  approvalParameters: {\n    id: 'orders.approval.parameters',\n    defaultMessage: 'Parameters'\n  },\n  activity: {\n    id: 'orders.approval.activity',\n    defaultMessage: 'Activity'\n  },\n  artifacts: {\n    id: 'orders.artifacts',\n    defaultMessage: 'Order artifacts'\n  },\n  noOrderProvision: {\n    id: 'orders.provision.no-items',\n    defaultMessage: 'We were unable to find provisioning data for this order.'\n  },\n  fetchingOrderProvision: {\n    id: 'orders.provision.fetching-provision',\n    defaultMessage: 'Retrieving order provisioning data'\n  }\n});\n\nexport default ordersMessages;\n","/* eslint-disable react/prop-types */\nimport React, { createContext, ReactNode } from 'react';\nimport toolbarMapper, { toolbarComponentTypes } from './toolbar-mapper';\nimport { AnyObject, ValueOf } from '../types/common-types';\n\nexport interface ToolbarField extends AnyObject {\n  component:\n    | ValueOf<typeof toolbarMapper>\n    | React.ComponentType\n    | ValueOf<typeof toolbarComponentTypes>;\n  hidden?: boolean;\n  fields?: ToolbarField[];\n  key: string;\n}\n\nexport interface ToolbarSchema {\n  fields: ToolbarField[];\n}\n\nconst ToolbarContext = createContext<{\n  render?: (fields: ToolbarField[]) => ReactNode;\n  componentMapper?: typeof toolbarMapper;\n}>({});\n\ninterface ComponentProps extends AnyObject {\n  component:\n    | ValueOf<typeof toolbarMapper>\n    | React.ComponentType\n    | ValueOf<typeof toolbarComponentTypes>;\n}\nconst Component: React.ComponentType<ComponentProps> = ({\n  component,\n  ...props\n}) => (\n  <ToolbarContext.Consumer>\n    {({ componentMapper }) => {\n      const C =\n        typeof component === 'string'\n          ? componentMapper &&\n            componentMapper[component as keyof typeof toolbarMapper]\n          : (component as React.ComponentType<any>);\n      return C ? <C {...props} /> : null;\n    }}\n  </ToolbarContext.Consumer>\n);\n\nconst render = (fields: ToolbarField[]): React.ReactNode =>\n  fields.map(({ hidden, fields, key, ...field }) =>\n    hidden ? null : fields ? (\n      <Component key={key} {...field}>\n        {render(fields)}\n      </Component>\n    ) : (\n      <Component key={key} {...field} />\n    )\n  );\n\nexport interface ToolbarRendererProps {\n  schema: ToolbarSchema;\n  componentMapper?: typeof toolbarMapper;\n}\nconst ToolbarRenderer: React.ComponentType<ToolbarRendererProps> = ({\n  schema,\n  componentMapper = toolbarMapper\n}) => (\n  <ToolbarContext.Provider value={{ render, componentMapper }}>\n    {render(schema.fields)}\n  </ToolbarContext.Provider>\n);\n\nexport default ToolbarRenderer;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { Tabs, Tab } from '@patternfly/react-core';\nimport { useLocation } from 'react-router-dom';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\n\nexport interface AppTabsProps {\n  tabItems: {\n    name: string;\n    eventKey: number;\n    title: string;\n    disabled?: boolean;\n  }[];\n}\nconst AppTabs: React.ComponentType<AppTabsProps> = ({ tabItems }) => {\n  const { push } = useEnhancedHistory();\n  const { pathname, search } = useLocation();\n  const activeTab = tabItems.find(({ name }) => pathname.includes(name));\n  const handleTabClick = (\n    _event: React.MouseEvent<HTMLElement, MouseEvent>,\n    tabIndex: number | string\n  ) => push({ pathname: tabItems[tabIndex as number].name, search });\n\n  return (\n    <Tabs\n      activeKey={activeTab ? activeTab.eventKey : 0}\n      onSelect={handleTabClick}\n    >\n      {tabItems.map((item) => (\n        <Tab\n          title={item.title}\n          key={item.eventKey}\n          eventKey={item.eventKey}\n          name={item.name}\n          disabled={item.disabled}\n        />\n      ))}\n    </Tabs>\n  );\n};\n\nexport default AppTabs;\n","import labelMessages from './labels.messages';\n\nimport { defineMessages } from 'react-intl';\n\nconst statesMessages = defineMessages({\n  title: {\n    id: 'common.states.title',\n    defaultMessage: 'State'\n  },\n  ordered: {\n    id: 'common.states.ordered',\n    defaultMessage: 'Ordered'\n  },\n  approvalPending: {\n    id: 'common.states.approval-pending',\n    defaultMessage: 'Approval Pending'\n  },\n  canceled: {\n    id: 'common.states.canceled',\n    defaultMessage: 'Canceled'\n  },\n  completed: {\n    id: 'common.states.completed',\n    defaultMessage: 'Completed'\n  },\n  failed: {\n    id: 'common.states.failed',\n    defaultMessage: 'Failed'\n  },\n  undecided: {\n    id: 'common.states.undecided',\n    defaultMessage: 'Undecided'\n  },\n  approved: {\n    id: 'common.states.approved',\n    defaultMessage: 'Approved'\n  },\n  denied: {\n    id: 'common.states.denied',\n    defaultMessage: 'Denied'\n  },\n  error: {\n    id: 'common.states.error',\n    defaultMessage: 'Error'\n  },\n  pending: {\n    id: 'common.states.pending',\n    defaultMessage: 'Pending'\n  },\n  skipped: {\n    id: 'common.states.skipped',\n    defaultMessage: 'Skipped'\n  },\n  started: {\n    id: 'common.states.started',\n    defaultMessage: 'Started'\n  },\n  notified: {\n    id: 'common.states.notified',\n    defaultMessage: 'Notified'\n  },\n  unknown: {\n    id: 'common.states.unknown',\n    defaultMessage: 'Unknown'\n  }\n});\n\nexport const getTranslatableState = (\n  state: string\n): keyof typeof statesMessages =>\n  (state\n    ? state.replace(/\\s/g, '').replace(/^./, (char) => char.toLowerCase())\n    : 'unknown') as keyof typeof statesMessages;\n\n/**\n * We must include the created state so the dynamic data from DB can look for these messages in one place\n * The created message is shared among other components and is just a state message\n */\nexport default { ...statesMessages, created: labelMessages.created };\n","// TODO migrate whole order-helper.js to TS\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  Order,\n  OrderItem,\n  PortfolioItem,\n  Portfolio,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\nimport { Source } from '@redhat-cloud-services/sources-client';\nimport { getAxiosInstance } from '../shared/user-login';\nimport { CATALOG_API_BASE, SOURCES_API_BASE } from '../../utilities/constants';\nconst axiosInstance = getAxiosInstance();\n\nexport interface ObjectNotFound {\n  object: 'Order item' | 'Product' | 'Portfolio' | 'Messages' | 'Platform';\n  notFound: boolean;\n}\n\nexport type OrderDetailPayload = [\n  Order,\n  OrderItem | ObjectNotFound,\n  PortfolioItem | ObjectNotFound,\n  Source | ObjectNotFound,\n  ProgressMessage | ObjectNotFound,\n  Portfolio | ObjectNotFound\n];\n\nexport type ProgressMessageItem = {\n  orderItemId: string;\n  progressMessages: ProgressMessage[];\n};\n\nexport interface OrderProvisionPayload {\n  orderItems: OrderItem[] | [];\n  progressMessageItems: ProgressMessageItem[] | [];\n}\n\nexport const fetchOrderDetailSequence = async (\n  orderId: string\n): Promise<OrderDetailPayload> => {\n  let order: Order;\n  try {\n    order = await axiosInstance.get(`${CATALOG_API_BASE}/orders/${orderId}`);\n  } catch (error) {\n    order = {};\n    if (error.status === 404 || error.status === 400) {\n      catalogHistory.replace({\n        pathname: '/404',\n        state: { from: catalogHistory.location }\n      });\n    } else {\n      throw error;\n    }\n  }\n\n  let orderItem: OrderItem | ObjectNotFound = {\n    object: 'Order item',\n    notFound: true\n  };\n  try {\n    const orderItems = await axiosInstance.get(\n      `${CATALOG_API_BASE}/order_items?order_id=${order.id}`\n    );\n    orderItem = orderItems.data[0];\n  } catch (_error) {\n    // no handler\n  }\n\n  let portfolioItem: PortfolioItem | ObjectNotFound = {\n    object: 'Product',\n    notFound: true\n  };\n\n  try {\n    portfolioItem = await axiosInstance.get(\n      `${CATALOG_API_BASE}/portfolio_items/${\n        (orderItem as OrderItem).portfolio_item_id\n      }`\n    );\n  } catch (_error) {\n    // nohandler\n  }\n\n  const parallerRequests = [\n    axiosInstance\n      .get(\n        `${SOURCES_API_BASE}/sources/${\n          (portfolioItem as PortfolioItem).service_offering_source_ref\n        }`\n      )\n      .catch(() => ({ object: 'Platform', notFound: true })),\n\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/order_items/${\n          (orderItem as OrderItem).id\n        }/progress_messages`\n      )\n      .catch(() => ({ object: 'Messages', notFound: true })),\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/portfolios/${\n          (portfolioItem as PortfolioItem).portfolio_id\n        }`\n      )\n      .catch(() => ({ object: 'Portfolio', notFound: true }))\n  ];\n\n  return Promise.all(\n    parallerRequests\n  ).then(([platform, progressMessages, portfolio]) => [\n    order,\n    orderItem,\n    portfolioItem,\n    platform as Source | ObjectNotFound,\n    progressMessages as ProgressMessage | ObjectNotFound,\n    portfolio as Portfolio | ObjectNotFound\n  ]);\n};\n\nexport const fetchOrderProvisionItems = async (\n  orderId: string\n): Promise<OrderProvisionPayload> => {\n  let orderItems: OrderItem[];\n  try {\n    const items = await axiosInstance.get(\n      `${CATALOG_API_BASE}/order_items/?order_id=${orderId}`\n    );\n    orderItems = items.data;\n  } catch (error) {\n    orderItems = [];\n    if (error.status === 404 || error.status === 400) {\n      catalogHistory.replace({\n        pathname: '/404',\n        state: { from: catalogHistory.location }\n      });\n    } else {\n      throw error;\n    }\n  }\n\n  const progressMessageItems: ProgressMessageItem[] = [];\n  const promises = orderItems.map((orderItem) =>\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/order_items/${orderItem.id}/progress_messages`)\n      .then((item) => {\n        progressMessageItems.push({\n          orderItemId: orderItem.id || '',\n          progressMessages: item.data\n        });\n        return progressMessageItems;\n      })\n  );\n  await Promise.all(promises);\n  return { orderItems, progressMessageItems };\n};\n","/* eslint camelcase: 0 */\nimport {\n  getAxiosInstance,\n  getPortfolioItemApi,\n  getOrderApi,\n  getOrderItemApi,\n  getGraphqlInstance\n} from '../shared/user-login';\nimport {\n  CATALOG_API_BASE,\n  SOURCES_API_BASE,\n  APPROVAL_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  fetchOrderDetailSequence,\n  fetchOrderProvisionItems,\n  OrderDetailPayload,\n  OrderProvisionPayload\n} from './new-order-helper';\nimport {\n  ApiCollectionResponse,\n  ApiMetadata,\n  EnhancedOrder,\n  Full\n} from '../../types/common-types';\nimport {\n  ServicePlan,\n  Order,\n  OrderItem,\n  PortfolioItem,\n  ApprovalRequest,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\nimport { AxiosPromise } from 'axios';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\nimport { Request, Action } from '@redhat-cloud-services/approval-client';\n\nconst orderApi = getOrderApi();\nconst orderItemApi = getOrderItemApi();\nconst portfolioItemApi = getPortfolioItemApi();\nconst axiosInstance = getAxiosInstance();\nconst graphqlInstance = getGraphqlInstance();\n\nexport const getServicePlans = (\n  portfolioItemId: string\n): Promise<ApiCollectionResponse<ServicePlan>> =>\n  (portfolioItemApi.listServicePlans(portfolioItemId) as unknown) as Promise<\n    ApiCollectionResponse<ServicePlan>\n  >;\n\nexport const sendSubmitOrder = async ({\n  service_parameters: { providerControlParameters, ...service_parameters },\n  ...parameters\n}: AnyObject): Promise<EnhancedOrder> => {\n  const order: Order = ((await orderApi.createOrder()) as unknown) as Order;\n  let orderItem: Partial<OrderItem> = {};\n  orderItem.count = 1;\n  orderItem = {\n    ...orderItem,\n    ...parameters,\n    service_parameters,\n    provider_control_parameters: providerControlParameters || {}\n  };\n  const orderItemResponse = await orderApi.addToOrder(\n    order.id as string,\n    orderItem as OrderItem\n  );\n  return orderApi.submitOrder(order.id as string).then((order) => ({\n    ...order,\n    orderItem: (orderItemResponse as unknown) as OrderItem\n  }));\n};\n\nexport const cancelOrder = (orderId: string): AxiosPromise<Order> =>\n  orderApi.cancelOrder(orderId);\n\nconst getOrderItems = (\n  orderIds: string[]\n): Promise<ApiCollectionResponse<OrderItem>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/order_items?limit=${orderIds.length * 3 ||\n      defaultSettings.limit}${orderIds.length ? '&' : ''}${orderIds\n      .map((orderId) => `filter[order_id][]=${orderId}`)\n      .join('&')}`\n  );\n\nconst getOrderPortfolioItems = (\n  itemIds: string[]\n): Promise<ApiCollectionResponse<PortfolioItem>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolio_items?${itemIds\n      .map((itemId) => `filter[id][]=${itemId}`)\n      .join('&')}`\n  );\n\nexport const getOrders = (\n  filter = '',\n  pagination = defaultSettings\n): Promise<{\n  data: (Order & { orderItems: OrderItem[] })[];\n  portfolioItems: ApiCollectionResponse<PortfolioItem>;\n  meta: ApiMetadata;\n}> =>\n  axiosInstance\n    .get(\n      `${CATALOG_API_BASE}/orders?${filter}&limit=${pagination.limit}&offset=${pagination.offset}`\n    ) // eslint-disable-line max-len\n    .then((orders: ApiCollectionResponse<Full<Order>>) =>\n      getOrderItems(orders.data.map(({ id }) => id)).then((orderItems) =>\n        getOrderPortfolioItems(\n          orderItems.data.map(({ portfolio_item_id }) => portfolio_item_id)\n        ).then((portfolioItems) => {\n          return {\n            portfolioItems,\n            ...orders,\n            data: orders.data.map((order) => ({\n              ...order,\n              orderItems: orderItems.data.filter(\n                ({ order_id }) => order_id === order.id\n              )\n            }))\n          };\n        })\n      )\n    );\n\nexport const getOrderApprovalRequests = (\n  orderItemId: string\n): Promise<ApiCollectionResponse<Request>> =>\n  (orderItemApi.listApprovalRequests(orderItemId) as unknown) as Promise<\n    ApiCollectionResponse<Request>\n  >;\n\nexport interface GetOrderDetailParams {\n  order: string;\n  'order-item'?: string;\n  'portfolio-item'?: string;\n  platform?: string;\n  portfolio?: string;\n}\nexport const getOrderDetail = (\n  params: GetOrderDetailParams\n): Promise<OrderDetailPayload> => {\n  if (Object.values(params).some((value) => !value)) {\n    /**\n     * Try to fetch data sequentially if any of the parameters is unknown\n     */\n    return fetchOrderDetailSequence(params.order);\n  }\n\n  const detailPromises = [\n    (axiosInstance\n      .get(`${CATALOG_API_BASE}/orders/${params.order}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return catalogHistory.replace({\n            pathname: '/404',\n            state: { from: catalogHistory.location }\n          });\n        }\n\n        throw error;\n      }) as unknown) as Promise<Order>,\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/order_items/${params['order-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Order item',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/portfolio_items/${params['portfolio-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Product',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${SOURCES_API_BASE}/sources/${params.platform}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Platform',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/orders/${params.order}/progress_messages`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {};\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/portfolios/${params.portfolio}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Portfolio',\n            notFound: true\n          };\n        }\n\n        throw error;\n      })\n  ];\n\n  return (Promise.all(detailPromises) as unknown) as Promise<\n    OrderDetailPayload\n  >;\n};\n\nconst APPROVAL_REQUESTER_PERSONA = 'approval/requester';\nexport interface RequestTranscript extends Full<Request> {\n  actions: Action[];\n}\nconst requestTranscriptQuery = (parent_id: string) => `query {\n  requests(id: \"${parent_id}\") {\n    id\n    number_of_children\n    decision\n    group_name\n    created_at\n    state\n    actions {\n      id\n      created_at\n    }\n    requests {\n      id\n      number_of_children\n      decision\n      group_name\n      state\n      parent_id\n      created_at\n      actions {\n        id\n        created_at\n      }\n    }\n  }\n}`;\nconst fetchRequestTranscript = (\n  requestId: string\n): Promise<RequestTranscript[]> =>\n  graphqlInstance\n    .post(\n      `${APPROVAL_API_BASE}/graphql`,\n      { query: requestTranscriptQuery(requestId) },\n      { 'x-rh-persona': APPROVAL_REQUESTER_PERSONA }\n    )\n    .then(({ data: { requests } }) => {\n      return requests &&\n        requests.length > 0 &&\n        requests[0].number_of_children > 0\n        ? requests[0].requests\n        : requests;\n    });\n\nexport const getApprovalRequests = (\n  orderItemId: string\n): Promise<{\n  data: { group_name: string; decision: string; updated?: string }[];\n}> =>\n  axiosInstance\n    .get(`${CATALOG_API_BASE}/order_items/${orderItemId}/approval_requests`)\n    .then(({ data }: { data: Full<ApprovalRequest>[] }) => {\n      const promises = data.map(({ approval_request_ref }) =>\n        fetchRequestTranscript(approval_request_ref)\n      );\n      return Promise.all(promises).then((requests) => {\n        const data = requests?.[0]?.map(({ actions, ...request }) => ({\n          ...request,\n          updated:\n            actions?.length > 0 ? actions.pop()?.created_at : request.created_at\n        }));\n        return { data: data || [] };\n      });\n    });\n\nexport const getOrderProvisionItems = async (\n  orderId: string\n): Promise<OrderProvisionPayload> => {\n  const items = await fetchOrderProvisionItems(orderId);\n  return items;\n};\n\nexport const getProgressMessages = (\n  orderItemId: string\n): Promise<{\n  data: ProgressMessage[];\n}> =>\n  axiosInstance\n    .get(`${CATALOG_API_BASE}/order_items/${orderItemId}/progress_messages`)\n    .then(({ data }: { data: Full<ProgressMessage>[] }) => {\n      return { data: data || [] };\n    });\n","import React, { ComponentType, ReactElement, ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ORDER_ROUTE } from '../../constants/routes';\nimport ordersMessages from '../../messages/orders.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport { Dispatch } from 'redux';\n\nexport interface OrderNotificationProps {\n  id: string;\n  dispatch: Dispatch;\n  portfolioItemId: string;\n  portfolioId: string;\n  platformId: string;\n  orderItemId: string;\n}\n\nconst OrderNotification: ComponentType<OrderNotificationProps> = ({\n  id,\n  dispatch,\n  portfolioItemId,\n  portfolioId,\n  platformId,\n  orderItemId\n}) => {\n  const formatMessage = useFormatMessage();\n  return formatMessage(ordersMessages.orderSuccess, {\n    id,\n    // eslint-disable-next-line react/display-name\n    link: (chunks: ReactNode | ReactNode[]) => (\n      <Link\n        onClick={() => dispatch(clearNotifications())}\n        to={{\n          pathname: ORDER_ROUTE,\n          search: `?order=${id}&order-item=${orderItemId}&portfolio-item=${portfolioItemId}&platform=${platformId}&portfolio=${portfolioId}`\n        }}\n      >\n        {chunks}\n      </Link>\n    )\n  }) as ReactElement;\n};\n\nexport default OrderNotification;\n","import React from 'react';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport * as ActionTypes from '../action-types';\nimport * as OrderHelper from '../../helpers/order/order-helper';\nimport OrderNotification from '../../presentational-components/order/order-notification';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport {\n  ApprovalRequestStateEnum,\n  Order,\n  OrderItem,\n  OrderStateEnum,\n  Portfolio,\n  PortfolioItem,\n  ProgressMessage,\n  ServicePlan\n} from '@redhat-cloud-services/catalog-client';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\nimport { Dispatch } from 'redux';\nimport {\n  Full,\n  StringObject,\n  ReduxAction,\n  ApiCollectionResponse\n} from '../../types/common-types';\nimport { AsyncMiddlewareAction, GetReduxState } from '../../types/redux';\nimport { Source } from '@redhat-cloud-services/sources-client';\nimport {\n  ObjectNotFound,\n  ProgressMessageItem\n} from '../../helpers/order/new-order-helper';\n\nexport const fetchServicePlans = (\n  portfolioItemId: string\n): AsyncMiddlewareAction<ApiCollectionResponse<ServicePlan>> => ({\n  type: ActionTypes.FETCH_SERVICE_PLANS,\n  payload: OrderHelper.getServicePlans(portfolioItemId)\n});\n\nexport const setSelectedPlan = (\n  data: ServicePlan\n): ReduxAction<ServicePlan> => ({\n  type: ActionTypes.SET_SELECTED_PLAN,\n  payload: data\n});\n\nexport const sendSubmitOrder = (\n  apiProps: AnyObject,\n  portfolioItem: Full<PortfolioItem>\n) => (dispatch: Dispatch): AsyncMiddlewareAction =>\n  dispatch({\n    type: ActionTypes.SUBMIT_SERVICE_ORDER,\n    payload: OrderHelper.sendSubmitOrder(apiProps).then(({ id, orderItem }) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been accepted successfully',\n          description: (\n            <OrderNotification\n              id={id!}\n              dispatch={dispatch}\n              portfolioItemId={portfolioItem.id}\n              portfolioId={portfolioItem.portfolio_id}\n              platformId={portfolioItem.service_offering_source_ref}\n              orderItemId={orderItem.id!}\n            />\n          ),\n          dismissable: true\n        })\n      )\n    )\n  });\n\nexport const cancelOrder = (orderId: string) => (\n  dispatch: Dispatch,\n  getState: GetReduxState\n): Promise<void | { type: string }> => {\n  dispatch({ type: `${ActionTypes.CANCEL_ORDER}_PENDING` });\n  const {\n    orderReducer: { orderDetail }\n  } = getState();\n  return OrderHelper.cancelOrder(orderId)\n    .then(() => {\n      orderDetail.order.state = OrderStateEnum.Canceled;\n      if (\n        orderDetail.approvalRequest &&\n        orderDetail.approvalRequest.data.length > 0\n      ) {\n        orderDetail.approvalRequest.data[0].state = 'canceled' as ApprovalRequestStateEnum;\n      }\n\n      dispatch({\n        type: ActionTypes.SET_ORDER_DETAIL,\n        payload: { ...orderDetail }\n      });\n      return orderDetail;\n    })\n    .then((orderDetail) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been canceled successfully',\n          description: `Order ${`Order #${orderDetail.order.id}`} was canceled.`,\n          dismissable: true\n        })\n      )\n    )\n    .then(() => dispatch({ type: `${ActionTypes.CANCEL_ORDER}_FULFILLED` }))\n    .catch((error) => {\n      dispatch({\n        type: `${ActionTypes.CANCEL_ORDER}_REJECTED`,\n        payload: error\n      });\n    });\n};\n\nexport const fetchOrders = (\n  filters: StringObject,\n  pagination = defaultSettings\n) => (dispatch: Dispatch): Promise<ReduxAction> => {\n  let queryFilter = Object.entries(filters)\n    .filter(([, value]) => value && value.length > 0)\n    .map(([key, value]) =>\n      Array.isArray(value)\n        ? value.map((value) => `filter[${key}][]=${value}`).join('&')\n        : `filter[${key}][contains_i]=${value}`\n    )\n    .join('&');\n  if (pagination.sortBy) {\n    queryFilter = `${queryFilter}&sort_by=${\n      pagination.sortBy\n    }:${pagination.sortDirection || 'desc'}`;\n  }\n\n  dispatch({ type: `${ActionTypes.FETCH_ORDERS}_PENDING` });\n  return OrderHelper.getOrders(queryFilter, pagination)\n    .then(({ portfolioItems, ...orders }) => {\n      dispatch({\n        type: ActionTypes.SET_PORTFOLIO_ITEMS,\n        payload: portfolioItems\n      });\n      return dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_FULFILLED`,\n        meta: {\n          ...pagination,\n          filter: queryFilter,\n          filters,\n          storeState: true,\n          stateKey: 'orders'\n        },\n        payload: orders\n      });\n    })\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchOrderDetails = (params: OrderHelper.GetOrderDetailParams) => (\n  dispatch: Dispatch\n): Promise<{\n  type: string;\n  payload: {\n    order: Order | ObjectNotFound;\n    orderItem: OrderItem | ObjectNotFound;\n    portfolioItem: PortfolioItem | ObjectNotFound;\n    platform: Source | ObjectNotFound;\n    progressMessages: ProgressMessage | ObjectNotFound;\n    portfolio: Portfolio | ObjectNotFound;\n  };\n}> => {\n  dispatch({ type: `${ActionTypes.SET_ORDER_DETAIL}_PENDING` });\n  return OrderHelper.getOrderDetail(params)\n    .then(\n      ([\n        order,\n        orderItem,\n        portfolioItem,\n        platform,\n        progressMessages,\n        portfolio\n      ]) =>\n        dispatch({\n          type: `${ActionTypes.SET_ORDER_DETAIL}_FULFILLED`,\n          payload: {\n            order,\n            orderItem,\n            portfolioItem,\n            platform,\n            progressMessages,\n            portfolio\n          }\n        })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_DETAIL}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchApprovalRequests = (orderItemId: string) => (\n  dispatch: Dispatch\n): Promise<\n  | {\n      data: {\n        group_name: string;\n        decision: string;\n        updated?: string | undefined;\n      }[];\n    }\n  | { type: string; payload: any } /** the action in catch branch */\n> => {\n  dispatch({ type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_PENDING` });\n  return OrderHelper.getApprovalRequests(orderItemId)\n    .then((data) => {\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_FULFILLED`,\n        payload: data\n      });\n      return data;\n    })\n    .catch((err) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_REJECTED`,\n        payload: err\n      })\n    );\n};\n\nexport const fetchOrderProvision = (orderId: string) => (\n  dispatch: Dispatch\n): Promise<{\n  type: string;\n  payload: {\n    orderItems: OrderItem[] | [];\n    progressMessageItems: ProgressMessageItem[] | [];\n  };\n}> => {\n  dispatch({ type: `${ActionTypes.SET_ORDER_PROVISION_ITEMS}_PENDING` });\n  return OrderHelper.getOrderProvisionItems(orderId)\n    .then(({ orderItems, progressMessageItems }) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_PROVISION_ITEMS}_FULFILLED`,\n        payload: {\n          orderItems,\n          progressMessageItems\n        }\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_PROVISION_ITEMS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n","import React, { ReactNode } from 'react';\nimport {\n  ExclamationCircleIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  ClockIcon,\n  PlusCircleIcon\n} from '@patternfly/react-icons';\n\nconst orderStatusMapper: {\n  Completed: { icon: ReactNode; color: 'green' };\n  Ordered: { icon: ReactNode; color: 'grey' };\n  Failed: { icon: ReactNode; color: 'red' };\n  Canceled: { icon: ReactNode; color: 'orange' };\n  Created: { icon: ReactNode; color: 'grey' };\n  'Approval Pending': { icon: ReactNode; color: 'blue' };\n  Approved: { icon: ReactNode; color: 'green' };\n  Denied: { icon: ReactNode; color: 'red' };\n  Undecided: { icon: ReactNode; color: 'blue' };\n  Unknown: { icon: ReactNode; color: 'grey' };\n} = {\n  Completed: { icon: <CheckCircleIcon />, color: 'green' },\n  'Approval Pending': {\n    icon: <ClockIcon />,\n    color: 'blue'\n  },\n  Ordered: { icon: <PlusCircleIcon />, color: 'grey' },\n  Failed: { icon: <ExclamationCircleIcon />, color: 'red' },\n  Canceled: { icon: <ExclamationTriangleIcon />, color: 'orange' },\n  Created: { icon: <PlusCircleIcon />, color: 'grey' },\n  Approved: { icon: <CheckCircleIcon />, color: 'green' },\n  Denied: { icon: <ExclamationCircleIcon />, color: 'red' },\n  Undecided: {\n    icon: <ClockIcon />,\n    color: 'blue'\n  },\n  Unknown: { icon: <ExclamationTriangleIcon />, color: 'grey' }\n};\n\nexport default orderStatusMapper;\n","import { toolbarComponentTypes } from '../toolbar-mapper';\nimport { ToolbarSchema } from '../toolbar-renderer';\n\nconst createOrdersToolbarSchema = (): ToolbarSchema => ({\n  fields: [\n    {\n      component: toolbarComponentTypes.TOP_TOOLBAR,\n      className: 'orders pf-u-p-lg',\n      key: 'orders-toolbar',\n      fields: [\n        {\n          component: toolbarComponentTypes.TOP_TOOLBAR_TITLE,\n          key: 'orders-toolbar-title',\n          title: 'Orders',\n          className: ''\n        }\n      ]\n    }\n  ]\n});\n\nexport default createOrdersToolbarSchema;\n","import React, { Fragment, ReactNode } from 'react';\nimport { Label, Text, TextVariants } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\n\nimport CardIcon from '../../presentational-components/shared/card-icon';\nimport { getOrderIcon } from '../../helpers/shared/orders';\nimport CatalogLink from '../common/catalog-link';\nimport { ORDER_ROUTE } from '../../constants/routes';\nimport statesMessages, {\n  getTranslatableState\n} from '../../messages/states.messages';\n\nimport { TableText } from '@patternfly/react-table';\nimport orderStatusMapper from './order-status-mapper';\nimport { OrderDetail } from '../../redux/reducers/order-reducer';\nimport { FormatMessage, StringObject } from '../../types/common-types';\n\nconst createOrderItem = (\n  item: OrderDetail,\n  orderPlatform: string | undefined,\n  orderPortfolio: string | undefined,\n  formatMessage: FormatMessage\n): { title: ReactNode }[] => {\n  const orderItem = (item.orderItems[0] && item.orderItems[0]) || {};\n  const searchParams: StringObject = {\n    order: item.id,\n    ...(orderItem.id ? { 'order-item': orderItem.id } : {}),\n    ...(orderItem.portfolio_item_id\n      ? { 'portfolio-item': orderItem.portfolio_item_id }\n      : {}),\n    ...(orderPlatform ? { platform: orderPlatform } : {}),\n    ...(orderPortfolio ? { portfolio: orderPortfolio } : {})\n  };\n  const translatableState = getTranslatableState(item.state);\n  return [\n    {\n      title: (\n        <TableText>\n          <CatalogLink pathname={ORDER_ROUTE} searchParams={searchParams}>\n            {item.id}\n          </CatalogLink>\n        </TableText>\n      )\n    },\n    {\n      title: (\n        <Fragment>\n          <CardIcon\n            height={60}\n            src={getOrderIcon(item)}\n            sourceId={orderPlatform}\n          />\n        </Fragment>\n      )\n    },\n    item.orderName,\n    item.owner,\n    {\n      title: (\n        <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n          <DateFormat date={item.created_at} variant=\"relative\" />\n        </Text>\n      )\n    },\n    {\n      title: (\n        <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n          <DateFormat\n            date={item.orderItems[0] && item.orderItems[0].updated_at}\n            variant=\"relative\"\n          />\n        </Text>\n      )\n    },\n    {\n      title: (\n        <TableText>\n          <Label\n            {...orderStatusMapper[item.state as keyof typeof orderStatusMapper]}\n            variant=\"outline\"\n          >\n            {formatMessage(statesMessages[translatableState])}\n          </Label>\n        </TableText>\n      )\n    }\n  ];\n};\n\nexport default createOrderItem;\n","import { CATALOG_API_BASE } from '../../utilities/constants';\nimport { PortfolioItem } from '@redhat-cloud-services/catalog-client';\nimport { Full } from '../../types/common-types';\nimport { OrderDetail } from '../../redux/reducers/order-reducer';\n\nexport const getOrderIcon = ({ orderItems }: OrderDetail): string | undefined =>\n  orderItems[0] &&\n  `${CATALOG_API_BASE}/portfolio_items/${orderItems[0].portfolio_item_id}/icon`;\n\nexport const getOrderPortfolioName = (\n  { orderItems, id }: OrderDetail,\n  portfolioItems: Full<PortfolioItem>[]\n): string => {\n  const portfolioItem =\n    orderItems[0] &&\n    portfolioItems.find(({ id }) => orderItems[0].portfolio_item_id === id);\n  return portfolioItem ? portfolioItem.name : `Order ${id}`;\n};\n\nexport const getOrderPlatformId = (\n  { orderItems }: OrderDetail,\n  portfolioItems: Full<PortfolioItem>[]\n): {\n  orderPlatform?: string;\n  orderPortfolio?: string;\n} => {\n  const portfolioItem =\n    orderItems[0] &&\n    portfolioItems.find(({ id }) => orderItems[0].portfolio_item_id === id);\n  return portfolioItem\n    ? {\n        orderPlatform: portfolioItem.service_offering_source_ref,\n        orderPortfolio: portfolioItem.portfolio_id\n      }\n    : {};\n};\n","import React, { useEffect, useReducer } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Grid,\n  GridItem,\n  Title,\n  Bullseye,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Flex,\n  EmptyStateSecondaryActions,\n  Button\n} from '@patternfly/react-core';\nimport { Section } from '@redhat-cloud-services/frontend-components/components/cjs/Section';\nimport {\n  Chip,\n  PrimaryToolbar\n} from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/components/cjs/EmptyTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/TableToolbar';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n  ISortBy,\n  OnSort,\n  ICell\n} from '@patternfly/react-table';\n\nimport { fetchOrders } from '../../redux/actions/order-actions';\nimport { fetchPlatforms } from '../../redux/actions/platform-actions';\nimport { ListLoader } from '../../presentational-components/shared/loader-placeholders';\nimport createOrderItem from './order-item';\nimport AsyncPagination from '../common/async-pagination';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport {\n  defaultSettings,\n  PaginationConfiguration\n} from '../../helpers/shared/pagination';\nimport useInitialUriHash from '../../routing/use-initial-uri-hash';\nimport statesMessages from '../../messages/states.messages';\nimport filteringMessages from '../../messages/filtering.messages';\nimport ordersMessages from '../../messages/orders.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport {\n  getOrderPlatformId,\n  getOrderPortfolioName\n} from '../../helpers/shared/orders';\nimport { CatalogRootState } from '../../types/redux';\nimport {\n  ApiCollectionResponse,\n  Full,\n  StringObject\n} from '../../types/common-types';\nimport { PortfolioItem } from '@redhat-cloud-services/catalog-client';\nimport { OrderDetail } from '../../redux/reducers/order-reducer';\n\nconst debouncedFilter = asyncFormValidator(\n  (filters, meta = defaultSettings, dispatch, filteringCallback) => {\n    filteringCallback(true);\n    dispatch(fetchOrders(filters, meta)).then(() => filteringCallback(false));\n  },\n  1000\n);\n\nconst initialState = {\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false,\n  filterType: 'state',\n  filters: {\n    state: [],\n    owner: ''\n  },\n  sortBy: {\n    index: 0,\n    direction: SortByDirection.desc\n  }\n};\n\nconst changeFilters = (\n  value: string,\n  type: string,\n  filters: StringObject\n): StringObject => ({\n  ...filters,\n  [type]: value\n});\n\ninterface OrdersListState {\n  isFetching?: boolean;\n  filters: StringObject;\n  filterType: string;\n  isFiltering?: boolean;\n  sortBy: Full<ISortBy>;\n}\nconst ordersListState = (\n  state: OrdersListState,\n  action: { type: string; payload: any }\n): OrdersListState => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return {\n        ...state,\n        filters: changeFilters(action.payload, state.filterType, state.filters)\n      };\n    case 'replaceFilterChip':\n      return { ...state, filters: action.payload };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    case 'setFilterType':\n      return { ...state, filterType: action.payload };\n    case 'setSortBy':\n      return { ...state, sortBy: action.payload, isFetching: true };\n  }\n\n  return state;\n};\n\nconst sortIndexMapper = {\n  0: 'id',\n  3: 'owner',\n  4: 'created_at',\n  6: 'state'\n};\n\nconst OrdersList: React.ComponentType = () => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const viewState = useInitialUriHash();\n  const [\n    { isFetching, isFiltering, filterType, filters, sortBy },\n    stateDispatch\n  ] = useReducer(ordersListState, {\n    ...initialState,\n    filters: viewState?.orders?.filters || { state: [], owner: '' },\n    sortBy: {\n      direction: viewState?.orders?.sortDirection || SortByDirection.desc,\n      index: viewState?.orders?.sortIndex || 0\n    }\n  });\n  const { data, meta } = useSelector<\n    CatalogRootState,\n    ApiCollectionResponse<OrderDetail>\n  >(({ orderReducer }) => orderReducer.orders);\n  const columns: ICell[] = [\n    { title: formatMessage(ordersMessages.orderID) },\n    formatMessage(labelMessages.product),\n    '', // need empty row column to correctly align product names after the icon column\n    {\n      title: formatMessage(ordersMessages.orderedByLabel)\n    },\n    { title: formatMessage(ordersMessages.orderDate) },\n    formatMessage(labelMessages.updated),\n    { title: formatMessage(labelMessages.status) }\n  ].map((column) =>\n    typeof column === 'object' &&\n    !isFetching &&\n    !isFiltering &&\n    data.length !== 0\n      ? { ...column, transforms: [sortable] }\n      : column\n  ) as ICell[];\n  const portfolioItems = useSelector<CatalogRootState, Full<PortfolioItem>[]>(\n    ({\n      portfolioReducer: {\n        portfolioItems: { data }\n      }\n    }) => data as Full<PortfolioItem>[]\n  );\n  const onSort: OnSort = (_e, index, direction) => {\n    stateDispatch({\n      type: 'setSortBy',\n      payload: { index, direction }\n    });\n    return ((dispatch(\n      fetchOrders(filters, {\n        ...meta,\n        sortBy: sortIndexMapper[index as keyof typeof sortIndexMapper],\n        sortDirection: direction,\n        sortIndex: index\n      })\n    ) as unknown) as Promise<void>).then(() =>\n      stateDispatch({ type: 'setFetching', payload: false })\n    );\n  };\n\n  const rows = data.map((item) => {\n    const { orderPlatform, orderPortfolio } = getOrderPlatformId(\n      item,\n      portfolioItems\n    );\n    const orderName = getOrderPortfolioName(item, portfolioItems);\n    return createOrderItem(\n      { ...item, orderName },\n      orderPlatform,\n      orderPortfolio,\n      formatMessage\n    );\n  });\n\n  useEffect(() => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    Promise.all([\n      dispatch(fetchOrders(filters, viewState?.orders)),\n      dispatch(fetchPlatforms())\n    ]).then(() => stateDispatch({ type: 'setFetching', payload: false }));\n  }, []);\n\n  const handlePagination = (\n    _apiProps: any,\n    pagination: PaginationConfiguration\n  ) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    return ((dispatch(\n      fetchOrders(filters, {\n        ...pagination,\n        sortBy: sortIndexMapper[sortBy.index as keyof typeof sortIndexMapper],\n        sortDirection: sortBy.direction as SortByDirection,\n        sortIndex: sortBy.index\n      })\n    ) as unknown) as Promise<void>)\n      .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n      .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  const handleFilterItems = (value = '') => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      { ...filters, [filterType]: value },\n      {\n        ...meta,\n        sortBy: sortIndexMapper[sortBy.index as keyof typeof sortIndexMapper],\n        sortDirection: sortBy.direction,\n        sortIndex: sortBy.index,\n        offset: 0\n      },\n      dispatch,\n      (isFiltering: boolean) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering })\n    );\n  };\n\n  const handleClearAll = () => {\n    stateDispatch({\n      type: 'replaceFilterChip',\n      payload: initialState.filters\n    });\n    return debouncedFilter(\n      initialState.filters,\n      {\n        ...meta,\n        sortBy: sortIndexMapper[sortBy.index as keyof typeof sortIndexMapper],\n        sortDirection: sortBy.direction,\n        sortIndex: sortBy.index\n      },\n      dispatch,\n      (isFiltering: boolean) =>\n        stateDispatch({\n          type: 'setFilteringFlag',\n          payload: isFiltering\n        })\n    );\n  };\n\n  return (\n    <Grid hasGutter>\n      <GridItem>\n        <Section type=\"content\">\n          {!meta.noData && (\n            <PrimaryToolbar\n              activeFiltersConfig={{\n                filters: Object.entries(filters)\n                  .filter(([, value]) => value && value.length > 0)\n                  .map<{ category: string; type: string; chips: Chip[] }>(\n                    ([key, value]) => ({\n                      category: key,\n                      type: key,\n                      chips: Array.isArray(value)\n                        ? value.map<Chip>((name) => ({ name }))\n                        : ([{ name: value }] as Chip[])\n                    })\n                  ),\n                onDelete: (_e, [chip], clearAll) => {\n                  if (clearAll) {\n                    return handleClearAll();\n                  }\n\n                  const newFilters = { ...filters };\n                  if (chip.type === 'state') {\n                    newFilters[chip.type] = (((newFilters[\n                      chip.type\n                    ] as unknown) as string[]).filter(\n                      (value) => value !== chip?.chips?.[0].name\n                    ) as unknown) as string;\n                  } else {\n                    newFilters[chip.type!] = '';\n                  }\n\n                  stateDispatch({\n                    type: 'replaceFilterChip',\n                    payload: newFilters\n                  });\n                  debouncedFilter(\n                    newFilters,\n                    meta,\n                    dispatch,\n                    (isFiltering: boolean) =>\n                      stateDispatch({\n                        type: 'setFilteringFlag',\n                        payload: isFiltering\n                      })\n                  );\n                }\n              }}\n              filterConfig={{\n                onChange: (_e, value) =>\n                  stateDispatch({ type: 'setFilterType', payload: value }),\n                value: filterType,\n                items: [\n                  {\n                    filterValues: {\n                      items: [\n                        {\n                          value: 'Approval Pending',\n                          label: formatMessage(statesMessages.approvalPending)\n                        },\n                        {\n                          value: 'Canceled',\n                          label: formatMessage(statesMessages.canceled)\n                        },\n                        {\n                          value: 'Completed',\n                          label: formatMessage(statesMessages.completed)\n                        },\n                        {\n                          value: 'Created',\n                          label: formatMessage(labelMessages.created)\n                        },\n                        {\n                          value: 'Failed',\n                          label: formatMessage(statesMessages.failed)\n                        },\n                        {\n                          value: 'Ordered',\n                          label: formatMessage(statesMessages.ordered)\n                        }\n                      ],\n                      value: filters.state,\n                      onChange: (_e, value) => handleFilterItems(value)\n                    },\n                    label: 'State',\n                    value: 'state',\n                    type: 'checkbox'\n                  },\n                  {\n                    filterValues: {\n                      value: filters.owner,\n                      onChange: (_e, value) => handleFilterItems(value)\n                    },\n                    label: 'Owner',\n                    value: 'owner'\n                  }\n                ]\n              }}\n              pagination={\n                <AsyncPagination\n                  isDisabled={isFetching || isFiltering}\n                  apiRequest={handlePagination}\n                  meta={meta}\n                  isCompact\n                />\n              }\n            />\n          )}\n          <Table\n            aria-label=\"orders\"\n            {...(!(isFetching || isFiltering) && data.length === 0\n              ? {}\n              : { sortBy, onSort })}\n            cells={columns}\n            rows={isFetching || isFiltering ? [] : rows}\n            className=\"orders-table\"\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {!(isFetching || isFiltering) && data.length === 0 && (\n            <EmptyTable>\n              <Bullseye>\n                <EmptyState>\n                  <Bullseye>\n                    <EmptyStateIcon icon={SearchIcon} />\n                  </Bullseye>\n                  <Title headingLevel=\"h1\" size=\"lg\">\n                    {meta.noData\n                      ? formatMessage(ordersMessages.noOrdersTitle)\n                      : formatMessage(filteringMessages.noResults)}\n                  </Title>\n                  <EmptyStateBody>\n                    {meta.noData\n                      ? formatMessage(ordersMessages.noOrdersDescription)\n                      : formatMessage(filteringMessages.noResultsDescription)}\n                  </EmptyStateBody>\n                  {!meta.noData && (\n                    <EmptyStateSecondaryActions>\n                      <Button\n                        ouiaId={'clear-filter'}\n                        variant=\"link\"\n                        onClick={handleClearAll}\n                      >\n                        {formatMessage(filteringMessages.clearFilters)}\n                      </Button>\n                    </EmptyStateSecondaryActions>\n                  )}\n                </EmptyState>\n              </Bullseye>\n            </EmptyTable>\n          )}\n          {(isFetching || isFiltering) && <ListLoader />}\n          <TableToolbar className=\"pf-u-mr-0\">\n            <div className=\"bottom-pagination-container\">\n              <Flex justifyContent={{ default: 'justifyContentFlexEnd' }}>\n                {meta && meta.count! > 0 && (\n                  <AsyncPagination\n                    className=\"pf-u-mt-0\"\n                    isDisabled={isFetching || isFiltering}\n                    apiRequest={handlePagination}\n                    meta={meta}\n                  />\n                )}\n              </Flex>\n            </div>\n          </TableToolbar>\n        </Section>\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default OrdersList;\n","import React, { useEffect } from 'react';\nimport { Stack } from '@patternfly/react-core';\n\nimport ToolbarRenderer from '../../toolbar/toolbar-renderer';\nimport createOrdersToolbarSchema from '../../toolbar/schemas/orders-toolbar.schema';\nimport OrdersList from './orders-list';\n\nconst Orders: React.ComponentType = () => {\n  useEffect(() => {\n    window.insights.chrome.appNavClick({ id: 'orders', secondaryNav: true });\n  }, []);\n\n  return (\n    <Stack>\n      <ToolbarRenderer schema={createOrdersToolbarSchema()} />\n      <OrdersList />\n    </Stack>\n  );\n};\n\nexport default Orders;\n"],"sourceRoot":""}