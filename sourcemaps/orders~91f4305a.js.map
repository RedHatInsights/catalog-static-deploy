{"version":3,"sources":["webpack:///./src/smart-components/common/async-pagination.tsx","webpack:///./src/messages/filtering.messages.ts","webpack:///./src/messages/orders.messages.ts","webpack:///./src/messages/states.messages.ts","webpack:///./src/helpers/order/new-order-helper.ts","webpack:///./src/helpers/order/order-helper.ts","webpack:///./src/presentational-components/order/order-notification.tsx","webpack:///./src/redux/actions/order-actions.tsx","webpack:///./src/smart-components/order/order-status-mapper.tsx","webpack:///./src/toolbar/schemas/orders-toolbar.schema.ts","webpack:///./src/smart-components/order/order-item.tsx","webpack:///./src/helpers/shared/orders.ts","webpack:///./src/smart-components/order/orders-list.tsx","webpack:///./src/smart-components/order/orders.tsx"],"names":["meta","limit","count","offset","apiProps","apiRequest","className","isCompact","props","perPage","itemCount","onPerPageSelect","_event","page","onSetPage","number","debounce","options","request","dropDirection","filteringMessages","noItems","id","defaultMessage","filterByProduct","noResults","noResultsDescription","clearFilters","noProducts","noRecords","filterByTitle","noResultsFound","noResult","unknown","ordersMessages","orderedBy","orderedByLabel","lastUpdated","compositeTitle","detailTitle","orderSuccess","noOrdersTitle","noOrdersDescription","noApprovalRequests","creatingApprovalRequest","approvalTitle","approvalDetail","approvalCreated","approvalReason","approvalCompleted","orderDetails","menuApproval","menuProvision","menuLifecycle","menuSteps","objectsNotFound","orderID","orderParameters","orderItemParameters","defaultOrderItemType","orderProgressMessages","lifecycleLink","cancelOrder","reOrder","keepOrder","cancelDescription","backToOrders","orderDate","approvalParameters","activity","artifacts","noOrderProvision","fetchingOrderProvision","statesMessages","title","ordered","approvalPending","canceled","completed","failed","undecided","approved","denied","error","pending","skipped","started","notified","getTranslatableState","state","replace","char","toLowerCase","created","axiosInstance","fetchOrderProvisionItems","orderId","get","items","orderItems","data","status","pathname","from","location","progressMessageItems","promises","map","orderItem","then","item","push","orderItemId","progressMessages","Promise","all","orderApi","portfolioItemApi","graphqlInstance","getServicePlans","portfolioItemId","listServicePlans","getOrders","filter","pagination","orders","orderIds","length","join","itemIds","itemId","portfolioItems","order","getOrderDetail","params","Object","values","some","value","object","notFound","portfolioItem","portfolio_item_id","parallerRequests","service_offering_source_ref","catch","portfolio_id","platform","portfolio","detailPromises","getApprovalRequests","requestId","parent_id","approval_request_ref","post","query","requests","number_of_children","actions","updated","pop","created_at","dispatch","portfolioId","platformId","formatMessage","link","chunks","onClick","to","search","fetchServicePlans","type","payload","service_parameters","providerControlParameters","parameters","createOrder","provider_control_parameters","addToOrder","orderItemResponse","submitOrder","variant","description","dismissable","getState","orderDetail","Canceled","approvalRequest","fetchOrders","filters","queryFilter","entries","key","Array","isArray","sortBy","sortDirection","storeState","stateKey","fetchOrderDetails","fetchApprovalRequests","err","fetchOrderProvision","orderStatusMapper","Completed","icon","color","Ordered","Failed","Created","Approved","Denied","Error","Undecided","Unknown","fields","component","TOP_TOOLBAR","TOP_TOOLBAR_TITLE","orderPlatform","orderPortfolio","searchParams","translatableState","TableText","height","src","sourceId","orderName","owner","Text","small","DateFormat","date","updated_at","Label","debouncedFilter","filteringCallback","initialState","isOpen","isFetching","isFiltering","filterType","index","direction","desc","ordersListState","action","sortIndexMapper","0","3","4","6","viewState","sortIndex","stateDispatch","columns","product","column","transforms","sortable","rows","find","getOrderPlatformId","name","getOrderPortfolioName","handlePagination","_apiProps","handleFilterItems","handleClearAll","Grid","hasGutter","GridItem","Section","noData","PrimaryToolbar","activeFiltersConfig","category","chips","onDelete","_e","clearAll","chip","newFilters","filterConfig","onChange","filterValues","label","isDisabled","Table","onSort","cells","EmptyTable","Bullseye","EmptyState","EmptyStateIcon","Title","headingLevel","size","EmptyStateBody","EmptyStateSecondaryActions","Button","ouiaId","TableToolbar","Flex","justifyContent","default","window","insights","chrome","appNavClick","secondaryNav","Stack","schema"],"mappings":"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","file":"js/orders~91f4305a.9810a228672edcde2ce0.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\nimport debouncePromise from 'awesome-debounce-promise';\n\nimport { OnPerPageSelect, OnSetPage, Pagination } from '@patternfly/react-core';\n\nimport {\n  getCurrentPage,\n  getNewPage,\n  PaginationConfiguration\n} from '../../helpers/shared/pagination';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\n\nexport interface AsyncPaginationProps<T = any> extends AnyObject {\n  meta: PaginationConfiguration;\n  apiRequest: (...args: any[]) => Promise<T>;\n  apiProps?: any;\n  className?: string;\n  isCompact?: boolean;\n}\nconst AsyncPagination: React.ComponentType<AsyncPaginationProps> = ({\n  meta: { limit = 50, count = 0, offset = 0 },\n  apiProps,\n  apiRequest,\n  className = '',\n  isCompact = false,\n  ...props\n}) => {\n  const handleOnPerPageSelect: OnPerPageSelect = (_event, limit) =>\n    apiRequest(apiProps, {\n      offset,\n      limit\n    });\n\n  const handleSetPage: OnSetPage = (_event, number, debounce) => {\n    const options = {\n      offset: getNewPage(number, limit),\n      limit\n    };\n\n    const request = () => apiRequest(apiProps, options);\n    if (debounce) {\n      return debouncePromise(request, 250)();\n    }\n\n    return request();\n  };\n\n  return (\n    <div className={className}>\n      <Pagination\n        perPage={limit || 50}\n        itemCount={count || 0}\n        onPerPageSelect={handleOnPerPageSelect}\n        page={getCurrentPage(limit, offset)}\n        onSetPage={handleSetPage}\n        dropDirection=\"down\"\n        isCompact={isCompact}\n        {...props}\n      />\n    </div>\n  );\n};\n\nexport default AsyncPagination;\n","import { defineMessages } from 'react-intl';\n\nconst filteringMessages = defineMessages({\n  noItems: {\n    id: 'common.filtering.noItems',\n    defaultMessage: 'No items found'\n  },\n  filterByProduct: {\n    id: 'common.filtering.filterByProduct',\n    defaultMessage: 'Filter by product'\n  },\n  noResults: {\n    id: 'common.filtering.noResults',\n    defaultMessage: 'No results found'\n  },\n  noResultsDescription: {\n    id: 'common.filtering.noResultsDescription',\n    defaultMessage:\n      'No results match the filter criteria. Remove all filters or clear all filters to show results.'\n  },\n  clearFilters: {\n    id: 'common.filtering.clear-filters',\n    defaultMessage: 'Clear all filters'\n  },\n  noProducts: {\n    id: 'common.filtering.no-products',\n    defaultMessage: 'No products yet'\n  },\n  noRecords: {\n    id: 'commonMessages.noRecords',\n    defaultMessage: 'No records'\n  },\n  filterByTitle: {\n    id: 'tableToolbar.filterByTitle',\n    defaultMessage: 'Filter by {title}'\n  },\n  noResultsFound: {\n    id: 'tableToolbar.noResultsFound',\n    defaultMessage: 'No results found'\n  },\n  noResult: {\n    id: 'tableToolbar.noResult',\n    defaultMessage: 'No {results}'\n  },\n  unknown: {\n    id: 'commonMessages.unknown',\n    defaultMessage: 'Unknown'\n  }\n});\n\nexport default filteringMessages;\n","import { defineMessages } from 'react-intl';\n\nconst ordersMessages = defineMessages({\n  orderedBy: {\n    id: 'orders.common.orderedBy',\n    defaultMessage: 'Ordered by {owner}'\n  },\n  orderedByLabel: {\n    id: 'orders.approval.orderedBy',\n    defaultMessage: 'Ordered by'\n  },\n  lastUpdated: {\n    id: 'orders.common.lastUpdated',\n    defaultMessage: 'Last updated'\n  },\n  compositeTitle: {\n    id: 'orders.common.compositeTitle',\n    defaultMessage: '{name} - Order # {id}'\n  },\n  detailTitle: {\n    id: 'orders.detail.title',\n    defaultMessage: 'Order ID {id}'\n  },\n  orderSuccess: {\n    id: 'orders.notification.success',\n    defaultMessage:\n      'You can track the progress of Order # {id} in your <link>Orders</link> page.'\n  },\n  noOrdersTitle: {\n    id: 'orders.list.empty.title',\n    defaultMessage: 'No orders'\n  },\n  noOrdersDescription: {\n    id: 'orders.list.empty.description',\n    defaultMessage: 'No orders have been created.'\n  },\n  noApprovalRequests: {\n    id: 'orders.approval.no-requests',\n    defaultMessage:\n      'We were unable to find any approval requests for this order.'\n  },\n  creatingApprovalRequest: {\n    id: 'orders.approval.creating',\n    defaultMessage: 'Creating approval request'\n  },\n  approvalTitle: {\n    id: 'orders.approval.title',\n    defaultMessage: 'Summary'\n  },\n  approvalDetail: {\n    id: 'orders.approval.view-detail',\n    // eslint-disable-next-line quotes\n    defaultMessage: \"View this order's approval request details\"\n  },\n  approvalCreated: {\n    id: 'orders.approval.details.created',\n    defaultMessage: 'Request created'\n  },\n  approvalReason: {\n    id: 'orders.approval.details.reason',\n    defaultMessage: 'Approval reason'\n  },\n  approvalCompleted: {\n    id: 'orders.approval.details.completed',\n    defaultMessage: 'Completed at'\n  },\n  orderDetails: {\n    id: 'orders.common.details',\n    defaultMessage: 'Order details'\n  },\n  menuApproval: {\n    id: 'orders.menu.approval',\n    defaultMessage: 'Approval'\n  },\n  menuProvision: {\n    id: 'orders.menu.provision',\n    defaultMessage: 'Provision'\n  },\n  menuLifecycle: {\n    id: 'orders.menu.lifecycle',\n    defaultMessage: 'Lifecycle'\n  },\n  menuSteps: {\n    id: 'orders.menu.steps',\n    defaultMessage: 'Order steps'\n  },\n  objectsNotFound: {\n    id: 'order.detail.not-found',\n    defaultMessage:\n      'The {objects} for this order {count, plural, one {is} other {are}} not available'\n  },\n  orderID: {\n    id: 'orders.order.detail.ID',\n    defaultMessage: 'Order ID'\n  },\n  orderParameters: {\n    id: 'orders.order.detail.parameters',\n    defaultMessage: 'Order parameters'\n  },\n  orderItemParameters: {\n    id: 'orders.order.provision.parameters',\n    defaultMessage: 'Parameters'\n  },\n  defaultOrderItemType: {\n    id: 'orders.order.default_type',\n    defaultMessage: 'Product'\n  },\n  orderProgressMessages: {\n    id: 'orders.order.detail.messages',\n    defaultMessage: 'Progress messages'\n  },\n  lifecycleLink: {\n    id: 'orders.order.lifecycle.link',\n    defaultMessage: 'Manage product'\n  },\n  cancelOrder: {\n    id: 'orders.actions.cancel',\n    defaultMessage: 'Cancel order'\n  },\n  reOrder: {\n    id: 'orders.actions.reorder',\n    defaultMessage: 'Reorder'\n  },\n  keepOrder: {\n    id: 'orders.actions.keep',\n    defaultMessage: 'Keep order'\n  },\n  cancelDescription: {\n    id: 'orders.cancel.description',\n    defaultMessage: 'Are you sure you want to cancel {name}?'\n  },\n  backToOrders: {\n    id: 'orders.toolbar.backLink',\n    defaultMessage: 'Back to orders'\n  },\n  orderDate: {\n    id: 'orders.approval.order-date',\n    defaultMessage: 'Order date'\n  },\n  approvalParameters: {\n    id: 'orders.approval.parameters',\n    defaultMessage: 'Parameters'\n  },\n  activity: {\n    id: 'orders.approval.activity',\n    defaultMessage: 'Activity'\n  },\n  artifacts: {\n    id: 'orders.artifacts',\n    defaultMessage: 'Order artifacts'\n  },\n  noOrderProvision: {\n    id: 'orders.provision.no-items',\n    defaultMessage: 'We were unable to find provisioning data for this order.'\n  },\n  fetchingOrderProvision: {\n    id: 'orders.provision.fetching-provision',\n    defaultMessage: 'Retrieving order provisioning data'\n  }\n});\n\nexport default ordersMessages;\n","import labelMessages from './labels.messages';\n\nimport { defineMessages } from 'react-intl';\n\nconst statesMessages = defineMessages({\n  title: {\n    id: 'common.states.title',\n    defaultMessage: 'State'\n  },\n  ordered: {\n    id: 'common.states.ordered',\n    defaultMessage: 'Ordered'\n  },\n  approvalPending: {\n    id: 'common.states.approval-pending',\n    defaultMessage: 'Approval Pending'\n  },\n  canceled: {\n    id: 'common.states.canceled',\n    defaultMessage: 'Canceled'\n  },\n  completed: {\n    id: 'common.states.completed',\n    defaultMessage: 'Completed'\n  },\n  failed: {\n    id: 'common.states.failed',\n    defaultMessage: 'Failed'\n  },\n  undecided: {\n    id: 'common.states.undecided',\n    defaultMessage: 'Undecided'\n  },\n  approved: {\n    id: 'common.states.approved',\n    defaultMessage: 'Approved'\n  },\n  denied: {\n    id: 'common.states.denied',\n    defaultMessage: 'Denied'\n  },\n  error: {\n    id: 'common.states.error',\n    defaultMessage: 'Error'\n  },\n  pending: {\n    id: 'common.states.pending',\n    defaultMessage: 'Pending'\n  },\n  skipped: {\n    id: 'common.states.skipped',\n    defaultMessage: 'Skipped'\n  },\n  started: {\n    id: 'common.states.started',\n    defaultMessage: 'Started'\n  },\n  notified: {\n    id: 'common.states.notified',\n    defaultMessage: 'Notified'\n  },\n  unknown: {\n    id: 'common.states.unknown',\n    defaultMessage: 'Unknown'\n  }\n});\n\nexport const getTranslatableState = (\n  state: string\n): keyof typeof statesMessages =>\n  (state\n    ? state.replace(/\\s/g, '').replace(/^./, (char) => char.toLowerCase())\n    : 'unknown') as keyof typeof statesMessages;\n\n/**\n * We must include the created state so the dynamic data from DB can look for these messages in one place\n * The created message is shared among other components and is just a state message\n */\nexport default { ...statesMessages, created: labelMessages.created };\n","// TODO migrate whole order-helper.js to TS\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  Order,\n  OrderItem,\n  PortfolioItem,\n  Portfolio,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\nimport { Source } from '@redhat-cloud-services/sources-client';\nimport { getAxiosInstance } from '../shared/user-login';\nimport {\n  CATALOG_API_BASE,\n  CATALOG_INVENTORY_API_BASE\n} from '../../utilities/constants';\nconst axiosInstance = getAxiosInstance();\n\nexport interface ObjectNotFound {\n  object: 'Order item' | 'Product' | 'Portfolio' | 'Messages' | 'Platform';\n  notFound: boolean;\n}\n\nexport type OrderDetailPayload = [\n  Order,\n  OrderItem | ObjectNotFound,\n  PortfolioItem | ObjectNotFound,\n  Source | ObjectNotFound,\n  ProgressMessage | ObjectNotFound,\n  Portfolio | ObjectNotFound\n];\n\nexport type ProgressMessageItem = {\n  orderItemId: string;\n  progressMessages: ProgressMessage[];\n};\n\nexport interface OrderProvisionPayload {\n  orderItems: OrderItem[] | [];\n  progressMessageItems: ProgressMessageItem[] | [];\n}\n\nexport const fetchOrderDetailSequence = async (\n  orderId: string\n): Promise<OrderDetailPayload> => {\n  let order: Order;\n  try {\n    order = await axiosInstance.get(`${CATALOG_API_BASE}/orders/${orderId}`);\n  } catch (error) {\n    order = {};\n    if (error.status === 404 || error.status === 400) {\n      catalogHistory.replace({\n        pathname: '/404',\n        state: { from: catalogHistory.location }\n      });\n    } else {\n      throw error;\n    }\n  }\n\n  let orderItem: OrderItem | ObjectNotFound = {\n    object: 'Order item',\n    notFound: true\n  };\n  try {\n    const orderItems = await axiosInstance.get(\n      `${CATALOG_API_BASE}/order_items?order_id=${order.id}`\n    );\n    orderItem = orderItems.data[0];\n  } catch (_error) {\n    // no handler\n  }\n\n  let portfolioItem: PortfolioItem | ObjectNotFound = {\n    object: 'Product',\n    notFound: true\n  };\n\n  try {\n    portfolioItem = await axiosInstance.get(\n      `${CATALOG_API_BASE}/portfolio_items/${\n        (orderItem as OrderItem).portfolio_item_id\n      }`\n    );\n  } catch (_error) {\n    // nohandler\n  }\n\n  const parallerRequests = [\n    axiosInstance\n      .get(\n        `${CATALOG_INVENTORY_API_BASE}/sources/${\n          (portfolioItem as PortfolioItem).service_offering_source_ref\n        }`\n      )\n      .catch(() => ({ object: 'Platform', notFound: true })),\n\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/order_items/${\n          (orderItem as OrderItem).id\n        }/progress_messages`\n      )\n      .catch(() => ({ object: 'Messages', notFound: true })),\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/portfolios/${\n          (portfolioItem as PortfolioItem).portfolio_id\n        }`\n      )\n      .catch(() => ({ object: 'Portfolio', notFound: true }))\n  ];\n\n  return Promise.all(\n    parallerRequests\n  ).then(([platform, progressMessages, portfolio]) => [\n    order,\n    orderItem,\n    portfolioItem,\n    platform as Source | ObjectNotFound,\n    progressMessages as ProgressMessage | ObjectNotFound,\n    portfolio as Portfolio | ObjectNotFound\n  ]);\n};\n\nexport const fetchOrderProvisionItems = async (\n  orderId: string\n): Promise<OrderProvisionPayload> => {\n  let orderItems: OrderItem[];\n  try {\n    const items = await axiosInstance.get(\n      `${CATALOG_API_BASE}/order_items/?order_id=${orderId}`\n    );\n    orderItems = items.data;\n  } catch (error) {\n    orderItems = [];\n    if (error.status === 404 || error.status === 400) {\n      catalogHistory.replace({\n        pathname: '/404',\n        state: { from: catalogHistory.location }\n      });\n    } else {\n      throw error;\n    }\n  }\n\n  const progressMessageItems: ProgressMessageItem[] = [];\n  const promises = orderItems.map((orderItem) =>\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/order_items/${orderItem.id}/progress_messages`)\n      .then((item) => {\n        progressMessageItems.push({\n          orderItemId: orderItem.id || '',\n          progressMessages: item.data\n        });\n        return progressMessageItems;\n      })\n  );\n  await Promise.all(promises);\n  return { orderItems, progressMessageItems };\n};\n","/* eslint camelcase: 0 */\nimport {\n  getAxiosInstance,\n  getPortfolioItemApi,\n  getOrderApi,\n  getOrderItemApi,\n  getGraphqlInstance\n} from '../shared/user-login';\nimport {\n  CATALOG_API_BASE,\n  APPROVAL_API_BASE,\n  CATALOG_INVENTORY_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  fetchOrderDetailSequence,\n  fetchOrderProvisionItems,\n  OrderDetailPayload,\n  OrderProvisionPayload\n} from './new-order-helper';\nimport {\n  ApiCollectionResponse,\n  ApiMetadata,\n  EnhancedOrder,\n  Full\n} from '../../types/common-types';\nimport {\n  ServicePlan,\n  Order,\n  OrderItem,\n  PortfolioItem,\n  ApprovalRequest,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\nimport { AxiosPromise } from 'axios';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\nimport { Request, Action } from '@redhat-cloud-services/approval-client';\n\nconst orderApi = getOrderApi();\nconst orderItemApi = getOrderItemApi();\nconst portfolioItemApi = getPortfolioItemApi();\nconst axiosInstance = getAxiosInstance();\nconst graphqlInstance = getGraphqlInstance();\n\nexport const getServicePlans = (\n  portfolioItemId: string\n): Promise<ApiCollectionResponse<ServicePlan>> =>\n  (portfolioItemApi.listServicePlans(portfolioItemId) as unknown) as Promise<\n    ApiCollectionResponse<ServicePlan>\n  >;\n\nexport const sendSubmitOrder = async ({\n  service_parameters: { providerControlParameters, ...service_parameters },\n  ...parameters\n}: AnyObject): Promise<EnhancedOrder> => {\n  const order: Order = ((await orderApi.createOrder()) as unknown) as Order;\n  let orderItem: Partial<OrderItem> = {};\n  orderItem.count = 1;\n  orderItem = {\n    ...orderItem,\n    ...parameters,\n    service_parameters,\n    provider_control_parameters: providerControlParameters || {}\n  };\n  const orderItemResponse = await orderApi.addToOrder(\n    order.id as string,\n    orderItem as OrderItem\n  );\n  return orderApi.submitOrder(order.id as string).then((order) => ({\n    ...order,\n    orderItem: (orderItemResponse as unknown) as OrderItem\n  }));\n};\n\nexport const cancelOrder = (orderId: string): AxiosPromise<Order> =>\n  orderApi.cancelOrder(orderId);\n\nconst getOrderItems = (\n  orderIds: string[]\n): Promise<ApiCollectionResponse<OrderItem>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/order_items?limit=${orderIds.length * 3 ||\n      defaultSettings.limit}${orderIds.length ? '&' : ''}${orderIds\n      .map((orderId) => `filter[order_id][]=${orderId}`)\n      .join('&')}`\n  );\n\nconst getOrderPortfolioItems = (\n  itemIds: string[]\n): Promise<ApiCollectionResponse<PortfolioItem>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolio_items?${itemIds\n      .map((itemId) => `filter[id][]=${itemId}`)\n      .join('&')}`\n  );\n\nexport const getOrders = (\n  filter = '',\n  pagination = defaultSettings\n): Promise<{\n  data: (Order & { orderItems: OrderItem[] })[];\n  portfolioItems: ApiCollectionResponse<PortfolioItem>;\n  meta: ApiMetadata;\n}> =>\n  axiosInstance\n    .get(\n      `${CATALOG_API_BASE}/orders?${filter}&limit=${pagination.limit}&offset=${pagination.offset}`\n    ) // eslint-disable-line max-len\n    .then((orders: ApiCollectionResponse<Full<Order>>) =>\n      getOrderItems(orders.data.map(({ id }) => id)).then((orderItems) =>\n        getOrderPortfolioItems(\n          orderItems.data.map(({ portfolio_item_id }) => portfolio_item_id)\n        ).then((portfolioItems) => {\n          return {\n            portfolioItems,\n            ...orders,\n            data: orders.data.map((order) => ({\n              ...order,\n              orderItems: orderItems.data.filter(\n                ({ order_id }) => order_id === order.id\n              )\n            }))\n          };\n        })\n      )\n    );\n\nexport const getOrderApprovalRequests = (\n  orderItemId: string\n): Promise<ApiCollectionResponse<Request>> =>\n  (orderItemApi.listApprovalRequests(orderItemId) as unknown) as Promise<\n    ApiCollectionResponse<Request>\n  >;\n\nexport interface GetOrderDetailParams {\n  order: string;\n  'order-item'?: string;\n  'portfolio-item'?: string;\n  platform?: string;\n  portfolio?: string;\n}\nexport const getOrderDetail = (\n  params: GetOrderDetailParams\n): Promise<OrderDetailPayload> => {\n  if (Object.values(params).some((value) => !value)) {\n    /**\n     * Try to fetch data sequentially if any of the parameters is unknown\n     */\n    return fetchOrderDetailSequence(params.order);\n  }\n\n  const detailPromises = [\n    (axiosInstance\n      .get(`${CATALOG_API_BASE}/orders/${params.order}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return catalogHistory.replace({\n            pathname: '/404',\n            state: { from: catalogHistory.location }\n          });\n        }\n\n        throw error;\n      }) as unknown) as Promise<Order>,\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/order_items/${params['order-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Order item',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/portfolio_items/${params['portfolio-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Product',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_INVENTORY_API_BASE}/sources/${params.platform}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Platform',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/orders/${params.order}/progress_messages`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {};\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/portfolios/${params.portfolio}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Portfolio',\n            notFound: true\n          };\n        }\n\n        throw error;\n      })\n  ];\n\n  return (Promise.all(detailPromises) as unknown) as Promise<\n    OrderDetailPayload\n  >;\n};\n\nconst APPROVAL_REQUESTER_PERSONA = 'approval/requester';\nexport interface RequestTranscript extends Full<Request> {\n  actions: Action[];\n}\nconst requestTranscriptQuery = (parent_id: string) => `query {\n  requests(id: \"${parent_id}\") {\n    id\n    number_of_children\n    decision\n    group_name\n    created_at\n    state\n    actions {\n      id\n      created_at\n    }\n    requests {\n      id\n      number_of_children\n      decision\n      group_name\n      state\n      parent_id\n      created_at\n      actions {\n        id\n        created_at\n      }\n    }\n  }\n}`;\nconst fetchRequestTranscript = (\n  requestId: string\n): Promise<RequestTranscript[]> =>\n  graphqlInstance\n    .post(\n      `${APPROVAL_API_BASE}/graphql`,\n      { query: requestTranscriptQuery(requestId) },\n      { 'x-rh-persona': APPROVAL_REQUESTER_PERSONA }\n    )\n    .then(({ data: { requests } }) => {\n      return requests &&\n        requests.length > 0 &&\n        requests[0].number_of_children > 0\n        ? requests[0].requests\n        : requests;\n    });\n\nexport const getApprovalRequests = (\n  orderItemId: string\n): Promise<{\n  data: { group_name: string; decision: string; updated?: string }[];\n}> =>\n  axiosInstance\n    .get(`${CATALOG_API_BASE}/order_items/${orderItemId}/approval_requests`)\n    .then(({ data }: { data: Full<ApprovalRequest>[] }) => {\n      const promises = data.map(({ approval_request_ref }) =>\n        fetchRequestTranscript(approval_request_ref)\n      );\n      return Promise.all(promises).then((requests) => {\n        const data = requests?.[0]?.map(({ actions, ...request }) => ({\n          ...request,\n          updated:\n            actions?.length > 0 ? actions.pop()?.created_at : request.created_at\n        }));\n        return { data: data || [] };\n      });\n    });\n\nexport const getOrderProvisionItems = async (\n  orderId: string\n): Promise<OrderProvisionPayload> => {\n  const items = await fetchOrderProvisionItems(orderId);\n  return items;\n};\n\nexport const getProgressMessages = (\n  orderItemId: string\n): Promise<{\n  data: ProgressMessage[];\n}> =>\n  axiosInstance\n    .get(`${CATALOG_API_BASE}/order_items/${orderItemId}/progress_messages`)\n    .then(({ data }: { data: Full<ProgressMessage>[] }) => {\n      return { data: data || [] };\n    });\n","import React, { ComponentType, ReactElement, ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ORDER_ROUTE } from '../../constants/routes';\nimport ordersMessages from '../../messages/orders.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport { Dispatch } from 'redux';\n\nexport interface OrderNotificationProps {\n  id: string;\n  dispatch: Dispatch;\n  portfolioItemId: string;\n  portfolioId: string;\n  platformId: string;\n  orderItemId: string;\n}\n\nconst OrderNotification: ComponentType<OrderNotificationProps> = ({\n  id,\n  dispatch,\n  portfolioItemId,\n  portfolioId,\n  platformId,\n  orderItemId\n}) => {\n  const formatMessage = useFormatMessage();\n  return formatMessage(ordersMessages.orderSuccess, {\n    id,\n    // eslint-disable-next-line react/display-name\n    link: (chunks: ReactNode | ReactNode[]) => (\n      <Link\n        onClick={() => dispatch(clearNotifications())}\n        to={{\n          pathname: ORDER_ROUTE,\n          search: `?order=${id}&order-item=${orderItemId}&portfolio-item=${portfolioItemId}&platform=${platformId}&portfolio=${portfolioId}`\n        }}\n      >\n        {chunks}\n      </Link>\n    )\n  }) as ReactElement;\n};\n\nexport default OrderNotification;\n","import React from 'react';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport * as ActionTypes from '../action-types';\nimport * as OrderHelper from '../../helpers/order/order-helper';\nimport OrderNotification from '../../presentational-components/order/order-notification';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport {\n  ApprovalRequestStateEnum,\n  Order,\n  OrderItem,\n  OrderStateEnum,\n  Portfolio,\n  PortfolioItem,\n  ProgressMessage,\n  ServicePlan\n} from '@redhat-cloud-services/catalog-client';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\nimport { Dispatch } from 'redux';\nimport {\n  Full,\n  StringObject,\n  ReduxAction,\n  ApiCollectionResponse\n} from '../../types/common-types';\nimport { AsyncMiddlewareAction, GetReduxState } from '../../types/redux';\nimport { Source } from '@redhat-cloud-services/sources-client';\nimport {\n  ObjectNotFound,\n  ProgressMessageItem\n} from '../../helpers/order/new-order-helper';\n\nexport const fetchServicePlans = (\n  portfolioItemId: string\n): AsyncMiddlewareAction<ApiCollectionResponse<ServicePlan>> => ({\n  type: ActionTypes.FETCH_SERVICE_PLANS,\n  payload: OrderHelper.getServicePlans(portfolioItemId)\n});\n\nexport const setSelectedPlan = (\n  data: ServicePlan\n): ReduxAction<ServicePlan> => ({\n  type: ActionTypes.SET_SELECTED_PLAN,\n  payload: data\n});\n\nexport const sendSubmitOrder = (\n  apiProps: AnyObject,\n  portfolioItem: Full<PortfolioItem>\n) => (dispatch: Dispatch): AsyncMiddlewareAction =>\n  dispatch({\n    type: ActionTypes.SUBMIT_SERVICE_ORDER,\n    payload: OrderHelper.sendSubmitOrder(apiProps).then(({ id, orderItem }) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been accepted successfully',\n          description: (\n            <OrderNotification\n              id={id!}\n              dispatch={dispatch}\n              portfolioItemId={portfolioItem.id}\n              portfolioId={portfolioItem.portfolio_id}\n              platformId={portfolioItem.service_offering_source_ref}\n              orderItemId={orderItem.id!}\n            />\n          ),\n          dismissable: true\n        })\n      )\n    )\n  });\n\nexport const cancelOrder = (orderId: string) => (\n  dispatch: Dispatch,\n  getState: GetReduxState\n): Promise<void | { type: string }> => {\n  dispatch({ type: `${ActionTypes.CANCEL_ORDER}_PENDING` });\n  const {\n    orderReducer: { orderDetail }\n  } = getState();\n  return OrderHelper.cancelOrder(orderId)\n    .then(() => {\n      orderDetail.order.state = OrderStateEnum.Canceled;\n      if (\n        orderDetail.approvalRequest &&\n        orderDetail.approvalRequest.data.length > 0\n      ) {\n        orderDetail.approvalRequest.data[0].state = 'canceled' as ApprovalRequestStateEnum;\n      }\n\n      dispatch({\n        type: ActionTypes.SET_ORDER_DETAIL,\n        payload: { ...orderDetail }\n      });\n      return orderDetail;\n    })\n    .then((orderDetail) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been canceled successfully',\n          description: `Order ${`Order #${orderDetail.order.id}`} was canceled.`,\n          dismissable: true\n        })\n      )\n    )\n    .then(() => dispatch({ type: `${ActionTypes.CANCEL_ORDER}_FULFILLED` }))\n    .catch((error) => {\n      dispatch({\n        type: `${ActionTypes.CANCEL_ORDER}_REJECTED`,\n        payload: error\n      });\n    });\n};\n\nexport const fetchOrders = (\n  filters: StringObject,\n  pagination = defaultSettings\n) => (dispatch: Dispatch): Promise<ReduxAction> => {\n  let queryFilter = Object.entries(filters)\n    .filter(([, value]) => value && value.length > 0)\n    .map(([key, value]) =>\n      Array.isArray(value)\n        ? value.map((value) => `filter[${key}][]=${value}`).join('&')\n        : `filter[${key}][contains_i]=${value}`\n    )\n    .join('&');\n  if (pagination.sortBy) {\n    queryFilter = `${queryFilter}&sort_by=${\n      pagination.sortBy\n    }:${pagination.sortDirection || 'desc'}`;\n  }\n\n  dispatch({ type: `${ActionTypes.FETCH_ORDERS}_PENDING` });\n  return OrderHelper.getOrders(queryFilter, pagination)\n    .then(({ portfolioItems, ...orders }) => {\n      dispatch({\n        type: ActionTypes.SET_PORTFOLIO_ITEMS,\n        payload: portfolioItems\n      });\n      return dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_FULFILLED`,\n        meta: {\n          ...pagination,\n          filter: queryFilter,\n          filters,\n          storeState: true,\n          stateKey: 'orders'\n        },\n        payload: orders\n      });\n    })\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchOrderDetails = (params: OrderHelper.GetOrderDetailParams) => (\n  dispatch: Dispatch\n): Promise<{\n  type: string;\n  payload: {\n    order: Order | ObjectNotFound;\n    orderItem: OrderItem | ObjectNotFound;\n    portfolioItem: PortfolioItem | ObjectNotFound;\n    platform: Source | ObjectNotFound;\n    progressMessages: ProgressMessage | ObjectNotFound;\n    portfolio: Portfolio | ObjectNotFound;\n  };\n}> => {\n  dispatch({ type: `${ActionTypes.SET_ORDER_DETAIL}_PENDING` });\n  return OrderHelper.getOrderDetail(params)\n    .then(\n      ([\n        order,\n        orderItem,\n        portfolioItem,\n        platform,\n        progressMessages,\n        portfolio\n      ]) =>\n        dispatch({\n          type: `${ActionTypes.SET_ORDER_DETAIL}_FULFILLED`,\n          payload: {\n            order,\n            orderItem,\n            portfolioItem,\n            platform,\n            progressMessages,\n            portfolio\n          }\n        })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_DETAIL}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchApprovalRequests = (orderItemId: string) => (\n  dispatch: Dispatch\n): Promise<\n  | {\n      data: {\n        group_name: string;\n        decision: string;\n        updated?: string | undefined;\n      }[];\n    }\n  | { type: string; payload: any } /** the action in catch branch */\n> => {\n  dispatch({ type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_PENDING` });\n  return OrderHelper.getApprovalRequests(orderItemId)\n    .then((data) => {\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_FULFILLED`,\n        payload: data\n      });\n      return data;\n    })\n    .catch((err) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_REJECTED`,\n        payload: err\n      })\n    );\n};\n\nexport const fetchOrderProvision = (orderId: string) => (\n  dispatch: Dispatch\n): Promise<{\n  type: string;\n  payload: {\n    orderItems: OrderItem[] | [];\n    progressMessageItems: ProgressMessageItem[] | [];\n  };\n}> => {\n  dispatch({ type: `${ActionTypes.SET_ORDER_PROVISION_ITEMS}_PENDING` });\n  return OrderHelper.getOrderProvisionItems(orderId)\n    .then(({ orderItems, progressMessageItems }) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_PROVISION_ITEMS}_FULFILLED`,\n        payload: {\n          orderItems,\n          progressMessageItems\n        }\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_PROVISION_ITEMS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n","import React, { ReactNode } from 'react';\nimport {\n  ExclamationCircleIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  ClockIcon,\n  PlusCircleIcon\n} from '@patternfly/react-icons';\n\nconst orderStatusMapper: {\n  Completed: { icon: ReactNode; color: 'green' };\n  Ordered: { icon: ReactNode; color: 'grey' };\n  Failed: { icon: ReactNode; color: 'red' };\n  Canceled: { icon: ReactNode; color: 'orange' };\n  Created: { icon: ReactNode; color: 'grey' };\n  'Approval Pending': { icon: ReactNode; color: 'blue' };\n  Approved: { icon: ReactNode; color: 'green' };\n  Denied: { icon: ReactNode; color: 'red' };\n  Undecided: { icon: ReactNode; color: 'blue' };\n  Unknown: { icon: ReactNode; color: 'grey' };\n  Error: { icon: ReactNode; color: 'red' };\n} = {\n  Completed: { icon: <CheckCircleIcon />, color: 'green' },\n  'Approval Pending': {\n    icon: <ClockIcon />,\n    color: 'blue'\n  },\n  Ordered: { icon: <PlusCircleIcon />, color: 'grey' },\n  Failed: { icon: <ExclamationCircleIcon />, color: 'red' },\n  Canceled: { icon: <ExclamationTriangleIcon />, color: 'orange' },\n  Created: { icon: <PlusCircleIcon />, color: 'grey' },\n  Approved: { icon: <CheckCircleIcon />, color: 'green' },\n  Denied: { icon: <ExclamationCircleIcon />, color: 'red' },\n  Error: { icon: <ExclamationCircleIcon />, color: 'red' },\n  Undecided: {\n    icon: <ClockIcon />,\n    color: 'blue'\n  },\n  Unknown: { icon: <ExclamationTriangleIcon />, color: 'grey' }\n};\n\nexport default orderStatusMapper;\n","import { toolbarComponentTypes } from '../toolbar-mapper';\nimport { ToolbarSchema } from '../toolbar-renderer';\n\nconst createOrdersToolbarSchema = (): ToolbarSchema => ({\n  fields: [\n    {\n      component: toolbarComponentTypes.TOP_TOOLBAR,\n      className: 'orders pf-u-p-lg',\n      key: 'orders-toolbar',\n      fields: [\n        {\n          component: toolbarComponentTypes.TOP_TOOLBAR_TITLE,\n          key: 'orders-toolbar-title',\n          title: 'Orders',\n          className: ''\n        }\n      ]\n    }\n  ]\n});\n\nexport default createOrdersToolbarSchema;\n","import React, { Fragment, ReactNode } from 'react';\nimport { Label, Text, TextVariants } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\n\nimport CardIcon from '../../presentational-components/shared/card-icon';\nimport { getOrderIcon } from '../../helpers/shared/orders';\nimport CatalogLink from '../common/catalog-link';\nimport { ORDER_ROUTE } from '../../constants/routes';\nimport statesMessages, {\n  getTranslatableState\n} from '../../messages/states.messages';\n\nimport { TableText } from '@patternfly/react-table';\nimport orderStatusMapper from './order-status-mapper';\nimport { OrderDetail } from '../../redux/reducers/order-reducer';\nimport { FormatMessage, StringObject } from '../../types/common-types';\n\nconst createOrderItem = (\n  item: OrderDetail,\n  orderPlatform: string | undefined,\n  orderPortfolio: string | undefined,\n  formatMessage: FormatMessage\n): { title: ReactNode }[] => {\n  const orderItem = (item.orderItems[0] && item.orderItems[0]) || {};\n  const searchParams: StringObject = {\n    order: item.id,\n    ...(orderItem.id ? { 'order-item': orderItem.id } : {}),\n    ...(orderItem.portfolio_item_id\n      ? { 'portfolio-item': orderItem.portfolio_item_id }\n      : {}),\n    ...(orderPlatform ? { platform: orderPlatform } : {}),\n    ...(orderPortfolio ? { portfolio: orderPortfolio } : {})\n  };\n  const translatableState = getTranslatableState(item.state);\n  return [\n    {\n      title: (\n        <TableText>\n          <CatalogLink pathname={ORDER_ROUTE} searchParams={searchParams}>\n            {item.id}\n          </CatalogLink>\n        </TableText>\n      )\n    },\n    {\n      title: (\n        <Fragment>\n          <CardIcon\n            height={60}\n            src={getOrderIcon(item)}\n            sourceId={orderPlatform}\n          />\n        </Fragment>\n      )\n    },\n    item.orderName,\n    item.owner,\n    {\n      title: (\n        <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n          <DateFormat date={item.created_at} variant=\"relative\" />\n        </Text>\n      )\n    },\n    {\n      title: (\n        <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n          <DateFormat\n            date={item.orderItems[0] && item.orderItems[0].updated_at}\n            variant=\"relative\"\n          />\n        </Text>\n      )\n    },\n    {\n      title: (\n        <TableText>\n          <Label\n            {...orderStatusMapper[item.state as keyof typeof orderStatusMapper]}\n            variant=\"outline\"\n          >\n            {formatMessage(statesMessages[translatableState])}\n          </Label>\n        </TableText>\n      )\n    }\n  ];\n};\n\nexport default createOrderItem;\n","import { CATALOG_API_BASE } from '../../utilities/constants';\nimport { PortfolioItem } from '@redhat-cloud-services/catalog-client';\nimport { Full } from '../../types/common-types';\nimport { OrderDetail } from '../../redux/reducers/order-reducer';\n\nexport const getOrderIcon = ({ orderItems }: OrderDetail): string | undefined =>\n  orderItems[0] &&\n  `${CATALOG_API_BASE}/portfolio_items/${orderItems[0].portfolio_item_id}/icon`;\n\nexport const getOrderPortfolioName = (\n  { orderItems, id }: OrderDetail,\n  portfolioItems: Full<PortfolioItem>[]\n): string => {\n  const portfolioItem =\n    orderItems[0] &&\n    portfolioItems.find(({ id }) => orderItems[0].portfolio_item_id === id);\n  return portfolioItem ? portfolioItem.name : `Order ${id}`;\n};\n\nexport const getOrderPlatformId = (\n  { orderItems }: OrderDetail,\n  portfolioItems: Full<PortfolioItem>[]\n): {\n  orderPlatform?: string;\n  orderPortfolio?: string;\n} => {\n  const portfolioItem =\n    orderItems[0] &&\n    portfolioItems.find(({ id }) => orderItems[0].portfolio_item_id === id);\n  return portfolioItem\n    ? {\n        orderPlatform: portfolioItem.service_offering_source_ref,\n        orderPortfolio: portfolioItem.portfolio_id\n      }\n    : {};\n};\n","import React, { useEffect, useReducer } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Grid,\n  GridItem,\n  Title,\n  Bullseye,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Flex,\n  EmptyStateSecondaryActions,\n  Button\n} from '@patternfly/react-core';\nimport { Section } from '@redhat-cloud-services/frontend-components/components/cjs/Section';\nimport {\n  Chip,\n  PrimaryToolbar\n} from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/components/cjs/EmptyTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/TableToolbar';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n  ISortBy,\n  OnSort,\n  ICell\n} from '@patternfly/react-table';\n\nimport { fetchOrders } from '../../redux/actions/order-actions';\nimport { fetchPlatforms } from '../../redux/actions/platform-actions';\nimport { ListLoader } from '../../presentational-components/shared/loader-placeholders';\nimport createOrderItem from './order-item';\nimport AsyncPagination from '../common/async-pagination';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport {\n  defaultSettings,\n  PaginationConfiguration\n} from '../../helpers/shared/pagination';\nimport useInitialUriHash from '../../routing/use-initial-uri-hash';\nimport statesMessages from '../../messages/states.messages';\nimport filteringMessages from '../../messages/filtering.messages';\nimport ordersMessages from '../../messages/orders.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport {\n  getOrderPlatformId,\n  getOrderPortfolioName\n} from '../../helpers/shared/orders';\nimport { CatalogRootState } from '../../types/redux';\nimport {\n  ApiCollectionResponse,\n  Full,\n  StringObject\n} from '../../types/common-types';\nimport { PortfolioItem } from '@redhat-cloud-services/catalog-client';\nimport { OrderDetail } from '../../redux/reducers/order-reducer';\n\nconst debouncedFilter = asyncFormValidator(\n  (filters, meta = defaultSettings, dispatch, filteringCallback) => {\n    filteringCallback(true);\n    dispatch(fetchOrders(filters, meta)).then(() => filteringCallback(false));\n  },\n  1000\n);\n\nconst initialState = {\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false,\n  filterType: 'state',\n  filters: {\n    state: [],\n    owner: ''\n  },\n  sortBy: {\n    index: 0,\n    direction: SortByDirection.desc\n  }\n};\n\nconst changeFilters = (\n  value: string,\n  type: string,\n  filters: StringObject\n): StringObject => ({\n  ...filters,\n  [type]: value\n});\n\ninterface OrdersListState {\n  isFetching?: boolean;\n  filters: StringObject;\n  filterType: string;\n  isFiltering?: boolean;\n  sortBy: Full<ISortBy>;\n}\nconst ordersListState = (\n  state: OrdersListState,\n  action: { type: string; payload: any }\n): OrdersListState => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return {\n        ...state,\n        filters: changeFilters(action.payload, state.filterType, state.filters)\n      };\n    case 'replaceFilterChip':\n      return { ...state, filters: action.payload };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    case 'setFilterType':\n      return { ...state, filterType: action.payload };\n    case 'setSortBy':\n      return { ...state, sortBy: action.payload, isFetching: true };\n  }\n\n  return state;\n};\n\nconst sortIndexMapper = {\n  0: 'id',\n  3: 'owner',\n  4: 'created_at',\n  6: 'state'\n};\n\nconst OrdersList: React.ComponentType = () => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const viewState = useInitialUriHash();\n  const [\n    { isFetching, isFiltering, filterType, filters, sortBy },\n    stateDispatch\n  ] = useReducer(ordersListState, {\n    ...initialState,\n    filters: viewState?.orders?.filters || { state: [], owner: '' },\n    sortBy: {\n      direction: viewState?.orders?.sortDirection || SortByDirection.desc,\n      index: viewState?.orders?.sortIndex || 0\n    }\n  });\n  const { data, meta } = useSelector<\n    CatalogRootState,\n    ApiCollectionResponse<OrderDetail>\n  >(({ orderReducer }) => orderReducer.orders);\n  const columns: ICell[] = [\n    { title: formatMessage(ordersMessages.orderID) },\n    formatMessage(labelMessages.product),\n    '', // need empty row column to correctly align product names after the icon column\n    {\n      title: formatMessage(ordersMessages.orderedByLabel)\n    },\n    { title: formatMessage(ordersMessages.orderDate) },\n    formatMessage(labelMessages.updated),\n    { title: formatMessage(labelMessages.status) }\n  ].map((column) =>\n    typeof column === 'object' &&\n    !isFetching &&\n    !isFiltering &&\n    data.length !== 0\n      ? { ...column, transforms: [sortable] }\n      : column\n  ) as ICell[];\n  const portfolioItems = useSelector<CatalogRootState, Full<PortfolioItem>[]>(\n    ({\n      portfolioReducer: {\n        portfolioItems: { data }\n      }\n    }) => data as Full<PortfolioItem>[]\n  );\n  const onSort: OnSort = (_e, index, direction) => {\n    stateDispatch({\n      type: 'setSortBy',\n      payload: { index, direction }\n    });\n    return ((dispatch(\n      fetchOrders(filters, {\n        ...meta,\n        sortBy: sortIndexMapper[index as keyof typeof sortIndexMapper],\n        sortDirection: direction,\n        sortIndex: index\n      })\n    ) as unknown) as Promise<void>).then(() =>\n      stateDispatch({ type: 'setFetching', payload: false })\n    );\n  };\n\n  const rows = data.map((item) => {\n    const { orderPlatform, orderPortfolio } = getOrderPlatformId(\n      item,\n      portfolioItems\n    );\n    const orderName = getOrderPortfolioName(item, portfolioItems);\n    return createOrderItem(\n      { ...item, orderName },\n      orderPlatform,\n      orderPortfolio,\n      formatMessage\n    );\n  });\n\n  useEffect(() => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    Promise.all([\n      dispatch(fetchOrders(filters, viewState?.orders)),\n      dispatch(fetchPlatforms())\n    ]).then(() => stateDispatch({ type: 'setFetching', payload: false }));\n  }, []);\n\n  const handlePagination = (\n    _apiProps: any,\n    pagination: PaginationConfiguration\n  ) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    return ((dispatch(\n      fetchOrders(filters, {\n        ...pagination,\n        sortBy: sortIndexMapper[sortBy.index as keyof typeof sortIndexMapper],\n        sortDirection: sortBy.direction as SortByDirection,\n        sortIndex: sortBy.index\n      })\n    ) as unknown) as Promise<void>)\n      .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n      .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  const handleFilterItems = (value = '') => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      { ...filters, [filterType]: value },\n      {\n        ...meta,\n        sortBy: sortIndexMapper[sortBy.index as keyof typeof sortIndexMapper],\n        sortDirection: sortBy.direction,\n        sortIndex: sortBy.index,\n        offset: 0\n      },\n      dispatch,\n      (isFiltering: boolean) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering })\n    );\n  };\n\n  const handleClearAll = () => {\n    stateDispatch({\n      type: 'replaceFilterChip',\n      payload: initialState.filters\n    });\n    return debouncedFilter(\n      initialState.filters,\n      {\n        ...meta,\n        sortBy: sortIndexMapper[sortBy.index as keyof typeof sortIndexMapper],\n        sortDirection: sortBy.direction,\n        sortIndex: sortBy.index\n      },\n      dispatch,\n      (isFiltering: boolean) =>\n        stateDispatch({\n          type: 'setFilteringFlag',\n          payload: isFiltering\n        })\n    );\n  };\n\n  return (\n    <Grid hasGutter>\n      <GridItem>\n        <Section type=\"content\">\n          {!meta.noData && (\n            <PrimaryToolbar\n              activeFiltersConfig={{\n                filters: Object.entries(filters)\n                  .filter(([, value]) => value && value.length > 0)\n                  .map<{ category: string; type: string; chips: Chip[] }>(\n                    ([key, value]) => ({\n                      category: key,\n                      type: key,\n                      chips: Array.isArray(value)\n                        ? value.map<Chip>((name) => ({ name }))\n                        : ([{ name: value }] as Chip[])\n                    })\n                  ),\n                onDelete: (_e, [chip], clearAll) => {\n                  if (clearAll) {\n                    return handleClearAll();\n                  }\n\n                  const newFilters = { ...filters };\n                  if (chip.type === 'state') {\n                    newFilters[chip.type] = (((newFilters[\n                      chip.type\n                    ] as unknown) as string[]).filter(\n                      (value) => value !== chip?.chips?.[0].name\n                    ) as unknown) as string;\n                  } else {\n                    newFilters[chip.type!] = '';\n                  }\n\n                  stateDispatch({\n                    type: 'replaceFilterChip',\n                    payload: newFilters\n                  });\n                  debouncedFilter(\n                    newFilters,\n                    meta,\n                    dispatch,\n                    (isFiltering: boolean) =>\n                      stateDispatch({\n                        type: 'setFilteringFlag',\n                        payload: isFiltering\n                      })\n                  );\n                }\n              }}\n              filterConfig={{\n                onChange: (_e, value) =>\n                  stateDispatch({ type: 'setFilterType', payload: value }),\n                value: filterType,\n                items: [\n                  {\n                    filterValues: {\n                      items: [\n                        {\n                          value: 'Approval Pending',\n                          label: formatMessage(statesMessages.approvalPending)\n                        },\n                        {\n                          value: 'Canceled',\n                          label: formatMessage(statesMessages.canceled)\n                        },\n                        {\n                          value: 'Completed',\n                          label: formatMessage(statesMessages.completed)\n                        },\n                        {\n                          value: 'Created',\n                          label: formatMessage(labelMessages.created)\n                        },\n                        {\n                          value: 'Failed',\n                          label: formatMessage(statesMessages.failed)\n                        },\n                        {\n                          value: 'Ordered',\n                          label: formatMessage(statesMessages.ordered)\n                        }\n                      ],\n                      value: filters.state,\n                      onChange: (_e, value) => handleFilterItems(value)\n                    },\n                    label: 'State',\n                    value: 'state',\n                    type: 'checkbox'\n                  },\n                  {\n                    filterValues: {\n                      value: filters.owner,\n                      onChange: (_e, value) => handleFilterItems(value)\n                    },\n                    label: 'Owner',\n                    value: 'owner'\n                  }\n                ]\n              }}\n              pagination={\n                <AsyncPagination\n                  isDisabled={isFetching || isFiltering}\n                  apiRequest={handlePagination}\n                  meta={meta}\n                  isCompact\n                />\n              }\n            />\n          )}\n          <Table\n            aria-label=\"orders\"\n            {...(!(isFetching || isFiltering) && data.length === 0\n              ? {}\n              : { sortBy, onSort })}\n            cells={columns}\n            rows={isFetching || isFiltering ? [] : rows}\n            className=\"orders-table\"\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {!(isFetching || isFiltering) && data.length === 0 && (\n            <EmptyTable>\n              <Bullseye>\n                <EmptyState>\n                  <Bullseye>\n                    <EmptyStateIcon icon={SearchIcon} />\n                  </Bullseye>\n                  <Title headingLevel=\"h1\" size=\"lg\">\n                    {meta.noData\n                      ? formatMessage(ordersMessages.noOrdersTitle)\n                      : formatMessage(filteringMessages.noResults)}\n                  </Title>\n                  <EmptyStateBody>\n                    {meta.noData\n                      ? formatMessage(ordersMessages.noOrdersDescription)\n                      : formatMessage(filteringMessages.noResultsDescription)}\n                  </EmptyStateBody>\n                  {!meta.noData && (\n                    <EmptyStateSecondaryActions>\n                      <Button\n                        ouiaId={'clear-filter'}\n                        variant=\"link\"\n                        onClick={handleClearAll}\n                      >\n                        {formatMessage(filteringMessages.clearFilters)}\n                      </Button>\n                    </EmptyStateSecondaryActions>\n                  )}\n                </EmptyState>\n              </Bullseye>\n            </EmptyTable>\n          )}\n          {(isFetching || isFiltering) && <ListLoader />}\n          <TableToolbar className=\"pf-u-mr-0\">\n            <div className=\"bottom-pagination-container\">\n              <Flex justifyContent={{ default: 'justifyContentFlexEnd' }}>\n                {meta && meta.count! > 0 && (\n                  <AsyncPagination\n                    className=\"pf-u-mt-0\"\n                    isDisabled={isFetching || isFiltering}\n                    apiRequest={handlePagination}\n                    meta={meta}\n                  />\n                )}\n              </Flex>\n            </div>\n          </TableToolbar>\n        </Section>\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default OrdersList;\n","import React, { useEffect } from 'react';\nimport { Stack } from '@patternfly/react-core';\n\nimport ToolbarRenderer from '../../toolbar/toolbar-renderer';\nimport createOrdersToolbarSchema from '../../toolbar/schemas/orders-toolbar.schema';\nimport OrdersList from './orders-list';\n\nconst Orders: React.ComponentType = () => {\n  useEffect(() => {\n    window.insights.chrome.appNavClick({ id: 'orders', secondaryNav: true });\n  }, []);\n\n  return (\n    <Stack>\n      <ToolbarRenderer schema={createOrdersToolbarSchema()} />\n      <OrdersList />\n    </Stack>\n  );\n};\n\nexport default Orders;\n"],"sourceRoot":""}