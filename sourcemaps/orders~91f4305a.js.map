{"version":3,"sources":["webpack:///./src/messages/filtering.messages.ts","webpack:///./src/utilities/use-enhanced-history.ts","webpack:///./src/messages/orders.messages.ts","webpack:///./src/helpers/platform/platform-helper.ts","webpack:///./src/redux/actions/platform-actions.ts","webpack:///./src/presentational-components/shared/filter-toolbar-item.tsx","webpack:///./src/toolbar/toolbar-mapper.js","webpack:///./src/toolbar/toolbar-renderer.js","webpack:///./src/messages/states.messages.ts","webpack:///./src/helpers/order/new-order-helper.ts","webpack:///./src/helpers/order/order-helper.ts","webpack:///./src/presentational-components/order/order-notification.tsx","webpack:///./src/redux/actions/order-actions.tsx","webpack:///./src/presentational-components/shared/app-tabs.tsx","webpack:///./src/smart-components/order/order-status-mapper.tsx","webpack:///./src/toolbar/schemas/orders-toolbar.schema.js","webpack:///./src/smart-components/order/order-item.js","webpack:///./src/helpers/shared/orders.ts","webpack:///./src/smart-components/order/orders-list.js","webpack:///./src/smart-components/order/orders.js"],"names":["filteringMessages","noItems","id","defaultMessage","filterByProduct","noResults","noResultsDescription","clearFilters","noProducts","noRecords","filterByTitle","noResultsFound","noResult","unknown","removeSearch","keepHash","history","push","target","internalTarget","location","hash","length","split","search","undefined","removeSearchQuery","ordersMessages","orderedBy","orderedByLabel","lastUpdated","compositeTitle","detailTitle","orderSuccess","noOrdersTitle","noOrdersDescription","noApprovalRequests","creatingApprovalRequest","approvalTitle","approvalDetail","approvalCreated","approvalReason","approvalCompleted","orderDetails","menuApproval","menuLifecycle","menuSteps","objectsNotFound","orderID","orderParameters","orderProgressMessages","lifecycleLink","cancelOrder","keepOrder","cancelDescription","backToOrders","orderDate","approvalParameters","activity","axiosInstance","graphqlInstance","getPlatformItems","platformId","filter","options","filterQuery","get","limit","offset","getPlatformInventories","getServiceOffering","serviceOfferingId","sourceId","Promise","all","then","source","source_type_id","icon_url","service","fetchPlatforms","dispatch","type","post","query","data","payload","catch","error","fetchPlatformItems","meta","fetchSelectedPlatform","fetchPlatformInventories","fetchServiceOffering","FilterInputGroup","div","FilterInput","TextInput","FilterIconsContainer","span","StyledCloseIcon","StyledSearchIcon","searchValue","onFilterChange","placeholder","isClearable","rest","value","onChange","width","height","onClick","ToolbarButton","title","props","Button","propTypes","PropTypes","string","isRequired","AppToolbar","children","className","ToolbarContent","noWrap","bool","oneOfType","node","arrayOf","toolbarMapper","TopToolbar","TopToolbarTitle","Toolbar","ToolbarGroup","StyledToolbarGroup","ToolbarItem","FilterToolbarItem","Link","CatalogLink","Level","LevelItem","AppTabs","toolbarComponentTypes","TOP_TOOLBAR","TOP_TOOLBAR_TITLE","TOOLBAR","TOOLBAR_ITEM","TOOLBAR_GROUP","FILTER_TOOLBAR_ITEM","LINK","BUTTON","LEVEL","LEVEL_ITEM","TABS","ToolbarContext","createContext","Component","component","Consumer","componentMapper","C","func","element","render","fields","hidden","map","key","field","ToolbarRenderer","schema","Provider","shape","array","object","defaultProps","statesMessages","ordered","approvalPending","canceled","completed","failed","undecided","approved","denied","pending","skipped","started","notified","getTranslatableState","state","replace","char","toLowerCase","created","orderApi","portfolioItemApi","getServicePlans","portfolioItemId","listServicePlans","getOrders","pagination","orders","orderIds","orderId","join","orderItems","itemIds","itemId","portfolioItems","order","getOrderDetail","params","Object","values","some","status","pathname","from","orderItem","notFound","portfolioItem","portfolio_item_id","parallerRequests","service_offering_source_ref","portfolio_id","platform","progressMessages","portfolio","detailPromises","getApprovalRequests","orderItemId","promises","requestId","parent_id","approval_request_ref","requests","number_of_children","actions","request","updated","pop","created_at","portfolioId","formatMessage","link","chunks","to","fetchServicePlans","apiProps","service_parameters","providerControlParameters","parameters","createOrder","count","provider_control_parameters","addToOrder","orderItemResponse","submitOrder","variant","description","dismissable","getState","orderDetail","Canceled","approvalRequest","fetchOrders","filters","queryFilter","entries","Array","isArray","sortBy","sortDirection","storeState","stateKey","fetchOrderDetails","fetchApprovalRequests","err","tabItems","activeTab","find","name","includes","activeKey","eventKey","onSelect","_event","tabIndex","item","disabled","orderStatusMapper","Completed","icon","color","Ordered","Failed","Created","createOrdersToolbarSchema","createOrderItem","orderPlatform","orderPortfolio","searchParams","translatableState","TableText","ORDER_ROUTE","src","orderName","owner","Text","TextVariants","small","DateFormat","date","updated_at","Label","debouncedFilter","asyncFormValidator","defaultSettings","filteringCallback","initialState","isOpen","isFetching","isFiltering","filterType","index","direction","SortByDirection","desc","ordersListState","action","sortIndexMapper","0","3","4","6","OrdersList","useFormatMessage","useDispatch","viewState","useInitialUriHash","useReducer","sortIndex","stateDispatch","useSelector","orderReducer","columns","labelMessages","product","column","transforms","sortable","portfolioReducer","rows","getOrderPlatformId","getOrderPortfolioName","useEffect","handlePagination","_apiProps","handleFilterItems","handleClearAll","Grid","hasGutter","GridItem","Section","noData","PrimaryToolbar","activeFiltersConfig","category","chips","onDelete","_e","clearAll","chip","newFilters","filterConfig","items","filterValues","label","isDisabled","apiRequest","isCompact","Table","aria-label","onSort","cells","EmptyTable","Bullseye","EmptyState","EmptyStateIcon","SearchIcon","Title","headingLevel","size","EmptyStateBody","EmptyStateSecondaryActions","TableToolbar","Flex","justifyContent","default","Orders","insights","chrome","appNavClick","secondaryNav","Stack"],"mappings":"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","file":"js/orders~91f4305a.e52b8a7f342356bfc059.js","sourcesContent":["import { defineMessages } from 'react-intl';\n\nconst filteringMessages = defineMessages({\n  noItems: {\n    id: 'common.filtering.noItems',\n    defaultMessage: 'No items found'\n  },\n  filterByProduct: {\n    id: 'common.filtering.filterByProduct',\n    defaultMessage: 'Filter by product'\n  },\n  noResults: {\n    id: 'common.filtering.noResults',\n    defaultMessage: 'No results found'\n  },\n  noResultsDescription: {\n    id: 'common.filtering.noResultsDescription',\n    defaultMessage:\n      'No results match the filter criteria. Remove all filters or clear all filters to show results.'\n  },\n  clearFilters: {\n    id: 'common.filtering.clear-filters',\n    defaultMessage: 'Clear all filters'\n  },\n  noProducts: {\n    id: 'common.filtering.no-products',\n    defaultMessage: 'No products yet'\n  },\n  noRecords: {\n    id: 'commonMessages.noRecords',\n    defaultMessage: 'No records'\n  },\n  filterByTitle: {\n    id: 'tableToolbar.filterByTitle',\n    defaultMessage: 'Filter by {title}'\n  },\n  noResultsFound: {\n    id: 'tableToolbar.noResultsFound',\n    defaultMessage: 'No results found'\n  },\n  noResult: {\n    id: 'tableToolbar.noResult',\n    defaultMessage: 'No {results}'\n  },\n  unknown: {\n    id: 'commonMessages.unknown',\n    defaultMessage: 'Unknown'\n  }\n});\n\nexport default filteringMessages;\n","import { useHistory } from 'react-router-dom';\nimport { History, Path } from 'history';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\n\nexport type EnhancedHistoryPushtarget =\n  | Path\n  | { pathname: string; hash?: string; search?: string; state?: AnyObject };\n\nconst removeSearchQuery = (target: EnhancedHistoryPushtarget) => {\n  if (typeof target === 'string') {\n    return target.split('?')[0];\n  }\n\n  if (typeof target === 'object') {\n    return {\n      ...target,\n      search: undefined\n    };\n  }\n\n  return target;\n};\n\n/**\n * Wrapper around useHistory hook which adds aditional settings to standard history methods\n * @param {Boolean} removeSearch if true, using history navigation methods will remove search string from path\n * @param {Boolean} keepHash if true, using history navigation methods will not remove hash from URL\n */\nconst useEnhancedHistory = ({\n  removeSearch,\n  keepHash\n}: {\n  removeSearch?: boolean;\n  keepHash?: boolean;\n} = {}): History<History.UnknownFacade> => {\n  const history = useHistory();\n  return {\n    ...history,\n    push: (target: EnhancedHistoryPushtarget) => {\n      let internalTarget = target;\n      if (keepHash && history.location.hash.length > 0) {\n        internalTarget =\n          typeof internalTarget === 'object'\n            ? { ...internalTarget, hash: history.location.hash }\n            : `${internalTarget}${history.location.hash}`;\n      }\n\n      if (removeSearch) {\n        return history.push(removeSearchQuery(internalTarget));\n      }\n\n      return history.push(internalTarget);\n    }\n  };\n};\n\nexport default useEnhancedHistory;\n","import { defineMessages } from 'react-intl';\n\nconst ordersMessages = defineMessages({\n  orderedBy: {\n    id: 'orders.common.orderedBy',\n    defaultMessage: 'Ordered by {owner}'\n  },\n  orderedByLabel: {\n    id: 'orders.approval.orderedBy',\n    defaultMessage: 'Ordered by'\n  },\n  lastUpdated: {\n    id: 'orders.common.lastUpdated',\n    defaultMessage: 'Last updated'\n  },\n  compositeTitle: {\n    id: 'orders.common.compositeTitle',\n    defaultMessage: '{name} - Order # {id}'\n  },\n  detailTitle: {\n    id: 'orders.detail.title',\n    defaultMessage: 'Order ID {id}'\n  },\n  orderSuccess: {\n    id: 'orders.notification.success',\n    defaultMessage:\n      'You can track the progress of Order # {id} in your <link>Orders</link> page.'\n  },\n  noOrdersTitle: {\n    id: 'orders.list.empty.title',\n    defaultMessage: 'No orders'\n  },\n  noOrdersDescription: {\n    id: 'orders.list.empty.description',\n    defaultMessage: 'No orders have been created.'\n  },\n  noApprovalRequests: {\n    id: 'orders.approval.no-requests',\n    defaultMessage:\n      'We were unable to find any approval requests for this order.'\n  },\n  creatingApprovalRequest: {\n    id: 'orders.approval.creating',\n    defaultMessage: 'Creating approval request'\n  },\n  approvalTitle: {\n    id: 'orders.approval.title',\n    defaultMessage: 'Summary'\n  },\n  approvalDetail: {\n    id: 'orders.approval.view-detail',\n    // eslint-disable-next-line quotes\n    defaultMessage: \"View this order's approval request details\"\n  },\n  approvalCreated: {\n    id: 'orders.approval.details.created',\n    defaultMessage: 'Request created'\n  },\n  approvalReason: {\n    id: 'orders.approval.details.reason',\n    defaultMessage: 'Approval reason'\n  },\n  approvalCompleted: {\n    id: 'orders.approval.details.completed',\n    defaultMessage: 'Completed at'\n  },\n  orderDetails: {\n    id: 'orders.common.details',\n    defaultMessage: 'Order details'\n  },\n  menuApproval: {\n    id: 'orders.menu.approval',\n    defaultMessage: 'Approval'\n  },\n  menuLifecycle: {\n    id: 'orders.menu.lifecycle',\n    defaultMessage: 'Lifecycle'\n  },\n  menuSteps: {\n    id: 'orders.menu.steps',\n    defaultMessage: 'Order steps'\n  },\n  objectsNotFound: {\n    id: 'order.detail.not-found',\n    defaultMessage:\n      'The {objects} for this order {count, plural, one {is} other {are}} not available'\n  },\n  orderID: {\n    id: 'orders.order.detail.ID',\n    defaultMessage: 'Order ID'\n  },\n  orderParameters: {\n    id: 'orders.order.detail.parameters',\n    defaultMessage: 'Order parameters'\n  },\n  orderProgressMessages: {\n    id: 'orders.order.detail.messages',\n    defaultMessage: 'Progress messages'\n  },\n  lifecycleLink: {\n    id: 'orders.order.lifecicle.link',\n    defaultMessage: 'Manage product'\n  },\n  cancelOrder: {\n    id: 'orders.actions.cancel',\n    defaultMessage: 'Cancel order'\n  },\n  keepOrder: {\n    id: 'orders.actions.keep',\n    defaultMessage: 'Keep order'\n  },\n  cancelDescription: {\n    id: 'orders.cancel.description',\n    defaultMessage: 'Are you sure you want to cancel {name}?'\n  },\n  backToOrders: {\n    id: 'orders.toolbar.backLink',\n    defaultMessage: 'Back to orders'\n  },\n  orderDate: {\n    id: 'orders.approval.order-date',\n    defaultMessage: 'Order date'\n  },\n  approvalParameters: {\n    id: 'orders.approval.parameters',\n    defaultMessage: 'Parameters'\n  },\n  activity: {\n    id: 'orders.approval.activity',\n    defaultMessage: 'Activity'\n  }\n});\n\nexport default ordersMessages;\n","import { getAxiosInstance, getGraphqlInstance } from '../shared/user-login';\nimport {\n  TOPOLOGICAL_INVENTORY_API_BASE,\n  SOURCES_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings, PaginationConfiguration } from '../shared/pagination';\nimport {\n  Source,\n  ServiceOffering,\n  ServiceInventory\n} from '@redhat-cloud-services/sources-client';\nimport { ApiCollectionResponse } from '../../types/common-types';\nconst axiosInstance = getAxiosInstance();\nconst graphqlInstance = getGraphqlInstance();\n\nconst sourcesQuery = `\nquery {\n  application_types (filter: { name: \"/insights/platform/catalog\" }) {\n    id\n    name\n    sources {\n      id\n      name\n      source_type_id\n    }\n  }\n}`;\n\nexport const getPlatforms = (): Promise<Source> => {\n  return graphqlInstance\n    .post(`${SOURCES_API_BASE}/graphql`, { query: sourcesQuery })\n    .then(({ data: { application_types } }) => application_types)\n    .then(([{ sources }]) => sources);\n};\n\nexport const getPlatform = (platformId: string): Promise<Source> => {\n  return axiosInstance.get(`${SOURCES_API_BASE}/sources/${platformId}`);\n};\n\nexport const getPlatformItems = (\n  platformId: string,\n  filter?: string,\n  options?: PaginationConfiguration\n): Promise<ApiCollectionResponse<ServiceOffering>> => {\n  const filterQuery = filter ? `&filter[name][contains_i]=${filter}` : '';\n  if (platformId) {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/sources/${platformId}/service_offerings?filter[archived_at][nil]${filterQuery}${\n        options ? `&limit=${options.limit}&offset=${options.offset}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/service_offerings`\n    );\n  }\n};\n\nexport const getPlatformInventories = (\n  platformId: string,\n  filter = '',\n  options = defaultSettings\n): Promise<ApiCollectionResponse<ServiceInventory>> => {\n  if (platformId) {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/sources/${platformId}/service_inventories?filter[name][contains_i]=${filter}${\n        options ? `&limit=${options.limit}&offset=${options.offset}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/service_inventories?limit=${options.limit}&offset=${options.offset}`\n    );\n  }\n};\n\nexport const getServiceOffering = (\n  serviceOfferingId: string,\n  sourceId: string\n): Promise<{ service: ServiceOffering; source: Source }> =>\n  Promise.all([\n    axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/service_offerings/${serviceOfferingId}`\n    ),\n    axiosInstance\n      .get(`${SOURCES_API_BASE}/sources/${sourceId}`)\n      .then((source) => {\n        return axiosInstance\n          .get(`${SOURCES_API_BASE}/source_types/${source.source_type_id}`)\n          .then(({ icon_url }) => ({\n            ...source,\n            icon_url\n          }));\n      })\n  ]).then(([service, source]: [ServiceOffering, Source]) => ({\n    service,\n    source\n  }));\n","import * as ActionTypes from '../action-types';\nimport * as PlatformHelper from '../../helpers/platform/platform-helper';\nimport { Dispatch } from 'redux';\nimport {\n  ServiceInventory,\n  ServiceOffering,\n  Source\n} from '@redhat-cloud-services/sources-client';\nimport { AsyncMiddlewareAction } from '../../types/redux';\nimport { ApiCollectionResponse } from '../../types/common-types';\nimport { PaginationConfiguration } from '../../helpers/shared/pagination';\n\nexport const fetchPlatforms = () => (\n  dispatch: Dispatch\n): Promise<{ type: string; payload: Source }> => {\n  dispatch({ type: `${ActionTypes.FETCH_PLATFORMS}_PENDING` });\n  return PlatformHelper.getPlatforms()\n    .then((data) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_FULFILLED`,\n        payload: data\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchPlatformItems = (\n  platformId: string,\n  filter: string,\n  options: PaginationConfiguration\n): AsyncMiddlewareAction<ApiCollectionResponse<ServiceOffering>> => ({\n  type: ActionTypes.FETCH_PLATFORM_ITEMS,\n  payload: PlatformHelper.getPlatformItems(platformId, filter, options),\n  meta: {\n    platformId,\n    filter,\n    ...options\n  }\n});\n\nexport const fetchMultiplePlatformItems = (\n  platformsId: string[]\n): {\n  type: string;\n  payload: Promise<\n    [] | { [x: string]: ApiCollectionResponse<ServiceOffering> }\n  >;\n} => {\n  const platformPromisses = platformsId.map((platformId) =>\n    PlatformHelper.getPlatformItems(platformId).then((data) => ({\n      [platformId]: data\n    }))\n  );\n  return {\n    type: ActionTypes.FETCH_MULTIPLE_PLATFORM_ITEMS,\n    payload: Promise.all(platformPromisses).then((data) =>\n      data.reduce(\n        (acc, curr) => ({\n          ...acc,\n          ...curr\n        }),\n        {}\n      )\n    )\n  };\n};\n\nexport const fetchSelectedPlatform = (\n  id: string\n): AsyncMiddlewareAction<Source> => ({\n  type: ActionTypes.FETCH_PLATFORM,\n  payload: PlatformHelper.getPlatform(id)\n});\n\nexport const fetchPlatformInventories = (\n  platformId: string,\n  filter: string,\n  options: PaginationConfiguration\n): AsyncMiddlewareAction<ApiCollectionResponse<ServiceInventory>> => ({\n  type: ActionTypes.FETCH_PLATFORM_INVENTORIES,\n  payload: PlatformHelper.getPlatformInventories(platformId, filter, options)\n});\n\nexport const fetchServiceOffering = (\n  serviceOfferingId: string,\n  sourceId: string\n): AsyncMiddlewareAction<{ service: ServiceOffering; source: Source }> => ({\n  type: ActionTypes.FETCH_SERVICE_OFFERING,\n  payload: PlatformHelper.getServiceOffering(serviceOfferingId, sourceId)\n});\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport styled from 'styled-components';\nimport { SearchIcon, CloseIcon } from '@patternfly/react-icons';\nimport { ToolbarItem, TextInput } from '@patternfly/react-core';\n\nconst FilterInputGroup = styled.div`\n  position: relative;\n  width: 300px;\n  height: 36px;\n`;\n\nconst FilterInput = styled(TextInput)`\n  position: absolute;\n  width: 300px;\n  padding-right: 34px;\n  background: transparent;\n`;\n\nconst FilterIconsContainer = styled.span`\n  position: absolute;\n  right: 8px;\n  top: 8px;\n`;\n\nconst StyledCloseIcon = styled(CloseIcon)`\n  z-index: 1000;\n  fill: #72767b;\n  :hover {\n    fill: var(--pf-global--Color--100);\n    cursor: pointer;\n  }\n`;\n\nconst StyledSearchIcon = styled(SearchIcon)`\n  z-index: 1000;\n  fill: #72767b;\n`;\n\nexport interface FilterToolbarItemProps {\n  searchValue?: string;\n  onFilterChange: (value: string) => void;\n  placeholder?: string;\n  isClearable?: boolean;\n}\nconst FilterToolbarItem: React.ComponentType<FilterToolbarItemProps> = ({\n  searchValue = '',\n  onFilterChange,\n  placeholder,\n  isClearable = false,\n  ...rest\n}) => (\n  <ToolbarItem>\n    <FilterInputGroup>\n      <FilterInput\n        id=\"toolbar-filter\"\n        placeholder={placeholder}\n        value={searchValue}\n        type=\"text\"\n        onChange={onFilterChange}\n        aria-label={placeholder}\n        {...rest}\n      />\n      <FilterIconsContainer>\n        {(isClearable && searchValue && (\n          <StyledCloseIcon\n            width=\"16\"\n            height=\"16\"\n            onClick={() => onFilterChange('')}\n          />\n        )) || <StyledSearchIcon />}\n      </FilterIconsContainer>\n    </FilterInputGroup>\n  </ToolbarItem>\n);\n\nexport default FilterToolbarItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Level,\n  LevelItem,\n  ToolbarItem,\n  ToolbarContent\n} from '@patternfly/react-core';\n\nimport FilterToolbarItem from '../presentational-components/shared/filter-toolbar-item';\nimport TopToolbar, {\n  TopToolbarTitle\n} from '../presentational-components/shared/top-toolbar';\nimport AppTabs from '../presentational-components/shared/app-tabs';\nimport CatalogLink from '../smart-components/common/catalog-link';\nimport {\n  StyledToolbar,\n  StyledToolbarGroup\n} from '../presentational-components/styled-components/toolbars';\n\nconst ToolbarButton = ({ title, ...props }) => (\n  <Button {...props}>{title}</Button>\n);\n\nToolbarButton.propTypes = {\n  title: PropTypes.string.isRequired\n};\n\nconst AppToolbar = ({ children, ...props }) => (\n  <StyledToolbar className={'pf-u-p-0'} {...props}>\n    <ToolbarContent className=\"pf-u-pl-0\">{children}</ToolbarContent>\n  </StyledToolbar>\n);\n\nAppToolbar.propTypes = {\n  noWrap: PropTypes.bool,\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node)\n  ])\n};\n\nconst toolbarMapper = {\n  TopToolbar,\n  TopToolbarTitle,\n  Toolbar: AppToolbar,\n  ToolbarGroup: StyledToolbarGroup,\n  ToolbarItem,\n  FilterToolbarItem,\n  Link: CatalogLink,\n  Level,\n  LevelItem,\n  Button: ToolbarButton,\n  AppTabs\n};\n\nexport const toolbarComponentTypes = {\n  TOP_TOOLBAR: 'TopToolbar',\n  TOP_TOOLBAR_TITLE: 'TopToolbarTitle',\n  TOOLBAR: 'Toolbar',\n  TOOLBAR_ITEM: 'ToolbarItem',\n  TOOLBAR_GROUP: 'ToolbarGroup',\n  FILTER_TOOLBAR_ITEM: 'FilterToolbarItem',\n  LINK: 'Link',\n  BUTTON: 'Button',\n  LEVEL: 'Level',\n  LEVEL_ITEM: 'LevelItem',\n  TABS: 'AppTabs'\n};\n\nexport default toolbarMapper;\n","import React, { createContext } from 'react';\nimport PropTypes from 'prop-types';\nimport toolbarMapper from './toolbar-mapper';\n\nconst ToolbarContext = createContext();\n\nconst Component = ({ component, ...props }) => (\n  <ToolbarContext.Consumer>\n    {({ componentMapper }) => {\n      const C =\n        typeof component === 'string' ? componentMapper[component] : component;\n      return <C {...props} />;\n    }}\n  </ToolbarContext.Consumer>\n);\n\nComponent.propTypes = {\n  component: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.node,\n    PropTypes.func,\n    PropTypes.element\n  ]).isRequired\n};\n\n/**\n * Render loop that renders all toolbar components based on its type\n * @param {Array} fields list of React components to be rendered\n */\nconst render = (fields) =>\n  fields.hidden\n    ? null\n    : fields.map(({ hidden, fields, key, ...field }) =>\n        hidden ? null : fields ? (\n          <Component key={key} {...field}>\n            {render(fields)}\n          </Component>\n        ) : (\n          <Component key={key} {...field} />\n        )\n      );\n\nconst ToolbarRenderer = ({ schema, componentMapper }) => (\n  <ToolbarContext.Provider value={{ render, componentMapper }}>\n    {render(schema.fields)}\n  </ToolbarContext.Provider>\n);\n\nToolbarRenderer.propTypes = {\n  schema: PropTypes.shape({\n    fields: PropTypes.array.isRequired\n  }).isRequired,\n  componentMapper: PropTypes.object\n};\n\nToolbarRenderer.defaultProps = {\n  componentMapper: toolbarMapper\n};\n\nexport default ToolbarRenderer;\n","import labelMessages from './labels.messages';\n\nimport { defineMessages } from 'react-intl';\n\nconst statesMessages = defineMessages({\n  title: {\n    id: 'common.states.title',\n    defaultMessage: 'State'\n  },\n  ordered: {\n    id: 'common.states.ordered',\n    defaultMessage: 'Ordered'\n  },\n  approvalPending: {\n    id: 'common.states.approval-pending',\n    defaultMessage: 'Approval Pending'\n  },\n  canceled: {\n    id: 'common.states.canceled',\n    defaultMessage: 'Canceled'\n  },\n  completed: {\n    id: 'common.states.completed',\n    defaultMessage: 'Completed'\n  },\n  failed: {\n    id: 'common.states.failed',\n    defaultMessage: 'Failed'\n  },\n  undecided: {\n    id: 'common.states.undecided',\n    defaultMessage: 'Undecided'\n  },\n  approved: {\n    id: 'common.states.approved',\n    defaultMessage: 'Approved'\n  },\n  denied: {\n    id: 'common.states.denied',\n    defaultMessage: 'Denied'\n  },\n  error: {\n    id: 'common.states.error',\n    defaultMessage: 'Error'\n  },\n  pending: {\n    id: 'common.states.pending',\n    defaultMessage: 'Pending'\n  },\n  skipped: {\n    id: 'common.states.skipped',\n    defaultMessage: 'Skipped'\n  },\n  started: {\n    id: 'common.states.started',\n    defaultMessage: 'Started'\n  },\n  notified: {\n    id: 'common.states.notified',\n    defaultMessage: 'Notified'\n  }\n});\n\nexport const getTranslatableState = (\n  state: string\n): keyof typeof statesMessages =>\n  state\n    .replace(/\\s/g, '')\n    .replace(/^./, (char) => char.toLowerCase()) as keyof typeof statesMessages;\n\n/**\n * We must include the created state so the dynamic data from DB can look for these messages in one place\n * The created message is shared among other components and is just a state message\n */\nexport default { ...statesMessages, created: labelMessages.created };\n","// TODO migrate whole order-helper.js to TS\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  Order,\n  OrderItem,\n  PortfolioItem,\n  Portfolio,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\nimport { Source } from '@redhat-cloud-services/sources-client';\nimport { getAxiosInstance } from '../shared/user-login';\nimport { CATALOG_API_BASE, SOURCES_API_BASE } from '../../utilities/constants';\nconst axiosInstance = getAxiosInstance();\n\nexport interface ObjectNotFound {\n  object: 'Order item' | 'Product' | 'Portfolio' | 'Messages' | 'Platform';\n  notFound: boolean;\n}\n\nexport type OrderDetailPayload = [\n  Order,\n  OrderItem | ObjectNotFound,\n  PortfolioItem | ObjectNotFound,\n  Source | ObjectNotFound,\n  ProgressMessage | ObjectNotFound,\n  Portfolio | ObjectNotFound\n];\n\nexport const fetchOrderDetailSequence = async (\n  orderId: string\n): Promise<OrderDetailPayload> => {\n  let order: Order;\n  try {\n    order = await axiosInstance.get(`${CATALOG_API_BASE}/orders/${orderId}`);\n  } catch (error) {\n    order = {};\n    if (error.status === 404 || error.status === 400) {\n      catalogHistory.replace({\n        pathname: '/404',\n        state: { from: catalogHistory.location }\n      });\n    } else {\n      throw error;\n    }\n  }\n\n  let orderItem: OrderItem | ObjectNotFound = {\n    object: 'Order item',\n    notFound: true\n  };\n  try {\n    const orderItems = await axiosInstance.get(\n      `${CATALOG_API_BASE}/order_items?order_id=${order.id}`\n    );\n    orderItem = orderItems.data[0];\n  } catch (_error) {\n    // no handler\n  }\n\n  let portfolioItem: PortfolioItem | ObjectNotFound = {\n    object: 'Product',\n    notFound: true\n  };\n\n  try {\n    portfolioItem = await axiosInstance.get(\n      `${CATALOG_API_BASE}/portfolio_items/${\n        (orderItem as OrderItem).portfolio_item_id\n      }`\n    );\n  } catch (_error) {\n    // nohandler\n  }\n\n  const parallerRequests = [\n    axiosInstance\n      .get(\n        `${SOURCES_API_BASE}/sources/${\n          (portfolioItem as PortfolioItem).service_offering_source_ref\n        }`\n      )\n      .catch(() => ({ object: 'Platform', notFound: true })),\n\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/order_items/${\n          (orderItem as OrderItem).id\n        }/progress_messages`\n      )\n      .catch(() => ({ object: 'Messages', notFound: true })),\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/portfolios/${\n          (portfolioItem as PortfolioItem).portfolio_id\n        }`\n      )\n      .catch(() => ({ object: 'Portfolio', notFound: true }))\n  ];\n\n  return Promise.all(\n    parallerRequests\n  ).then(([platform, progressMessages, portfolio]) => [\n    order,\n    orderItem,\n    portfolioItem,\n    platform as Source | ObjectNotFound,\n    progressMessages as ProgressMessage | ObjectNotFound,\n    portfolio as Portfolio | ObjectNotFound\n  ]);\n};\n","/* eslint camelcase: 0 */\nimport {\n  getAxiosInstance,\n  getPortfolioItemApi,\n  getOrderApi,\n  getOrderItemApi,\n  getGraphqlInstance\n} from '../shared/user-login';\nimport {\n  CATALOG_API_BASE,\n  SOURCES_API_BASE,\n  APPROVAL_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  fetchOrderDetailSequence,\n  OrderDetailPayload\n} from './new-order-helper';\nimport {\n  ApiCollectionResponse,\n  ApiMetadata,\n  EnhancedOrder,\n  Full\n} from '../../types/common-types';\nimport {\n  ServicePlan,\n  Order,\n  OrderItem,\n  PortfolioItem,\n  ApprovalRequest\n} from '@redhat-cloud-services/catalog-client';\nimport { AxiosPromise } from 'axios';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\nimport { Request, Action } from '@redhat-cloud-services/approval-client';\n\nconst orderApi = getOrderApi();\nconst orderItemApi = getOrderItemApi();\nconst portfolioItemApi = getPortfolioItemApi();\nconst axiosInstance = getAxiosInstance();\nconst graphqlInstance = getGraphqlInstance();\n\nexport const getServicePlans = (\n  portfolioItemId: string\n): Promise<ApiCollectionResponse<ServicePlan>> =>\n  (portfolioItemApi.listServicePlans(portfolioItemId) as unknown) as Promise<\n    ApiCollectionResponse<ServicePlan>\n  >;\n\nexport const sendSubmitOrder = async ({\n  service_parameters: { providerControlParameters, ...service_parameters },\n  ...parameters\n}: AnyObject): Promise<EnhancedOrder> => {\n  const order: Order = ((await orderApi.createOrder()) as unknown) as Order;\n  let orderItem: Partial<OrderItem> = {};\n  orderItem.count = 1;\n  orderItem = {\n    ...orderItem,\n    ...parameters,\n    service_parameters,\n    provider_control_parameters: providerControlParameters || {}\n  };\n  const orderItemResponse = await orderApi.addToOrder(\n    order.id as string,\n    orderItem as OrderItem\n  );\n  return orderApi.submitOrder(order.id as string).then((order) => ({\n    ...order,\n    orderItem: (orderItemResponse as unknown) as OrderItem\n  }));\n};\n\nexport const cancelOrder = (orderId: string): AxiosPromise<Order> =>\n  orderApi.cancelOrder(orderId);\n\nconst getOrderItems = (\n  orderIds: string[]\n): Promise<ApiCollectionResponse<OrderItem>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/order_items?${orderIds\n      .map((orderId) => `filter[order_id][]=${orderId}`)\n      .join('&')}`\n  );\n\nconst getOrderPortfolioItems = (\n  itemIds: string[]\n): Promise<ApiCollectionResponse<PortfolioItem>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolio_items?${itemIds\n      .map((itemId) => `filter[id][]=${itemId}`)\n      .join('&')}`\n  );\n\nexport const getOrders = (\n  filter = '',\n  pagination = defaultSettings\n): Promise<{\n  data: (Order & { orderItems: OrderItem[] })[];\n  portfolioItems: ApiCollectionResponse<PortfolioItem>;\n  meta: ApiMetadata;\n}> =>\n  axiosInstance\n    .get(\n      `${CATALOG_API_BASE}/orders?${filter}&limit=${pagination.limit}&offset=${pagination.offset}`\n    ) // eslint-disable-line max-len\n    .then((orders: ApiCollectionResponse<Full<Order>>) =>\n      getOrderItems(orders.data.map(({ id }) => id)).then((orderItems) =>\n        getOrderPortfolioItems(\n          orderItems.data.map(({ portfolio_item_id }) => portfolio_item_id)\n        ).then((portfolioItems) => {\n          return {\n            portfolioItems,\n            ...orders,\n            data: orders.data.map((order) => ({\n              ...order,\n              orderItems: orderItems.data.filter(\n                ({ order_id }) => order_id === order.id\n              )\n            }))\n          };\n        })\n      )\n    );\n\nexport const getOrderApprovalRequests = (\n  orderItemId: string\n): Promise<ApiCollectionResponse<Request>> =>\n  (orderItemApi.listApprovalRequests(orderItemId) as unknown) as Promise<\n    ApiCollectionResponse<Request>\n  >;\n\nexport interface GetOrderDetailParams {\n  order: string;\n  'order-item'?: string;\n  'portfolio-item'?: string;\n  platform?: string;\n  portfolio?: string;\n}\nexport const getOrderDetail = (\n  params: GetOrderDetailParams\n): Promise<OrderDetailPayload> => {\n  if (Object.values(params).some((value) => !value)) {\n    /**\n     * Try to fetch data sequentially if any of the parameters is unknow\n     */\n    return fetchOrderDetailSequence(params.order);\n  }\n\n  const detailPromises = [\n    (axiosInstance\n      .get(`${CATALOG_API_BASE}/orders/${params.order}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return catalogHistory.replace({\n            pathname: '/404',\n            state: { from: catalogHistory.location }\n          });\n        }\n\n        throw error;\n      }) as unknown) as Promise<Order>,\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/order_items/${params['order-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Order item',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/portfolio_items/${params['portfolio-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Product',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${SOURCES_API_BASE}/sources/${params.platform}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Platform',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/order_items/${params['order-item']}/progress_messages`\n      )\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {};\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/portfolios/${params.portfolio}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Portfolio',\n            notFound: true\n          };\n        }\n\n        throw error;\n      })\n  ];\n\n  return (Promise.all(detailPromises) as unknown) as Promise<\n    OrderDetailPayload\n  >;\n};\n\nconst APPROVAL_REQUESTER_PERSONA = 'approval/requester';\nexport interface RequestTranscript extends Full<Request> {\n  actions: Action[];\n}\nconst requestTranscriptQuery = (parent_id: string) => `query {\n  requests(id: \"${parent_id}\") {\n    id\n    number_of_children\n    decision\n    group_name\n    created_at\n    state\n    actions {\n      id\n      created_at\n    }\n    requests {\n      id\n      number_of_children\n      decision\n      group_name\n      state\n      parent_id\n      created_at\n      actions {\n        id\n        created_at\n      }\n    }\n  }\n}`;\nconst fetchRequestTranscript = (\n  requestId: string\n): Promise<RequestTranscript[]> =>\n  graphqlInstance\n    .post(\n      `${APPROVAL_API_BASE}/graphql`,\n      { query: requestTranscriptQuery(requestId) },\n      { 'x-rh-persona': APPROVAL_REQUESTER_PERSONA }\n    )\n    .then(({ data: { requests } }) => {\n      return requests &&\n        requests.length > 0 &&\n        requests[0].number_of_children > 0\n        ? requests[0].requests\n        : requests;\n    });\n\nexport const getApprovalRequests = (\n  orderItemId: string\n): Promise<{\n  data: { group_name: string; state: string; updated?: string }[];\n}> =>\n  axiosInstance\n    .get(`${CATALOG_API_BASE}/order_items/${orderItemId}/approval_requests`)\n    .then(({ data }: { data: Full<ApprovalRequest>[] }) => {\n      const promises = data.map(({ approval_request_ref }) =>\n        fetchRequestTranscript(approval_request_ref)\n      );\n      return Promise.all(promises).then((requests) => {\n        const data = requests?.[0]?.map(({ actions, ...request }) => ({\n          ...request,\n          updated:\n            actions?.length > 0 ? actions.pop()?.created_at : request.created_at\n        }));\n        return { data: data || [] };\n      });\n    });\n","import React, { ComponentType, ReactElement, ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport { ORDER_ROUTE } from '../../constants/routes';\nimport ordersMessages from '../../messages/orders.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport { Dispatch } from 'redux';\n\nexport interface OrderNotificationProps {\n  id: string;\n  dispatch: Dispatch;\n  portfolioItemId: string;\n  portfolioId: string;\n  platformId: string;\n  orderItemId: string;\n}\n\nconst OrderNotification: ComponentType<OrderNotificationProps> = ({\n  id,\n  dispatch,\n  portfolioItemId,\n  portfolioId,\n  platformId,\n  orderItemId\n}) => {\n  const formatMessage = useFormatMessage();\n  return formatMessage(ordersMessages.orderSuccess, {\n    id,\n    // eslint-disable-next-line react/display-name\n    link: (chunks: ReactNode | ReactNode[]) => (\n      <Link\n        onClick={() => dispatch(clearNotifications())}\n        to={{\n          pathname: ORDER_ROUTE,\n          search: `?order=${id}&order-item=${orderItemId}&portfolio-item=${portfolioItemId}&platform=${platformId}&portfolio=${portfolioId}`\n        }}\n      >\n        {chunks}\n      </Link>\n    )\n  }) as ReactElement;\n};\n\nexport default OrderNotification;\n","import React from 'react';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\n\nimport * as ActionTypes from '../action-types';\nimport * as OrderHelper from '../../helpers/order/order-helper';\nimport OrderNotification from '../../presentational-components/order/order-notification';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport {\n  ApprovalRequestStateEnum,\n  Order,\n  OrderItem,\n  OrderStateEnum,\n  Portfolio,\n  PortfolioItem,\n  ProgressMessage,\n  ServicePlan\n} from '@redhat-cloud-services/catalog-client';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\nimport { Dispatch } from 'redux';\nimport {\n  Full,\n  StringObject,\n  ReduxAction,\n  ApiCollectionResponse\n} from '../../types/common-types';\nimport { AsyncMiddlewareAction, GetReduxState } from '../../types/redux';\nimport { Source } from '@redhat-cloud-services/sources-client';\nimport { ObjectNotFound } from '../../helpers/order/new-order-helper';\n\nexport const fetchServicePlans = (\n  portfolioItemId: string\n): AsyncMiddlewareAction<ApiCollectionResponse<ServicePlan>> => ({\n  type: ActionTypes.FETCH_SERVICE_PLANS,\n  payload: OrderHelper.getServicePlans(portfolioItemId)\n});\n\nexport const setSelectedPlan = (\n  data: ServicePlan\n): ReduxAction<ServicePlan> => ({\n  type: ActionTypes.SET_SELECTED_PLAN,\n  payload: data\n});\n\nexport const sendSubmitOrder = (\n  apiProps: AnyObject,\n  portfolioItem: Full<PortfolioItem>\n) => (dispatch: Dispatch): AsyncMiddlewareAction =>\n  dispatch({\n    type: ActionTypes.SUBMIT_SERVICE_ORDER,\n    payload: OrderHelper.sendSubmitOrder(apiProps).then(({ id, orderItem }) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been accepted successfully',\n          description: (\n            <OrderNotification\n              id={id!}\n              dispatch={dispatch}\n              portfolioItemId={portfolioItem.id}\n              portfolioId={portfolioItem.portfolio_id}\n              platformId={portfolioItem.service_offering_source_ref}\n              orderItemId={orderItem.id!}\n            />\n          ),\n          dismissable: true\n        })\n      )\n    )\n  });\n\nexport const cancelOrder = (orderId: string) => (\n  dispatch: Dispatch,\n  getState: GetReduxState\n): Promise<void | { type: string }> => {\n  dispatch({ type: `${ActionTypes.CANCEL_ORDER}_PENDING` });\n  const {\n    orderReducer: { orderDetail }\n  } = getState();\n  return OrderHelper.cancelOrder(orderId)\n    .then(() => {\n      orderDetail.order.state = OrderStateEnum.Canceled;\n      if (\n        orderDetail.approvalRequest &&\n        orderDetail.approvalRequest.data.length > 0\n      ) {\n        orderDetail.approvalRequest.data[0].state = 'canceled' as ApprovalRequestStateEnum;\n      }\n\n      dispatch({\n        type: ActionTypes.SET_ORDER_DETAIL,\n        payload: { ...orderDetail }\n      });\n      return orderDetail;\n    })\n    .then((orderDetail) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been canceled successfully',\n          description: `Order ${`Order #${orderDetail.order.id}`} was canceled.`,\n          dismissable: true\n        })\n      )\n    )\n    .then(() => dispatch({ type: `${ActionTypes.CANCEL_ORDER}_FULFILLED` }))\n    .catch((error) => {\n      dispatch({\n        type: `${ActionTypes.CANCEL_ORDER}_REJECTED`,\n        payload: error\n      });\n    });\n};\n\nexport const fetchOrders = (\n  filters: StringObject,\n  pagination = defaultSettings\n) => (dispatch: Dispatch): Promise<ReduxAction> => {\n  let queryFilter = Object.entries(filters)\n    .filter(([, value]) => value && value.length > 0)\n    .map(([key, value]) =>\n      Array.isArray(value)\n        ? value.map((value) => `filter[${key}][]=${value}`).join('&')\n        : `filter[${key}][contains_i]=${value}`\n    )\n    .join('&');\n  if (pagination.sortBy) {\n    queryFilter = `${queryFilter}&sort_by=${\n      pagination.sortBy\n    }:${pagination.sortDirection || 'desc'}`;\n  }\n\n  dispatch({ type: `${ActionTypes.FETCH_ORDERS}_PENDING` });\n  return OrderHelper.getOrders(queryFilter, pagination)\n    .then(({ portfolioItems, ...orders }) => {\n      dispatch({\n        type: ActionTypes.SET_PORTFOLIO_ITEMS,\n        payload: portfolioItems\n      });\n      return dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_FULFILLED`,\n        meta: {\n          ...pagination,\n          filter: queryFilter,\n          filters,\n          storeState: true,\n          stateKey: 'orders'\n        },\n        payload: orders\n      });\n    })\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchOrderDetails = (params: OrderHelper.GetOrderDetailParams) => (\n  dispatch: Dispatch\n): Promise<{\n  type: string;\n  payload: {\n    order: Order | ObjectNotFound;\n    orderItem: OrderItem | ObjectNotFound;\n    portfolioItem: PortfolioItem | ObjectNotFound;\n    platform: Source | ObjectNotFound;\n    progressMessages: ProgressMessage | ObjectNotFound;\n    portfolio: Portfolio | ObjectNotFound;\n  };\n}> => {\n  dispatch({ type: `${ActionTypes.SET_ORDER_DETAIL}_PENDING` });\n  return OrderHelper.getOrderDetail(params)\n    .then(\n      ([\n        order,\n        orderItem,\n        portfolioItem,\n        platform,\n        progressMessages,\n        portfolio\n      ]) =>\n        dispatch({\n          type: `${ActionTypes.SET_ORDER_DETAIL}_FULFILLED`,\n          payload: {\n            order,\n            orderItem,\n            portfolioItem,\n            platform,\n            progressMessages,\n            portfolio\n          }\n        })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_DETAIL}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchApprovalRequests = (orderItemId: string) => (\n  dispatch: Dispatch\n): Promise<\n  | {\n      data: {\n        group_name: string;\n        state: string;\n        updated?: string | undefined;\n      }[];\n    }\n  | { type: string; payload: any } /** the action in catch branch */\n> => {\n  dispatch({ type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_PENDING` });\n  return OrderHelper.getApprovalRequests(orderItemId)\n    .then((data) => {\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_FULFILLED`,\n        payload: data\n      });\n      return data;\n    })\n    .catch((err) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_REJECTED`,\n        payload: err\n      })\n    );\n};\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { Tabs, Tab } from '@patternfly/react-core';\nimport { useLocation } from 'react-router-dom';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\n\nexport interface AppTabsProps {\n  tabItems: {\n    name: string;\n    eventKey: number;\n    title: string;\n    disabled?: boolean;\n  }[];\n}\nconst AppTabs: React.ComponentType<AppTabsProps> = ({ tabItems }) => {\n  const { push } = useEnhancedHistory();\n  const { pathname, search } = useLocation();\n  const activeTab = tabItems.find(({ name }) => pathname.includes(name));\n  const handleTabClick = (\n    _event: React.MouseEvent<HTMLElement, MouseEvent>,\n    tabIndex: number | string\n  ) => push({ pathname: tabItems[tabIndex as number].name, search });\n\n  return (\n    <Tabs\n      activeKey={activeTab ? activeTab.eventKey : 0}\n      onSelect={handleTabClick}\n    >\n      {tabItems.map((item) => (\n        <Tab\n          title={item.title}\n          key={item.eventKey}\n          eventKey={item.eventKey}\n          name={item.name}\n          disabled={item.disabled}\n        />\n      ))}\n    </Tabs>\n  );\n};\n\nexport default AppTabs;\n","import React, { ReactNode } from 'react';\nimport {\n  ExclamationCircleIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  ClockIcon,\n  PlusCircleIcon\n} from '@patternfly/react-icons';\n\nconst orderStatusMapper: {\n  Completed: { icon: ReactNode; color: 'green' };\n  Ordered: { icon: ReactNode; color: 'grey' };\n  Failed: { icon: ReactNode; color: 'red' };\n  Canceled: { icon: ReactNode; color: 'orange' };\n  Created: { icon: ReactNode; color: 'grey' };\n  'Approval Pending': { icon: ReactNode; color: 'blue' };\n} = {\n  Completed: { icon: <CheckCircleIcon />, color: 'green' },\n  'Approval Pending': {\n    icon: <ClockIcon />,\n    color: 'blue'\n  },\n  Ordered: { icon: <PlusCircleIcon />, color: 'grey' },\n  Failed: { icon: <ExclamationCircleIcon />, color: 'red' },\n  Canceled: { icon: <ExclamationTriangleIcon />, color: 'orange' },\n  Created: { icon: <PlusCircleIcon />, color: 'grey' }\n};\n\nexport default orderStatusMapper;\n","import { toolbarComponentTypes } from '../toolbar-mapper';\n\nconst createOrdersToolbarSchema = () => ({\n  fields: [\n    {\n      component: toolbarComponentTypes.TOP_TOOLBAR,\n      className: 'orders pf-u-p-lg',\n      key: 'orders-toolbar',\n      fields: [\n        {\n          component: toolbarComponentTypes.TOP_TOOLBAR_TITLE,\n          key: 'orders-toolbar-title',\n          title: 'Orders',\n          className: ''\n        }\n      ]\n    }\n  ]\n});\n\nexport default createOrdersToolbarSchema;\n","import React, { Fragment } from 'react';\nimport { Label, Text, TextVariants } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\n\nimport CardIcon from '../../presentational-components/shared/card-icon';\nimport { getOrderIcon } from '../../helpers/shared/orders';\nimport CatalogLink from '../common/catalog-link';\nimport { ORDER_ROUTE } from '../../constants/routes';\nimport statesMessages, {\n  getTranslatableState\n} from '../../messages/states.messages';\n\nimport { TableText } from '@patternfly/react-table';\nimport orderStatusMapper from './order-status-mapper';\n\n/**\n * Create order row definition for react tabular table\n * @param {Object} item order object\n * @param {Object} orderPlatform order source data\n * @param {Object} orderPortfolio order portfolio data\n * @param {function} formatMessage translation function\n */\nconst createOrderItem = (\n  item,\n  orderPlatform,\n  orderPortfolio,\n  formatMessage\n) => {\n  const orderItem = (item.orderItems[0] && item.orderItems[0]) || {};\n  const searchParams = {\n    order: item.id,\n    ...(orderItem.id ? { 'order-item': orderItem.id } : {}),\n    ...(orderItem.portfolio_item_id\n      ? { 'portfolio-item': orderItem.portfolio_item_id }\n      : {}),\n    ...(orderPlatform ? { platform: orderPlatform } : {}),\n    ...(orderPortfolio ? { portfolio: orderPortfolio } : {})\n  };\n  const translatableState = getTranslatableState(item.state);\n  return [\n    {\n      title: (\n        <TableText>\n          <CatalogLink pathname={ORDER_ROUTE} searchParams={searchParams}>\n            {item.id}\n          </CatalogLink>\n        </TableText>\n      )\n    },\n    {\n      title: (\n        <Fragment>\n          <CardIcon\n            height={60}\n            src={getOrderIcon(item)}\n            sourceId={orderPlatform}\n          />\n        </Fragment>\n      )\n    },\n    item.orderName,\n    item.owner,\n    {\n      title: (\n        <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n          <DateFormat date={item.created_at} variant=\"relative\" />\n        </Text>\n      )\n    },\n    {\n      title: (\n        <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n          <DateFormat\n            date={item.orderItems[0] && item.orderItems[0].updated_at}\n            variant=\"relative\"\n          />\n        </Text>\n      )\n    },\n    {\n      title: (\n        <TableText>\n          <Label {...orderStatusMapper[item.state]} variant=\"outline\">\n            {formatMessage(statesMessages[translatableState])}\n          </Label>\n        </TableText>\n      )\n    }\n  ];\n};\n\nexport default createOrderItem;\n","import { CATALOG_API_BASE } from '../../utilities/constants';\nimport {\n  OrderItem,\n  PortfolioItem\n} from '@redhat-cloud-services/catalog-client';\nimport { Full } from '../../types/common-types';\n\nexport const getOrderIcon = ({\n  orderItems\n}: {\n  orderItems: OrderItem[];\n}): string | undefined =>\n  orderItems[0] &&\n  `${CATALOG_API_BASE}/portfolio_items/${orderItems[0].portfolio_item_id}/icon`;\n\nexport const getOrderPortfolioName = (\n  { orderItems, id }: { orderItems: OrderItem[]; id: string },\n  portfolioItems: Full<PortfolioItem>[]\n): string => {\n  const portfolioItem =\n    orderItems[0] &&\n    portfolioItems.find(({ id }) => orderItems[0].portfolio_item_id === id);\n  return portfolioItem ? portfolioItem.name : `Order ${id}`;\n};\n\nexport const getOrderPlatformId = (\n  { orderItems }: { orderItems: OrderItem[] },\n  portfolioItems: Full<PortfolioItem>[]\n):\n  | {\n      orderPlatform: string;\n      orderPortfolio: string;\n    }\n  | Record<string, unknown> => {\n  const portfolioItem =\n    orderItems[0] &&\n    portfolioItems.find(({ id }) => orderItems[0].portfolio_item_id === id);\n  return portfolioItem\n    ? {\n        orderPlatform: portfolioItem.service_offering_source_ref,\n        orderPortfolio: portfolioItem.portfolio_id\n      }\n    : {};\n};\n","import React, { useEffect, useReducer } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Grid,\n  GridItem,\n  Title,\n  Bullseye,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Flex,\n  EmptyStateSecondaryActions,\n  Button\n} from '@patternfly/react-core';\nimport { Section } from '@redhat-cloud-services/frontend-components/components/cjs/Section';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/components/cjs/EmptyTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/TableToolbar';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection\n} from '@patternfly/react-table';\n\nimport { fetchOrders } from '../../redux/actions/order-actions';\nimport { fetchPlatforms } from '../../redux/actions/platform-actions';\nimport { ListLoader } from '../../presentational-components/shared/loader-placeholders';\nimport createOrderItem from './order-item';\nimport AsyncPagination from '../common/async-pagination';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport useInitialUriHash from '../../routing/use-initial-uri-hash';\nimport statesMessages from '../../messages/states.messages';\nimport filteringMessages from '../../messages/filtering.messages';\nimport ordersMessages from '../../messages/orders.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport {\n  getOrderPlatformId,\n  getOrderPortfolioName\n} from '../../helpers/shared/orders';\n\nconst debouncedFilter = asyncFormValidator(\n  (filters, meta = defaultSettings, dispatch, filteringCallback) => {\n    filteringCallback(true);\n    dispatch(fetchOrders(filters, meta)).then(() => filteringCallback(false));\n  },\n  1000\n);\n\nconst initialState = {\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false,\n  filterType: 'state',\n  filters: {\n    state: [],\n    owner: ''\n  },\n  sortBy: {\n    index: 0,\n    direction: SortByDirection.desc\n  }\n};\n\nconst changeFilters = (value, type, filters) => ({\n  ...filters,\n  [type]: value\n});\n\nconst ordersListState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return {\n        ...state,\n        filters: changeFilters(action.payload, state.filterType, state.filters)\n      };\n    case 'replaceFilterChip':\n      return { ...state, filters: action.payload };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    case 'setFilterType':\n      return { ...state, filterType: action.payload };\n    case 'setSortBy':\n      return { ...state, sortBy: action.payload, isFetching: true };\n  }\n\n  return state;\n};\n\nconst sortIndexMapper = {\n  0: 'id',\n  3: 'owner',\n  4: 'created_at',\n  6: 'state'\n};\n\nconst OrdersList = () => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const viewState = useInitialUriHash();\n  const [\n    { isFetching, isFiltering, filterType, filters, sortBy },\n    stateDispatch\n  ] = useReducer(ordersListState, {\n    ...initialState,\n    filters: viewState?.orders?.filters || { state: [], owner: '' },\n    sortBy: {\n      direction: viewState?.orders?.sortDirection || SortByDirection.desc,\n      index: viewState?.orders?.sortIndex || 0\n    }\n  });\n  const { data, meta } = useSelector(({ orderReducer }) => orderReducer.orders);\n  const columns = [\n    { title: formatMessage(ordersMessages.orderID) },\n    formatMessage(labelMessages.product),\n    '', // need empty row column to correctly aling product names after the icon column\n    {\n      title: formatMessage(ordersMessages.orderedByLabel)\n    },\n    { title: formatMessage(ordersMessages.orderDate) },\n    formatMessage(labelMessages.updated),\n    { title: formatMessage(labelMessages.status) }\n  ].map((column) =>\n    typeof column === 'object' &&\n    !isFetching &&\n    !isFiltering &&\n    data.length !== 0\n      ? { ...column, transforms: [sortable] }\n      : column\n  );\n  const portfolioItems = useSelector(\n    ({\n      portfolioReducer: {\n        portfolioItems: { data }\n      }\n    }) => data\n  );\n  const onSort = (_e, index, direction) => {\n    stateDispatch({\n      type: 'setSortBy',\n      payload: { index, direction }\n    });\n    return dispatch(\n      fetchOrders(filters, {\n        ...meta,\n        sortBy: sortIndexMapper[index],\n        sortDirection: direction,\n        sortIndex: index\n      })\n    ).then(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  const rows = data.map((item) => {\n    const { orderPlatform, orderPortfolio } = getOrderPlatformId(\n      item,\n      portfolioItems\n    );\n    const orderName = getOrderPortfolioName(item, portfolioItems);\n    return createOrderItem(\n      { ...item, orderName },\n      orderPlatform,\n      orderPortfolio,\n      formatMessage\n    );\n  });\n\n  useEffect(() => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    Promise.all([\n      dispatch(fetchOrders(filters, viewState?.orders)),\n      dispatch(fetchPlatforms())\n    ]).then(() => stateDispatch({ type: 'setFetching', payload: false }));\n  }, []);\n\n  const handlePagination = (_apiProps, pagination) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    return dispatch(\n      fetchOrders(filters, {\n        ...pagination,\n        sortBy: sortIndexMapper[sortBy.index],\n        sortDirection: sortBy.direction,\n        sortIndex: sortBy.index\n      })\n    )\n      .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n      .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  const handleFilterItems = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      { ...filters, [filterType]: value },\n      {\n        ...meta,\n        sortBy: sortIndexMapper[sortBy.index],\n        sortDirection: sortBy.direction,\n        sortIndex: sortBy.index,\n        offset: 0\n      },\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering })\n    );\n  };\n\n  const handleClearAll = () => {\n    stateDispatch({\n      type: 'replaceFilterChip',\n      payload: initialState.filters\n    });\n    return debouncedFilter(\n      initialState.filters,\n      {\n        ...meta,\n        sortBy: sortIndexMapper[sortBy.index],\n        sortDirection: sortBy.direction,\n        sortIndex: sortBy.index\n      },\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({\n          type: 'setFilteringFlag',\n          payload: isFiltering\n        })\n    );\n  };\n\n  return (\n    <Grid hasGutter>\n      <GridItem>\n        <Section type=\"content\">\n          {!meta.noData && (\n            <PrimaryToolbar\n              activeFiltersConfig={{\n                filters: Object.entries(filters)\n                  .filter(([, value]) => value && value.length > 0)\n                  .map(([key, value]) => ({\n                    category: key,\n                    type: key,\n                    chips: Array.isArray(value)\n                      ? value.map((name) => ({ name }))\n                      : [{ name: value }]\n                  })),\n                onDelete: (_e, [chip], clearAll) => {\n                  if (clearAll) {\n                    return handleClearAll();\n                  }\n\n                  const newFilters = { ...filters };\n                  if (chip.type === 'state') {\n                    newFilters[chip.type] = newFilters[chip.type].filter(\n                      (value) => value !== chip.chips[0].name\n                    );\n                  } else {\n                    newFilters[chip.type] = '';\n                  }\n\n                  stateDispatch({\n                    type: 'replaceFilterChip',\n                    payload: newFilters\n                  });\n                  debouncedFilter(newFilters, meta, dispatch, (isFiltering) =>\n                    stateDispatch({\n                      type: 'setFilteringFlag',\n                      payload: isFiltering\n                    })\n                  );\n                }\n              }}\n              filterConfig={{\n                onChange: (_e, value) =>\n                  stateDispatch({ type: 'setFilterType', payload: value }),\n                value: filterType,\n                items: [\n                  {\n                    filterValues: {\n                      items: [\n                        {\n                          value: 'Approval Pending',\n                          label: formatMessage(statesMessages.approvalPending)\n                        },\n                        {\n                          value: 'Canceled',\n                          label: formatMessage(statesMessages.canceled)\n                        },\n                        {\n                          value: 'Completed',\n                          label: formatMessage(statesMessages.completed)\n                        },\n                        {\n                          value: 'Created',\n                          label: formatMessage(labelMessages.created)\n                        },\n                        {\n                          value: 'Failed',\n                          label: formatMessage(statesMessages.failed)\n                        },\n                        {\n                          value: 'Ordered',\n                          label: formatMessage(statesMessages.ordered)\n                        }\n                      ],\n                      value: filters.state,\n                      onChange: (_e, value) => handleFilterItems(value)\n                    },\n                    label: 'State',\n                    value: 'state',\n                    type: 'checkbox'\n                  },\n                  {\n                    filterValues: {\n                      value: filters.owner,\n                      onChange: (_e, value) => handleFilterItems(value)\n                    },\n                    label: 'Owner',\n                    value: 'owner'\n                  }\n                ]\n              }}\n              pagination={\n                <AsyncPagination\n                  isDisabled={isFetching || isFiltering}\n                  apiRequest={handlePagination}\n                  meta={meta}\n                  isCompact\n                />\n              }\n            />\n          )}\n          <Table\n            aria-label=\"orders\"\n            {...(!(isFetching || isFiltering) && data.length === 0\n              ? {}\n              : { sortBy, onSort })}\n            cells={columns}\n            rows={isFetching || isFiltering ? [] : rows}\n            className=\"orders-table\"\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {!(isFetching || isFiltering) && data.length === 0 && (\n            <EmptyTable>\n              <Bullseye>\n                <EmptyState>\n                  <Bullseye>\n                    <EmptyStateIcon icon={SearchIcon} />\n                  </Bullseye>\n                  <Title headingLevel=\"h1\" size=\"lg\">\n                    {meta.noData\n                      ? formatMessage(ordersMessages.noOrdersTitle)\n                      : formatMessage(filteringMessages.noResults)}\n                  </Title>\n                  <EmptyStateBody>\n                    {meta.noData\n                      ? formatMessage(ordersMessages.noOrdersDescription)\n                      : formatMessage(filteringMessages.noResultsDescription)}\n                  </EmptyStateBody>\n                  {!meta.noData && (\n                    <EmptyStateSecondaryActions>\n                      <Button variant=\"link\" onClick={handleClearAll}>\n                        {formatMessage(filteringMessages.clearFilters)}\n                      </Button>\n                    </EmptyStateSecondaryActions>\n                  )}\n                </EmptyState>\n              </Bullseye>\n            </EmptyTable>\n          )}\n          {(isFetching || isFiltering) && <ListLoader />}\n          <TableToolbar className=\"pf-u-mr-0\">\n            <div className=\"bottom-pagination-container\">\n              <Flex justifyContent={{ default: 'justifyContentFlexEnd' }}>\n                {meta.count > 0 && (\n                  <AsyncPagination\n                    className=\"pf-u-mt-0\"\n                    isDisabled={isFetching || isFiltering}\n                    apiRequest={handlePagination}\n                    meta={meta}\n                  />\n                )}\n              </Flex>\n            </div>\n          </TableToolbar>\n        </Section>\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default OrdersList;\n","import React, { useEffect } from 'react';\nimport { Stack } from '@patternfly/react-core';\n\nimport ToolbarRenderer from '../../toolbar/toolbar-renderer';\nimport createOrdersToolbarSchema from '../../toolbar/schemas/orders-toolbar.schema';\nimport OrdersList from './orders-list';\n\nconst Orders = () => {\n  useEffect(() => {\n    insights.chrome.appNavClick({ id: 'orders', secondaryNav: true });\n  }, []);\n\n  return (\n    <Stack>\n      <ToolbarRenderer schema={createOrdersToolbarSchema()} />\n      <OrdersList />\n    </Stack>\n  );\n};\n\nexport default Orders;\n"],"sourceRoot":""}