{"version":3,"sources":["webpack:///./src/messages/filtering.messages.ts","webpack:///./src/presentational-components/shared/filter-toolbar-item.tsx","webpack:///./src/toolbar/toolbar-mapper.tsx","webpack:///./src/toolbar/toolbar-renderer.tsx","webpack:///./src/messages/orders.messages.ts","webpack:///./src/presentational-components/shared/app-tabs.tsx","webpack:///./src/messages/states.messages.ts","webpack:///./src/helpers/order/new-order-helper.ts","webpack:///./src/helpers/order/order-helper.ts","webpack:///./src/presentational-components/order/order-notification.tsx","webpack:///./src/redux/actions/order-actions.tsx","webpack:///./src/smart-components/order/order-status-mapper.tsx","webpack:///./src/toolbar/schemas/orders-toolbar.schema.ts","webpack:///./src/smart-components/order/order-item.tsx","webpack:///./src/helpers/shared/orders.ts","webpack:///./src/smart-components/order/orders-list.tsx","webpack:///./src/smart-components/order/orders.tsx"],"names":["filteringMessages","noItems","id","defaultMessage","filterByProduct","noResults","noResultsDescription","clearFilters","noProducts","noRecords","filterByTitle","noResultsFound","noResult","unknown","FilterInputGroup","div","FilterInput","TextInput","FilterIconsContainer","span","StyledCloseIcon","StyledSearchIcon","searchValue","onFilterChange","placeholder","isClearable","rest","ToolbarItem","value","type","onChange","width","height","onClick","ToolbarButton","title","props","Button","propTypes","string","isRequired","toolbarMapper","TopToolbar","TopToolbarTitle","Toolbar","children","className","ToolbarContent","ToolbarGroup","FilterToolbarItem","Link","Level","LevelItem","AppTabs","toolbarComponentTypes","TOP_TOOLBAR","TOP_TOOLBAR_TITLE","TOOLBAR","TOOLBAR_ITEM","TOOLBAR_GROUP","FILTER_TOOLBAR_ITEM","LINK","BUTTON","LEVEL","LEVEL_ITEM","TABS","ToolbarContext","Component","component","Consumer","componentMapper","C","render","fields","map","hidden","key","field","schema","Provider","ordersMessages","orderedBy","orderedByLabel","lastUpdated","compositeTitle","detailTitle","orderSuccess","noOrdersTitle","noOrdersDescription","noApprovalRequests","creatingApprovalRequest","approvalTitle","approvalDetail","approvalCreated","approvalReason","approvalCompleted","orderDetails","menuApproval","menuLifecycle","menuSteps","objectsNotFound","orderID","orderParameters","orderProgressMessages","lifecycleLink","cancelOrder","keepOrder","cancelDescription","backToOrders","orderDate","approvalParameters","activity","tabItems","push","pathname","search","activeTab","find","name","includes","activeKey","eventKey","onSelect","_event","tabIndex","item","disabled","statesMessages","ordered","approvalPending","canceled","completed","failed","undecided","approved","denied","error","pending","skipped","started","notified","getTranslatableState","state","replace","char","toLowerCase","created","axiosInstance","orderApi","portfolioItemApi","graphqlInstance","getServicePlans","portfolioItemId","listServicePlans","getOrders","filter","pagination","get","limit","offset","then","orders","orderIds","data","orderId","join","orderItems","itemIds","itemId","portfolioItems","order","getOrderDetail","params","Object","values","some","status","from","location","orderItem","object","notFound","portfolioItem","portfolio_item_id","parallerRequests","service_offering_source_ref","catch","portfolio_id","Promise","all","platform","progressMessages","portfolio","detailPromises","getApprovalRequests","orderItemId","promises","requestId","parent_id","approval_request_ref","post","query","requests","length","number_of_children","actions","request","updated","pop","created_at","dispatch","portfolioId","platformId","formatMessage","link","chunks","to","fetchServicePlans","payload","apiProps","service_parameters","providerControlParameters","parameters","createOrder","count","provider_control_parameters","addToOrder","orderItemResponse","submitOrder","variant","description","dismissable","getState","orderDetail","Canceled","approvalRequest","fetchOrders","filters","queryFilter","entries","Array","isArray","sortBy","sortDirection","meta","storeState","stateKey","fetchOrderDetails","fetchApprovalRequests","err","orderStatusMapper","Completed","icon","color","Ordered","Failed","Created","orderPlatform","orderPortfolio","searchParams","translatableState","TableText","src","sourceId","orderName","owner","Text","small","DateFormat","date","updated_at","Label","debouncedFilter","filteringCallback","initialState","isOpen","isFetching","isFiltering","filterType","index","direction","desc","ordersListState","action","sortIndexMapper","0","3","4","6","viewState","sortIndex","stateDispatch","columns","product","column","transforms","sortable","rows","getOrderPlatformId","getOrderPortfolioName","handlePagination","_apiProps","handleFilterItems","handleClearAll","Grid","hasGutter","GridItem","Section","noData","PrimaryToolbar","activeFiltersConfig","category","chips","onDelete","_e","clearAll","chip","newFilters","filterConfig","items","filterValues","label","isDisabled","apiRequest","isCompact","Table","onSort","cells","EmptyTable","Bullseye","EmptyState","EmptyStateIcon","Title","headingLevel","size","EmptyStateBody","EmptyStateSecondaryActions","TableToolbar","Flex","justifyContent","default","window","insights","chrome","appNavClick","secondaryNav","Stack"],"mappings":"6FAAA,YAEMA,EAAoB,YAAe,CACvCC,QAAS,CACPC,GAAI,2BACJC,eAAgB,kBAElBC,gBAAiB,CACfF,GAAI,mCACJC,eAAgB,qBAElBE,UAAW,CACTH,GAAI,6BACJC,eAAgB,oBAElBG,qBAAsB,CACpBJ,GAAI,wCACJC,eACE,kGAEJI,aAAc,CACZL,GAAI,iCACJC,eAAgB,qBAElBK,WAAY,CACVN,GAAI,+BACJC,eAAgB,mBAElBM,UAAW,CACTP,GAAI,2BACJC,eAAgB,cAElBO,cAAe,CACbR,GAAI,6BACJC,eAAgB,qBAElBQ,eAAgB,CACdT,GAAI,8BACJC,eAAgB,oBAElBS,SAAU,CACRV,GAAI,wBACJC,eAAgB,gBAElBU,QAAS,CACPX,GAAI,yBACJC,eAAgB,aAIL,O,8zBC5CTW,EAAmB,IAAOC,IAAG,2IAM7BC,EAAc,YAAOC,EAAA,EAAP,CAAiB,iNAO/BC,EAAuB,IAAOC,KAAI,+HAMlCC,EAAkB,YAAO,IAAP,CAAiB,iQASnCC,EAAmB,YAAO,IAAP,CAAkB,iGA0C5B,EA/BwD,SAAC,GACtE,QAAAC,mBAAW,IAAG,KAAE,EAChBC,EAAc,iBACdC,EAAW,cACX,IAAAC,mBAAW,IAAG,GAAK,EAChBC,EAAI,IAL+D,8DAMlE,OACJ,kBAACC,EAAA,EAAW,KACV,kBAACb,EAAgB,KACf,kBAACE,EAAW,GACVd,GAAG,iBACHsB,YAAaA,EACbI,MAAON,EACPO,KAAK,OACLC,SAAUP,EAAc,aACZC,GACRE,IAEN,kBAACR,EAAoB,KACjBO,GAAeH,GACf,kBAACF,EAAe,CACdW,MAAM,KACNC,OAAO,KACPC,QAAS,WAAM,OAAAV,EAAe,QAE5B,kBAACF,EAAgB,U,+jBC1CzBa,EAAyD,SAAC,GAC9D,IAAAC,EAAK,QACFC,EAAK,IAFsD,WAG1D,yBAACC,EAAA,EAAM,KAAKD,GAAQD,IAE1BD,EAAcI,UAAY,CACxBH,MAAO,IAAUI,OAAOC,YAG1B,IAQMC,EAAgB,CACpBC,WAAU,IACVC,gBAAe,IACfC,QAX0D,SAAC,GAC3D,IAAAC,EAAQ,WACLT,EAAK,IAFmD,cAGvD,OACJ,kBAAC,IAAa,GAACU,UAAU,YAAeV,GACtC,kBAACW,EAAA,EAAc,CAACD,UAAU,aAAaD,KAOzCG,aAAc,IACdrB,YAAW,IACXsB,kBAAiB,EACjBC,KAAM,IACNC,MAAK,IACLC,UAAS,IACTf,OAAQH,EACRmB,QAAO,KAGIC,EAAwB,CACnCC,YAAa,aACbC,kBAAmB,kBACnBC,QAAS,UACTC,aAAc,cACdC,cAAe,eACfC,oBAAqB,oBACrBC,KAAM,OACNC,OAAQ,SACRC,MAAO,QACPC,WAAY,YACZC,KAAM,WAGO,O,ylBCtDTC,EAAiB,wBAGpB,IAQGC,EAAiD,SAAC,GACtD,IAAAC,EAAS,YACNhC,EAAK,IAF8C,eAGlD,OACJ,kBAAC8B,EAAeG,SAAQ,MACrB,SAAC,G,IAAEC,EAAe,kBACXC,EACiB,iBAAdH,EACHE,GACAA,EAAgBF,GACfA,EACP,OAAOG,EAAI,kBAACA,EAAC,KAAKnC,IAAY,SAK9BoC,EAAS,SAACC,GACd,OAAAA,EAAOC,KAAI,SAAC,GAAE,IAAAC,EAAM,SAAEF,EAAM,SAAEG,EAAG,MAAKC,EAAK,IAA/B,2BACV,OAAAF,EAAS,KAAOF,EACd,kBAACN,EAAS,GAACS,IAAKA,GAASC,GACtBL,EAAOC,IAGV,kBAACN,EAAS,GAACS,IAAKA,GAASC,QAiBhB,IAToD,SAAC,G,IAClEC,EAAM,SACN,IAAAR,uBAAe,IAAG,MAAa,EAC3B,OACJ,kBAACJ,EAAea,SAAQ,CAACnD,MAAO,CAAE4C,OAAM,EAAEF,gBAAe,IACtDE,EAAOM,EAAOL,W,iCClEnB,YAEMO,EAAiB,YAAe,CACpCC,UAAW,CACT/E,GAAI,0BACJC,eAAgB,sBAElB+E,eAAgB,CACdhF,GAAI,4BACJC,eAAgB,cAElBgF,YAAa,CACXjF,GAAI,4BACJC,eAAgB,gBAElBiF,eAAgB,CACdlF,GAAI,+BACJC,eAAgB,yBAElBkF,YAAa,CACXnF,GAAI,sBACJC,eAAgB,iBAElBmF,aAAc,CACZpF,GAAI,8BACJC,eACE,gFAEJoF,cAAe,CACbrF,GAAI,0BACJC,eAAgB,aAElBqF,oBAAqB,CACnBtF,GAAI,gCACJC,eAAgB,gCAElBsF,mBAAoB,CAClBvF,GAAI,8BACJC,eACE,gEAEJuF,wBAAyB,CACvBxF,GAAI,2BACJC,eAAgB,6BAElBwF,cAAe,CACbzF,GAAI,wBACJC,eAAgB,WAElByF,eAAgB,CACd1F,GAAI,8BAEJC,eAAgB,8CAElB0F,gBAAiB,CACf3F,GAAI,kCACJC,eAAgB,mBAElB2F,eAAgB,CACd5F,GAAI,iCACJC,eAAgB,mBAElB4F,kBAAmB,CACjB7F,GAAI,oCACJC,eAAgB,gBAElB6F,aAAc,CACZ9F,GAAI,wBACJC,eAAgB,iBAElB8F,aAAc,CACZ/F,GAAI,uBACJC,eAAgB,YAElB+F,cAAe,CACbhG,GAAI,wBACJC,eAAgB,aAElBgG,UAAW,CACTjG,GAAI,oBACJC,eAAgB,eAElBiG,gBAAiB,CACflG,GAAI,yBACJC,eACE,oFAEJkG,QAAS,CACPnG,GAAI,yBACJC,eAAgB,YAElBmG,gBAAiB,CACfpG,GAAI,iCACJC,eAAgB,oBAElBoG,sBAAuB,CACrBrG,GAAI,+BACJC,eAAgB,qBAElBqG,cAAe,CACbtG,GAAI,8BACJC,eAAgB,kBAElBsG,YAAa,CACXvG,GAAI,wBACJC,eAAgB,gBAElBuG,UAAW,CACTxG,GAAI,sBACJC,eAAgB,cAElBwG,kBAAmB,CACjBzG,GAAI,4BACJC,eAAgB,2CAElByG,aAAc,CACZ1G,GAAI,0BACJC,eAAgB,kBAElB0G,UAAW,CACT3G,GAAI,6BACJC,eAAgB,cAElB2G,mBAAoB,CAClB5G,GAAI,6BACJC,eAAgB,cAElB4G,SAAU,CACR7G,GAAI,2BACJC,eAAgB,cAIL,O,iCCrIf,uDAyCe,IA3BoC,SAAC,G,IAAE6G,EAAQ,WACpDC,EAAS,cAAoB,KAC/B,EAAuB,cAArBC,EAAQ,WAAEC,EAAM,SAClBC,EAAYJ,EAASK,MAAK,SAAC,G,IAAEC,EAAI,OAAO,OAAAJ,EAASK,SAASD,MAMhE,OACE,kBAAC,IAAI,CACHE,UAAWJ,EAAYA,EAAUK,SAAW,EAC5CC,SARmB,SACrBC,EACAC,GACG,OAAAX,EAAK,CAAEC,SAAUF,EAASY,GAAoBN,KAAMH,OAAM,MAO1DH,EAAStC,KAAI,SAACmD,GAAS,OACtB,kBAAC,IAAG,CACF1F,MAAO0F,EAAK1F,MACZyC,IAAKiD,EAAKJ,SACVA,SAAUI,EAAKJ,SACfH,KAAMO,EAAKP,KACXQ,SAAUD,EAAKC,iB,uSC9BnBC,EAAiB,YAAe,CACpC5F,MAAO,CACLjC,GAAI,sBACJC,eAAgB,SAElB6H,QAAS,CACP9H,GAAI,wBACJC,eAAgB,WAElB8H,gBAAiB,CACf/H,GAAI,iCACJC,eAAgB,oBAElB+H,SAAU,CACRhI,GAAI,yBACJC,eAAgB,YAElBgI,UAAW,CACTjI,GAAI,0BACJC,eAAgB,aAElBiI,OAAQ,CACNlI,GAAI,uBACJC,eAAgB,UAElBkI,UAAW,CACTnI,GAAI,0BACJC,eAAgB,aAElBmI,SAAU,CACRpI,GAAI,yBACJC,eAAgB,YAElBoI,OAAQ,CACNrI,GAAI,uBACJC,eAAgB,UAElBqI,MAAO,CACLtI,GAAI,sBACJC,eAAgB,SAElBsI,QAAS,CACPvI,GAAI,wBACJC,eAAgB,WAElBuI,QAAS,CACPxI,GAAI,wBACJC,eAAgB,WAElBwI,QAAS,CACPzI,GAAI,wBACJC,eAAgB,WAElByI,SAAU,CACR1I,GAAI,yBACJC,eAAgB,cAIP0I,EAAuB,SAClCC,GAEA,OAAAA,EACGC,QAAQ,MAAO,IACfA,QAAQ,MAAM,SAACC,GAAS,OAAAA,EAAKC,kBAMnB,WAAKlB,GAAc,CAAEmB,QAAS,IAAcA,W,6nDC9DrDC,EAAgB,c,w2DCwBhBC,EAAW,cAEXC,GADe,cACI,eACnB,EAAgB,cAChBC,EAAkB,cAEXC,EAAkB,SAC7BC,GAEA,OAACH,EAAiBI,iBAAiBD,IAgDxBE,EAAY,SACvBC,EACAC,GAMA,YAPA,IAAAD,MAAA,SACA,IAAAC,MAAa,KAMb,EACGC,IACI,IAAgB,WAAWF,EAAM,UAAUC,EAAWE,MAAK,WAAWF,EAAWG,QAErFC,MAAK,SAACC,GACL,OA9BJC,EA8BkBD,EAAOE,KAAKzF,KAAI,SAAC,GAAW,OAAP,QA5BvC,EAAcmF,IACT,IAAgB,gBAAgBK,EAChCxF,KAAI,SAAC0F,GAAY,4BAAsBA,KACvCC,KAAK,OAyByCL,MAAK,SAACM,GACnD,OAtBNC,EAuBQD,EAAWH,KAAKzF,KAAI,SAAC,GAA0B,OAAP,uBArBhD,EAAcmF,IACT,IAAgB,oBAAoBU,EACpC7F,KAAI,SAAC8F,GAAW,sBAAgBA,KAChCH,KAAK,OAmBFL,MAAK,SAACS,GACN,OAAO,EAAP,GACEA,eAAc,GACXR,GAAM,CACTE,KAAMF,EAAOE,KAAKzF,KAAI,SAACgG,GAAU,cAC5BA,GAAK,CACRJ,WAAYA,EAAWH,KAAKR,QAC1B,SAAC,GAAiB,OAAP,aAAoBe,EAAMxK,gBAhCtB,IAC7BqK,KAVoB,IACpBL,MA8DWS,EAAiB,SAC5BC,GAEA,GAAIC,OAAOC,OAAOF,GAAQG,MAAK,SAACnJ,GAAU,OAACA,KAIzC,ODpHFwI,ECoHkCQ,EAAOF,MDpH1B,mC,kEAIL,O,sBAAA,GAAMvB,EAAcU,IAAO,IAAgB,WAAWO,I,cAA9DM,EAAQ,S,aAGR,G,WADAA,EAAQ,GACa,MAAjB,EAAMM,QAAmC,MAAjB,EAAMA,OAMhC,MAAM,E,OALN,IAAejC,QAAQ,CACrB7B,SAAU,OACV4B,MAAO,CAAEmC,KAAM,IAAeC,Y,aAOhCC,EAAwC,CAC1CC,OAAQ,aACRC,UAAU,G,iBAGS,O,sBAAA,GAAMlC,EAAcU,IAClC,IAAgB,yBAAyBa,EAAMxK,K,cAD9CoK,EAAa,SAGnBa,EAAYb,EAAWH,KAAK,G,0CAK1BmB,EAAgD,CAClDF,OAAQ,UACRC,UAAU,G,iBAIM,O,wBAAA,GAAMlC,EAAcU,IAC/B,IAAgB,oBAChBsB,EAAwBI,oB,cAF7BD,EAAgB,S,8CAkClB,OAzBME,EAAmB,CACvBrC,EACGU,IACI,IAAgB,YAChByB,EAAgCG,6BAGpCC,OAAM,WAAM,OAAGN,OAAQ,WAAYC,UAAU,MAEhDlC,EACGU,IACI,IAAgB,gBAChBsB,EAAwBjL,GAAE,sBAG9BwL,OAAM,WAAM,OAAGN,OAAQ,WAAYC,UAAU,MAChDlC,EACGU,IACI,IAAgB,eAChByB,EAAgCK,cAGpCD,OAAM,WAAM,OAAGN,OAAQ,YAAaC,UAAU,OAG5C,CAAP,EAAOO,QAAQC,IACbL,GACAxB,MAAK,SAAC,G,IAAC8B,EAAQ,KAAEC,EAAgB,KAAEC,EAAS,KAAM,OAClDtB,EACAS,EACAG,EACAQ,EACAC,EACAC,cA/EoC,IACtC5B,ECuHM6B,EAAiB,CACpB,EACEpC,IAAO,IAAgB,WAAWe,EAAOF,OACzCgB,OAAM,SAAClD,GACN,GAAqB,MAAjBA,EAAMwC,QAAmC,MAAjBxC,EAAMwC,OAChC,OAAO,IAAejC,QAAQ,CAC5B7B,SAAU,OACV4B,MAAO,CAAEmC,KAAM,IAAeC,YAIlC,MAAM1C,KAEV,EACGqB,IAAO,IAAgB,gBAAgBe,EAAO,eAC9Cc,OAAM,SAAClD,GACN,GAAqB,MAAjBA,EAAMwC,QAAmC,MAAjBxC,EAAMwC,OAChC,MAAO,CACLI,OAAQ,aACRC,UAAU,GAId,MAAM7C,KAEV,EACGqB,IAAO,IAAgB,oBAAoBe,EAAO,mBAClDc,OAAM,SAAClD,GACN,GAAqB,MAAjBA,EAAMwC,QAAmC,MAAjBxC,EAAMwC,OAChC,MAAO,CACLI,OAAQ,UACRC,UAAU,GAId,MAAM7C,KAEV,EACGqB,IAAO,IAAgB,YAAYe,EAAOkB,UAC1CJ,OAAM,SAAClD,GACN,GAAqB,MAAjBA,EAAMwC,QAAmC,MAAjBxC,EAAMwC,OAChC,MAAO,CACLI,OAAQ,WACRC,UAAU,GAId,MAAM7C,KAEV,EACGqB,IACI,IAAgB,gBAAgBe,EAAO,cAAa,sBAExDc,OAAM,SAAClD,GACN,GAAqB,MAAjBA,EAAMwC,QAAmC,MAAjBxC,EAAMwC,OAChC,MAAO,GAGT,MAAMxC,KAEV,EACGqB,IAAO,IAAgB,eAAee,EAAOoB,WAC7CN,OAAM,SAAClD,GACN,GAAqB,MAAjBA,EAAMwC,QAAmC,MAAjBxC,EAAMwC,OAChC,MAAO,CACLI,OAAQ,YACRC,UAAU,GAId,MAAM7C,MAIZ,OAAQoD,QAAQC,IAAII,IAqDTC,EAAsB,SACjCC,GAIA,SACGtC,IAAO,IAAgB,gBAAgBsC,EAAW,sBAClDnC,MAAK,SAAC,G,IACCoC,EADK,OACW1H,KAAI,SAAC,G,IAxB/B2H,EA5B8BC,EAoDGC,EAAoB,uBAC/C,OAzBNF,EAyB6BE,EAvB7BjD,EACGkD,KACI,IAAiB,WACpB,CAAEC,OAjCwBH,EAiCMD,EAjCgB,4BACpCC,EAAS,mWAiCrB,CAAE,eAtC2B,uBAwC9BtC,MAAK,SAAC,G,IAAU0C,EAAQ,gBACvB,OAAOA,GACLA,EAASC,OAAS,GAClBD,EAAS,GAAGE,mBAAqB,EAC/BF,EAAS,GAAGA,SACZA,QAcJ,OAAOd,QAAQC,IAAIO,GAAUpC,MAAK,SAAC0C,G,MAMjC,MAAO,CAAEvC,MALgB,QAAf,EAAGuC,aAAQ,EAARA,EAAW,UAAC,eAAGhI,KAAI,SAAC,G,MAAEmI,EAAO,UAAKC,EAAO,IAArB,aAA4B,cACxDA,GAAO,CACVC,SACEF,aAAO,EAAPA,EAASF,QAAS,EAAiB,QAAd,EAACE,EAAQG,aAAK,eAAEC,WAAaH,EAAQG,kBAEvC,W,gCCxPhB,EA1BkD,SAAC,G,IAChE/M,EAAE,KACFgN,EAAQ,WACR1D,EAAe,kBACf2D,EAAW,cACXC,EAAU,aACVjB,EAAW,cAGX,OADsB,aACfkB,CAAc,IAAe/H,aAAc,CAChDpF,GAAE,EAEFoN,KAAM,SAACC,GAAoC,OACzC,kBAAC,IAAI,CACHtL,QAAS,WAAM,OAAAiL,EAAS,iCACxBM,GAAI,CACFtG,SAAU,IACVC,OAAQ,UAAUjH,EAAE,eAAeiM,EAAW,mBAAmB3C,EAAe,aAAa4D,EAAU,cAAcD,IAGtHI,O,miBCTIE,EAAoB,SAC/BjE,GAC8D,OAC9D3H,KAAM,IACN6L,QAAS,EAA4BlE,KAU1B,EAAkB,SAC7BmE,EACArC,GACG,gBAAC4B,GACJ,OAAAA,EAAS,CACPrL,KAAM,KACN6L,SFAkC,EEAGC,EFG7B,mC,4DACa,OAHvB,IAAAC,mBAAsBC,EAAyB,4BAAKD,EAAkB,IAAlD,+BACjBE,EAAU,IAFuB,wBAIb,GAAM1E,EAAS2E,e,OASZ,OATpBrD,EAAiB,UACnBS,EAAgC,IAC1B6C,MAAQ,EAClB7C,EAAY,EAAH,OACJA,GACA2C,GAAU,CACbF,mBAAkB,EAClBK,4BAA6BJ,GAA6B,KAElC,GAAMzE,EAAS8E,WACvCxD,EAAMxK,GACNiL,I,OAEF,OAJMgD,EAAoB,SAInB,CAAP,EAAO/E,EAASgF,YAAY1D,EAAMxK,IAAc8J,MAAK,SAACU,GAAU,cAC3DA,GAAK,CACRS,UAAYgD,gBEnBmCnE,MAAK,SAAC,G,IAAE9J,EAAE,KAAEiL,EAAS,YAClE,OAAA+B,EACE,0BAAgB,CACdmB,QAAS,UACTlM,MAAO,4CACPmM,YACE,kBAAC,EAAiB,CAChBpO,GAAIA,EACJgN,SAAUA,EACV1D,gBAAiB8B,EAAcpL,GAC/BiN,YAAa7B,EAAcK,aAC3ByB,WAAY9B,EAAcG,4BAC1BU,YAAahB,EAAUjL,KAG3BqO,aAAa,UFfQ,IAAO,EAG1B,UEkBC,EAAc,SAACnE,GAAoB,gBAC9C8C,EACAsB,GAEAtB,EAAS,CAAErL,KAAS,IAAwB,aAE1B,IAAA4M,EACdD,IAAU,yBACd,OFNyB,SAACpE,GAC1B,OAAAhB,EAAS3C,YAAY2D,GEKd,CAAwBA,GAC5BJ,MAAK,WAaJ,OAZAyE,EAAY/D,MAAM5B,MAAQ,iBAAe4F,SAEvCD,EAAYE,iBACZF,EAAYE,gBAAgBxE,KAAKwC,OAAS,IAE1C8B,EAAYE,gBAAgBxE,KAAK,GAAGrB,MAAQ,YAG9CoE,EAAS,CACPrL,KAAM,IACN6L,QAAS,KAAKe,KAETA,KAERzE,MAAK,SAACyE,GACL,OAAAvB,EACE,0BAAgB,CACdmB,QAAS,UACTlM,MAAO,4CACPmM,YAAa,gBAAmBG,EAAY/D,MAAMxK,GAAI,iBACtDqO,aAAa,QAIlBvE,MAAK,WAAM,OAAAkD,EAAS,CAAErL,KAAS,IAAwB,kBACvD6J,OAAM,SAAClD,GACN0E,EAAS,CACPrL,KAAS,IAAwB,YACjC6L,QAASlF,SAKJoG,EAAc,SACzBC,EACAjF,GACG,YADH,IAAAA,MAAa,KACV,SAACsD,GACJ,IAAI4B,EAAcjE,OAAOkE,QAAQF,GAC9BlF,QAAO,SAAC,G,IAAG/H,EAAK,KAAM,OAAAA,GAASA,EAAM+K,OAAS,KAC9CjI,KAAI,SAAC,G,IAACE,EAAG,KAAEhD,EAAK,KACf,OAAAoN,MAAMC,QAAQrN,GACVA,EAAM8C,KAAI,SAAC9C,GAAU,gBAAUgD,EAAG,OAAOhD,KAASyI,KAAK,KACvD,UAAUzF,EAAG,iBAAiBhD,KAEnCyI,KAAK,KAQR,OAPIT,EAAWsF,SACbJ,EAAiBA,EAAW,YAC1BlF,EAAWsF,OAAM,KACftF,EAAWuF,eAAiB,SAGlCjC,EAAS,CAAErL,KAAS,IAAwB,aACrC,EAAsBiN,EAAalF,GACvCI,MAAK,SAAC,GAAE,IAAAS,EAAc,iBAAKR,EAAM,IAA3B,oBAKL,OAJAiD,EAAS,CACPrL,KAAM,IACN6L,QAASjD,IAEJyC,EAAS,CACdrL,KAAS,IAAwB,aACjCuN,KAAM,OACDxF,GAAU,CACbD,OAAQmF,EACRD,QAAO,EACPQ,YAAY,EACZC,SAAU,WAEZ5B,QAASzD,OAGZyB,OAAM,SAAClD,GACN,OAAA0E,EAAS,CACPrL,KAAS,IAAwB,YACjC6L,QAASlF,SAKJ+G,EAAoB,SAAC3E,GAA6C,gBAC7EsC,GAaA,OADAA,EAAS,CAAErL,KAAS,IAA4B,aACzC,EAA2B+I,GAC/BZ,MACC,SAAC,G,IACCU,EAAK,KACLS,EAAS,KACTG,EAAa,KACbQ,EAAQ,KACRC,EAAgB,KAChBC,EAAS,KAET,OAAAkB,EAAS,CACPrL,KAAS,IAA4B,aACrC6L,QAAS,CACPhD,MAAK,EACLS,UAAS,EACTG,cAAa,EACbQ,SAAQ,EACRC,iBAAgB,EAChBC,UAAS,QAIhBN,OAAM,SAAClD,GACN,OAAA0E,EAAS,CACPrL,KAAS,IAA4B,YACrC6L,QAASlF,SAKJgH,EAAwB,SAACrD,GAAwB,gBAC5De,GAYA,OADAA,EAAS,CAAErL,KAAS,IAAmC,aAChD,EAAgCsK,GACpCnC,MAAK,SAACG,GAKL,OAJA+C,EAAS,CACPrL,KAAS,IAAmC,aAC5C6L,QAASvD,IAEJA,KAERuB,OAAM,SAAC+D,GACN,OAAAvC,EAAS,CACPrL,KAAS,IAAmC,YAC5C6L,QAAS+B,U,iCClOjB,iEASMC,EAOF,CACFC,UAAW,CAAEC,KAAM,kBAAC,IAAe,MAAKC,MAAO,SAC/C,mBAAoB,CAClBD,KAAM,kBAAC,IAAS,MAChBC,MAAO,QAETC,QAAS,CAAEF,KAAM,kBAAC,IAAc,MAAKC,MAAO,QAC5CE,OAAQ,CAAEH,KAAM,kBAAC,IAAqB,MAAKC,MAAO,OAClDnB,SAAU,CAAEkB,KAAM,kBAAC,IAAuB,MAAKC,MAAO,UACtDG,QAAS,CAAEJ,KAAM,kBAAC,IAAc,MAAKC,MAAO,SAG/B,O,uFCPA,EAlBmB,WAAqB,OACrDpL,OAAQ,CACN,CACEL,UAAW,IAAsBb,YACjCT,UAAW,mBACX8B,IAAK,iBACLH,OAAQ,CACN,CACEL,UAAW,IAAsBZ,kBACjCoB,IAAK,uBACLzC,MAAO,SACPW,UAAW,S,kfC2EN,EAxES,SACtB+E,EACAoI,EACAC,EACA7C,GAEA,IClB2B,EAAE/C,EDkBvBa,EAAatD,EAAKyC,WAAW,IAAMzC,EAAKyC,WAAW,IAAO,GAC1D6F,EAAY,SAChBzF,MAAO7C,EAAK3H,IACRiL,EAAUjL,GAAK,CAAE,aAAciL,EAAUjL,IAAO,IAChDiL,EAAUI,kBACV,CAAE,iBAAkBJ,EAAUI,mBAC9B,IACA0E,EAAgB,CAAEnE,SAAUmE,GAAkB,IAC9CC,EAAiB,CAAElE,UAAWkE,GAAmB,IAEjDE,EAAoB,YAAqBvI,EAAKiB,OACpD,MAAO,CACL,CACE3G,MACE,kBAACkO,EAAA,EAAS,KACR,kBAAC,IAAW,CAACnJ,SAAU,IAAaiJ,aAAcA,GAC/CtI,EAAK3H,MAKd,CACEiC,MACE,kBAAC,WAAQ,KACP,kBAAC,IAAQ,CACPH,OAAQ,GACRsO,KC5CiB,ED4CCzI,EC5CCyC,EAAU,aACvCA,EAAW,IACR,IAAgB,oBAAoBA,EAAW,GAAGiB,kBAAiB,SD2C5DgF,SAAUN,MAKlBpI,EAAK2I,UACL3I,EAAK4I,MACL,CACEtO,MACE,kBAACuO,EAAA,EAAI,CAAC5N,UAAU,YAAYsB,UAAWsM,EAAA,EAAaC,OAClD,kBAACC,EAAA,WAAU,CAACC,KAAMhJ,EAAKoF,WAAYoB,QAAQ,eAIjD,CACElM,MACE,kBAACuO,EAAA,EAAI,CAAC5N,UAAU,YAAYsB,UAAWsM,EAAA,EAAaC,OAClD,kBAACC,EAAA,WAAU,CACTC,KAAMhJ,EAAKyC,WAAW,IAAMzC,EAAKyC,WAAW,GAAGwG,WAC/CzC,QAAQ,eAKhB,CACElM,MACE,kBAACkO,EAAA,EAAS,KACR,kBAACU,EAAA,EAAK,KACA,IAAkBlJ,EAAKiB,OAAwC,CACnEuF,QAAQ,YAEPhB,EAAc,IAAe+C,S,qREnBpCY,EAAkB,aACtB,SAACnC,EAASO,EAAwBlC,EAAU+D,QAAlC,IAAA7B,MAAO,KACf6B,GAAkB,GAClB/D,EAAS,YAAY2B,EAASO,IAAOpF,MAAK,WAAM,OAAAiH,GAAkB,QAEpE,KAGIC,GAAe,CACnBC,QAAQ,EACRC,YAAY,EACZC,aAAa,EACbC,WAAY,QACZzC,QAAS,CACP/F,MAAO,GACP2H,MAAO,IAETvB,OAAQ,CACNqC,MAAO,EACPC,UAAW,IAAgBC,OAoBzBC,GAAkB,SACtB5I,EACA6I,GAEA,OAAQA,EAAO9P,MACb,IAAK,cACH,OAAO,OAAKiH,GAAK,CAAEsI,WAAYO,EAAOjE,UACxC,IAAK,iBACH,OAAO,OACF5E,GAAK,CACR+F,SAzBNjN,EAyB6B+P,EAAOjE,QAxBpC7L,EAwB6CiH,EAAMwI,WAvBnDzC,EAuB+D/F,EAAM+F,QAtBnD,OACfA,KAAO,MACThN,GAAOD,EAAK,OAsBX,IAAK,oBACH,OAAO,OAAKkH,GAAK,CAAE+F,QAAS8C,EAAOjE,UACrC,IAAK,mBACH,OAAO,OAAK5E,GAAK,CAAEuI,YAAaM,EAAOjE,UACzC,IAAK,gBACH,OAAO,OAAK5E,GAAK,CAAEwI,WAAYK,EAAOjE,UACxC,IAAK,YACH,OAAO,OAAK5E,GAAK,CAAEoG,OAAQyC,EAAOjE,QAAS0D,YAAY,IAnCvC,IACpBxP,EACAC,EACAgN,E,EAmCA,OAAO/F,GAGH8I,GAAkB,CACtBC,EAAG,KACHC,EAAG,QACHC,EAAG,aACHC,EAAG,SAyTU,GAtTyB,W,UAChC3E,EAAgB,cAChBH,EAAW,wBACX+E,EAAY,cACZ,EAGF,qBAAWP,GAAiB,OAC3BR,IAAY,CACfrC,SAA0B,QAAjB,EAAAoD,aAAS,EAATA,EAAWhI,cAAM,eAAE4E,UAAW,CAAE/F,MAAO,GAAI2H,MAAO,IAC3DvB,OAAQ,CACNsC,WAA4B,QAAjB,EAAAS,aAAS,EAATA,EAAWhI,cAAM,eAAEkF,gBAAiB,IAAgBsC,KAC/DF,OAAwB,QAAjB,EAAAU,aAAS,EAATA,EAAWhI,cAAM,eAAEiI,YAAa,MAPzC,OAAEd,EAAU,aAAEC,EAAW,cAAEC,EAAU,aAAEzC,EAAO,UAAEK,EAAM,SACtDiD,EAAa,KAST,EAAiB,uBAGrB,SAAC,GAAqB,OAAP,eAAoBlI,UAH7BE,EAAI,OAAEiF,EAAI,OAIZgD,EAAmB,CACvB,CAAEjQ,MAAOkL,EAAc,IAAehH,UACtCgH,EAAc,IAAcgF,SAC5B,GACA,CACElQ,MAAOkL,EAAc,IAAenI,iBAEtC,CAAE/C,MAAOkL,EAAc,IAAexG,YACtCwG,EAAc,IAAcN,SAC5B,CAAE5K,MAAOkL,EAAc,IAAcrC,UACrCtG,KAAI,SAAC4N,GACL,MAAkB,iBAAXA,GACNlB,GACAC,GACe,IAAhBlH,EAAKwC,OAED2F,EADA,OAAKA,GAAM,CAAEC,WAAY,CAACC,EAAA,QAG1B/H,EAAiB,uBACrB,SAAC,GAIK,OAFoB,0CAqBtBgI,GAAOtI,EAAKzF,KAAI,SAACmD,GACf,MDhLwB,SAChC,EACA4C,G,IADEH,EAAU,aAMNgB,EACJhB,EAAW,IACXG,EAAepD,MAAK,SAAC,G,IAAEnH,EAAE,KAAO,OAAAoK,EAAW,GAAGiB,oBAAsBrL,KACtE,OAAOoL,EACH,CACE2E,cAAe3E,EAAcG,4BAC7ByE,eAAgB5E,EAAcK,cAEhC,GCiKwC+G,CACxC7K,EACA4C,GAFMwF,EAAa,gBAAEC,EAAc,iBAI/BM,ED9L2B,SACnC,EACA/F,G,IADEH,EAAU,aAAEpK,EAAE,KAGVoL,EACJhB,EAAW,IACXG,EAAepD,MAAK,SAAC,G,IAAEnH,EAAE,KAAO,OAAAoK,EAAW,GAAGiB,oBAAsBrL,KACtE,OAAOoL,EAAgBA,EAAchE,KAAO,SAASpH,ECuLjCyS,CAAsB9K,EAAM4C,GAC9C,OAAO,EAAgB,OAChB5C,GAAI,CAAE2I,UAAS,IACpBP,EACAC,EACA7C,MAIJ,qBAAU,WACR8E,EAAc,CAAEtQ,KAAM,cAAe6L,SAAS,IAC9C9B,QAAQC,IAAI,CACVqB,EAAS,YAAY2B,EAASoD,aAAS,EAATA,EAAWhI,SACzCiD,EAAS,iBACRlD,MAAK,WAAM,OAAAmI,EAAc,CAAEtQ,KAAM,cAAe6L,SAAS,SAC3D,IAEH,IAAMkF,GAAmB,SACvBC,EACAjJ,GAGA,OADAuI,EAAc,CAAEtQ,KAAM,cAAe6L,SAAS,IACrCR,EACP,YAAY2B,EAAS,OAChBjF,GAAU,CACbsF,OAAQ0C,GAAgB1C,EAAOqC,OAC/BpC,cAAeD,EAAOsC,UACtBU,UAAWhD,EAAOqC,UAGnBvH,MAAK,WAAM,OAAAmI,EAAc,CAAEtQ,KAAM,cAAe6L,SAAS,OACzDhC,OAAM,WAAM,OAAAyG,EAAc,CAAEtQ,KAAM,cAAe6L,SAAS,QAGzDoF,GAAoB,SAAClR,G,WAAA,IAAAA,MAAA,IACzBuQ,EAAc,CAAEtQ,KAAM,iBAAkB6L,QAAS9L,IACjDoP,EAAgB,OACTnC,KAAO,MAAGyC,GAAa1P,EAAK,WAE5BwN,GAAI,CACPF,OAAQ0C,GAAgB1C,EAAOqC,OAC/BpC,cAAeD,EAAOsC,UACtBU,UAAWhD,EAAOqC,MAClBxH,OAAQ,IAEVmD,GACA,SAACmE,GACC,OAAAc,EAAc,CAAEtQ,KAAM,mBAAoB6L,QAAS2D,QAInD0B,GAAiB,WAKrB,OAJAZ,EAAc,CACZtQ,KAAM,oBACN6L,QAASwD,GAAarC,UAEjBmC,EACLE,GAAarC,QAAO,OAEfO,GAAI,CACPF,OAAQ0C,GAAgB1C,EAAOqC,OAC/BpC,cAAeD,EAAOsC,UACtBU,UAAWhD,EAAOqC,QAEpBrE,GACA,SAACmE,GACC,OAAAc,EAAc,CACZtQ,KAAM,mBACN6L,QAAS2D,QAKjB,OACE,kBAAC2B,EAAA,EAAI,CAACC,WAAS,GACb,kBAACC,EAAA,EAAQ,KACP,kBAACC,EAAA,QAAO,CAACtR,KAAK,YACVuN,EAAKgE,QACL,kBAACC,EAAA,eAAc,CACbC,oBAAqB,CACnBzE,QAAShE,OAAOkE,QAAQF,GACrBlF,QAAO,SAAC,G,IAAG/H,EAAK,KAAM,OAAAA,GAASA,EAAM+K,OAAS,KAC9CjI,KACC,SAAC,G,IAACE,EAAG,KAAEhD,EAAK,KAAM,OAChB2R,SAAU3O,EACV/C,KAAM+C,EACN4O,MAAOxE,MAAMC,QAAQrN,GACjBA,EAAM8C,KAAU,SAAC4C,GAAS,OAAGA,KAAI,MAChC,CAAC,CAAEA,KAAM1F,QAGpB6R,SAAU,SAACC,EAAI,EAAQC,G,IAAPC,EAAI,KAClB,GAAID,EACF,OAAOZ,KAGT,IAAMc,EAAa,KAAKhF,GACN,UAAd+E,EAAK/R,KACPgS,EAAWD,EAAK/R,MAAWgS,EACzBD,EAAK/R,MACoB8H,QACzB,SAAC/H,GAAK,MAAK,OAAAA,KAAqB,QAAhB,EAAKgS,aAAI,EAAJA,EAAMJ,aAAK,eAAG,GAAGlM,SAGxCuM,EAAWD,EAAK/R,MAAS,GAG3BsQ,EAAc,CACZtQ,KAAM,oBACN6L,QAASmG,IAEX7C,EACE6C,EACAzE,EACAlC,GACA,SAACmE,GACC,OAAAc,EAAc,CACZtQ,KAAM,mBACN6L,QAAS2D,SAKnByC,aAAc,CACZhS,SAAU,SAAC4R,EAAI9R,GACb,OAAAuQ,EAAc,CAAEtQ,KAAM,gBAAiB6L,QAAS9L,KAClDA,MAAO0P,EACPyC,MAAO,CACL,CACEC,aAAc,CACZD,MAAO,CACL,CACEnS,MAAO,mBACPqS,MAAO5G,EAAc,IAAepF,kBAEtC,CACErG,MAAO,WACPqS,MAAO5G,EAAc,IAAenF,WAEtC,CACEtG,MAAO,YACPqS,MAAO5G,EAAc,IAAelF,YAEtC,CACEvG,MAAO,UACPqS,MAAO5G,EAAc,IAAcnE,UAErC,CACEtH,MAAO,SACPqS,MAAO5G,EAAc,IAAejF,SAEtC,CACExG,MAAO,UACPqS,MAAO5G,EAAc,IAAerF,WAGxCpG,MAAOiN,EAAQ/F,MACfhH,SAAU,SAAC4R,EAAI9R,GAAU,OAAAkR,GAAkBlR,KAE7CqS,MAAO,QACPrS,MAAO,QACPC,KAAM,YAER,CACEmS,aAAc,CACZpS,MAAOiN,EAAQ4B,MACf3O,SAAU,SAAC4R,EAAI9R,GAAU,OAAAkR,GAAkBlR,KAE7CqS,MAAO,QACPrS,MAAO,WAIbgI,WACE,kBAAC,IAAe,CACdsK,WAAY9C,GAAcC,EAC1B8C,WAAYvB,GACZxD,KAAMA,EACNgF,WAAS,MAKjB,kBAACC,EAAA,EAAK,gBACO,UACJjD,GAAcC,GAAgC,IAAhBlH,EAAKwC,OAEtC,CAAEuC,OAAM,EAAEoF,OAjND,SAACZ,EAAInC,EAAOC,GAKjC,OAJAW,EAAc,CACZtQ,KAAM,YACN6L,QAAS,CAAE6D,MAAK,EAAEC,UAAS,KAEpBtE,EACP,YAAY2B,EAAS,OAChBO,GAAI,CACPF,OAAQ0C,GAAgBL,GACxBpC,cAAeqC,EACfU,UAAWX,MAEiBvH,MAAK,WACnC,OAAAmI,EAAc,CAAEtQ,KAAM,cAAe6L,SAAS,SAmMpC,GACmB,CACvB6G,MAAOnC,EACPK,KAAMrB,GAAcC,EAAc,GAAKoB,GACvC3P,UAAU,iBAEV,kBAAC,IAAW,MACZ,kBAAC,IAAS,SAETsO,GAAcC,IAAgC,IAAhBlH,EAAKwC,QACpC,kBAAC6H,EAAA,WAAU,KACT,kBAACC,EAAA,EAAQ,KACP,kBAACC,EAAA,EAAU,KACT,kBAACD,EAAA,EAAQ,KACP,kBAACE,EAAA,EAAc,CAAC/E,KAAM,OAExB,kBAACgF,EAAA,EAAK,CAACC,aAAa,KAAKC,KAAK,MAC3B1F,EAAKgE,OACF/F,EAAc,IAAe9H,eAC7B8H,EAAc,IAAkBhN,YAEtC,kBAAC0U,EAAA,EAAc,KACZ3F,EAAKgE,OACF/F,EAAc,IAAe7H,qBAC7B6H,EAAc,IAAkB/M,wBAEpC8O,EAAKgE,QACL,kBAAC4B,EAAA,EAA0B,KACzB,kBAAC3S,EAAA,EAAM,CAACgM,QAAQ,OAAOpM,QAAS8Q,IAC7B1F,EAAc,IAAkB9M,oBAQ7C6Q,GAAcC,IAAgB,kBAAC,IAAU,MAC3C,kBAAC4D,EAAA,aAAY,CAACnS,UAAU,aACtB,yBAAKA,UAAU,+BACb,kBAACoS,EAAA,EAAI,CAACC,eAAgB,CAAEC,QAAS,0BAC9BhG,GAAQA,EAAKpB,MAAS,GACrB,kBAAC,IAAe,CACdlL,UAAU,YACVoR,WAAY9C,GAAcC,EAC1B8C,WAAYvB,GACZxD,KAAMA,WC3ZX,UAbqB,WAKlC,OAJA,qBAAU,WACRiG,OAAOC,SAASC,OAAOC,YAAY,CAAEtV,GAAI,SAAUuV,cAAc,MAChE,IAGD,kBAACC,EAAA,EAAK,KACJ,kBAAC,IAAe,CAAC5Q,OAAQ,MACzB,kBAAC,GAAU","file":"js/orders~91f4305a.1c7845adae6046f8e4fa.js","sourcesContent":["import { defineMessages } from 'react-intl';\n\nconst filteringMessages = defineMessages({\n  noItems: {\n    id: 'common.filtering.noItems',\n    defaultMessage: 'No items found'\n  },\n  filterByProduct: {\n    id: 'common.filtering.filterByProduct',\n    defaultMessage: 'Filter by product'\n  },\n  noResults: {\n    id: 'common.filtering.noResults',\n    defaultMessage: 'No results found'\n  },\n  noResultsDescription: {\n    id: 'common.filtering.noResultsDescription',\n    defaultMessage:\n      'No results match the filter criteria. Remove all filters or clear all filters to show results.'\n  },\n  clearFilters: {\n    id: 'common.filtering.clear-filters',\n    defaultMessage: 'Clear all filters'\n  },\n  noProducts: {\n    id: 'common.filtering.no-products',\n    defaultMessage: 'No products yet'\n  },\n  noRecords: {\n    id: 'commonMessages.noRecords',\n    defaultMessage: 'No records'\n  },\n  filterByTitle: {\n    id: 'tableToolbar.filterByTitle',\n    defaultMessage: 'Filter by {title}'\n  },\n  noResultsFound: {\n    id: 'tableToolbar.noResultsFound',\n    defaultMessage: 'No results found'\n  },\n  noResult: {\n    id: 'tableToolbar.noResult',\n    defaultMessage: 'No {results}'\n  },\n  unknown: {\n    id: 'commonMessages.unknown',\n    defaultMessage: 'Unknown'\n  }\n});\n\nexport default filteringMessages;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport styled from 'styled-components';\nimport { SearchIcon, CloseIcon } from '@patternfly/react-icons';\nimport { ToolbarItem, TextInput } from '@patternfly/react-core';\n\nconst FilterInputGroup = styled.div`\n  position: relative;\n  width: 300px;\n  height: 36px;\n`;\n\nconst FilterInput = styled(TextInput)`\n  position: absolute;\n  width: 300px;\n  padding-right: 34px;\n  background: transparent;\n`;\n\nconst FilterIconsContainer = styled.span`\n  position: absolute;\n  right: 8px;\n  top: 8px;\n`;\n\nconst StyledCloseIcon = styled(CloseIcon)`\n  z-index: 1000;\n  fill: #72767b;\n  :hover {\n    fill: var(--pf-global--Color--100);\n    cursor: pointer;\n  }\n`;\n\nconst StyledSearchIcon = styled(SearchIcon)`\n  z-index: 1000;\n  fill: #72767b;\n`;\n\nexport interface FilterToolbarItemProps {\n  searchValue?: string;\n  onFilterChange: (value: string) => void;\n  placeholder?: string;\n  isClearable?: boolean;\n}\nconst FilterToolbarItem: React.ComponentType<FilterToolbarItemProps> = ({\n  searchValue = '',\n  onFilterChange,\n  placeholder,\n  isClearable = false,\n  ...rest\n}) => (\n  <ToolbarItem>\n    <FilterInputGroup>\n      <FilterInput\n        id=\"toolbar-filter\"\n        placeholder={placeholder}\n        value={searchValue}\n        type=\"text\"\n        onChange={onFilterChange}\n        aria-label={placeholder}\n        {...rest}\n      />\n      <FilterIconsContainer>\n        {(isClearable && searchValue && (\n          <StyledCloseIcon\n            width=\"16\"\n            height=\"16\"\n            onClick={() => onFilterChange('')}\n          />\n        )) || <StyledSearchIcon />}\n      </FilterIconsContainer>\n    </FilterInputGroup>\n  </ToolbarItem>\n);\n\nexport default FilterToolbarItem;\n","/* eslint-disable react/prop-types */\nimport React, { ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Level,\n  LevelItem,\n  ToolbarItem,\n  ToolbarContent,\n  ButtonProps\n} from '@patternfly/react-core';\n\nimport FilterToolbarItem from '../presentational-components/shared/filter-toolbar-item';\nimport TopToolbar, {\n  TopToolbarTitle\n} from '../presentational-components/shared/top-toolbar';\nimport AppTabs from '../presentational-components/shared/app-tabs';\nimport CatalogLink from '../smart-components/common/catalog-link';\nimport {\n  StyledToolbar,\n  StyledToolbarGroup,\n  StyledToolbarProps\n} from '../presentational-components/styled-components/toolbars';\n\nexport interface ToolbarButtonProps extends Omit<ButtonProps, 'title'> {\n  title: ReactNode;\n}\n\nconst ToolbarButton: React.ComponentType<ToolbarButtonProps> = ({\n  title,\n  ...props\n}) => <Button {...props}>{title}</Button>;\n\nToolbarButton.propTypes = {\n  title: PropTypes.string.isRequired\n};\n\nconst AppToolbar: React.ComponentType<StyledToolbarProps> = ({\n  children,\n  ...props\n}) => (\n  <StyledToolbar className=\"pf-u-p-0\" {...props}>\n    <ToolbarContent className=\"pf-u-pl-0\">{children}</ToolbarContent>\n  </StyledToolbar>\n);\nconst toolbarMapper = {\n  TopToolbar,\n  TopToolbarTitle,\n  Toolbar: AppToolbar,\n  ToolbarGroup: StyledToolbarGroup,\n  ToolbarItem,\n  FilterToolbarItem,\n  Link: CatalogLink,\n  Level,\n  LevelItem,\n  Button: ToolbarButton,\n  AppTabs\n};\n\nexport const toolbarComponentTypes = {\n  TOP_TOOLBAR: 'TopToolbar',\n  TOP_TOOLBAR_TITLE: 'TopToolbarTitle',\n  TOOLBAR: 'Toolbar',\n  TOOLBAR_ITEM: 'ToolbarItem',\n  TOOLBAR_GROUP: 'ToolbarGroup',\n  FILTER_TOOLBAR_ITEM: 'FilterToolbarItem',\n  LINK: 'Link',\n  BUTTON: 'Button',\n  LEVEL: 'Level',\n  LEVEL_ITEM: 'LevelItem',\n  TABS: 'AppTabs'\n};\n\nexport default toolbarMapper;\n","/* eslint-disable react/prop-types */\nimport React, { createContext, ReactNode } from 'react';\nimport toolbarMapper, { toolbarComponentTypes } from './toolbar-mapper';\nimport { AnyObject, ValueOf } from '../types/common-types';\n\nexport interface ToolbarField extends AnyObject {\n  component:\n    | ValueOf<typeof toolbarMapper>\n    | React.ComponentType\n    | ValueOf<typeof toolbarComponentTypes>;\n  hidden?: boolean;\n  fields?: ToolbarField[];\n  key: string;\n}\n\nexport interface ToolbarSchema {\n  fields: ToolbarField[];\n}\n\nconst ToolbarContext = createContext<{\n  render?: (fields: ToolbarField[]) => ReactNode;\n  componentMapper?: typeof toolbarMapper;\n}>({});\n\ninterface ComponentProps extends AnyObject {\n  component:\n    | ValueOf<typeof toolbarMapper>\n    | React.ComponentType\n    | ValueOf<typeof toolbarComponentTypes>;\n}\nconst Component: React.ComponentType<ComponentProps> = ({\n  component,\n  ...props\n}) => (\n  <ToolbarContext.Consumer>\n    {({ componentMapper }) => {\n      const C =\n        typeof component === 'string'\n          ? componentMapper &&\n            componentMapper[component as keyof typeof toolbarMapper]\n          : (component as React.ComponentType<any>);\n      return C ? <C {...props} /> : null;\n    }}\n  </ToolbarContext.Consumer>\n);\n\nconst render = (fields: ToolbarField[]): React.ReactNode =>\n  fields.map(({ hidden, fields, key, ...field }) =>\n    hidden ? null : fields ? (\n      <Component key={key} {...field}>\n        {render(fields)}\n      </Component>\n    ) : (\n      <Component key={key} {...field} />\n    )\n  );\n\nexport interface ToolbarRendererProps {\n  schema: ToolbarSchema;\n  componentMapper?: typeof toolbarMapper;\n}\nconst ToolbarRenderer: React.ComponentType<ToolbarRendererProps> = ({\n  schema,\n  componentMapper = toolbarMapper\n}) => (\n  <ToolbarContext.Provider value={{ render, componentMapper }}>\n    {render(schema.fields)}\n  </ToolbarContext.Provider>\n);\n\nexport default ToolbarRenderer;\n","import { defineMessages } from 'react-intl';\n\nconst ordersMessages = defineMessages({\n  orderedBy: {\n    id: 'orders.common.orderedBy',\n    defaultMessage: 'Ordered by {owner}'\n  },\n  orderedByLabel: {\n    id: 'orders.approval.orderedBy',\n    defaultMessage: 'Ordered by'\n  },\n  lastUpdated: {\n    id: 'orders.common.lastUpdated',\n    defaultMessage: 'Last updated'\n  },\n  compositeTitle: {\n    id: 'orders.common.compositeTitle',\n    defaultMessage: '{name} - Order # {id}'\n  },\n  detailTitle: {\n    id: 'orders.detail.title',\n    defaultMessage: 'Order ID {id}'\n  },\n  orderSuccess: {\n    id: 'orders.notification.success',\n    defaultMessage:\n      'You can track the progress of Order # {id} in your <link>Orders</link> page.'\n  },\n  noOrdersTitle: {\n    id: 'orders.list.empty.title',\n    defaultMessage: 'No orders'\n  },\n  noOrdersDescription: {\n    id: 'orders.list.empty.description',\n    defaultMessage: 'No orders have been created.'\n  },\n  noApprovalRequests: {\n    id: 'orders.approval.no-requests',\n    defaultMessage:\n      'We were unable to find any approval requests for this order.'\n  },\n  creatingApprovalRequest: {\n    id: 'orders.approval.creating',\n    defaultMessage: 'Creating approval request'\n  },\n  approvalTitle: {\n    id: 'orders.approval.title',\n    defaultMessage: 'Summary'\n  },\n  approvalDetail: {\n    id: 'orders.approval.view-detail',\n    // eslint-disable-next-line quotes\n    defaultMessage: \"View this order's approval request details\"\n  },\n  approvalCreated: {\n    id: 'orders.approval.details.created',\n    defaultMessage: 'Request created'\n  },\n  approvalReason: {\n    id: 'orders.approval.details.reason',\n    defaultMessage: 'Approval reason'\n  },\n  approvalCompleted: {\n    id: 'orders.approval.details.completed',\n    defaultMessage: 'Completed at'\n  },\n  orderDetails: {\n    id: 'orders.common.details',\n    defaultMessage: 'Order details'\n  },\n  menuApproval: {\n    id: 'orders.menu.approval',\n    defaultMessage: 'Approval'\n  },\n  menuLifecycle: {\n    id: 'orders.menu.lifecycle',\n    defaultMessage: 'Lifecycle'\n  },\n  menuSteps: {\n    id: 'orders.menu.steps',\n    defaultMessage: 'Order steps'\n  },\n  objectsNotFound: {\n    id: 'order.detail.not-found',\n    defaultMessage:\n      'The {objects} for this order {count, plural, one {is} other {are}} not available'\n  },\n  orderID: {\n    id: 'orders.order.detail.ID',\n    defaultMessage: 'Order ID'\n  },\n  orderParameters: {\n    id: 'orders.order.detail.parameters',\n    defaultMessage: 'Order parameters'\n  },\n  orderProgressMessages: {\n    id: 'orders.order.detail.messages',\n    defaultMessage: 'Progress messages'\n  },\n  lifecycleLink: {\n    id: 'orders.order.lifecicle.link',\n    defaultMessage: 'Manage product'\n  },\n  cancelOrder: {\n    id: 'orders.actions.cancel',\n    defaultMessage: 'Cancel order'\n  },\n  keepOrder: {\n    id: 'orders.actions.keep',\n    defaultMessage: 'Keep order'\n  },\n  cancelDescription: {\n    id: 'orders.cancel.description',\n    defaultMessage: 'Are you sure you want to cancel {name}?'\n  },\n  backToOrders: {\n    id: 'orders.toolbar.backLink',\n    defaultMessage: 'Back to orders'\n  },\n  orderDate: {\n    id: 'orders.approval.order-date',\n    defaultMessage: 'Order date'\n  },\n  approvalParameters: {\n    id: 'orders.approval.parameters',\n    defaultMessage: 'Parameters'\n  },\n  activity: {\n    id: 'orders.approval.activity',\n    defaultMessage: 'Activity'\n  }\n});\n\nexport default ordersMessages;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { Tabs, Tab } from '@patternfly/react-core';\nimport { useLocation } from 'react-router-dom';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\n\nexport interface AppTabsProps {\n  tabItems: {\n    name: string;\n    eventKey: number;\n    title: string;\n    disabled?: boolean;\n  }[];\n}\nconst AppTabs: React.ComponentType<AppTabsProps> = ({ tabItems }) => {\n  const { push } = useEnhancedHistory();\n  const { pathname, search } = useLocation();\n  const activeTab = tabItems.find(({ name }) => pathname.includes(name));\n  const handleTabClick = (\n    _event: React.MouseEvent<HTMLElement, MouseEvent>,\n    tabIndex: number | string\n  ) => push({ pathname: tabItems[tabIndex as number].name, search });\n\n  return (\n    <Tabs\n      activeKey={activeTab ? activeTab.eventKey : 0}\n      onSelect={handleTabClick}\n    >\n      {tabItems.map((item) => (\n        <Tab\n          title={item.title}\n          key={item.eventKey}\n          eventKey={item.eventKey}\n          name={item.name}\n          disabled={item.disabled}\n        />\n      ))}\n    </Tabs>\n  );\n};\n\nexport default AppTabs;\n","import labelMessages from './labels.messages';\n\nimport { defineMessages } from 'react-intl';\n\nconst statesMessages = defineMessages({\n  title: {\n    id: 'common.states.title',\n    defaultMessage: 'State'\n  },\n  ordered: {\n    id: 'common.states.ordered',\n    defaultMessage: 'Ordered'\n  },\n  approvalPending: {\n    id: 'common.states.approval-pending',\n    defaultMessage: 'Approval Pending'\n  },\n  canceled: {\n    id: 'common.states.canceled',\n    defaultMessage: 'Canceled'\n  },\n  completed: {\n    id: 'common.states.completed',\n    defaultMessage: 'Completed'\n  },\n  failed: {\n    id: 'common.states.failed',\n    defaultMessage: 'Failed'\n  },\n  undecided: {\n    id: 'common.states.undecided',\n    defaultMessage: 'Undecided'\n  },\n  approved: {\n    id: 'common.states.approved',\n    defaultMessage: 'Approved'\n  },\n  denied: {\n    id: 'common.states.denied',\n    defaultMessage: 'Denied'\n  },\n  error: {\n    id: 'common.states.error',\n    defaultMessage: 'Error'\n  },\n  pending: {\n    id: 'common.states.pending',\n    defaultMessage: 'Pending'\n  },\n  skipped: {\n    id: 'common.states.skipped',\n    defaultMessage: 'Skipped'\n  },\n  started: {\n    id: 'common.states.started',\n    defaultMessage: 'Started'\n  },\n  notified: {\n    id: 'common.states.notified',\n    defaultMessage: 'Notified'\n  }\n});\n\nexport const getTranslatableState = (\n  state: string\n): keyof typeof statesMessages =>\n  state\n    .replace(/\\s/g, '')\n    .replace(/^./, (char) => char.toLowerCase()) as keyof typeof statesMessages;\n\n/**\n * We must include the created state so the dynamic data from DB can look for these messages in one place\n * The created message is shared among other components and is just a state message\n */\nexport default { ...statesMessages, created: labelMessages.created };\n","// TODO migrate whole order-helper.js to TS\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  Order,\n  OrderItem,\n  PortfolioItem,\n  Portfolio,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\nimport { Source } from '@redhat-cloud-services/sources-client';\nimport { getAxiosInstance } from '../shared/user-login';\nimport { CATALOG_API_BASE, SOURCES_API_BASE } from '../../utilities/constants';\nconst axiosInstance = getAxiosInstance();\n\nexport interface ObjectNotFound {\n  object: 'Order item' | 'Product' | 'Portfolio' | 'Messages' | 'Platform';\n  notFound: boolean;\n}\n\nexport type OrderDetailPayload = [\n  Order,\n  OrderItem | ObjectNotFound,\n  PortfolioItem | ObjectNotFound,\n  Source | ObjectNotFound,\n  ProgressMessage | ObjectNotFound,\n  Portfolio | ObjectNotFound\n];\n\nexport const fetchOrderDetailSequence = async (\n  orderId: string\n): Promise<OrderDetailPayload> => {\n  let order: Order;\n  try {\n    order = await axiosInstance.get(`${CATALOG_API_BASE}/orders/${orderId}`);\n  } catch (error) {\n    order = {};\n    if (error.status === 404 || error.status === 400) {\n      catalogHistory.replace({\n        pathname: '/404',\n        state: { from: catalogHistory.location }\n      });\n    } else {\n      throw error;\n    }\n  }\n\n  let orderItem: OrderItem | ObjectNotFound = {\n    object: 'Order item',\n    notFound: true\n  };\n  try {\n    const orderItems = await axiosInstance.get(\n      `${CATALOG_API_BASE}/order_items?order_id=${order.id}`\n    );\n    orderItem = orderItems.data[0];\n  } catch (_error) {\n    // no handler\n  }\n\n  let portfolioItem: PortfolioItem | ObjectNotFound = {\n    object: 'Product',\n    notFound: true\n  };\n\n  try {\n    portfolioItem = await axiosInstance.get(\n      `${CATALOG_API_BASE}/portfolio_items/${\n        (orderItem as OrderItem).portfolio_item_id\n      }`\n    );\n  } catch (_error) {\n    // nohandler\n  }\n\n  const parallerRequests = [\n    axiosInstance\n      .get(\n        `${SOURCES_API_BASE}/sources/${\n          (portfolioItem as PortfolioItem).service_offering_source_ref\n        }`\n      )\n      .catch(() => ({ object: 'Platform', notFound: true })),\n\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/order_items/${\n          (orderItem as OrderItem).id\n        }/progress_messages`\n      )\n      .catch(() => ({ object: 'Messages', notFound: true })),\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/portfolios/${\n          (portfolioItem as PortfolioItem).portfolio_id\n        }`\n      )\n      .catch(() => ({ object: 'Portfolio', notFound: true }))\n  ];\n\n  return Promise.all(\n    parallerRequests\n  ).then(([platform, progressMessages, portfolio]) => [\n    order,\n    orderItem,\n    portfolioItem,\n    platform as Source | ObjectNotFound,\n    progressMessages as ProgressMessage | ObjectNotFound,\n    portfolio as Portfolio | ObjectNotFound\n  ]);\n};\n","/* eslint camelcase: 0 */\nimport {\n  getAxiosInstance,\n  getPortfolioItemApi,\n  getOrderApi,\n  getOrderItemApi,\n  getGraphqlInstance\n} from '../shared/user-login';\nimport {\n  CATALOG_API_BASE,\n  SOURCES_API_BASE,\n  APPROVAL_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  fetchOrderDetailSequence,\n  OrderDetailPayload\n} from './new-order-helper';\nimport {\n  ApiCollectionResponse,\n  ApiMetadata,\n  EnhancedOrder,\n  Full\n} from '../../types/common-types';\nimport {\n  ServicePlan,\n  Order,\n  OrderItem,\n  PortfolioItem,\n  ApprovalRequest\n} from '@redhat-cloud-services/catalog-client';\nimport { AxiosPromise } from 'axios';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\nimport { Request, Action } from '@redhat-cloud-services/approval-client';\n\nconst orderApi = getOrderApi();\nconst orderItemApi = getOrderItemApi();\nconst portfolioItemApi = getPortfolioItemApi();\nconst axiosInstance = getAxiosInstance();\nconst graphqlInstance = getGraphqlInstance();\n\nexport const getServicePlans = (\n  portfolioItemId: string\n): Promise<ApiCollectionResponse<ServicePlan>> =>\n  (portfolioItemApi.listServicePlans(portfolioItemId) as unknown) as Promise<\n    ApiCollectionResponse<ServicePlan>\n  >;\n\nexport const sendSubmitOrder = async ({\n  service_parameters: { providerControlParameters, ...service_parameters },\n  ...parameters\n}: AnyObject): Promise<EnhancedOrder> => {\n  const order: Order = ((await orderApi.createOrder()) as unknown) as Order;\n  let orderItem: Partial<OrderItem> = {};\n  orderItem.count = 1;\n  orderItem = {\n    ...orderItem,\n    ...parameters,\n    service_parameters,\n    provider_control_parameters: providerControlParameters || {}\n  };\n  const orderItemResponse = await orderApi.addToOrder(\n    order.id as string,\n    orderItem as OrderItem\n  );\n  return orderApi.submitOrder(order.id as string).then((order) => ({\n    ...order,\n    orderItem: (orderItemResponse as unknown) as OrderItem\n  }));\n};\n\nexport const cancelOrder = (orderId: string): AxiosPromise<Order> =>\n  orderApi.cancelOrder(orderId);\n\nconst getOrderItems = (\n  orderIds: string[]\n): Promise<ApiCollectionResponse<OrderItem>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/order_items?${orderIds\n      .map((orderId) => `filter[order_id][]=${orderId}`)\n      .join('&')}`\n  );\n\nconst getOrderPortfolioItems = (\n  itemIds: string[]\n): Promise<ApiCollectionResponse<PortfolioItem>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolio_items?${itemIds\n      .map((itemId) => `filter[id][]=${itemId}`)\n      .join('&')}`\n  );\n\nexport const getOrders = (\n  filter = '',\n  pagination = defaultSettings\n): Promise<{\n  data: (Order & { orderItems: OrderItem[] })[];\n  portfolioItems: ApiCollectionResponse<PortfolioItem>;\n  meta: ApiMetadata;\n}> =>\n  axiosInstance\n    .get(\n      `${CATALOG_API_BASE}/orders?${filter}&limit=${pagination.limit}&offset=${pagination.offset}`\n    ) // eslint-disable-line max-len\n    .then((orders: ApiCollectionResponse<Full<Order>>) =>\n      getOrderItems(orders.data.map(({ id }) => id)).then((orderItems) =>\n        getOrderPortfolioItems(\n          orderItems.data.map(({ portfolio_item_id }) => portfolio_item_id)\n        ).then((portfolioItems) => {\n          return {\n            portfolioItems,\n            ...orders,\n            data: orders.data.map((order) => ({\n              ...order,\n              orderItems: orderItems.data.filter(\n                ({ order_id }) => order_id === order.id\n              )\n            }))\n          };\n        })\n      )\n    );\n\nexport const getOrderApprovalRequests = (\n  orderItemId: string\n): Promise<ApiCollectionResponse<Request>> =>\n  (orderItemApi.listApprovalRequests(orderItemId) as unknown) as Promise<\n    ApiCollectionResponse<Request>\n  >;\n\nexport interface GetOrderDetailParams {\n  order: string;\n  'order-item'?: string;\n  'portfolio-item'?: string;\n  platform?: string;\n  portfolio?: string;\n}\nexport const getOrderDetail = (\n  params: GetOrderDetailParams\n): Promise<OrderDetailPayload> => {\n  if (Object.values(params).some((value) => !value)) {\n    /**\n     * Try to fetch data sequentially if any of the parameters is unknow\n     */\n    return fetchOrderDetailSequence(params.order);\n  }\n\n  const detailPromises = [\n    (axiosInstance\n      .get(`${CATALOG_API_BASE}/orders/${params.order}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return catalogHistory.replace({\n            pathname: '/404',\n            state: { from: catalogHistory.location }\n          });\n        }\n\n        throw error;\n      }) as unknown) as Promise<Order>,\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/order_items/${params['order-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Order item',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/portfolio_items/${params['portfolio-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Product',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${SOURCES_API_BASE}/sources/${params.platform}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Platform',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/order_items/${params['order-item']}/progress_messages`\n      )\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {};\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/portfolios/${params.portfolio}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Portfolio',\n            notFound: true\n          };\n        }\n\n        throw error;\n      })\n  ];\n\n  return (Promise.all(detailPromises) as unknown) as Promise<\n    OrderDetailPayload\n  >;\n};\n\nconst APPROVAL_REQUESTER_PERSONA = 'approval/requester';\nexport interface RequestTranscript extends Full<Request> {\n  actions: Action[];\n}\nconst requestTranscriptQuery = (parent_id: string) => `query {\n  requests(id: \"${parent_id}\") {\n    id\n    number_of_children\n    decision\n    group_name\n    created_at\n    state\n    actions {\n      id\n      created_at\n    }\n    requests {\n      id\n      number_of_children\n      decision\n      group_name\n      state\n      parent_id\n      created_at\n      actions {\n        id\n        created_at\n      }\n    }\n  }\n}`;\nconst fetchRequestTranscript = (\n  requestId: string\n): Promise<RequestTranscript[]> =>\n  graphqlInstance\n    .post(\n      `${APPROVAL_API_BASE}/graphql`,\n      { query: requestTranscriptQuery(requestId) },\n      { 'x-rh-persona': APPROVAL_REQUESTER_PERSONA }\n    )\n    .then(({ data: { requests } }) => {\n      return requests &&\n        requests.length > 0 &&\n        requests[0].number_of_children > 0\n        ? requests[0].requests\n        : requests;\n    });\n\nexport const getApprovalRequests = (\n  orderItemId: string\n): Promise<{\n  data: { group_name: string; state: string; updated?: string }[];\n}> =>\n  axiosInstance\n    .get(`${CATALOG_API_BASE}/order_items/${orderItemId}/approval_requests`)\n    .then(({ data }: { data: Full<ApprovalRequest>[] }) => {\n      const promises = data.map(({ approval_request_ref }) =>\n        fetchRequestTranscript(approval_request_ref)\n      );\n      return Promise.all(promises).then((requests) => {\n        const data = requests?.[0]?.map(({ actions, ...request }) => ({\n          ...request,\n          updated:\n            actions?.length > 0 ? actions.pop()?.created_at : request.created_at\n        }));\n        return { data: data || [] };\n      });\n    });\n","import React, { ComponentType, ReactElement, ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport { ORDER_ROUTE } from '../../constants/routes';\nimport ordersMessages from '../../messages/orders.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport { Dispatch } from 'redux';\n\nexport interface OrderNotificationProps {\n  id: string;\n  dispatch: Dispatch;\n  portfolioItemId: string;\n  portfolioId: string;\n  platformId: string;\n  orderItemId: string;\n}\n\nconst OrderNotification: ComponentType<OrderNotificationProps> = ({\n  id,\n  dispatch,\n  portfolioItemId,\n  portfolioId,\n  platformId,\n  orderItemId\n}) => {\n  const formatMessage = useFormatMessage();\n  return formatMessage(ordersMessages.orderSuccess, {\n    id,\n    // eslint-disable-next-line react/display-name\n    link: (chunks: ReactNode | ReactNode[]) => (\n      <Link\n        onClick={() => dispatch(clearNotifications())}\n        to={{\n          pathname: ORDER_ROUTE,\n          search: `?order=${id}&order-item=${orderItemId}&portfolio-item=${portfolioItemId}&platform=${platformId}&portfolio=${portfolioId}`\n        }}\n      >\n        {chunks}\n      </Link>\n    )\n  }) as ReactElement;\n};\n\nexport default OrderNotification;\n","import React from 'react';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\n\nimport * as ActionTypes from '../action-types';\nimport * as OrderHelper from '../../helpers/order/order-helper';\nimport OrderNotification from '../../presentational-components/order/order-notification';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport {\n  ApprovalRequestStateEnum,\n  Order,\n  OrderItem,\n  OrderStateEnum,\n  Portfolio,\n  PortfolioItem,\n  ProgressMessage,\n  ServicePlan\n} from '@redhat-cloud-services/catalog-client';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\nimport { Dispatch } from 'redux';\nimport {\n  Full,\n  StringObject,\n  ReduxAction,\n  ApiCollectionResponse\n} from '../../types/common-types';\nimport { AsyncMiddlewareAction, GetReduxState } from '../../types/redux';\nimport { Source } from '@redhat-cloud-services/sources-client';\nimport { ObjectNotFound } from '../../helpers/order/new-order-helper';\n\nexport const fetchServicePlans = (\n  portfolioItemId: string\n): AsyncMiddlewareAction<ApiCollectionResponse<ServicePlan>> => ({\n  type: ActionTypes.FETCH_SERVICE_PLANS,\n  payload: OrderHelper.getServicePlans(portfolioItemId)\n});\n\nexport const setSelectedPlan = (\n  data: ServicePlan\n): ReduxAction<ServicePlan> => ({\n  type: ActionTypes.SET_SELECTED_PLAN,\n  payload: data\n});\n\nexport const sendSubmitOrder = (\n  apiProps: AnyObject,\n  portfolioItem: Full<PortfolioItem>\n) => (dispatch: Dispatch): AsyncMiddlewareAction =>\n  dispatch({\n    type: ActionTypes.SUBMIT_SERVICE_ORDER,\n    payload: OrderHelper.sendSubmitOrder(apiProps).then(({ id, orderItem }) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been accepted successfully',\n          description: (\n            <OrderNotification\n              id={id!}\n              dispatch={dispatch}\n              portfolioItemId={portfolioItem.id}\n              portfolioId={portfolioItem.portfolio_id}\n              platformId={portfolioItem.service_offering_source_ref}\n              orderItemId={orderItem.id!}\n            />\n          ),\n          dismissable: true\n        })\n      )\n    )\n  });\n\nexport const cancelOrder = (orderId: string) => (\n  dispatch: Dispatch,\n  getState: GetReduxState\n): Promise<void | { type: string }> => {\n  dispatch({ type: `${ActionTypes.CANCEL_ORDER}_PENDING` });\n  const {\n    orderReducer: { orderDetail }\n  } = getState();\n  return OrderHelper.cancelOrder(orderId)\n    .then(() => {\n      orderDetail.order.state = OrderStateEnum.Canceled;\n      if (\n        orderDetail.approvalRequest &&\n        orderDetail.approvalRequest.data.length > 0\n      ) {\n        orderDetail.approvalRequest.data[0].state = 'canceled' as ApprovalRequestStateEnum;\n      }\n\n      dispatch({\n        type: ActionTypes.SET_ORDER_DETAIL,\n        payload: { ...orderDetail }\n      });\n      return orderDetail;\n    })\n    .then((orderDetail) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been canceled successfully',\n          description: `Order ${`Order #${orderDetail.order.id}`} was canceled.`,\n          dismissable: true\n        })\n      )\n    )\n    .then(() => dispatch({ type: `${ActionTypes.CANCEL_ORDER}_FULFILLED` }))\n    .catch((error) => {\n      dispatch({\n        type: `${ActionTypes.CANCEL_ORDER}_REJECTED`,\n        payload: error\n      });\n    });\n};\n\nexport const fetchOrders = (\n  filters: StringObject,\n  pagination = defaultSettings\n) => (dispatch: Dispatch): Promise<ReduxAction> => {\n  let queryFilter = Object.entries(filters)\n    .filter(([, value]) => value && value.length > 0)\n    .map(([key, value]) =>\n      Array.isArray(value)\n        ? value.map((value) => `filter[${key}][]=${value}`).join('&')\n        : `filter[${key}][contains_i]=${value}`\n    )\n    .join('&');\n  if (pagination.sortBy) {\n    queryFilter = `${queryFilter}&sort_by=${\n      pagination.sortBy\n    }:${pagination.sortDirection || 'desc'}`;\n  }\n\n  dispatch({ type: `${ActionTypes.FETCH_ORDERS}_PENDING` });\n  return OrderHelper.getOrders(queryFilter, pagination)\n    .then(({ portfolioItems, ...orders }) => {\n      dispatch({\n        type: ActionTypes.SET_PORTFOLIO_ITEMS,\n        payload: portfolioItems\n      });\n      return dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_FULFILLED`,\n        meta: {\n          ...pagination,\n          filter: queryFilter,\n          filters,\n          storeState: true,\n          stateKey: 'orders'\n        },\n        payload: orders\n      });\n    })\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchOrderDetails = (params: OrderHelper.GetOrderDetailParams) => (\n  dispatch: Dispatch\n): Promise<{\n  type: string;\n  payload: {\n    order: Order | ObjectNotFound;\n    orderItem: OrderItem | ObjectNotFound;\n    portfolioItem: PortfolioItem | ObjectNotFound;\n    platform: Source | ObjectNotFound;\n    progressMessages: ProgressMessage | ObjectNotFound;\n    portfolio: Portfolio | ObjectNotFound;\n  };\n}> => {\n  dispatch({ type: `${ActionTypes.SET_ORDER_DETAIL}_PENDING` });\n  return OrderHelper.getOrderDetail(params)\n    .then(\n      ([\n        order,\n        orderItem,\n        portfolioItem,\n        platform,\n        progressMessages,\n        portfolio\n      ]) =>\n        dispatch({\n          type: `${ActionTypes.SET_ORDER_DETAIL}_FULFILLED`,\n          payload: {\n            order,\n            orderItem,\n            portfolioItem,\n            platform,\n            progressMessages,\n            portfolio\n          }\n        })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_DETAIL}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchApprovalRequests = (orderItemId: string) => (\n  dispatch: Dispatch\n): Promise<\n  | {\n      data: {\n        group_name: string;\n        state: string;\n        updated?: string | undefined;\n      }[];\n    }\n  | { type: string; payload: any } /** the action in catch branch */\n> => {\n  dispatch({ type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_PENDING` });\n  return OrderHelper.getApprovalRequests(orderItemId)\n    .then((data) => {\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_FULFILLED`,\n        payload: data\n      });\n      return data;\n    })\n    .catch((err) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_REJECTED`,\n        payload: err\n      })\n    );\n};\n","import React, { ReactNode } from 'react';\nimport {\n  ExclamationCircleIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  ClockIcon,\n  PlusCircleIcon\n} from '@patternfly/react-icons';\n\nconst orderStatusMapper: {\n  Completed: { icon: ReactNode; color: 'green' };\n  Ordered: { icon: ReactNode; color: 'grey' };\n  Failed: { icon: ReactNode; color: 'red' };\n  Canceled: { icon: ReactNode; color: 'orange' };\n  Created: { icon: ReactNode; color: 'grey' };\n  'Approval Pending': { icon: ReactNode; color: 'blue' };\n} = {\n  Completed: { icon: <CheckCircleIcon />, color: 'green' },\n  'Approval Pending': {\n    icon: <ClockIcon />,\n    color: 'blue'\n  },\n  Ordered: { icon: <PlusCircleIcon />, color: 'grey' },\n  Failed: { icon: <ExclamationCircleIcon />, color: 'red' },\n  Canceled: { icon: <ExclamationTriangleIcon />, color: 'orange' },\n  Created: { icon: <PlusCircleIcon />, color: 'grey' }\n};\n\nexport default orderStatusMapper;\n","import { toolbarComponentTypes } from '../toolbar-mapper';\nimport { ToolbarSchema } from '../toolbar-renderer';\n\nconst createOrdersToolbarSchema = (): ToolbarSchema => ({\n  fields: [\n    {\n      component: toolbarComponentTypes.TOP_TOOLBAR,\n      className: 'orders pf-u-p-lg',\n      key: 'orders-toolbar',\n      fields: [\n        {\n          component: toolbarComponentTypes.TOP_TOOLBAR_TITLE,\n          key: 'orders-toolbar-title',\n          title: 'Orders',\n          className: ''\n        }\n      ]\n    }\n  ]\n});\n\nexport default createOrdersToolbarSchema;\n","import React, { Fragment, ReactNode } from 'react';\nimport { Label, Text, TextVariants } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\n\nimport CardIcon from '../../presentational-components/shared/card-icon';\nimport { getOrderIcon } from '../../helpers/shared/orders';\nimport CatalogLink from '../common/catalog-link';\nimport { ORDER_ROUTE } from '../../constants/routes';\nimport statesMessages, {\n  getTranslatableState\n} from '../../messages/states.messages';\n\nimport { TableText } from '@patternfly/react-table';\nimport orderStatusMapper from './order-status-mapper';\nimport { OrderDetail } from '../../redux/reducers/order-reducer';\nimport { FormatMessage, StringObject } from '../../types/common-types';\n\nconst createOrderItem = (\n  item: OrderDetail,\n  orderPlatform: string | undefined,\n  orderPortfolio: string | undefined,\n  formatMessage: FormatMessage\n): { title: ReactNode }[] => {\n  const orderItem = (item.orderItems[0] && item.orderItems[0]) || {};\n  const searchParams: StringObject = {\n    order: item.id,\n    ...(orderItem.id ? { 'order-item': orderItem.id } : {}),\n    ...(orderItem.portfolio_item_id\n      ? { 'portfolio-item': orderItem.portfolio_item_id }\n      : {}),\n    ...(orderPlatform ? { platform: orderPlatform } : {}),\n    ...(orderPortfolio ? { portfolio: orderPortfolio } : {})\n  };\n  const translatableState = getTranslatableState(item.state);\n  return [\n    {\n      title: (\n        <TableText>\n          <CatalogLink pathname={ORDER_ROUTE} searchParams={searchParams}>\n            {item.id}\n          </CatalogLink>\n        </TableText>\n      )\n    },\n    {\n      title: (\n        <Fragment>\n          <CardIcon\n            height={60}\n            src={getOrderIcon(item)}\n            sourceId={orderPlatform}\n          />\n        </Fragment>\n      )\n    },\n    item.orderName,\n    item.owner,\n    {\n      title: (\n        <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n          <DateFormat date={item.created_at} variant=\"relative\" />\n        </Text>\n      )\n    },\n    {\n      title: (\n        <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n          <DateFormat\n            date={item.orderItems[0] && item.orderItems[0].updated_at}\n            variant=\"relative\"\n          />\n        </Text>\n      )\n    },\n    {\n      title: (\n        <TableText>\n          <Label\n            {...orderStatusMapper[item.state as keyof typeof orderStatusMapper]}\n            variant=\"outline\"\n          >\n            {formatMessage(statesMessages[translatableState])}\n          </Label>\n        </TableText>\n      )\n    }\n  ];\n};\n\nexport default createOrderItem;\n","import { CATALOG_API_BASE } from '../../utilities/constants';\nimport { PortfolioItem } from '@redhat-cloud-services/catalog-client';\nimport { Full } from '../../types/common-types';\nimport { OrderDetail } from '../../redux/reducers/order-reducer';\n\nexport const getOrderIcon = ({ orderItems }: OrderDetail): string | undefined =>\n  orderItems[0] &&\n  `${CATALOG_API_BASE}/portfolio_items/${orderItems[0].portfolio_item_id}/icon`;\n\nexport const getOrderPortfolioName = (\n  { orderItems, id }: OrderDetail,\n  portfolioItems: Full<PortfolioItem>[]\n): string => {\n  const portfolioItem =\n    orderItems[0] &&\n    portfolioItems.find(({ id }) => orderItems[0].portfolio_item_id === id);\n  return portfolioItem ? portfolioItem.name : `Order ${id}`;\n};\n\nexport const getOrderPlatformId = (\n  { orderItems }: OrderDetail,\n  portfolioItems: Full<PortfolioItem>[]\n): {\n  orderPlatform?: string;\n  orderPortfolio?: string;\n} => {\n  const portfolioItem =\n    orderItems[0] &&\n    portfolioItems.find(({ id }) => orderItems[0].portfolio_item_id === id);\n  return portfolioItem\n    ? {\n        orderPlatform: portfolioItem.service_offering_source_ref,\n        orderPortfolio: portfolioItem.portfolio_id\n      }\n    : {};\n};\n","import React, { useEffect, useReducer } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Grid,\n  GridItem,\n  Title,\n  Bullseye,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Flex,\n  EmptyStateSecondaryActions,\n  Button\n} from '@patternfly/react-core';\nimport { Section } from '@redhat-cloud-services/frontend-components/components/cjs/Section';\nimport {\n  Chip,\n  PrimaryToolbar\n} from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/components/cjs/EmptyTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/TableToolbar';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n  ISortBy,\n  OnSort,\n  ICell\n} from '@patternfly/react-table';\n\nimport { fetchOrders } from '../../redux/actions/order-actions';\nimport { fetchPlatforms } from '../../redux/actions/platform-actions';\nimport { ListLoader } from '../../presentational-components/shared/loader-placeholders';\nimport createOrderItem from './order-item';\nimport AsyncPagination from '../common/async-pagination';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport {\n  defaultSettings,\n  PaginationConfiguration\n} from '../../helpers/shared/pagination';\nimport useInitialUriHash from '../../routing/use-initial-uri-hash';\nimport statesMessages from '../../messages/states.messages';\nimport filteringMessages from '../../messages/filtering.messages';\nimport ordersMessages from '../../messages/orders.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport {\n  getOrderPlatformId,\n  getOrderPortfolioName\n} from '../../helpers/shared/orders';\nimport { CatalogRootState } from '../../types/redux';\nimport {\n  ApiCollectionResponse,\n  Full,\n  StringObject\n} from '../../types/common-types';\nimport { PortfolioItem } from '@redhat-cloud-services/catalog-client';\nimport { OrderDetail } from '../../redux/reducers/order-reducer';\n\nconst debouncedFilter = asyncFormValidator(\n  (filters, meta = defaultSettings, dispatch, filteringCallback) => {\n    filteringCallback(true);\n    dispatch(fetchOrders(filters, meta)).then(() => filteringCallback(false));\n  },\n  1000\n);\n\nconst initialState = {\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false,\n  filterType: 'state',\n  filters: {\n    state: [],\n    owner: ''\n  },\n  sortBy: {\n    index: 0,\n    direction: SortByDirection.desc\n  }\n};\n\nconst changeFilters = (\n  value: string,\n  type: string,\n  filters: StringObject\n): StringObject => ({\n  ...filters,\n  [type]: value\n});\n\ninterface OrdersListState {\n  isFetching?: boolean;\n  filters: StringObject;\n  filterType: string;\n  isFiltering?: boolean;\n  sortBy: Full<ISortBy>;\n}\nconst ordersListState = (\n  state: OrdersListState,\n  action: { type: string; payload: any }\n): OrdersListState => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return {\n        ...state,\n        filters: changeFilters(action.payload, state.filterType, state.filters)\n      };\n    case 'replaceFilterChip':\n      return { ...state, filters: action.payload };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    case 'setFilterType':\n      return { ...state, filterType: action.payload };\n    case 'setSortBy':\n      return { ...state, sortBy: action.payload, isFetching: true };\n  }\n\n  return state;\n};\n\nconst sortIndexMapper = {\n  0: 'id',\n  3: 'owner',\n  4: 'created_at',\n  6: 'state'\n};\n\nconst OrdersList: React.ComponentType = () => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const viewState = useInitialUriHash();\n  const [\n    { isFetching, isFiltering, filterType, filters, sortBy },\n    stateDispatch\n  ] = useReducer(ordersListState, {\n    ...initialState,\n    filters: viewState?.orders?.filters || { state: [], owner: '' },\n    sortBy: {\n      direction: viewState?.orders?.sortDirection || SortByDirection.desc,\n      index: viewState?.orders?.sortIndex || 0\n    }\n  });\n  const { data, meta } = useSelector<\n    CatalogRootState,\n    ApiCollectionResponse<OrderDetail>\n  >(({ orderReducer }) => orderReducer.orders);\n  const columns: ICell[] = [\n    { title: formatMessage(ordersMessages.orderID) },\n    formatMessage(labelMessages.product),\n    '', // need empty row column to correctly aling product names after the icon column\n    {\n      title: formatMessage(ordersMessages.orderedByLabel)\n    },\n    { title: formatMessage(ordersMessages.orderDate) },\n    formatMessage(labelMessages.updated),\n    { title: formatMessage(labelMessages.status) }\n  ].map((column) =>\n    typeof column === 'object' &&\n    !isFetching &&\n    !isFiltering &&\n    data.length !== 0\n      ? { ...column, transforms: [sortable] }\n      : column\n  ) as ICell[];\n  const portfolioItems = useSelector<CatalogRootState, Full<PortfolioItem>[]>(\n    ({\n      portfolioReducer: {\n        portfolioItems: { data }\n      }\n    }) => data as Full<PortfolioItem>[]\n  );\n  const onSort: OnSort = (_e, index, direction) => {\n    stateDispatch({\n      type: 'setSortBy',\n      payload: { index, direction }\n    });\n    return ((dispatch(\n      fetchOrders(filters, {\n        ...meta,\n        sortBy: sortIndexMapper[index as keyof typeof sortIndexMapper],\n        sortDirection: direction,\n        sortIndex: index\n      })\n    ) as unknown) as Promise<void>).then(() =>\n      stateDispatch({ type: 'setFetching', payload: false })\n    );\n  };\n\n  const rows = data.map((item) => {\n    const { orderPlatform, orderPortfolio } = getOrderPlatformId(\n      item,\n      portfolioItems\n    );\n    const orderName = getOrderPortfolioName(item, portfolioItems);\n    return createOrderItem(\n      { ...item, orderName },\n      orderPlatform,\n      orderPortfolio,\n      formatMessage\n    );\n  });\n\n  useEffect(() => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    Promise.all([\n      dispatch(fetchOrders(filters, viewState?.orders)),\n      dispatch(fetchPlatforms())\n    ]).then(() => stateDispatch({ type: 'setFetching', payload: false }));\n  }, []);\n\n  const handlePagination = (\n    _apiProps: any,\n    pagination: PaginationConfiguration\n  ) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    return ((dispatch(\n      fetchOrders(filters, {\n        ...pagination,\n        sortBy: sortIndexMapper[sortBy.index as keyof typeof sortIndexMapper],\n        sortDirection: sortBy.direction as SortByDirection,\n        sortIndex: sortBy.index\n      })\n    ) as unknown) as Promise<void>)\n      .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n      .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  const handleFilterItems = (value = '') => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      { ...filters, [filterType]: value },\n      {\n        ...meta,\n        sortBy: sortIndexMapper[sortBy.index as keyof typeof sortIndexMapper],\n        sortDirection: sortBy.direction,\n        sortIndex: sortBy.index,\n        offset: 0\n      },\n      dispatch,\n      (isFiltering: boolean) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering })\n    );\n  };\n\n  const handleClearAll = () => {\n    stateDispatch({\n      type: 'replaceFilterChip',\n      payload: initialState.filters\n    });\n    return debouncedFilter(\n      initialState.filters,\n      {\n        ...meta,\n        sortBy: sortIndexMapper[sortBy.index as keyof typeof sortIndexMapper],\n        sortDirection: sortBy.direction,\n        sortIndex: sortBy.index\n      },\n      dispatch,\n      (isFiltering: boolean) =>\n        stateDispatch({\n          type: 'setFilteringFlag',\n          payload: isFiltering\n        })\n    );\n  };\n\n  return (\n    <Grid hasGutter>\n      <GridItem>\n        <Section type=\"content\">\n          {!meta.noData && (\n            <PrimaryToolbar\n              activeFiltersConfig={{\n                filters: Object.entries(filters)\n                  .filter(([, value]) => value && value.length > 0)\n                  .map<{ category: string; type: string; chips: Chip[] }>(\n                    ([key, value]) => ({\n                      category: key,\n                      type: key,\n                      chips: Array.isArray(value)\n                        ? value.map<Chip>((name) => ({ name }))\n                        : ([{ name: value }] as Chip[])\n                    })\n                  ),\n                onDelete: (_e, [chip], clearAll) => {\n                  if (clearAll) {\n                    return handleClearAll();\n                  }\n\n                  const newFilters = { ...filters };\n                  if (chip.type === 'state') {\n                    newFilters[chip.type] = (((newFilters[\n                      chip.type\n                    ] as unknown) as string[]).filter(\n                      (value) => value !== chip?.chips?.[0].name\n                    ) as unknown) as string;\n                  } else {\n                    newFilters[chip.type!] = '';\n                  }\n\n                  stateDispatch({\n                    type: 'replaceFilterChip',\n                    payload: newFilters\n                  });\n                  debouncedFilter(\n                    newFilters,\n                    meta,\n                    dispatch,\n                    (isFiltering: boolean) =>\n                      stateDispatch({\n                        type: 'setFilteringFlag',\n                        payload: isFiltering\n                      })\n                  );\n                }\n              }}\n              filterConfig={{\n                onChange: (_e, value) =>\n                  stateDispatch({ type: 'setFilterType', payload: value }),\n                value: filterType,\n                items: [\n                  {\n                    filterValues: {\n                      items: [\n                        {\n                          value: 'Approval Pending',\n                          label: formatMessage(statesMessages.approvalPending)\n                        },\n                        {\n                          value: 'Canceled',\n                          label: formatMessage(statesMessages.canceled)\n                        },\n                        {\n                          value: 'Completed',\n                          label: formatMessage(statesMessages.completed)\n                        },\n                        {\n                          value: 'Created',\n                          label: formatMessage(labelMessages.created)\n                        },\n                        {\n                          value: 'Failed',\n                          label: formatMessage(statesMessages.failed)\n                        },\n                        {\n                          value: 'Ordered',\n                          label: formatMessage(statesMessages.ordered)\n                        }\n                      ],\n                      value: filters.state,\n                      onChange: (_e, value) => handleFilterItems(value)\n                    },\n                    label: 'State',\n                    value: 'state',\n                    type: 'checkbox'\n                  },\n                  {\n                    filterValues: {\n                      value: filters.owner,\n                      onChange: (_e, value) => handleFilterItems(value)\n                    },\n                    label: 'Owner',\n                    value: 'owner'\n                  }\n                ]\n              }}\n              pagination={\n                <AsyncPagination\n                  isDisabled={isFetching || isFiltering}\n                  apiRequest={handlePagination}\n                  meta={meta}\n                  isCompact\n                />\n              }\n            />\n          )}\n          <Table\n            aria-label=\"orders\"\n            {...(!(isFetching || isFiltering) && data.length === 0\n              ? {}\n              : { sortBy, onSort })}\n            cells={columns}\n            rows={isFetching || isFiltering ? [] : rows}\n            className=\"orders-table\"\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {!(isFetching || isFiltering) && data.length === 0 && (\n            <EmptyTable>\n              <Bullseye>\n                <EmptyState>\n                  <Bullseye>\n                    <EmptyStateIcon icon={SearchIcon} />\n                  </Bullseye>\n                  <Title headingLevel=\"h1\" size=\"lg\">\n                    {meta.noData\n                      ? formatMessage(ordersMessages.noOrdersTitle)\n                      : formatMessage(filteringMessages.noResults)}\n                  </Title>\n                  <EmptyStateBody>\n                    {meta.noData\n                      ? formatMessage(ordersMessages.noOrdersDescription)\n                      : formatMessage(filteringMessages.noResultsDescription)}\n                  </EmptyStateBody>\n                  {!meta.noData && (\n                    <EmptyStateSecondaryActions>\n                      <Button variant=\"link\" onClick={handleClearAll}>\n                        {formatMessage(filteringMessages.clearFilters)}\n                      </Button>\n                    </EmptyStateSecondaryActions>\n                  )}\n                </EmptyState>\n              </Bullseye>\n            </EmptyTable>\n          )}\n          {(isFetching || isFiltering) && <ListLoader />}\n          <TableToolbar className=\"pf-u-mr-0\">\n            <div className=\"bottom-pagination-container\">\n              <Flex justifyContent={{ default: 'justifyContentFlexEnd' }}>\n                {meta && meta.count! > 0 && (\n                  <AsyncPagination\n                    className=\"pf-u-mt-0\"\n                    isDisabled={isFetching || isFiltering}\n                    apiRequest={handlePagination}\n                    meta={meta}\n                  />\n                )}\n              </Flex>\n            </div>\n          </TableToolbar>\n        </Section>\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default OrdersList;\n","import React, { useEffect } from 'react';\nimport { Stack } from '@patternfly/react-core';\n\nimport ToolbarRenderer from '../../toolbar/toolbar-renderer';\nimport createOrdersToolbarSchema from '../../toolbar/schemas/orders-toolbar.schema';\nimport OrdersList from './orders-list';\n\nconst Orders: React.ComponentType = () => {\n  useEffect(() => {\n    window.insights.chrome.appNavClick({ id: 'orders', secondaryNav: true });\n  }, []);\n\n  return (\n    <Stack>\n      <ToolbarRenderer schema={createOrdersToolbarSchema()} />\n      <OrdersList />\n    </Stack>\n  );\n};\n\nexport default Orders;\n"],"sourceRoot":""}