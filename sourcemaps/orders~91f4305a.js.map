{"version":3,"sources":["webpack:///./src/utilities/use-enhanced-history.ts","webpack:///./src/presentational-components/shared/filter-toolbar-item.tsx","webpack:///./src/toolbar/toolbar-mapper.tsx","webpack:///./src/messages/filtering.messages.ts","webpack:///./src/toolbar/toolbar-renderer.tsx","webpack:///./src/messages/orders.messages.ts","webpack:///./src/helpers/platform/platform-helper.ts","webpack:///./src/redux/actions/platform-actions.ts","webpack:///./src/presentational-components/shared/app-tabs.tsx","webpack:///./src/messages/states.messages.ts","webpack:///./src/helpers/order/new-order-helper.ts","webpack:///./src/helpers/order/order-helper.ts","webpack:///./src/presentational-components/order/order-notification.tsx","webpack:///./src/redux/actions/order-actions.tsx","webpack:///./src/smart-components/order/order-status-mapper.tsx","webpack:///./src/toolbar/schemas/orders-toolbar.schema.ts","webpack:///./src/smart-components/order/order-item.tsx","webpack:///./src/helpers/shared/orders.ts","webpack:///./src/smart-components/order/orders-list.tsx","webpack:///./src/smart-components/order/orders.tsx"],"names":["removeSearch","keepHash","history","push","target","internalTarget","location","hash","length","split","search","undefined","removeSearchQuery","FilterInputGroup","div","FilterInput","TextInput","FilterIconsContainer","span","StyledCloseIcon","StyledSearchIcon","searchValue","onFilterChange","placeholder","isClearable","rest","ToolbarItem","id","value","type","onChange","width","height","onClick","ToolbarButton","title","props","Button","propTypes","string","isRequired","toolbarMapper","TopToolbar","TopToolbarTitle","Toolbar","children","className","ToolbarContent","ToolbarGroup","FilterToolbarItem","Link","Level","LevelItem","AppTabs","toolbarComponentTypes","TOP_TOOLBAR","TOP_TOOLBAR_TITLE","TOOLBAR","TOOLBAR_ITEM","TOOLBAR_GROUP","FILTER_TOOLBAR_ITEM","LINK","BUTTON","LEVEL","LEVEL_ITEM","TABS","filteringMessages","noItems","defaultMessage","filterByProduct","noResults","noResultsDescription","clearFilters","noProducts","noRecords","filterByTitle","noResultsFound","noResult","unknown","ToolbarContext","Component","component","Consumer","componentMapper","C","render","fields","map","hidden","key","field","schema","Provider","ordersMessages","orderedBy","orderedByLabel","lastUpdated","compositeTitle","detailTitle","orderSuccess","noOrdersTitle","noOrdersDescription","noApprovalRequests","creatingApprovalRequest","approvalTitle","approvalDetail","approvalCreated","approvalReason","approvalCompleted","orderDetails","menuApproval","menuLifecycle","menuSteps","objectsNotFound","orderID","orderParameters","orderProgressMessages","lifecycleLink","cancelOrder","keepOrder","cancelDescription","backToOrders","orderDate","approvalParameters","activity","axiosInstance","graphqlInstance","getPlatformItems","platformId","filter","options","filterQuery","get","limit","offset","getPlatformInventories","getServiceOffering","serviceOfferingId","sourceId","Promise","all","then","source","source_type_id","icon_url","service","fetchPlatforms","dispatch","post","query","data","payload","catch","error","fetchPlatformItems","meta","fetchSelectedPlatform","fetchPlatformInventories","fetchServiceOffering","tabItems","pathname","activeTab","find","name","includes","activeKey","eventKey","onSelect","_event","tabIndex","item","disabled","statesMessages","ordered","approvalPending","canceled","completed","failed","undecided","approved","denied","pending","skipped","started","notified","getTranslatableState","state","replace","char","toLowerCase","created","orderApi","portfolioItemApi","getServicePlans","portfolioItemId","listServicePlans","getOrders","pagination","orders","orderIds","orderId","join","orderItems","itemIds","itemId","portfolioItems","order","getOrderDetail","params","Object","values","some","status","from","orderItem","object","notFound","portfolioItem","portfolio_item_id","parallerRequests","service_offering_source_ref","portfolio_id","platform","progressMessages","portfolio","detailPromises","getApprovalRequests","orderItemId","promises","requestId","parent_id","approval_request_ref","requests","number_of_children","actions","request","updated","pop","created_at","portfolioId","formatMessage","link","chunks","to","fetchServicePlans","apiProps","service_parameters","providerControlParameters","parameters","createOrder","count","provider_control_parameters","addToOrder","orderItemResponse","submitOrder","variant","description","dismissable","getState","orderDetail","Canceled","approvalRequest","fetchOrders","filters","queryFilter","entries","Array","isArray","sortBy","sortDirection","storeState","stateKey","fetchOrderDetails","fetchApprovalRequests","err","orderStatusMapper","Completed","icon","color","Ordered","Failed","Created","orderPlatform","orderPortfolio","searchParams","translatableState","TableText","src","orderName","owner","Text","small","DateFormat","date","updated_at","Label","debouncedFilter","filteringCallback","initialState","isOpen","isFetching","isFiltering","filterType","index","direction","desc","ordersListState","action","sortIndexMapper","0","3","4","6","viewState","sortIndex","stateDispatch","columns","product","column","transforms","sortable","rows","getOrderPlatformId","getOrderPortfolioName","handlePagination","_apiProps","handleFilterItems","handleClearAll","Grid","hasGutter","GridItem","Section","noData","PrimaryToolbar","activeFiltersConfig","category","chips","onDelete","_e","clearAll","chip","newFilters","filterConfig","items","filterValues","label","isDisabled","apiRequest","isCompact","Table","onSort","cells","EmptyTable","Bullseye","EmptyState","EmptyStateIcon","Title","headingLevel","size","EmptyStateBody","EmptyStateSecondaryActions","TableToolbar","Flex","justifyContent","default","window","insights","chrome","appNavClick","secondaryNav","Stack"],"mappings":"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","file":"js/orders~91f4305a.3b9bd477f06e11537c63.js","sourcesContent":["import { useHistory } from 'react-router-dom';\nimport { History, Path } from 'history';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\n\nexport type EnhancedHistoryPushtarget =\n  | Path\n  | { pathname: string; hash?: string; search?: string; state?: AnyObject };\n\nconst removeSearchQuery = (target: EnhancedHistoryPushtarget) => {\n  if (typeof target === 'string') {\n    return target.split('?')[0];\n  }\n\n  if (typeof target === 'object') {\n    return {\n      ...target,\n      search: undefined\n    };\n  }\n\n  return target;\n};\n\n/**\n * Wrapper around useHistory hook which adds aditional settings to standard history methods\n * @param {Boolean} removeSearch if true, using history navigation methods will remove search string from path\n * @param {Boolean} keepHash if true, using history navigation methods will not remove hash from URL\n */\nconst useEnhancedHistory = ({\n  removeSearch,\n  keepHash\n}: {\n  removeSearch?: boolean;\n  keepHash?: boolean;\n} = {}): History<History.UnknownFacade> => {\n  const history = useHistory();\n  return {\n    ...history,\n    push: (target: EnhancedHistoryPushtarget) => {\n      let internalTarget = target;\n      if (keepHash && history.location.hash.length > 0) {\n        internalTarget =\n          typeof internalTarget === 'object'\n            ? { ...internalTarget, hash: history.location.hash }\n            : `${internalTarget}${history.location.hash}`;\n      }\n\n      if (removeSearch) {\n        return history.push(removeSearchQuery(internalTarget));\n      }\n\n      return history.push(internalTarget);\n    }\n  };\n};\n\nexport default useEnhancedHistory;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport styled from 'styled-components';\nimport { SearchIcon, CloseIcon } from '@patternfly/react-icons';\nimport { ToolbarItem, TextInput } from '@patternfly/react-core';\n\nconst FilterInputGroup = styled.div`\n  position: relative;\n  width: 300px;\n  height: 36px;\n`;\n\nconst FilterInput = styled(TextInput)`\n  position: absolute;\n  width: 300px;\n  padding-right: 34px;\n  background: transparent;\n`;\n\nconst FilterIconsContainer = styled.span`\n  position: absolute;\n  right: 8px;\n  top: 8px;\n`;\n\nconst StyledCloseIcon = styled(CloseIcon)`\n  z-index: 1000;\n  fill: #72767b;\n  :hover {\n    fill: var(--pf-global--Color--100);\n    cursor: pointer;\n  }\n`;\n\nconst StyledSearchIcon = styled(SearchIcon)`\n  z-index: 1000;\n  fill: #72767b;\n`;\n\nexport interface FilterToolbarItemProps {\n  searchValue?: string;\n  onFilterChange: (value: string) => void;\n  placeholder?: string;\n  isClearable?: boolean;\n}\nconst FilterToolbarItem: React.ComponentType<FilterToolbarItemProps> = ({\n  searchValue = '',\n  onFilterChange,\n  placeholder,\n  isClearable = false,\n  ...rest\n}) => (\n  <ToolbarItem>\n    <FilterInputGroup>\n      <FilterInput\n        id=\"toolbar-filter\"\n        placeholder={placeholder}\n        value={searchValue}\n        type=\"text\"\n        onChange={onFilterChange}\n        aria-label={placeholder}\n        {...rest}\n      />\n      <FilterIconsContainer>\n        {(isClearable && searchValue && (\n          <StyledCloseIcon\n            width=\"16\"\n            height=\"16\"\n            onClick={() => onFilterChange('')}\n          />\n        )) || <StyledSearchIcon />}\n      </FilterIconsContainer>\n    </FilterInputGroup>\n  </ToolbarItem>\n);\n\nexport default FilterToolbarItem;\n","/* eslint-disable react/prop-types */\nimport React, { ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Level,\n  LevelItem,\n  ToolbarItem,\n  ToolbarContent,\n  ButtonProps\n} from '@patternfly/react-core';\n\nimport FilterToolbarItem from '../presentational-components/shared/filter-toolbar-item';\nimport TopToolbar, {\n  TopToolbarTitle\n} from '../presentational-components/shared/top-toolbar';\nimport AppTabs from '../presentational-components/shared/app-tabs';\nimport CatalogLink from '../smart-components/common/catalog-link';\nimport {\n  StyledToolbar,\n  StyledToolbarGroup,\n  StyledToolbarProps\n} from '../presentational-components/styled-components/toolbars';\n\nexport interface ToolbarButtonProps extends Omit<ButtonProps, 'title'> {\n  title: ReactNode;\n}\n\nconst ToolbarButton: React.ComponentType<ToolbarButtonProps> = ({\n  title,\n  ...props\n}) => <Button {...props}>{title}</Button>;\n\nToolbarButton.propTypes = {\n  title: PropTypes.string.isRequired\n};\n\nconst AppToolbar: React.ComponentType<StyledToolbarProps> = ({\n  children,\n  ...props\n}) => (\n  <StyledToolbar className=\"pf-u-p-0\" {...props}>\n    <ToolbarContent className=\"pf-u-pl-0\">{children}</ToolbarContent>\n  </StyledToolbar>\n);\nconst toolbarMapper = {\n  TopToolbar,\n  TopToolbarTitle,\n  Toolbar: AppToolbar,\n  ToolbarGroup: StyledToolbarGroup,\n  ToolbarItem,\n  FilterToolbarItem,\n  Link: CatalogLink,\n  Level,\n  LevelItem,\n  Button: ToolbarButton,\n  AppTabs\n};\n\nexport const toolbarComponentTypes = {\n  TOP_TOOLBAR: 'TopToolbar',\n  TOP_TOOLBAR_TITLE: 'TopToolbarTitle',\n  TOOLBAR: 'Toolbar',\n  TOOLBAR_ITEM: 'ToolbarItem',\n  TOOLBAR_GROUP: 'ToolbarGroup',\n  FILTER_TOOLBAR_ITEM: 'FilterToolbarItem',\n  LINK: 'Link',\n  BUTTON: 'Button',\n  LEVEL: 'Level',\n  LEVEL_ITEM: 'LevelItem',\n  TABS: 'AppTabs'\n};\n\nexport default toolbarMapper;\n","import { defineMessages } from 'react-intl';\n\nconst filteringMessages = defineMessages({\n  noItems: {\n    id: 'common.filtering.noItems',\n    defaultMessage: 'No items found'\n  },\n  filterByProduct: {\n    id: 'common.filtering.filterByProduct',\n    defaultMessage: 'Filter by product'\n  },\n  noResults: {\n    id: 'common.filtering.noResults',\n    defaultMessage: 'No results found'\n  },\n  noResultsDescription: {\n    id: 'common.filtering.noResultsDescription',\n    defaultMessage:\n      'No results match the filter criteria. Remove all filters or clear all filters to show results.'\n  },\n  clearFilters: {\n    id: 'common.filtering.clear-filters',\n    defaultMessage: 'Clear all filters'\n  },\n  noProducts: {\n    id: 'common.filtering.no-products',\n    defaultMessage: 'No products yet'\n  },\n  noRecords: {\n    id: 'commonMessages.noRecords',\n    defaultMessage: 'No records'\n  },\n  filterByTitle: {\n    id: 'tableToolbar.filterByTitle',\n    defaultMessage: 'Filter by {title}'\n  },\n  noResultsFound: {\n    id: 'tableToolbar.noResultsFound',\n    defaultMessage: 'No results found'\n  },\n  noResult: {\n    id: 'tableToolbar.noResult',\n    defaultMessage: 'No {results}'\n  },\n  unknown: {\n    id: 'commonMessages.unknown',\n    defaultMessage: 'Unknown'\n  }\n});\n\nexport default filteringMessages;\n","/* eslint-disable react/prop-types */\nimport React, { createContext, ReactNode } from 'react';\nimport toolbarMapper, { toolbarComponentTypes } from './toolbar-mapper';\nimport { AnyObject, ValueOf } from '../types/common-types';\n\nexport interface ToolbarField extends AnyObject {\n  component:\n    | ValueOf<typeof toolbarMapper>\n    | React.ComponentType\n    | ValueOf<typeof toolbarComponentTypes>;\n  hidden?: boolean;\n  fields?: ToolbarField[];\n  key: string;\n}\n\nexport interface ToolbarSchema {\n  fields: ToolbarField[];\n}\n\nconst ToolbarContext = createContext<{\n  render?: (fields: ToolbarField[]) => ReactNode;\n  componentMapper?: typeof toolbarMapper;\n}>({});\n\ninterface ComponentProps extends AnyObject {\n  component:\n    | ValueOf<typeof toolbarMapper>\n    | React.ComponentType\n    | ValueOf<typeof toolbarComponentTypes>;\n}\nconst Component: React.ComponentType<ComponentProps> = ({\n  component,\n  ...props\n}) => (\n  <ToolbarContext.Consumer>\n    {({ componentMapper }) => {\n      const C =\n        typeof component === 'string'\n          ? componentMapper &&\n            componentMapper[component as keyof typeof toolbarMapper]\n          : (component as React.ComponentType<any>);\n      return C ? <C {...props} /> : null;\n    }}\n  </ToolbarContext.Consumer>\n);\n\nconst render = (fields: ToolbarField[]): React.ReactNode =>\n  fields.map(({ hidden, fields, key, ...field }) =>\n    hidden ? null : fields ? (\n      <Component key={key} {...field}>\n        {render(fields)}\n      </Component>\n    ) : (\n      <Component key={key} {...field} />\n    )\n  );\n\nexport interface ToolbarRendererProps {\n  schema: ToolbarSchema;\n  componentMapper?: typeof toolbarMapper;\n}\nconst ToolbarRenderer: React.ComponentType<ToolbarRendererProps> = ({\n  schema,\n  componentMapper = toolbarMapper\n}) => (\n  <ToolbarContext.Provider value={{ render, componentMapper }}>\n    {render(schema.fields)}\n  </ToolbarContext.Provider>\n);\n\nexport default ToolbarRenderer;\n","import { defineMessages } from 'react-intl';\n\nconst ordersMessages = defineMessages({\n  orderedBy: {\n    id: 'orders.common.orderedBy',\n    defaultMessage: 'Ordered by {owner}'\n  },\n  orderedByLabel: {\n    id: 'orders.approval.orderedBy',\n    defaultMessage: 'Ordered by'\n  },\n  lastUpdated: {\n    id: 'orders.common.lastUpdated',\n    defaultMessage: 'Last updated'\n  },\n  compositeTitle: {\n    id: 'orders.common.compositeTitle',\n    defaultMessage: '{name} - Order # {id}'\n  },\n  detailTitle: {\n    id: 'orders.detail.title',\n    defaultMessage: 'Order ID {id}'\n  },\n  orderSuccess: {\n    id: 'orders.notification.success',\n    defaultMessage:\n      'You can track the progress of Order # {id} in your <link>Orders</link> page.'\n  },\n  noOrdersTitle: {\n    id: 'orders.list.empty.title',\n    defaultMessage: 'No orders'\n  },\n  noOrdersDescription: {\n    id: 'orders.list.empty.description',\n    defaultMessage: 'No orders have been created.'\n  },\n  noApprovalRequests: {\n    id: 'orders.approval.no-requests',\n    defaultMessage:\n      'We were unable to find any approval requests for this order.'\n  },\n  creatingApprovalRequest: {\n    id: 'orders.approval.creating',\n    defaultMessage: 'Creating approval request'\n  },\n  approvalTitle: {\n    id: 'orders.approval.title',\n    defaultMessage: 'Summary'\n  },\n  approvalDetail: {\n    id: 'orders.approval.view-detail',\n    // eslint-disable-next-line quotes\n    defaultMessage: \"View this order's approval request details\"\n  },\n  approvalCreated: {\n    id: 'orders.approval.details.created',\n    defaultMessage: 'Request created'\n  },\n  approvalReason: {\n    id: 'orders.approval.details.reason',\n    defaultMessage: 'Approval reason'\n  },\n  approvalCompleted: {\n    id: 'orders.approval.details.completed',\n    defaultMessage: 'Completed at'\n  },\n  orderDetails: {\n    id: 'orders.common.details',\n    defaultMessage: 'Order details'\n  },\n  menuApproval: {\n    id: 'orders.menu.approval',\n    defaultMessage: 'Approval'\n  },\n  menuLifecycle: {\n    id: 'orders.menu.lifecycle',\n    defaultMessage: 'Lifecycle'\n  },\n  menuSteps: {\n    id: 'orders.menu.steps',\n    defaultMessage: 'Order steps'\n  },\n  objectsNotFound: {\n    id: 'order.detail.not-found',\n    defaultMessage:\n      'The {objects} for this order {count, plural, one {is} other {are}} not available'\n  },\n  orderID: {\n    id: 'orders.order.detail.ID',\n    defaultMessage: 'Order ID'\n  },\n  orderParameters: {\n    id: 'orders.order.detail.parameters',\n    defaultMessage: 'Order parameters'\n  },\n  orderProgressMessages: {\n    id: 'orders.order.detail.messages',\n    defaultMessage: 'Progress messages'\n  },\n  lifecycleLink: {\n    id: 'orders.order.lifecicle.link',\n    defaultMessage: 'Manage product'\n  },\n  cancelOrder: {\n    id: 'orders.actions.cancel',\n    defaultMessage: 'Cancel order'\n  },\n  keepOrder: {\n    id: 'orders.actions.keep',\n    defaultMessage: 'Keep order'\n  },\n  cancelDescription: {\n    id: 'orders.cancel.description',\n    defaultMessage: 'Are you sure you want to cancel {name}?'\n  },\n  backToOrders: {\n    id: 'orders.toolbar.backLink',\n    defaultMessage: 'Back to orders'\n  },\n  orderDate: {\n    id: 'orders.approval.order-date',\n    defaultMessage: 'Order date'\n  },\n  approvalParameters: {\n    id: 'orders.approval.parameters',\n    defaultMessage: 'Parameters'\n  },\n  activity: {\n    id: 'orders.approval.activity',\n    defaultMessage: 'Activity'\n  }\n});\n\nexport default ordersMessages;\n","import { getAxiosInstance, getGraphqlInstance } from '../shared/user-login';\nimport {\n  TOPOLOGICAL_INVENTORY_API_BASE,\n  SOURCES_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings, PaginationConfiguration } from '../shared/pagination';\nimport {\n  Source,\n  ServiceOffering,\n  ServiceInventory\n} from '@redhat-cloud-services/sources-client';\nimport { ApiCollectionResponse } from '../../types/common-types';\nconst axiosInstance = getAxiosInstance();\nconst graphqlInstance = getGraphqlInstance();\n\nconst sourcesQuery = `\nquery {\n  application_types (filter: { name: \"/insights/platform/catalog\" }) {\n    id\n    name\n    sources {\n      id\n      name\n      source_type_id\n    }\n  }\n}`;\n\nexport const getPlatforms = (): Promise<Source> => {\n  return graphqlInstance\n    .post(`${SOURCES_API_BASE}/graphql`, { query: sourcesQuery })\n    .then(({ data: { application_types } }) => application_types)\n    .then(([{ sources }]) => sources);\n};\n\nexport const getPlatform = (platformId: string): Promise<Source> => {\n  return axiosInstance.get(`${SOURCES_API_BASE}/sources/${platformId}`);\n};\n\nexport const getPlatformItems = (\n  platformId: string,\n  filter?: string,\n  options?: PaginationConfiguration\n): Promise<ApiCollectionResponse<ServiceOffering>> => {\n  const filterQuery = filter ? `&filter[name][contains_i]=${filter}` : '';\n  if (platformId) {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/sources/${platformId}/service_offerings?filter[archived_at][nil]${filterQuery}${\n        options ? `&limit=${options.limit}&offset=${options.offset}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/service_offerings`\n    );\n  }\n};\n\nexport const getPlatformInventories = (\n  platformId: string,\n  filter = '',\n  options = defaultSettings\n): Promise<ApiCollectionResponse<ServiceInventory>> => {\n  if (platformId) {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/sources/${platformId}/service_inventories?filter[name][contains_i]=${filter}${\n        options ? `&limit=${options.limit}&offset=${options.offset}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/service_inventories?limit=${options.limit}&offset=${options.offset}`\n    );\n  }\n};\n\nexport const getServiceOffering = (\n  serviceOfferingId: string,\n  sourceId: string\n): Promise<{ service: ServiceOffering; source: Source }> =>\n  Promise.all([\n    axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/service_offerings/${serviceOfferingId}`\n    ),\n    axiosInstance\n      .get(`${SOURCES_API_BASE}/sources/${sourceId}`)\n      .then((source) => {\n        return axiosInstance\n          .get(`${SOURCES_API_BASE}/source_types/${source.source_type_id}`)\n          .then(({ icon_url }) => ({\n            ...source,\n            icon_url\n          }));\n      })\n  ]).then(([service, source]: [ServiceOffering, Source]) => ({\n    service,\n    source\n  }));\n","import * as ActionTypes from '../action-types';\nimport * as PlatformHelper from '../../helpers/platform/platform-helper';\nimport { Dispatch } from 'redux';\nimport {\n  ServiceInventory,\n  ServiceOffering,\n  Source\n} from '@redhat-cloud-services/sources-client';\nimport { AsyncMiddlewareAction } from '../../types/redux';\nimport { ApiCollectionResponse } from '../../types/common-types';\nimport { PaginationConfiguration } from '../../helpers/shared/pagination';\n\nexport const fetchPlatforms = () => (\n  dispatch: Dispatch\n): Promise<{ type: string; payload: Source }> => {\n  dispatch({ type: `${ActionTypes.FETCH_PLATFORMS}_PENDING` });\n  return PlatformHelper.getPlatforms()\n    .then((data) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_FULFILLED`,\n        payload: data\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchPlatformItems = (\n  platformId: string,\n  filter: string,\n  options: PaginationConfiguration\n): AsyncMiddlewareAction<ApiCollectionResponse<ServiceOffering>> => ({\n  type: ActionTypes.FETCH_PLATFORM_ITEMS,\n  payload: PlatformHelper.getPlatformItems(platformId, filter, options),\n  meta: {\n    platformId,\n    filter,\n    ...options\n  }\n});\n\nexport const fetchMultiplePlatformItems = (\n  platformsId: string[]\n): {\n  type: string;\n  payload: Promise<\n    [] | { [x: string]: ApiCollectionResponse<ServiceOffering> }\n  >;\n} => {\n  const platformPromisses = platformsId.map((platformId) =>\n    PlatformHelper.getPlatformItems(platformId).then((data) => ({\n      [platformId]: data\n    }))\n  );\n  return {\n    type: ActionTypes.FETCH_MULTIPLE_PLATFORM_ITEMS,\n    payload: Promise.all(platformPromisses).then((data) =>\n      data.reduce(\n        (acc, curr) => ({\n          ...acc,\n          ...curr\n        }),\n        {}\n      )\n    )\n  };\n};\n\nexport const fetchSelectedPlatform = (\n  id: string\n): AsyncMiddlewareAction<Source> => ({\n  type: ActionTypes.FETCH_PLATFORM,\n  payload: PlatformHelper.getPlatform(id)\n});\n\nexport const fetchPlatformInventories = (\n  platformId: string,\n  filter: string,\n  options: PaginationConfiguration\n): AsyncMiddlewareAction<ApiCollectionResponse<ServiceInventory>> => ({\n  type: ActionTypes.FETCH_PLATFORM_INVENTORIES,\n  payload: PlatformHelper.getPlatformInventories(platformId, filter, options)\n});\n\nexport const fetchServiceOffering = (\n  serviceOfferingId: string,\n  sourceId: string\n): AsyncMiddlewareAction<{ service: ServiceOffering; source: Source }> => ({\n  type: ActionTypes.FETCH_SERVICE_OFFERING,\n  payload: PlatformHelper.getServiceOffering(serviceOfferingId, sourceId)\n});\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { Tabs, Tab } from '@patternfly/react-core';\nimport { useLocation } from 'react-router-dom';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\n\nexport interface AppTabsProps {\n  tabItems: {\n    name: string;\n    eventKey: number;\n    title: string;\n    disabled?: boolean;\n  }[];\n}\nconst AppTabs: React.ComponentType<AppTabsProps> = ({ tabItems }) => {\n  const { push } = useEnhancedHistory();\n  const { pathname, search } = useLocation();\n  const activeTab = tabItems.find(({ name }) => pathname.includes(name));\n  const handleTabClick = (\n    _event: React.MouseEvent<HTMLElement, MouseEvent>,\n    tabIndex: number | string\n  ) => push({ pathname: tabItems[tabIndex as number].name, search });\n\n  return (\n    <Tabs\n      activeKey={activeTab ? activeTab.eventKey : 0}\n      onSelect={handleTabClick}\n    >\n      {tabItems.map((item) => (\n        <Tab\n          title={item.title}\n          key={item.eventKey}\n          eventKey={item.eventKey}\n          name={item.name}\n          disabled={item.disabled}\n        />\n      ))}\n    </Tabs>\n  );\n};\n\nexport default AppTabs;\n","import labelMessages from './labels.messages';\n\nimport { defineMessages } from 'react-intl';\n\nconst statesMessages = defineMessages({\n  title: {\n    id: 'common.states.title',\n    defaultMessage: 'State'\n  },\n  ordered: {\n    id: 'common.states.ordered',\n    defaultMessage: 'Ordered'\n  },\n  approvalPending: {\n    id: 'common.states.approval-pending',\n    defaultMessage: 'Approval Pending'\n  },\n  canceled: {\n    id: 'common.states.canceled',\n    defaultMessage: 'Canceled'\n  },\n  completed: {\n    id: 'common.states.completed',\n    defaultMessage: 'Completed'\n  },\n  failed: {\n    id: 'common.states.failed',\n    defaultMessage: 'Failed'\n  },\n  undecided: {\n    id: 'common.states.undecided',\n    defaultMessage: 'Undecided'\n  },\n  approved: {\n    id: 'common.states.approved',\n    defaultMessage: 'Approved'\n  },\n  denied: {\n    id: 'common.states.denied',\n    defaultMessage: 'Denied'\n  },\n  error: {\n    id: 'common.states.error',\n    defaultMessage: 'Error'\n  },\n  pending: {\n    id: 'common.states.pending',\n    defaultMessage: 'Pending'\n  },\n  skipped: {\n    id: 'common.states.skipped',\n    defaultMessage: 'Skipped'\n  },\n  started: {\n    id: 'common.states.started',\n    defaultMessage: 'Started'\n  },\n  notified: {\n    id: 'common.states.notified',\n    defaultMessage: 'Notified'\n  }\n});\n\nexport const getTranslatableState = (\n  state: string\n): keyof typeof statesMessages =>\n  state\n    .replace(/\\s/g, '')\n    .replace(/^./, (char) => char.toLowerCase()) as keyof typeof statesMessages;\n\n/**\n * We must include the created state so the dynamic data from DB can look for these messages in one place\n * The created message is shared among other components and is just a state message\n */\nexport default { ...statesMessages, created: labelMessages.created };\n","// TODO migrate whole order-helper.js to TS\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  Order,\n  OrderItem,\n  PortfolioItem,\n  Portfolio,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\nimport { Source } from '@redhat-cloud-services/sources-client';\nimport { getAxiosInstance } from '../shared/user-login';\nimport { CATALOG_API_BASE, SOURCES_API_BASE } from '../../utilities/constants';\nconst axiosInstance = getAxiosInstance();\n\nexport interface ObjectNotFound {\n  object: 'Order item' | 'Product' | 'Portfolio' | 'Messages' | 'Platform';\n  notFound: boolean;\n}\n\nexport type OrderDetailPayload = [\n  Order,\n  OrderItem | ObjectNotFound,\n  PortfolioItem | ObjectNotFound,\n  Source | ObjectNotFound,\n  ProgressMessage | ObjectNotFound,\n  Portfolio | ObjectNotFound\n];\n\nexport const fetchOrderDetailSequence = async (\n  orderId: string\n): Promise<OrderDetailPayload> => {\n  let order: Order;\n  try {\n    order = await axiosInstance.get(`${CATALOG_API_BASE}/orders/${orderId}`);\n  } catch (error) {\n    order = {};\n    if (error.status === 404 || error.status === 400) {\n      catalogHistory.replace({\n        pathname: '/404',\n        state: { from: catalogHistory.location }\n      });\n    } else {\n      throw error;\n    }\n  }\n\n  let orderItem: OrderItem | ObjectNotFound = {\n    object: 'Order item',\n    notFound: true\n  };\n  try {\n    const orderItems = await axiosInstance.get(\n      `${CATALOG_API_BASE}/order_items?order_id=${order.id}`\n    );\n    orderItem = orderItems.data[0];\n  } catch (_error) {\n    // no handler\n  }\n\n  let portfolioItem: PortfolioItem | ObjectNotFound = {\n    object: 'Product',\n    notFound: true\n  };\n\n  try {\n    portfolioItem = await axiosInstance.get(\n      `${CATALOG_API_BASE}/portfolio_items/${\n        (orderItem as OrderItem).portfolio_item_id\n      }`\n    );\n  } catch (_error) {\n    // nohandler\n  }\n\n  const parallerRequests = [\n    axiosInstance\n      .get(\n        `${SOURCES_API_BASE}/sources/${\n          (portfolioItem as PortfolioItem).service_offering_source_ref\n        }`\n      )\n      .catch(() => ({ object: 'Platform', notFound: true })),\n\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/order_items/${\n          (orderItem as OrderItem).id\n        }/progress_messages`\n      )\n      .catch(() => ({ object: 'Messages', notFound: true })),\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/portfolios/${\n          (portfolioItem as PortfolioItem).portfolio_id\n        }`\n      )\n      .catch(() => ({ object: 'Portfolio', notFound: true }))\n  ];\n\n  return Promise.all(\n    parallerRequests\n  ).then(([platform, progressMessages, portfolio]) => [\n    order,\n    orderItem,\n    portfolioItem,\n    platform as Source | ObjectNotFound,\n    progressMessages as ProgressMessage | ObjectNotFound,\n    portfolio as Portfolio | ObjectNotFound\n  ]);\n};\n","/* eslint camelcase: 0 */\nimport {\n  getAxiosInstance,\n  getPortfolioItemApi,\n  getOrderApi,\n  getOrderItemApi,\n  getGraphqlInstance\n} from '../shared/user-login';\nimport {\n  CATALOG_API_BASE,\n  SOURCES_API_BASE,\n  APPROVAL_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  fetchOrderDetailSequence,\n  OrderDetailPayload\n} from './new-order-helper';\nimport {\n  ApiCollectionResponse,\n  ApiMetadata,\n  EnhancedOrder,\n  Full\n} from '../../types/common-types';\nimport {\n  ServicePlan,\n  Order,\n  OrderItem,\n  PortfolioItem,\n  ApprovalRequest\n} from '@redhat-cloud-services/catalog-client';\nimport { AxiosPromise } from 'axios';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\nimport { Request, Action } from '@redhat-cloud-services/approval-client';\n\nconst orderApi = getOrderApi();\nconst orderItemApi = getOrderItemApi();\nconst portfolioItemApi = getPortfolioItemApi();\nconst axiosInstance = getAxiosInstance();\nconst graphqlInstance = getGraphqlInstance();\n\nexport const getServicePlans = (\n  portfolioItemId: string\n): Promise<ApiCollectionResponse<ServicePlan>> =>\n  (portfolioItemApi.listServicePlans(portfolioItemId) as unknown) as Promise<\n    ApiCollectionResponse<ServicePlan>\n  >;\n\nexport const sendSubmitOrder = async ({\n  service_parameters: { providerControlParameters, ...service_parameters },\n  ...parameters\n}: AnyObject): Promise<EnhancedOrder> => {\n  const order: Order = ((await orderApi.createOrder()) as unknown) as Order;\n  let orderItem: Partial<OrderItem> = {};\n  orderItem.count = 1;\n  orderItem = {\n    ...orderItem,\n    ...parameters,\n    service_parameters,\n    provider_control_parameters: providerControlParameters || {}\n  };\n  const orderItemResponse = await orderApi.addToOrder(\n    order.id as string,\n    orderItem as OrderItem\n  );\n  return orderApi.submitOrder(order.id as string).then((order) => ({\n    ...order,\n    orderItem: (orderItemResponse as unknown) as OrderItem\n  }));\n};\n\nexport const cancelOrder = (orderId: string): AxiosPromise<Order> =>\n  orderApi.cancelOrder(orderId);\n\nconst getOrderItems = (\n  orderIds: string[]\n): Promise<ApiCollectionResponse<OrderItem>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/order_items?${orderIds\n      .map((orderId) => `filter[order_id][]=${orderId}`)\n      .join('&')}`\n  );\n\nconst getOrderPortfolioItems = (\n  itemIds: string[]\n): Promise<ApiCollectionResponse<PortfolioItem>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolio_items?${itemIds\n      .map((itemId) => `filter[id][]=${itemId}`)\n      .join('&')}`\n  );\n\nexport const getOrders = (\n  filter = '',\n  pagination = defaultSettings\n): Promise<{\n  data: (Order & { orderItems: OrderItem[] })[];\n  portfolioItems: ApiCollectionResponse<PortfolioItem>;\n  meta: ApiMetadata;\n}> =>\n  axiosInstance\n    .get(\n      `${CATALOG_API_BASE}/orders?${filter}&limit=${pagination.limit}&offset=${pagination.offset}`\n    ) // eslint-disable-line max-len\n    .then((orders: ApiCollectionResponse<Full<Order>>) =>\n      getOrderItems(orders.data.map(({ id }) => id)).then((orderItems) =>\n        getOrderPortfolioItems(\n          orderItems.data.map(({ portfolio_item_id }) => portfolio_item_id)\n        ).then((portfolioItems) => {\n          return {\n            portfolioItems,\n            ...orders,\n            data: orders.data.map((order) => ({\n              ...order,\n              orderItems: orderItems.data.filter(\n                ({ order_id }) => order_id === order.id\n              )\n            }))\n          };\n        })\n      )\n    );\n\nexport const getOrderApprovalRequests = (\n  orderItemId: string\n): Promise<ApiCollectionResponse<Request>> =>\n  (orderItemApi.listApprovalRequests(orderItemId) as unknown) as Promise<\n    ApiCollectionResponse<Request>\n  >;\n\nexport interface GetOrderDetailParams {\n  order: string;\n  'order-item'?: string;\n  'portfolio-item'?: string;\n  platform?: string;\n  portfolio?: string;\n}\nexport const getOrderDetail = (\n  params: GetOrderDetailParams\n): Promise<OrderDetailPayload> => {\n  if (Object.values(params).some((value) => !value)) {\n    /**\n     * Try to fetch data sequentially if any of the parameters is unknow\n     */\n    return fetchOrderDetailSequence(params.order);\n  }\n\n  const detailPromises = [\n    (axiosInstance\n      .get(`${CATALOG_API_BASE}/orders/${params.order}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return catalogHistory.replace({\n            pathname: '/404',\n            state: { from: catalogHistory.location }\n          });\n        }\n\n        throw error;\n      }) as unknown) as Promise<Order>,\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/order_items/${params['order-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Order item',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/portfolio_items/${params['portfolio-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Product',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${SOURCES_API_BASE}/sources/${params.platform}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Platform',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/order_items/${params['order-item']}/progress_messages`\n      )\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {};\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/portfolios/${params.portfolio}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Portfolio',\n            notFound: true\n          };\n        }\n\n        throw error;\n      })\n  ];\n\n  return (Promise.all(detailPromises) as unknown) as Promise<\n    OrderDetailPayload\n  >;\n};\n\nconst APPROVAL_REQUESTER_PERSONA = 'approval/requester';\nexport interface RequestTranscript extends Full<Request> {\n  actions: Action[];\n}\nconst requestTranscriptQuery = (parent_id: string) => `query {\n  requests(id: \"${parent_id}\") {\n    id\n    number_of_children\n    decision\n    group_name\n    created_at\n    state\n    actions {\n      id\n      created_at\n    }\n    requests {\n      id\n      number_of_children\n      decision\n      group_name\n      state\n      parent_id\n      created_at\n      actions {\n        id\n        created_at\n      }\n    }\n  }\n}`;\nconst fetchRequestTranscript = (\n  requestId: string\n): Promise<RequestTranscript[]> =>\n  graphqlInstance\n    .post(\n      `${APPROVAL_API_BASE}/graphql`,\n      { query: requestTranscriptQuery(requestId) },\n      { 'x-rh-persona': APPROVAL_REQUESTER_PERSONA }\n    )\n    .then(({ data: { requests } }) => {\n      return requests &&\n        requests.length > 0 &&\n        requests[0].number_of_children > 0\n        ? requests[0].requests\n        : requests;\n    });\n\nexport const getApprovalRequests = (\n  orderItemId: string\n): Promise<{\n  data: { group_name: string; state: string; updated?: string }[];\n}> =>\n  axiosInstance\n    .get(`${CATALOG_API_BASE}/order_items/${orderItemId}/approval_requests`)\n    .then(({ data }: { data: Full<ApprovalRequest>[] }) => {\n      const promises = data.map(({ approval_request_ref }) =>\n        fetchRequestTranscript(approval_request_ref)\n      );\n      return Promise.all(promises).then((requests) => {\n        const data = requests?.[0]?.map(({ actions, ...request }) => ({\n          ...request,\n          updated:\n            actions?.length > 0 ? actions.pop()?.created_at : request.created_at\n        }));\n        return { data: data || [] };\n      });\n    });\n","import React, { ComponentType, ReactElement, ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport { ORDER_ROUTE } from '../../constants/routes';\nimport ordersMessages from '../../messages/orders.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport { Dispatch } from 'redux';\n\nexport interface OrderNotificationProps {\n  id: string;\n  dispatch: Dispatch;\n  portfolioItemId: string;\n  portfolioId: string;\n  platformId: string;\n  orderItemId: string;\n}\n\nconst OrderNotification: ComponentType<OrderNotificationProps> = ({\n  id,\n  dispatch,\n  portfolioItemId,\n  portfolioId,\n  platformId,\n  orderItemId\n}) => {\n  const formatMessage = useFormatMessage();\n  return formatMessage(ordersMessages.orderSuccess, {\n    id,\n    // eslint-disable-next-line react/display-name\n    link: (chunks: ReactNode | ReactNode[]) => (\n      <Link\n        onClick={() => dispatch(clearNotifications())}\n        to={{\n          pathname: ORDER_ROUTE,\n          search: `?order=${id}&order-item=${orderItemId}&portfolio-item=${portfolioItemId}&platform=${platformId}&portfolio=${portfolioId}`\n        }}\n      >\n        {chunks}\n      </Link>\n    )\n  }) as ReactElement;\n};\n\nexport default OrderNotification;\n","import React from 'react';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\n\nimport * as ActionTypes from '../action-types';\nimport * as OrderHelper from '../../helpers/order/order-helper';\nimport OrderNotification from '../../presentational-components/order/order-notification';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport {\n  ApprovalRequestStateEnum,\n  Order,\n  OrderItem,\n  OrderStateEnum,\n  Portfolio,\n  PortfolioItem,\n  ProgressMessage,\n  ServicePlan\n} from '@redhat-cloud-services/catalog-client';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\nimport { Dispatch } from 'redux';\nimport {\n  Full,\n  StringObject,\n  ReduxAction,\n  ApiCollectionResponse\n} from '../../types/common-types';\nimport { AsyncMiddlewareAction, GetReduxState } from '../../types/redux';\nimport { Source } from '@redhat-cloud-services/sources-client';\nimport { ObjectNotFound } from '../../helpers/order/new-order-helper';\n\nexport const fetchServicePlans = (\n  portfolioItemId: string\n): AsyncMiddlewareAction<ApiCollectionResponse<ServicePlan>> => ({\n  type: ActionTypes.FETCH_SERVICE_PLANS,\n  payload: OrderHelper.getServicePlans(portfolioItemId)\n});\n\nexport const setSelectedPlan = (\n  data: ServicePlan\n): ReduxAction<ServicePlan> => ({\n  type: ActionTypes.SET_SELECTED_PLAN,\n  payload: data\n});\n\nexport const sendSubmitOrder = (\n  apiProps: AnyObject,\n  portfolioItem: Full<PortfolioItem>\n) => (dispatch: Dispatch): AsyncMiddlewareAction =>\n  dispatch({\n    type: ActionTypes.SUBMIT_SERVICE_ORDER,\n    payload: OrderHelper.sendSubmitOrder(apiProps).then(({ id, orderItem }) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been accepted successfully',\n          description: (\n            <OrderNotification\n              id={id!}\n              dispatch={dispatch}\n              portfolioItemId={portfolioItem.id}\n              portfolioId={portfolioItem.portfolio_id}\n              platformId={portfolioItem.service_offering_source_ref}\n              orderItemId={orderItem.id!}\n            />\n          ),\n          dismissable: true\n        })\n      )\n    )\n  });\n\nexport const cancelOrder = (orderId: string) => (\n  dispatch: Dispatch,\n  getState: GetReduxState\n): Promise<void | { type: string }> => {\n  dispatch({ type: `${ActionTypes.CANCEL_ORDER}_PENDING` });\n  const {\n    orderReducer: { orderDetail }\n  } = getState();\n  return OrderHelper.cancelOrder(orderId)\n    .then(() => {\n      orderDetail.order.state = OrderStateEnum.Canceled;\n      if (\n        orderDetail.approvalRequest &&\n        orderDetail.approvalRequest.data.length > 0\n      ) {\n        orderDetail.approvalRequest.data[0].state = 'canceled' as ApprovalRequestStateEnum;\n      }\n\n      dispatch({\n        type: ActionTypes.SET_ORDER_DETAIL,\n        payload: { ...orderDetail }\n      });\n      return orderDetail;\n    })\n    .then((orderDetail) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been canceled successfully',\n          description: `Order ${`Order #${orderDetail.order.id}`} was canceled.`,\n          dismissable: true\n        })\n      )\n    )\n    .then(() => dispatch({ type: `${ActionTypes.CANCEL_ORDER}_FULFILLED` }))\n    .catch((error) => {\n      dispatch({\n        type: `${ActionTypes.CANCEL_ORDER}_REJECTED`,\n        payload: error\n      });\n    });\n};\n\nexport const fetchOrders = (\n  filters: StringObject,\n  pagination = defaultSettings\n) => (dispatch: Dispatch): Promise<ReduxAction> => {\n  let queryFilter = Object.entries(filters)\n    .filter(([, value]) => value && value.length > 0)\n    .map(([key, value]) =>\n      Array.isArray(value)\n        ? value.map((value) => `filter[${key}][]=${value}`).join('&')\n        : `filter[${key}][contains_i]=${value}`\n    )\n    .join('&');\n  if (pagination.sortBy) {\n    queryFilter = `${queryFilter}&sort_by=${\n      pagination.sortBy\n    }:${pagination.sortDirection || 'desc'}`;\n  }\n\n  dispatch({ type: `${ActionTypes.FETCH_ORDERS}_PENDING` });\n  return OrderHelper.getOrders(queryFilter, pagination)\n    .then(({ portfolioItems, ...orders }) => {\n      dispatch({\n        type: ActionTypes.SET_PORTFOLIO_ITEMS,\n        payload: portfolioItems\n      });\n      return dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_FULFILLED`,\n        meta: {\n          ...pagination,\n          filter: queryFilter,\n          filters,\n          storeState: true,\n          stateKey: 'orders'\n        },\n        payload: orders\n      });\n    })\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchOrderDetails = (params: OrderHelper.GetOrderDetailParams) => (\n  dispatch: Dispatch\n): Promise<{\n  type: string;\n  payload: {\n    order: Order | ObjectNotFound;\n    orderItem: OrderItem | ObjectNotFound;\n    portfolioItem: PortfolioItem | ObjectNotFound;\n    platform: Source | ObjectNotFound;\n    progressMessages: ProgressMessage | ObjectNotFound;\n    portfolio: Portfolio | ObjectNotFound;\n  };\n}> => {\n  dispatch({ type: `${ActionTypes.SET_ORDER_DETAIL}_PENDING` });\n  return OrderHelper.getOrderDetail(params)\n    .then(\n      ([\n        order,\n        orderItem,\n        portfolioItem,\n        platform,\n        progressMessages,\n        portfolio\n      ]) =>\n        dispatch({\n          type: `${ActionTypes.SET_ORDER_DETAIL}_FULFILLED`,\n          payload: {\n            order,\n            orderItem,\n            portfolioItem,\n            platform,\n            progressMessages,\n            portfolio\n          }\n        })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_DETAIL}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchApprovalRequests = (orderItemId: string) => (\n  dispatch: Dispatch\n): Promise<\n  | {\n      data: {\n        group_name: string;\n        state: string;\n        updated?: string | undefined;\n      }[];\n    }\n  | { type: string; payload: any } /** the action in catch branch */\n> => {\n  dispatch({ type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_PENDING` });\n  return OrderHelper.getApprovalRequests(orderItemId)\n    .then((data) => {\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_FULFILLED`,\n        payload: data\n      });\n      return data;\n    })\n    .catch((err) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_REJECTED`,\n        payload: err\n      })\n    );\n};\n","import React, { ReactNode } from 'react';\nimport {\n  ExclamationCircleIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  ClockIcon,\n  PlusCircleIcon\n} from '@patternfly/react-icons';\n\nconst orderStatusMapper: {\n  Completed: { icon: ReactNode; color: 'green' };\n  Ordered: { icon: ReactNode; color: 'grey' };\n  Failed: { icon: ReactNode; color: 'red' };\n  Canceled: { icon: ReactNode; color: 'orange' };\n  Created: { icon: ReactNode; color: 'grey' };\n  'Approval Pending': { icon: ReactNode; color: 'blue' };\n} = {\n  Completed: { icon: <CheckCircleIcon />, color: 'green' },\n  'Approval Pending': {\n    icon: <ClockIcon />,\n    color: 'blue'\n  },\n  Ordered: { icon: <PlusCircleIcon />, color: 'grey' },\n  Failed: { icon: <ExclamationCircleIcon />, color: 'red' },\n  Canceled: { icon: <ExclamationTriangleIcon />, color: 'orange' },\n  Created: { icon: <PlusCircleIcon />, color: 'grey' }\n};\n\nexport default orderStatusMapper;\n","import { toolbarComponentTypes } from '../toolbar-mapper';\nimport { ToolbarSchema } from '../toolbar-renderer';\n\nconst createOrdersToolbarSchema = (): ToolbarSchema => ({\n  fields: [\n    {\n      component: toolbarComponentTypes.TOP_TOOLBAR,\n      className: 'orders pf-u-p-lg',\n      key: 'orders-toolbar',\n      fields: [\n        {\n          component: toolbarComponentTypes.TOP_TOOLBAR_TITLE,\n          key: 'orders-toolbar-title',\n          title: 'Orders',\n          className: ''\n        }\n      ]\n    }\n  ]\n});\n\nexport default createOrdersToolbarSchema;\n","import React, { Fragment, ReactNode } from 'react';\nimport { Label, Text, TextVariants } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\n\nimport CardIcon from '../../presentational-components/shared/card-icon';\nimport { getOrderIcon } from '../../helpers/shared/orders';\nimport CatalogLink from '../common/catalog-link';\nimport { ORDER_ROUTE } from '../../constants/routes';\nimport statesMessages, {\n  getTranslatableState\n} from '../../messages/states.messages';\n\nimport { TableText } from '@patternfly/react-table';\nimport orderStatusMapper from './order-status-mapper';\nimport { OrderDetail } from '../../redux/reducers/order-reducer';\nimport { FormatMessage, StringObject } from '../../types/common-types';\n\nconst createOrderItem = (\n  item: OrderDetail,\n  orderPlatform: string | undefined,\n  orderPortfolio: string | undefined,\n  formatMessage: FormatMessage\n): { title: ReactNode }[] => {\n  const orderItem = (item.orderItems[0] && item.orderItems[0]) || {};\n  const searchParams: StringObject = {\n    order: item.id,\n    ...(orderItem.id ? { 'order-item': orderItem.id } : {}),\n    ...(orderItem.portfolio_item_id\n      ? { 'portfolio-item': orderItem.portfolio_item_id }\n      : {}),\n    ...(orderPlatform ? { platform: orderPlatform } : {}),\n    ...(orderPortfolio ? { portfolio: orderPortfolio } : {})\n  };\n  const translatableState = getTranslatableState(item.state);\n  return [\n    {\n      title: (\n        <TableText>\n          <CatalogLink pathname={ORDER_ROUTE} searchParams={searchParams}>\n            {item.id}\n          </CatalogLink>\n        </TableText>\n      )\n    },\n    {\n      title: (\n        <Fragment>\n          <CardIcon\n            height={60}\n            src={getOrderIcon(item)}\n            sourceId={orderPlatform}\n          />\n        </Fragment>\n      )\n    },\n    item.orderName,\n    item.owner,\n    {\n      title: (\n        <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n          <DateFormat date={item.created_at} variant=\"relative\" />\n        </Text>\n      )\n    },\n    {\n      title: (\n        <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n          <DateFormat\n            date={item.orderItems[0] && item.orderItems[0].updated_at}\n            variant=\"relative\"\n          />\n        </Text>\n      )\n    },\n    {\n      title: (\n        <TableText>\n          <Label\n            {...orderStatusMapper[item.state as keyof typeof orderStatusMapper]}\n            variant=\"outline\"\n          >\n            {formatMessage(statesMessages[translatableState])}\n          </Label>\n        </TableText>\n      )\n    }\n  ];\n};\n\nexport default createOrderItem;\n","import { CATALOG_API_BASE } from '../../utilities/constants';\nimport { PortfolioItem } from '@redhat-cloud-services/catalog-client';\nimport { Full } from '../../types/common-types';\nimport { OrderDetail } from '../../redux/reducers/order-reducer';\n\nexport const getOrderIcon = ({ orderItems }: OrderDetail): string | undefined =>\n  orderItems[0] &&\n  `${CATALOG_API_BASE}/portfolio_items/${orderItems[0].portfolio_item_id}/icon`;\n\nexport const getOrderPortfolioName = (\n  { orderItems, id }: OrderDetail,\n  portfolioItems: Full<PortfolioItem>[]\n): string => {\n  const portfolioItem =\n    orderItems[0] &&\n    portfolioItems.find(({ id }) => orderItems[0].portfolio_item_id === id);\n  return portfolioItem ? portfolioItem.name : `Order ${id}`;\n};\n\nexport const getOrderPlatformId = (\n  { orderItems }: OrderDetail,\n  portfolioItems: Full<PortfolioItem>[]\n): {\n  orderPlatform?: string;\n  orderPortfolio?: string;\n} => {\n  const portfolioItem =\n    orderItems[0] &&\n    portfolioItems.find(({ id }) => orderItems[0].portfolio_item_id === id);\n  return portfolioItem\n    ? {\n        orderPlatform: portfolioItem.service_offering_source_ref,\n        orderPortfolio: portfolioItem.portfolio_id\n      }\n    : {};\n};\n","import React, { useEffect, useReducer } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Grid,\n  GridItem,\n  Title,\n  Bullseye,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Flex,\n  EmptyStateSecondaryActions,\n  Button\n} from '@patternfly/react-core';\nimport { Section } from '@redhat-cloud-services/frontend-components/components/cjs/Section';\nimport {\n  Chip,\n  PrimaryToolbar\n} from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/components/cjs/EmptyTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/TableToolbar';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n  ISortBy,\n  OnSort,\n  ICell\n} from '@patternfly/react-table';\n\nimport { fetchOrders } from '../../redux/actions/order-actions';\nimport { fetchPlatforms } from '../../redux/actions/platform-actions';\nimport { ListLoader } from '../../presentational-components/shared/loader-placeholders';\nimport createOrderItem from './order-item';\nimport AsyncPagination from '../common/async-pagination';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport {\n  defaultSettings,\n  PaginationConfiguration\n} from '../../helpers/shared/pagination';\nimport useInitialUriHash from '../../routing/use-initial-uri-hash';\nimport statesMessages from '../../messages/states.messages';\nimport filteringMessages from '../../messages/filtering.messages';\nimport ordersMessages from '../../messages/orders.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport {\n  getOrderPlatformId,\n  getOrderPortfolioName\n} from '../../helpers/shared/orders';\nimport { CatalogRootState } from '../../types/redux';\nimport {\n  ApiCollectionResponse,\n  Full,\n  StringObject\n} from '../../types/common-types';\nimport { PortfolioItem } from '@redhat-cloud-services/catalog-client';\nimport { OrderDetail } from '../../redux/reducers/order-reducer';\n\nconst debouncedFilter = asyncFormValidator(\n  (filters, meta = defaultSettings, dispatch, filteringCallback) => {\n    filteringCallback(true);\n    dispatch(fetchOrders(filters, meta)).then(() => filteringCallback(false));\n  },\n  1000\n);\n\nconst initialState = {\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false,\n  filterType: 'state',\n  filters: {\n    state: [],\n    owner: ''\n  },\n  sortBy: {\n    index: 0,\n    direction: SortByDirection.desc\n  }\n};\n\nconst changeFilters = (\n  value: string,\n  type: string,\n  filters: StringObject\n): StringObject => ({\n  ...filters,\n  [type]: value\n});\n\ninterface OrdersListState {\n  isFetching?: boolean;\n  filters: StringObject;\n  filterType: string;\n  isFiltering?: boolean;\n  sortBy: Full<ISortBy>;\n}\nconst ordersListState = (\n  state: OrdersListState,\n  action: { type: string; payload: any }\n): OrdersListState => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return {\n        ...state,\n        filters: changeFilters(action.payload, state.filterType, state.filters)\n      };\n    case 'replaceFilterChip':\n      return { ...state, filters: action.payload };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    case 'setFilterType':\n      return { ...state, filterType: action.payload };\n    case 'setSortBy':\n      return { ...state, sortBy: action.payload, isFetching: true };\n  }\n\n  return state;\n};\n\nconst sortIndexMapper = {\n  0: 'id',\n  3: 'owner',\n  4: 'created_at',\n  6: 'state'\n};\n\nconst OrdersList: React.ComponentType = () => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const viewState = useInitialUriHash();\n  const [\n    { isFetching, isFiltering, filterType, filters, sortBy },\n    stateDispatch\n  ] = useReducer(ordersListState, {\n    ...initialState,\n    filters: viewState?.orders?.filters || { state: [], owner: '' },\n    sortBy: {\n      direction: viewState?.orders?.sortDirection || SortByDirection.desc,\n      index: viewState?.orders?.sortIndex || 0\n    }\n  });\n  const { data, meta } = useSelector<\n    CatalogRootState,\n    ApiCollectionResponse<OrderDetail>\n  >(({ orderReducer }) => orderReducer.orders);\n  const columns: ICell[] = [\n    { title: formatMessage(ordersMessages.orderID) },\n    formatMessage(labelMessages.product),\n    '', // need empty row column to correctly aling product names after the icon column\n    {\n      title: formatMessage(ordersMessages.orderedByLabel)\n    },\n    { title: formatMessage(ordersMessages.orderDate) },\n    formatMessage(labelMessages.updated),\n    { title: formatMessage(labelMessages.status) }\n  ].map((column) =>\n    typeof column === 'object' &&\n    !isFetching &&\n    !isFiltering &&\n    data.length !== 0\n      ? { ...column, transforms: [sortable] }\n      : column\n  ) as ICell[];\n  const portfolioItems = useSelector<CatalogRootState, Full<PortfolioItem>[]>(\n    ({\n      portfolioReducer: {\n        portfolioItems: { data }\n      }\n    }) => data as Full<PortfolioItem>[]\n  );\n  const onSort: OnSort = (_e, index, direction) => {\n    stateDispatch({\n      type: 'setSortBy',\n      payload: { index, direction }\n    });\n    return ((dispatch(\n      fetchOrders(filters, {\n        ...meta,\n        sortBy: sortIndexMapper[index as keyof typeof sortIndexMapper],\n        sortDirection: direction,\n        sortIndex: index\n      })\n    ) as unknown) as Promise<void>).then(() =>\n      stateDispatch({ type: 'setFetching', payload: false })\n    );\n  };\n\n  const rows = data.map((item) => {\n    const { orderPlatform, orderPortfolio } = getOrderPlatformId(\n      item,\n      portfolioItems\n    );\n    const orderName = getOrderPortfolioName(item, portfolioItems);\n    return createOrderItem(\n      { ...item, orderName },\n      orderPlatform,\n      orderPortfolio,\n      formatMessage\n    );\n  });\n\n  useEffect(() => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    Promise.all([\n      dispatch(fetchOrders(filters, viewState?.orders)),\n      dispatch(fetchPlatforms())\n    ]).then(() => stateDispatch({ type: 'setFetching', payload: false }));\n  }, []);\n\n  const handlePagination = (\n    _apiProps: any,\n    pagination: PaginationConfiguration\n  ) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    return ((dispatch(\n      fetchOrders(filters, {\n        ...pagination,\n        sortBy: sortIndexMapper[sortBy.index as keyof typeof sortIndexMapper],\n        sortDirection: sortBy.direction as SortByDirection,\n        sortIndex: sortBy.index\n      })\n    ) as unknown) as Promise<void>)\n      .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n      .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  const handleFilterItems = (value = '') => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      { ...filters, [filterType]: value },\n      {\n        ...meta,\n        sortBy: sortIndexMapper[sortBy.index as keyof typeof sortIndexMapper],\n        sortDirection: sortBy.direction,\n        sortIndex: sortBy.index,\n        offset: 0\n      },\n      dispatch,\n      (isFiltering: boolean) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering })\n    );\n  };\n\n  const handleClearAll = () => {\n    stateDispatch({\n      type: 'replaceFilterChip',\n      payload: initialState.filters\n    });\n    return debouncedFilter(\n      initialState.filters,\n      {\n        ...meta,\n        sortBy: sortIndexMapper[sortBy.index as keyof typeof sortIndexMapper],\n        sortDirection: sortBy.direction,\n        sortIndex: sortBy.index\n      },\n      dispatch,\n      (isFiltering: boolean) =>\n        stateDispatch({\n          type: 'setFilteringFlag',\n          payload: isFiltering\n        })\n    );\n  };\n\n  return (\n    <Grid hasGutter>\n      <GridItem>\n        <Section type=\"content\">\n          {!meta.noData && (\n            <PrimaryToolbar\n              activeFiltersConfig={{\n                filters: Object.entries(filters)\n                  .filter(([, value]) => value && value.length > 0)\n                  .map<{ category: string; type: string; chips: Chip[] }>(\n                    ([key, value]) => ({\n                      category: key,\n                      type: key,\n                      chips: Array.isArray(value)\n                        ? value.map<Chip>((name) => ({ name }))\n                        : ([{ name: value }] as Chip[])\n                    })\n                  ),\n                onDelete: (_e, [chip], clearAll) => {\n                  if (clearAll) {\n                    return handleClearAll();\n                  }\n\n                  const newFilters = { ...filters };\n                  if (chip.type === 'state') {\n                    newFilters[chip.type] = (((newFilters[\n                      chip.type\n                    ] as unknown) as string[]).filter(\n                      (value) => value !== chip?.chips?.[0].name\n                    ) as unknown) as string;\n                  } else {\n                    newFilters[chip.type!] = '';\n                  }\n\n                  stateDispatch({\n                    type: 'replaceFilterChip',\n                    payload: newFilters\n                  });\n                  debouncedFilter(\n                    newFilters,\n                    meta,\n                    dispatch,\n                    (isFiltering: boolean) =>\n                      stateDispatch({\n                        type: 'setFilteringFlag',\n                        payload: isFiltering\n                      })\n                  );\n                }\n              }}\n              filterConfig={{\n                onChange: (_e, value) =>\n                  stateDispatch({ type: 'setFilterType', payload: value }),\n                value: filterType,\n                items: [\n                  {\n                    filterValues: {\n                      items: [\n                        {\n                          value: 'Approval Pending',\n                          label: formatMessage(statesMessages.approvalPending)\n                        },\n                        {\n                          value: 'Canceled',\n                          label: formatMessage(statesMessages.canceled)\n                        },\n                        {\n                          value: 'Completed',\n                          label: formatMessage(statesMessages.completed)\n                        },\n                        {\n                          value: 'Created',\n                          label: formatMessage(labelMessages.created)\n                        },\n                        {\n                          value: 'Failed',\n                          label: formatMessage(statesMessages.failed)\n                        },\n                        {\n                          value: 'Ordered',\n                          label: formatMessage(statesMessages.ordered)\n                        }\n                      ],\n                      value: filters.state,\n                      onChange: (_e, value) => handleFilterItems(value)\n                    },\n                    label: 'State',\n                    value: 'state',\n                    type: 'checkbox'\n                  },\n                  {\n                    filterValues: {\n                      value: filters.owner,\n                      onChange: (_e, value) => handleFilterItems(value)\n                    },\n                    label: 'Owner',\n                    value: 'owner'\n                  }\n                ]\n              }}\n              pagination={\n                <AsyncPagination\n                  isDisabled={isFetching || isFiltering}\n                  apiRequest={handlePagination}\n                  meta={meta}\n                  isCompact\n                />\n              }\n            />\n          )}\n          <Table\n            aria-label=\"orders\"\n            {...(!(isFetching || isFiltering) && data.length === 0\n              ? {}\n              : { sortBy, onSort })}\n            cells={columns}\n            rows={isFetching || isFiltering ? [] : rows}\n            className=\"orders-table\"\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {!(isFetching || isFiltering) && data.length === 0 && (\n            <EmptyTable>\n              <Bullseye>\n                <EmptyState>\n                  <Bullseye>\n                    <EmptyStateIcon icon={SearchIcon} />\n                  </Bullseye>\n                  <Title headingLevel=\"h1\" size=\"lg\">\n                    {meta.noData\n                      ? formatMessage(ordersMessages.noOrdersTitle)\n                      : formatMessage(filteringMessages.noResults)}\n                  </Title>\n                  <EmptyStateBody>\n                    {meta.noData\n                      ? formatMessage(ordersMessages.noOrdersDescription)\n                      : formatMessage(filteringMessages.noResultsDescription)}\n                  </EmptyStateBody>\n                  {!meta.noData && (\n                    <EmptyStateSecondaryActions>\n                      <Button variant=\"link\" onClick={handleClearAll}>\n                        {formatMessage(filteringMessages.clearFilters)}\n                      </Button>\n                    </EmptyStateSecondaryActions>\n                  )}\n                </EmptyState>\n              </Bullseye>\n            </EmptyTable>\n          )}\n          {(isFetching || isFiltering) && <ListLoader />}\n          <TableToolbar className=\"pf-u-mr-0\">\n            <div className=\"bottom-pagination-container\">\n              <Flex justifyContent={{ default: 'justifyContentFlexEnd' }}>\n                {meta && meta.count! > 0 && (\n                  <AsyncPagination\n                    className=\"pf-u-mt-0\"\n                    isDisabled={isFetching || isFiltering}\n                    apiRequest={handlePagination}\n                    meta={meta}\n                  />\n                )}\n              </Flex>\n            </div>\n          </TableToolbar>\n        </Section>\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default OrdersList;\n","import React, { useEffect } from 'react';\nimport { Stack } from '@patternfly/react-core';\n\nimport ToolbarRenderer from '../../toolbar/toolbar-renderer';\nimport createOrdersToolbarSchema from '../../toolbar/schemas/orders-toolbar.schema';\nimport OrdersList from './orders-list';\n\nconst Orders: React.ComponentType = () => {\n  useEffect(() => {\n    window.insights.chrome.appNavClick({ id: 'orders', secondaryNav: true });\n  }, []);\n\n  return (\n    <Stack>\n      <ToolbarRenderer schema={createOrdersToolbarSchema()} />\n      <OrdersList />\n    </Stack>\n  );\n};\n\nexport default Orders;\n"],"sourceRoot":""}