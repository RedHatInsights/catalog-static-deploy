{"version":3,"sources":["webpack:///./src/smart-components/common/async-pagination.js","webpack:///./src/messages/filtering.messages.ts","webpack:///./src/messages/orders.messages.ts","webpack:///./src/messages/states.messages.ts","webpack:///./src/helpers/order/new-order-helper.ts","webpack:///./src/helpers/order/order-helper.ts","webpack:///./src/presentational-components/order/order-notification.tsx","webpack:///./src/redux/actions/order-actions.js","webpack:///./src/smart-components/order/order-status-mapper.js","webpack:///./src/toolbar/schemas/orders-toolbar.schema.js","webpack:///./src/smart-components/order/order-item.js","webpack:///./src/helpers/shared/orders.ts","webpack:///./src/smart-components/order/orders-list.js","webpack:///./src/smart-components/order/orders.js"],"names":["AsyncPagination","meta","limit","count","offset","apiProps","apiRequest","className","isCompact","props","perPage","itemCount","onPerPageSelect","_event","page","getCurrentPage","onSetPage","number","debounce","options","getNewPage","request","debouncePromise","direction","propTypes","PropTypes","shape","isRequired","func","any","string","bool","defaultProps","filteringMessages","noItems","id","defaultMessage","filterByProduct","noResults","noResultsDescription","clearFilters","noProducts","noRecords","filterByTitle","noResultsFound","noResult","unknown","ordersMessages","orderedBy","orderedByLabel","lastUpdated","compositeTitle","detailTitle","orderSuccess","noOrdersTitle","noOrdersDescription","noApprovalRequests","creatingApprovalRequest","approvalTitle","approvalDetail","approvalCreated","approvalReason","approvalCompleted","orderDetails","menuApproval","menuLifecycle","menuSteps","objectsNotFound","orderID","orderParameters","orderProgressMessages","lifecycleLink","cancelOrder","keepOrder","cancelDescription","backToOrders","orderDate","approvalParameters","activity","statesMessages","title","ordered","approvalPending","canceled","completed","failed","undecided","approved","denied","error","pending","skipped","started","notified","getTranslatableState","state","replace","char","toLowerCase","created","axiosInstance","orderApi","portfolioItemApi","graphqlInstance","getServicePlans","portfolioItemId","listServicePlans","getOrders","filter","pagination","get","then","orders","orderIds","data","map","orderId","join","orderItems","itemIds","itemId","portfolioItems","order","getOrderDetail","params","Object","values","some","value","status","pathname","from","location","orderItem","object","notFound","portfolioItem","portfolio_item_id","parallerRequests","service_offering_source_ref","catch","portfolio_id","Promise","all","platform","progressMessages","portfolio","detailPromises","getApprovalRequests","orderItemId","promises","requestId","parent_id","approval_request_ref","post","query","requests","actions","updated","length","pop","created_at","undefined","dispatch","portfolioId","platformId","formatMessage","link","chunks","onClick","to","search","fetchServicePlans","type","ActionTypes","payload","OrderHelper","sendSubmitOrder","service_parameters","providerControlParameters","parameters","createOrder","provider_control_parameters","addToOrder","orderItemResponse","submitOrder","addNotification","variant","description","dismissable","getState","orderDetail","orderReducer","approvalRequest","fetchOrders","filters","defaultSettings","queryFilter","entries","key","Array","isArray","sortBy","sortDirection","storeState","stateKey","fetchOrderDetails","fetchApprovalRequests","err","orderStatusMapper","Completed","icon","color","Ordered","Failed","Canceled","Created","createOrdersToolbarSchema","fields","component","toolbarComponentTypes","TOP_TOOLBAR","TOP_TOOLBAR_TITLE","createOrderItem","item","orderPlatform","orderPortfolio","searchParams","translatableState","TableText","ORDER_ROUTE","height","src","sourceId","orderName","owner","Text","TextVariants","small","DateFormat","date","updated_at","Label","debouncedFilter","asyncFormValidator","filteringCallback","initialState","isOpen","isFetching","isFiltering","filterType","index","SortByDirection","desc","ordersListState","action","sortIndexMapper","0","3","4","6","OrdersList","useFormatMessage","useDispatch","viewState","useInitialUriHash","useReducer","sortIndex","stateDispatch","useSelector","columns","labelMessages","product","column","transforms","sortable","portfolioReducer","rows","find","getOrderPlatformId","name","getOrderPortfolioName","useEffect","fetchPlatforms","handlePagination","_apiProps","handleFilterItems","handleClearAll","Grid","hasGutter","GridItem","Section","noData","PrimaryToolbar","activeFiltersConfig","category","chips","onDelete","_e","clearAll","chip","newFilters","filterConfig","onChange","items","filterValues","label","isDisabled","Table","aria-label","onSort","cells","EmptyTable","Bullseye","EmptyState","EmptyStateIcon","SearchIcon","Title","headingLevel","size","EmptyStateBody","EmptyStateSecondaryActions","Button","TableToolbar","Flex","justifyContent","default","Orders","insights","chrome","appNavClick","secondaryNav","Stack","schema"],"mappings":"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","file":"js/orders~91f4305a.75b461af5c3d706dd477.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport debouncePromise from 'awesome-debounce-promise';\n\nimport { Pagination } from '@patternfly/react-core';\n\nimport { getCurrentPage, getNewPage } from '../../helpers/shared/pagination';\n\nconst AsyncPagination = ({\n  meta: { limit, count, offset },\n  apiProps,\n  apiRequest,\n  className,\n  isCompact,\n  ...props\n}) => {\n  const handleOnPerPageSelect = (_event, limit) =>\n    apiRequest(apiProps, {\n      offset,\n      limit\n    });\n\n  const handleSetPage = (_event, number, debounce) => {\n    const options = {\n      offset: getNewPage(number, limit),\n      limit\n    };\n\n    const request = () => apiRequest(apiProps, options);\n    if (debounce) {\n      return debouncePromise(request, 250)();\n    }\n\n    return request();\n  };\n\n  return (\n    <div className={className}>\n      <Pagination\n        perPage={limit || 50}\n        itemCount={count || 0}\n        onPerPageSelect={handleOnPerPageSelect}\n        page={getCurrentPage(limit, offset)}\n        onSetPage={handleSetPage}\n        direction=\"down\"\n        isCompact={isCompact}\n        {...props}\n      />\n    </div>\n  );\n};\n\nAsyncPagination.propTypes = {\n  meta: PropTypes.shape({\n    count: PropTypes.number,\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number.isRequired\n  }),\n  apiRequest: PropTypes.func.isRequired,\n  apiProps: PropTypes.any,\n  className: PropTypes.string,\n  isCompact: PropTypes.bool\n};\n\nAsyncPagination.defaultProps = {\n  meta: {\n    count: 0,\n    limit: 50,\n    offset: 0\n  },\n  className: '',\n  isCompact: false\n};\n\nexport default AsyncPagination;\n","import { defineMessages } from 'react-intl';\n\nconst filteringMessages = defineMessages({\n  noItems: {\n    id: 'common.filtering.noItems',\n    defaultMessage: 'No items found'\n  },\n  filterByProduct: {\n    id: 'common.filtering.filterByProduct',\n    defaultMessage: 'Filter by product'\n  },\n  noResults: {\n    id: 'common.filtering.noResults',\n    defaultMessage: 'No results found'\n  },\n  noResultsDescription: {\n    id: 'common.filtering.noResultsDescription',\n    defaultMessage:\n      'No results match the filter criteria. Remove all filters or clear all filters to show results.'\n  },\n  clearFilters: {\n    id: 'common.filtering.clear-filters',\n    defaultMessage: 'Clear all filters'\n  },\n  noProducts: {\n    id: 'common.filtering.no-products',\n    defaultMessage: 'No products yet'\n  },\n  noRecords: {\n    id: 'commonMessages.noRecords',\n    defaultMessage: 'No records'\n  },\n  filterByTitle: {\n    id: 'tableToolbar.filterByTitle',\n    defaultMessage: 'Filter by {title}'\n  },\n  noResultsFound: {\n    id: 'tableToolbar.noResultsFound',\n    defaultMessage: 'No results found'\n  },\n  noResult: {\n    id: 'tableToolbar.noResult',\n    defaultMessage: 'No {results}'\n  },\n  unknown: {\n    id: 'commonMessages.unknown',\n    defaultMessage: 'Unknown'\n  }\n});\n\nexport default filteringMessages;\n","import { defineMessages } from 'react-intl';\n\nconst ordersMessages = defineMessages({\n  orderedBy: {\n    id: 'orders.common.orderedBy',\n    defaultMessage: 'Ordered by {owner}'\n  },\n  orderedByLabel: {\n    id: 'orders.approval.orderedBy',\n    defaultMessage: 'Ordered by'\n  },\n  lastUpdated: {\n    id: 'orders.common.lastUpdated',\n    defaultMessage: 'Last updated'\n  },\n  compositeTitle: {\n    id: 'orders.common.compositeTitle',\n    defaultMessage: '{name} - Order # {id}'\n  },\n  detailTitle: {\n    id: 'orders.detail.title',\n    defaultMessage: 'Order ID {id}'\n  },\n  orderSuccess: {\n    id: 'orders.notification.success',\n    defaultMessage:\n      'You can track the progress of Order # {id} in your <link>Orders</link> page.'\n  },\n  noOrdersTitle: {\n    id: 'orders.list.empty.title',\n    defaultMessage: 'No orders'\n  },\n  noOrdersDescription: {\n    id: 'orders.list.empty.description',\n    defaultMessage: 'No orders have been created.'\n  },\n  noApprovalRequests: {\n    id: 'orders.approval.no-requests',\n    defaultMessage:\n      'We were unable to find any approval requests for this order.'\n  },\n  creatingApprovalRequest: {\n    id: 'orders.approval.creating',\n    defaultMessage: 'Creating approval request'\n  },\n  approvalTitle: {\n    id: 'orders.approval.title',\n    defaultMessage: 'Summary'\n  },\n  approvalDetail: {\n    id: 'orders.approval.view-detail',\n    // eslint-disable-next-line quotes\n    defaultMessage: \"View this order's approval request details\"\n  },\n  approvalCreated: {\n    id: 'orders.approval.details.created',\n    defaultMessage: 'Request created'\n  },\n  approvalReason: {\n    id: 'orders.approval.details.reason',\n    defaultMessage: 'Approval reason'\n  },\n  approvalCompleted: {\n    id: 'orders.approval.details.completed',\n    defaultMessage: 'Completed at'\n  },\n  orderDetails: {\n    id: 'orders.common.details',\n    defaultMessage: 'Order details'\n  },\n  menuApproval: {\n    id: 'orders.menu.approval',\n    defaultMessage: 'Approval'\n  },\n  menuLifecycle: {\n    id: 'orders.menu.lifecycle',\n    defaultMessage: 'Lifecycle'\n  },\n  menuSteps: {\n    id: 'orders.menu.steps',\n    defaultMessage: 'Order steps'\n  },\n  objectsNotFound: {\n    id: 'order.detail.not-found',\n    defaultMessage:\n      'The {objects} for this order {count, plural, one {is} other {are}} not available'\n  },\n  orderID: {\n    id: 'orders.order.detail.ID',\n    defaultMessage: 'Order ID'\n  },\n  orderParameters: {\n    id: 'orders.order.detail.parameters',\n    defaultMessage: 'Order parameters'\n  },\n  orderProgressMessages: {\n    id: 'orders.order.detail.messages',\n    defaultMessage: 'Progress messages'\n  },\n  lifecycleLink: {\n    id: 'orders.order.lifecicle.link',\n    defaultMessage: 'Manage product'\n  },\n  cancelOrder: {\n    id: 'orders.actions.cancel',\n    defaultMessage: 'Cancel order'\n  },\n  keepOrder: {\n    id: 'orders.actions.keep',\n    defaultMessage: 'Keep order'\n  },\n  cancelDescription: {\n    id: 'orders.cancel.description',\n    defaultMessage: 'Are you sure you want to cancel {name}?'\n  },\n  backToOrders: {\n    id: 'orders.toolbar.backLink',\n    defaultMessage: 'Back to orders'\n  },\n  orderDate: {\n    id: 'orders.approval.order-date',\n    defaultMessage: 'Order date'\n  },\n  approvalParameters: {\n    id: 'orders.approval.parameters',\n    defaultMessage: 'Parameters'\n  },\n  activity: {\n    id: 'orders.approval.activity',\n    defaultMessage: 'Activity'\n  }\n});\n\nexport default ordersMessages;\n","import labelMessages from './labels.messages';\n\nimport { defineMessages } from 'react-intl';\n\nconst statesMessages = defineMessages({\n  title: {\n    id: 'common.states.title',\n    defaultMessage: 'State'\n  },\n  ordered: {\n    id: 'common.states.ordered',\n    defaultMessage: 'Ordered'\n  },\n  approvalPending: {\n    id: 'common.states.approval-pending',\n    defaultMessage: 'Approval Pending'\n  },\n  canceled: {\n    id: 'common.states.canceled',\n    defaultMessage: 'Canceled'\n  },\n  completed: {\n    id: 'common.states.completed',\n    defaultMessage: 'Completed'\n  },\n  failed: {\n    id: 'common.states.failed',\n    defaultMessage: 'Failed'\n  },\n  undecided: {\n    id: 'common.states.undecided',\n    defaultMessage: 'Undecided'\n  },\n  approved: {\n    id: 'common.states.approved',\n    defaultMessage: 'Approved'\n  },\n  denied: {\n    id: 'common.states.denied',\n    defaultMessage: 'Denied'\n  },\n  error: {\n    id: 'common.states.error',\n    defaultMessage: 'Error'\n  },\n  pending: {\n    id: 'common.states.pending',\n    defaultMessage: 'Pending'\n  },\n  skipped: {\n    id: 'common.states.skipped',\n    defaultMessage: 'Skipped'\n  },\n  started: {\n    id: 'common.states.started',\n    defaultMessage: 'Started'\n  },\n  notified: {\n    id: 'common.states.notified',\n    defaultMessage: 'Notified'\n  }\n});\n\nexport const getTranslatableState = (state: string): string =>\n  state.replace(/\\s/g, '').replace(/^./, (char) => char.toLowerCase());\n\n/**\n * We must include the created state so the dynamic data from DB can look for these messages in one place\n * The created message is shared among other components and is just a state message\n */\nexport default { ...statesMessages, created: labelMessages.created };\n","// TODO migrate whole order-helper.js to TS\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  Order,\n  OrderItem,\n  PortfolioItem,\n  Portfolio,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\nimport { Source } from '@redhat-cloud-services/sources-client';\nimport { getAxiosInstance } from '../shared/user-login';\nimport { CATALOG_API_BASE, SOURCES_API_BASE } from '../../utilities/constants';\nconst axiosInstance = getAxiosInstance();\n\nexport interface ObjectNotFound {\n  object: 'Order item' | 'Product' | 'Portfolio' | 'Messages' | 'Platform';\n  notFound: boolean;\n}\n\nexport type OrderDetailPayload = [\n  Order,\n  OrderItem | ObjectNotFound,\n  PortfolioItem | ObjectNotFound,\n  Source | ObjectNotFound,\n  ProgressMessage | ObjectNotFound,\n  Portfolio | ObjectNotFound\n];\n\nexport const fetchOrderDetailSequence = async (\n  orderId: string\n): Promise<OrderDetailPayload> => {\n  let order: Order;\n  try {\n    order = await axiosInstance.get(`${CATALOG_API_BASE}/orders/${orderId}`);\n  } catch (error) {\n    order = {};\n    if (error.status === 404 || error.status === 400) {\n      catalogHistory.replace({\n        pathname: '/404',\n        state: { from: catalogHistory.location }\n      });\n    } else {\n      throw error;\n    }\n  }\n\n  let orderItem: OrderItem | ObjectNotFound = {\n    object: 'Order item',\n    notFound: true\n  };\n  try {\n    const orderItems = await axiosInstance.get(\n      `${CATALOG_API_BASE}/order_items?order_id=${order.id}`\n    );\n    orderItem = orderItems.data[0];\n  } catch (_error) {\n    // no handler\n  }\n\n  let portfolioItem: PortfolioItem | ObjectNotFound = {\n    object: 'Product',\n    notFound: true\n  };\n\n  try {\n    portfolioItem = await axiosInstance.get(\n      `${CATALOG_API_BASE}/portfolio_items/${\n        (orderItem as OrderItem).portfolio_item_id\n      }`\n    );\n  } catch (_error) {\n    // nohandler\n  }\n\n  const parallerRequests = [\n    axiosInstance\n      .get(\n        `${SOURCES_API_BASE}/sources/${\n          (portfolioItem as PortfolioItem).service_offering_source_ref\n        }`\n      )\n      .catch(() => ({ object: 'Platform', notFound: true })),\n\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/order_items/${\n          (orderItem as OrderItem).id\n        }/progress_messages`\n      )\n      .catch(() => ({ object: 'Messages', notFound: true })),\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/portfolios/${\n          (portfolioItem as PortfolioItem).portfolio_id\n        }`\n      )\n      .catch(() => ({ object: 'Portfolio', notFound: true }))\n  ];\n\n  return Promise.all(\n    parallerRequests\n  ).then(([platform, progressMessages, portfolio]) => [\n    order,\n    orderItem,\n    portfolioItem,\n    platform as Source | ObjectNotFound,\n    progressMessages as ProgressMessage | ObjectNotFound,\n    portfolio as Portfolio | ObjectNotFound\n  ]);\n};\n","/* eslint camelcase: 0 */\nimport {\n  getAxiosInstance,\n  getPortfolioItemApi,\n  getOrderApi,\n  getOrderItemApi,\n  getGraphqlInstance\n} from '../shared/user-login';\nimport {\n  CATALOG_API_BASE,\n  SOURCES_API_BASE,\n  APPROVAL_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  fetchOrderDetailSequence,\n  OrderDetailPayload\n} from './new-order-helper';\nimport { ApiCollectionResponse, Full } from '../../types/common-types';\nimport {\n  ServicePlan,\n  Order,\n  OrderItem,\n  PortfolioItem,\n  ApprovalRequest\n} from '@redhat-cloud-services/catalog-client';\nimport { AxiosPromise } from 'axios';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\nimport { CatalogOrder } from '../../redux/reducers/order-reducer';\nimport { Request, Action } from '@redhat-cloud-services/approval-client';\n\nconst orderApi = getOrderApi();\nconst orderItemApi = getOrderItemApi();\nconst portfolioItemApi = getPortfolioItemApi();\nconst axiosInstance = getAxiosInstance();\nconst graphqlInstance = getGraphqlInstance();\n\nexport const getServicePlans = (\n  portfolioItemId: string\n): AxiosPromise<ApiCollectionResponse<ServicePlan>> =>\n  (portfolioItemApi.listServicePlans(\n    portfolioItemId\n  ) as unknown) as AxiosPromise<ApiCollectionResponse<ServicePlan>>;\n\nexport const sendSubmitOrder = async ({\n  service_parameters: { providerControlParameters, ...service_parameters },\n  ...parameters\n}: AnyObject): Promise<Order> => {\n  const order: Order = ((await orderApi.createOrder()) as unknown) as Order;\n  let orderItem: Partial<OrderItem> = {};\n  orderItem.count = 1;\n  orderItem = {\n    ...orderItem,\n    ...parameters,\n    service_parameters,\n    provider_control_parameters: providerControlParameters || {}\n  };\n  const orderItemResponse = await orderApi.addToOrder(\n    order.id as string,\n    orderItem as OrderItem\n  );\n  return orderApi\n    .submitOrder(order.id as string)\n    .then((order) => ({ ...order, orderItem: orderItemResponse })) as Promise<\n    Order\n  >;\n};\n\nexport const cancelOrder = (orderId: string): AxiosPromise<Order> =>\n  orderApi.cancelOrder(orderId);\n\nconst getOrderItems = (\n  orderIds: string[]\n): Promise<ApiCollectionResponse<OrderItem>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/order_items?${orderIds\n      .map((orderId) => `filter[order_id][]=${orderId}`)\n      .join('&')}`\n  );\n\nconst getOrderPortfolioItems = (\n  itemIds: string[]\n): Promise<ApiCollectionResponse<PortfolioItem>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolio_items?${itemIds\n      .map((itemId) => `filter[id][]=${itemId}`)\n      .join('&')}`\n  );\n\nexport const getOrders = (\n  filter = '',\n  pagination = defaultSettings\n): Promise<ApiCollectionResponse<CatalogOrder>> =>\n  axiosInstance\n    .get(\n      `${CATALOG_API_BASE}/orders?${filter}&limit=${pagination.limit}&offset=${pagination.offset}`\n    ) // eslint-disable-line max-len\n    .then((orders: ApiCollectionResponse<Full<Order>>) =>\n      getOrderItems(orders.data.map(({ id }) => id)).then((orderItems) =>\n        getOrderPortfolioItems(\n          orderItems.data.map(({ portfolio_item_id }) => portfolio_item_id)\n        ).then((portfolioItems) => {\n          return {\n            portfolioItems,\n            ...orders,\n            data: orders.data.map((order) => ({\n              ...order,\n              orderItems: orderItems.data.filter(\n                ({ order_id }) => order_id === order.id\n              )\n            }))\n          };\n        })\n      )\n    );\n\nexport const getOrderApprovalRequests = (\n  orderItemId: string\n): Promise<ApiCollectionResponse<Request>> =>\n  (orderItemApi.listApprovalRequests(orderItemId) as unknown) as Promise<\n    ApiCollectionResponse<Request>\n  >;\n\nexport const getOrderDetail = (params: {\n  order: string;\n  'order-item'?: string;\n  'portfolio-item'?: string;\n  platform?: string;\n  portfolio?: string;\n}): Promise<OrderDetailPayload> => {\n  if (Object.values(params).some((value) => !value)) {\n    /**\n     * Try to fetch data sequentially if any of the parameters is unknow\n     */\n    return fetchOrderDetailSequence(params.order);\n  }\n\n  const detailPromises = [\n    (axiosInstance\n      .get(`${CATALOG_API_BASE}/orders/${params.order}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return catalogHistory.replace({\n            pathname: '/404',\n            state: { from: catalogHistory.location }\n          });\n        }\n\n        throw error;\n      }) as unknown) as Promise<Order>,\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/order_items/${params['order-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Order item',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/portfolio_items/${params['portfolio-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Product',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${SOURCES_API_BASE}/sources/${params.platform}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Platform',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/order_items/${params['order-item']}/progress_messages`\n      )\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {};\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/portfolios/${params.portfolio}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Portfolio',\n            notFound: true\n          };\n        }\n\n        throw error;\n      })\n  ];\n\n  return (Promise.all(detailPromises) as unknown) as Promise<\n    OrderDetailPayload\n  >;\n};\n\nconst APPROVAL_REQUESTER_PERSONA = 'approval/requester';\nexport interface RequestTranscript extends Full<Request> {\n  actions: Action[];\n}\nconst requestTranscriptQuery = (parent_id: string) => `query {\n  requests(id: \"${parent_id}\") {\n    group_name\n    state\n    actions {\n      created_at\n    }\n  }\n}`;\nconst fetchRequestTranscript = (\n  requestId: string\n): Promise<RequestTranscript[]> =>\n  graphqlInstance\n    .post(\n      `${APPROVAL_API_BASE}/graphql`,\n      { query: requestTranscriptQuery(requestId) },\n      { 'x-rh-persona': APPROVAL_REQUESTER_PERSONA }\n    )\n    .then(({ data: { requests } }) => requests);\n\nexport const getApprovalRequests = (\n  orderItemId: string\n): Promise<{\n  data: { group_name: string; state: string; updated?: string }[];\n}> =>\n  axiosInstance\n    .get(`${CATALOG_API_BASE}/order_items/${orderItemId}/approval_requests`)\n    .then(({ data }: { data: Full<ApprovalRequest>[] }) => {\n      const promises = data.map(({ approval_request_ref }) =>\n        fetchRequestTranscript(approval_request_ref)\n      );\n      return Promise.all(promises).then((requests) => {\n        const data = requests?.[0]?.map(({ actions, ...request }) => ({\n          ...request,\n          updated: actions?.length > 0 ? actions.pop()?.created_at : undefined\n        }));\n        return { data: data || [] };\n      });\n    });\n","import React, { ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport { ORDER_ROUTE } from '../../constants/routes';\nimport ordersMessages from '../../messages/orders.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport { Dispatch } from 'redux';\n\nexport interface OrderNotificationProps {\n  id: string;\n  dispatch: Dispatch;\n  portfolioItemId: string;\n  portfolioId: string;\n  platformId: string;\n  orderItemId: string;\n}\n\nconst OrderNotification: ReactNode = ({\n  id,\n  dispatch,\n  portfolioItemId,\n  portfolioId,\n  platformId,\n  orderItemId\n}: OrderNotificationProps) => {\n  const formatMessage = useFormatMessage();\n  return formatMessage(ordersMessages.orderSuccess, {\n    id,\n    // eslint-disable-next-line react/display-name\n    link: (chunks: ReactNode | ReactNode[]) => (\n      <Link\n        onClick={() => dispatch(clearNotifications())}\n        to={{\n          pathname: ORDER_ROUTE,\n          search: `?order=${id}&order-item=${orderItemId}&portfolio-item=${portfolioItemId}&platform=${platformId}&portfolio=${portfolioId}`\n        }}\n      >\n        {chunks}\n      </Link>\n    )\n  });\n};\n\nexport default OrderNotification;\n","import React from 'react';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\n\nimport * as ActionTypes from '../action-types';\nimport * as OrderHelper from '../../helpers/order/order-helper';\nimport OrderNotification from '../../presentational-components/order/order-notification';\nimport { defaultSettings } from '../../helpers/shared/pagination';\n\nexport const fetchServicePlans = (portfolioItemId) => ({\n  type: ActionTypes.FETCH_SERVICE_PLANS,\n  payload: OrderHelper.getServicePlans(portfolioItemId)\n});\n\nexport const setSelectedPlan = (data) => ({\n  type: ActionTypes.SET_SELECTED_PLAN,\n  payload: data\n});\n\nexport const sendSubmitOrder = (apiProps, portfolioItem) => (dispatch) =>\n  dispatch({\n    type: ActionTypes.SUBMIT_SERVICE_ORDER,\n    payload: OrderHelper.sendSubmitOrder(apiProps).then(({ id, orderItem }) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been accepted successfully',\n          description: (\n            <OrderNotification\n              id={id}\n              dispatch={dispatch}\n              portfolioItemId={portfolioItem.id}\n              portfolioId={portfolioItem.portfolio_id}\n              platformId={portfolioItem.service_offering_source_ref}\n              orderItemId={orderItem.id}\n            />\n          ),\n          dismissable: true\n        })\n      )\n    )\n  });\n\nexport const cancelOrder = (orderId) => (dispatch, getState) => {\n  dispatch({ type: `${ActionTypes.CANCEL_ORDER}_PENDING` });\n  const {\n    orderReducer: { orderDetail }\n  } = getState();\n  return OrderHelper.cancelOrder(orderId)\n    .then(() => {\n      orderDetail.order.state = 'Canceled';\n      if (\n        orderDetail.approvalRequest &&\n        orderDetail.approvalRequest.length > 0\n      ) {\n        orderDetail.approvalRequest[0].state = 'canceled';\n      }\n\n      dispatch({\n        type: ActionTypes.SET_ORDER_DETAIL,\n        payload: { ...orderDetail }\n      });\n      return orderDetail;\n    })\n    .then((orderDetail) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been canceled successfully',\n          description: `Order ${`Order #${orderDetail.order.id}`} was canceled.`,\n          dismissable: true\n        })\n      )\n    )\n    .then(() => dispatch({ type: `${ActionTypes.CANCEL_ORDER}_FULFILLED` }))\n    .catch((error) => {\n      dispatch({\n        type: `${ActionTypes.CANCEL_ORDER}_REJECTED`,\n        payload: error\n      });\n    });\n};\n\nexport const fetchOrders = (filters, pagination = defaultSettings) => (\n  dispatch\n) => {\n  let queryFilter = Object.entries(filters)\n    .filter(([, value]) => value && value.length > 0)\n    .map(([key, value]) =>\n      Array.isArray(value)\n        ? value.map((value) => `filter[${key}][]=${value}`).join('&')\n        : `filter[${key}][contains_i]=${value}`\n    )\n    .join('&');\n  if (pagination.sortBy) {\n    queryFilter = `${queryFilter}&sort_by=${\n      pagination.sortBy\n    }:${pagination.sortDirection || 'desc'}`;\n  }\n\n  dispatch({ type: `${ActionTypes.FETCH_ORDERS}_PENDING` });\n  return OrderHelper.getOrders(queryFilter, pagination)\n    .then(({ portfolioItems, ...orders }) => {\n      dispatch({\n        type: ActionTypes.SET_PORTFOLIO_ITEMS,\n        payload: portfolioItems\n      });\n      return dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_FULFILLED`,\n        meta: {\n          ...pagination,\n          filter: queryFilter,\n          filters,\n          storeState: true,\n          stateKey: 'orders'\n        },\n        payload: orders\n      });\n    })\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchOrderDetails = (params) => (dispatch) => {\n  dispatch({ type: `${ActionTypes.SET_ORDER_DETAIL}_PENDING` });\n  return OrderHelper.getOrderDetail(params)\n    .then(\n      ([\n        order,\n        orderItem,\n        portfolioItem,\n        platform,\n        progressMessages,\n        portfolio,\n        approvalRequest\n      ]) =>\n        dispatch({\n          type: `${ActionTypes.SET_ORDER_DETAIL}_FULFILLED`,\n          payload: {\n            order,\n            orderItem,\n            portfolioItem,\n            platform,\n            progressMessages,\n            portfolio,\n            approvalRequest\n          }\n        })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_DETAIL}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchApprovalRequests = (orderItemId) => (dispatch) => {\n  dispatch({ type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_PENDING` });\n  return OrderHelper.getApprovalRequests(orderItemId)\n    .then((data) => {\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_FULFILLED`,\n        payload: data\n      });\n      return data;\n    })\n    .catch((err) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_REJECTED`,\n        payload: err\n      })\n    );\n};\n","import React from 'react';\nimport {\n  ExclamationCircleIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  ClockIcon,\n  PlusCircleIcon\n} from '@patternfly/react-icons';\n\nconst orderStatusMapper = {\n  Completed: { icon: <CheckCircleIcon />, color: 'green' },\n  'Approval Pending': {\n    icon: <ClockIcon />,\n    color: 'blue'\n  },\n  Ordered: { icon: <PlusCircleIcon />, color: 'grey' },\n  Failed: { icon: <ExclamationCircleIcon />, color: 'red' },\n  Canceled: { icon: <ExclamationTriangleIcon />, color: 'orange' },\n  Created: { icon: <PlusCircleIcon />, color: 'grey' }\n};\n\nexport default orderStatusMapper;\n","import { toolbarComponentTypes } from '../toolbar-mapper';\n\nconst createOrdersToolbarSchema = () => ({\n  fields: [\n    {\n      component: toolbarComponentTypes.TOP_TOOLBAR,\n      className: 'orders pf-u-p-lg',\n      key: 'orders-toolbar',\n      fields: [\n        {\n          component: toolbarComponentTypes.TOP_TOOLBAR_TITLE,\n          key: 'orders-toolbar-title',\n          title: 'Orders',\n          className: ''\n        }\n      ]\n    }\n  ]\n});\n\nexport default createOrdersToolbarSchema;\n","import React, { Fragment } from 'react';\nimport { Label, Text, TextVariants } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\n\nimport CardIcon from '../../presentational-components/shared/card-icon';\nimport { getOrderIcon } from '../../helpers/shared/orders';\nimport CatalogLink from '../common/catalog-link';\nimport { ORDER_ROUTE } from '../../constants/routes';\nimport statesMessages, {\n  getTranslatableState\n} from '../../messages/states.messages';\n\nimport { TableText } from '@patternfly/react-table';\nimport orderStatusMapper from './order-status-mapper';\n\n/**\n * Create order row definition for react tabular table\n * @param {Object} item order object\n * @param {Object} orderPlatform order source data\n * @param {Object} orderPortfolio order portfolio data\n * @param {function} formatMessage translation function\n */\nconst createOrderItem = (\n  item,\n  orderPlatform,\n  orderPortfolio,\n  formatMessage\n) => {\n  const orderItem = (item.orderItems[0] && item.orderItems[0]) || {};\n  const searchParams = {\n    order: item.id,\n    ...(orderItem.id ? { 'order-item': orderItem.id } : {}),\n    ...(orderItem.portfolio_item_id\n      ? { 'portfolio-item': orderItem.portfolio_item_id }\n      : {}),\n    ...(orderPlatform ? { platform: orderPlatform } : {}),\n    ...(orderPortfolio ? { portfolio: orderPortfolio } : {})\n  };\n  const translatableState = getTranslatableState(item.state);\n  return [\n    {\n      title: (\n        <TableText>\n          <CatalogLink pathname={ORDER_ROUTE} searchParams={searchParams}>\n            {item.id}\n          </CatalogLink>\n        </TableText>\n      )\n    },\n    {\n      title: (\n        <Fragment>\n          <CardIcon\n            height={60}\n            src={getOrderIcon(item)}\n            sourceId={orderPlatform}\n          />\n        </Fragment>\n      )\n    },\n    item.orderName,\n    item.owner,\n    {\n      title: (\n        <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n          <DateFormat date={item.created_at} variant=\"relative\" />\n        </Text>\n      )\n    },\n    {\n      title: (\n        <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n          <DateFormat\n            date={item.orderItems[0] && item.orderItems[0].updated_at}\n            variant=\"relative\"\n          />\n        </Text>\n      )\n    },\n    {\n      title: (\n        <TableText>\n          <Label {...orderStatusMapper[item.state]} variant=\"outline\">\n            {formatMessage(statesMessages[translatableState])}\n          </Label>\n        </TableText>\n      )\n    }\n  ];\n};\n\nexport default createOrderItem;\n","import { CATALOG_API_BASE } from '../../utilities/constants';\nimport {\n  OrderItem,\n  PortfolioItem\n} from '@redhat-cloud-services/catalog-client';\nimport { Full } from '../../types/common-types';\n\nexport const getOrderIcon = ({\n  orderItems\n}: {\n  orderItems: OrderItem[];\n}): string | undefined =>\n  orderItems[0] &&\n  `${CATALOG_API_BASE}/portfolio_items/${orderItems[0].portfolio_item_id}/icon`;\n\nexport const getOrderPortfolioName = (\n  { orderItems, id }: { orderItems: OrderItem[]; id: string },\n  portfolioItems: Full<PortfolioItem>[]\n): string => {\n  const portfolioItem =\n    orderItems[0] &&\n    portfolioItems.find(({ id }) => orderItems[0].portfolio_item_id === id);\n  return portfolioItem ? portfolioItem.name : `Order ${id}`;\n};\n\nexport const getOrderPlatformId = (\n  { orderItems }: { orderItems: OrderItem[] },\n  portfolioItems: Full<PortfolioItem>[]\n):\n  | {\n      orderPlatform: string;\n      orderPortfolio: string;\n    }\n  | Record<string, unknown> => {\n  const portfolioItem =\n    orderItems[0] &&\n    portfolioItems.find(({ id }) => orderItems[0].portfolio_item_id === id);\n  return portfolioItem\n    ? {\n        orderPlatform: portfolioItem.service_offering_source_ref,\n        orderPortfolio: portfolioItem.portfolio_id\n      }\n    : {};\n};\n","import React, { useEffect, useReducer } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Grid,\n  GridItem,\n  Title,\n  Bullseye,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Flex,\n  EmptyStateSecondaryActions,\n  Button\n} from '@patternfly/react-core';\nimport { Section } from '@redhat-cloud-services/frontend-components/components/cjs/Section';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/components/cjs/EmptyTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/TableToolbar';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection\n} from '@patternfly/react-table';\n\nimport { fetchOrders } from '../../redux/actions/order-actions';\nimport { fetchPlatforms } from '../../redux/actions/platform-actions';\nimport { ListLoader } from '../../presentational-components/shared/loader-placeholders';\nimport createOrderItem from './order-item';\nimport AsyncPagination from '../common/async-pagination';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport useInitialUriHash from '../../routing/use-initial-uri-hash';\nimport statesMessages from '../../messages/states.messages';\nimport filteringMessages from '../../messages/filtering.messages';\nimport ordersMessages from '../../messages/orders.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport {\n  getOrderPlatformId,\n  getOrderPortfolioName\n} from '../../helpers/shared/orders';\n\nconst debouncedFilter = asyncFormValidator(\n  (filters, meta = defaultSettings, dispatch, filteringCallback) => {\n    filteringCallback(true);\n    dispatch(fetchOrders(filters, meta)).then(() => filteringCallback(false));\n  },\n  1000\n);\n\nconst initialState = {\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false,\n  filterType: 'state',\n  filters: {\n    state: [],\n    owner: ''\n  },\n  sortBy: {\n    index: 0,\n    direction: SortByDirection.desc\n  }\n};\n\nconst changeFilters = (value, type, filters) => ({\n  ...filters,\n  [type]: value\n});\n\nconst ordersListState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return {\n        ...state,\n        filters: changeFilters(action.payload, state.filterType, state.filters)\n      };\n    case 'replaceFilterChip':\n      return { ...state, filters: action.payload };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    case 'setFilterType':\n      return { ...state, filterType: action.payload };\n    case 'setSortBy':\n      return { ...state, sortBy: action.payload, isFetching: true };\n  }\n\n  return state;\n};\n\nconst sortIndexMapper = {\n  0: 'id',\n  3: 'owner',\n  4: 'created_at',\n  6: 'state'\n};\n\nconst OrdersList = () => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const viewState = useInitialUriHash();\n  const [\n    { isFetching, isFiltering, filterType, filters, sortBy },\n    stateDispatch\n  ] = useReducer(ordersListState, {\n    ...initialState,\n    filters: viewState?.orders?.filters || { state: [], owner: '' },\n    sortBy: {\n      direction: viewState?.orders?.sortDirection || SortByDirection.desc,\n      index: viewState?.orders?.sortIndex || 0\n    }\n  });\n  const { data, meta } = useSelector(({ orderReducer }) => orderReducer.orders);\n  const columns = [\n    { title: formatMessage(ordersMessages.orderID) },\n    formatMessage(labelMessages.product),\n    '', // need empty row column to correctly aling product names after the icon column\n    {\n      title: formatMessage(ordersMessages.orderedByLabel)\n    },\n    { title: formatMessage(ordersMessages.orderDate) },\n    formatMessage(labelMessages.updated),\n    { title: formatMessage(labelMessages.status) }\n  ].map((column) =>\n    typeof column === 'object' &&\n    !isFetching &&\n    !isFiltering &&\n    data.length !== 0\n      ? { ...column, transforms: [sortable] }\n      : column\n  );\n  const portfolioItems = useSelector(\n    ({\n      portfolioReducer: {\n        portfolioItems: { data }\n      }\n    }) => data\n  );\n  const onSort = (_e, index, direction) => {\n    stateDispatch({\n      type: 'setSortBy',\n      payload: { index, direction }\n    });\n    return dispatch(\n      fetchOrders(filters, {\n        ...meta,\n        sortBy: sortIndexMapper[index],\n        sortDirection: direction,\n        sortIndex: index\n      })\n    ).then(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  const rows = data.map((item) => {\n    const { orderPlatform, orderPortfolio } = getOrderPlatformId(\n      item,\n      portfolioItems\n    );\n    const orderName = getOrderPortfolioName(item, portfolioItems);\n    return createOrderItem(\n      { ...item, orderName },\n      orderPlatform,\n      orderPortfolio,\n      formatMessage\n    );\n  });\n\n  useEffect(() => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    Promise.all([\n      dispatch(fetchOrders(filters, viewState?.orders)),\n      dispatch(fetchPlatforms())\n    ]).then(() => stateDispatch({ type: 'setFetching', payload: false }));\n  }, []);\n\n  const handlePagination = (_apiProps, pagination) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    return dispatch(\n      fetchOrders(filters, {\n        ...pagination,\n        sortBy: sortIndexMapper[sortBy.index],\n        sortDirection: sortBy.direction,\n        sortIndex: sortBy.index\n      })\n    )\n      .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n      .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  const handleFilterItems = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      { ...filters, [filterType]: value },\n      {\n        ...meta,\n        sortBy: sortIndexMapper[sortBy.index],\n        sortDirection: sortBy.direction,\n        sortIndex: sortBy.index,\n        offset: 0\n      },\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering })\n    );\n  };\n\n  const handleClearAll = () => {\n    stateDispatch({\n      type: 'replaceFilterChip',\n      payload: initialState.filters\n    });\n    return debouncedFilter(\n      initialState.filters,\n      {\n        ...meta,\n        sortBy: sortIndexMapper[sortBy.index],\n        sortDirection: sortBy.direction,\n        sortIndex: sortBy.index\n      },\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({\n          type: 'setFilteringFlag',\n          payload: isFiltering\n        })\n    );\n  };\n\n  return (\n    <Grid hasGutter>\n      <GridItem>\n        <Section type=\"content\">\n          {!meta.noData && (\n            <PrimaryToolbar\n              activeFiltersConfig={{\n                filters: Object.entries(filters)\n                  .filter(([, value]) => value && value.length > 0)\n                  .map(([key, value]) => ({\n                    category: key,\n                    type: key,\n                    chips: Array.isArray(value)\n                      ? value.map((name) => ({ name }))\n                      : [{ name: value }]\n                  })),\n                onDelete: (_e, [chip], clearAll) => {\n                  if (clearAll) {\n                    return handleClearAll();\n                  }\n\n                  const newFilters = { ...filters };\n                  if (chip.type === 'state') {\n                    newFilters[chip.type] = newFilters[chip.type].filter(\n                      (value) => value !== chip.chips[0].name\n                    );\n                  } else {\n                    newFilters[chip.type] = '';\n                  }\n\n                  stateDispatch({\n                    type: 'replaceFilterChip',\n                    payload: newFilters\n                  });\n                  debouncedFilter(newFilters, meta, dispatch, (isFiltering) =>\n                    stateDispatch({\n                      type: 'setFilteringFlag',\n                      payload: isFiltering\n                    })\n                  );\n                }\n              }}\n              filterConfig={{\n                onChange: (_e, value) =>\n                  stateDispatch({ type: 'setFilterType', payload: value }),\n                value: filterType,\n                items: [\n                  {\n                    filterValues: {\n                      items: [\n                        {\n                          value: 'Approval Pending',\n                          label: formatMessage(statesMessages.approvalPending)\n                        },\n                        {\n                          value: 'Canceled',\n                          label: formatMessage(statesMessages.canceled)\n                        },\n                        {\n                          value: 'Completed',\n                          label: formatMessage(statesMessages.completed)\n                        },\n                        {\n                          value: 'Created',\n                          label: formatMessage(labelMessages.created)\n                        },\n                        {\n                          value: 'Failed',\n                          label: formatMessage(statesMessages.failed)\n                        },\n                        {\n                          value: 'Ordered',\n                          label: formatMessage(statesMessages.ordered)\n                        }\n                      ],\n                      value: filters.state,\n                      onChange: (_e, value) => handleFilterItems(value)\n                    },\n                    label: 'State',\n                    value: 'state',\n                    type: 'checkbox'\n                  },\n                  {\n                    filterValues: {\n                      value: filters.owner,\n                      onChange: (_e, value) => handleFilterItems(value)\n                    },\n                    label: 'Owner',\n                    value: 'owner'\n                  }\n                ]\n              }}\n              pagination={\n                <AsyncPagination\n                  isDisabled={isFetching || isFiltering}\n                  apiRequest={handlePagination}\n                  meta={meta}\n                  isCompact\n                />\n              }\n            />\n          )}\n          <Table\n            aria-label=\"orders\"\n            {...(!(isFetching || isFiltering) && data.length === 0\n              ? {}\n              : { sortBy, onSort })}\n            cells={columns}\n            rows={isFetching || isFiltering ? [] : rows}\n            className=\"orders-table\"\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {!(isFetching || isFiltering) && data.length === 0 && (\n            <EmptyTable>\n              <Bullseye>\n                <EmptyState>\n                  <Bullseye>\n                    <EmptyStateIcon icon={SearchIcon} />\n                  </Bullseye>\n                  <Title headingLevel=\"h1\" size=\"lg\">\n                    {meta.noData\n                      ? formatMessage(ordersMessages.noOrdersTitle)\n                      : formatMessage(filteringMessages.noResults)}\n                  </Title>\n                  <EmptyStateBody>\n                    {meta.noData\n                      ? formatMessage(ordersMessages.noOrdersDescription)\n                      : formatMessage(filteringMessages.noResultsDescription)}\n                  </EmptyStateBody>\n                  {!meta.noData && (\n                    <EmptyStateSecondaryActions>\n                      <Button variant=\"link\" onClick={handleClearAll}>\n                        {formatMessage(filteringMessages.clearFilters)}\n                      </Button>\n                    </EmptyStateSecondaryActions>\n                  )}\n                </EmptyState>\n              </Bullseye>\n            </EmptyTable>\n          )}\n          {(isFetching || isFiltering) && <ListLoader />}\n          <TableToolbar className=\"pf-u-mr-0\">\n            <div className=\"bottom-pagination-container\">\n              <Flex justifyContent={{ default: 'justifyContentFlexEnd' }}>\n                {meta.count > 0 && (\n                  <AsyncPagination\n                    className=\"pf-u-mt-0\"\n                    isDisabled={isFetching || isFiltering}\n                    apiRequest={handlePagination}\n                    meta={meta}\n                  />\n                )}\n              </Flex>\n            </div>\n          </TableToolbar>\n        </Section>\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default OrdersList;\n","import React, { useEffect } from 'react';\nimport { Stack } from '@patternfly/react-core';\n\nimport ToolbarRenderer from '../../toolbar/toolbar-renderer';\nimport createOrdersToolbarSchema from '../../toolbar/schemas/orders-toolbar.schema';\nimport OrdersList from './orders-list';\n\nconst Orders = () => {\n  useEffect(() => {\n    insights.chrome.appNavClick({ id: 'orders', secondaryNav: true });\n  }, []);\n\n  return (\n    <Stack>\n      <ToolbarRenderer schema={createOrdersToolbarSchema()} />\n      <OrdersList />\n    </Stack>\n  );\n};\n\nexport default Orders;\n"],"sourceRoot":""}