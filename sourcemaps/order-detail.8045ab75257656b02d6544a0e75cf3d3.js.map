{"version":3,"file":"js/order-detail.1639769745302.4bb6c6e07ab04fb975db.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/angle-left-icon.js","webpack:///./src/messages/states.messages.ts","webpack:///./src/presentational-components/styled-components/lazy-load-image.ts","webpack:///./src/presentational-components/shared/card-icon.tsx","webpack:///./src/helpers/platform/platform-helper-s.ts","webpack:///./src/redux/actions/platform-actions-s.ts","webpack:///./src/helpers/platform/platform-helper.ts","webpack:///./src/redux/actions/platform-actions.ts","webpack:///./src/smart-components/common/catalog-link.tsx","webpack:///./src/smart-components/order/order-detail/order-detail-title.tsx","webpack:///./src/smart-components/order/cancel-order-modal.tsx","webpack:///./src/smart-components/order/order-detail/order-toolbar-actions.tsx","webpack:///./src/smart-components/order/order-detail/order-detail-information.tsx","webpack:///./src/smart-components/order/order-detail/order-detail-menu.tsx","webpack:///./src/presentational-components/styled-components/unavailable-alert-container.ts","webpack:///./src/smart-components/order/order-detail/order-detail.tsx","webpack:///./src/smart-components/order/order-status-mapper.tsx","webpack:///./src/helpers/shared/breadcrumbs-creators.ts","webpack:///./src/redux/actions/breadcrumbs-actions.ts","webpack:///./src/utilities/use-breadcrumbs.ts","webpack:///./src/utilities/use-enhanced-history.ts"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.AngleLeftIconConfig = {\n  name: 'AngleLeftIcon',\n  height: 512,\n  width: 256,\n  svgPath: 'M31.7 239l136-136c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9L127.9 256l96.4 96.4c9.4 9.4 9.4 24.6 0 33.9L201.7 409c-9.4 9.4-24.6 9.4-33.9 0l-136-136c-9.5-9.4-9.5-24.6-.1-34z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.AngleLeftIcon = require('../createIcon').createIcon(exports.AngleLeftIconConfig);\nexports[\"default\"] = exports.AngleLeftIcon;","import labelMessages from './labels.messages';\n\nimport { defineMessages } from 'react-intl';\n\nconst statesMessages = defineMessages({\n  title: {\n    id: 'common.states.title',\n    defaultMessage: 'State'\n  },\n  ordered: {\n    id: 'common.states.ordered',\n    defaultMessage: 'Ordered'\n  },\n  approvalPending: {\n    id: 'common.states.approval-pending',\n    defaultMessage: 'Approval Pending'\n  },\n  canceled: {\n    id: 'common.states.canceled',\n    defaultMessage: 'Canceled'\n  },\n  completed: {\n    id: 'common.states.completed',\n    defaultMessage: 'Completed'\n  },\n  failed: {\n    id: 'common.states.failed',\n    defaultMessage: 'Failed'\n  },\n  undecided: {\n    id: 'common.states.undecided',\n    defaultMessage: 'Undecided'\n  },\n  approved: {\n    id: 'common.states.approved',\n    defaultMessage: 'Approved'\n  },\n  denied: {\n    id: 'common.states.denied',\n    defaultMessage: 'Denied'\n  },\n  error: {\n    id: 'common.states.error',\n    defaultMessage: 'Error'\n  },\n  pending: {\n    id: 'common.states.pending',\n    defaultMessage: 'Pending'\n  },\n  skipped: {\n    id: 'common.states.skipped',\n    defaultMessage: 'Skipped'\n  },\n  started: {\n    id: 'common.states.started',\n    defaultMessage: 'Started'\n  },\n  notified: {\n    id: 'common.states.notified',\n    defaultMessage: 'Notified'\n  },\n  unknown: {\n    id: 'common.states.unknown',\n    defaultMessage: 'Unknown'\n  }\n});\n\nexport const getTranslatableState = (\n  state: string\n): keyof typeof statesMessages =>\n  (state\n    ? state.replace(/\\s/g, '').replace(/^./, (char) => char.toLowerCase())\n    : 'unknown') as keyof typeof statesMessages;\n\n/**\n * We must include the created state so the dynamic data from DB can look for these messages in one place\n * The created message is shared among other components and is just a state message\n */\nexport default { ...statesMessages, created: labelMessages.created };\n","import styled from 'styled-components';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\nconst StyledLazyLoadImage = styled(LazyLoadImage)`\n  height: ${({ height, hidden }) => (hidden ? '0px' : `${height}px` || '40px')};\n  display: ${({ hidden }) => (hidden ? 'none' : 'inherit')};\n  float: ${({ hidden }) => (hidden ? 'left' : 'inherit')};\n  width: ${({ hidden }) => (hidden ? 0 : 'inherit')};\n`;\n\nexport default StyledLazyLoadImage;\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\n\nimport { IconPlaceholder } from './loader-placeholders';\nimport CardIconDefault from '../../assets/images/card-icon-default.svg';\nimport StyledLazyLoadImage from '../styled-components/lazy-load-image';\nimport { CatalogRootState } from '../../types/redux';\nimport { StringObject } from '../../types/common-types';\n\ninterface CardIconContainerProps {\n  height: number;\n}\nconst CardIconContainer = styled.div<CardIconContainerProps>`\n  display: inline-block;\n  height: ${({ height }) => `${height}px`};\n`;\n\nexport interface CardIconProps {\n  src?: string;\n  height?: number;\n  sourceId?: string;\n}\nconst CardIcon: React.ComponentType<CardIconProps> = ({\n  src,\n  height = 40,\n  sourceId\n}) => {\n  const [isLoaded, setLoaded] = useState(false);\n  const [isUnknown, setUnknown] = useState(false);\n  const platformIconMapping = useSelector<CatalogRootState, StringObject>(\n    ({ platformReducer: { platformIconMapping } }) => platformIconMapping\n  );\n  const defaultIcon = sourceId\n    ? platformIconMapping[sourceId]\n    : CardIconDefault;\n\n  return (\n    <CardIconContainer height={height}>\n      {!isLoaded && <IconPlaceholder height={height} />}\n      <StyledLazyLoadImage\n        threshold={2000}\n        delayTime={0}\n        hidden={!isLoaded}\n        height={isLoaded ? height : 0}\n        onError={() => setUnknown(true)}\n        onLoad={() => setLoaded(true)}\n        src={!src || isUnknown ? defaultIcon : src}\n      />\n    </CardIconContainer>\n  );\n};\n\nexport default CardIcon;\n","import { getAxiosInstance } from '../shared/user-login';\nimport {\n  CATALOG_API_BASE,\n  CATALOG_INVENTORY_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings, PaginationConfiguration } from '../shared/pagination';\nimport {\n  Source,\n  ServiceOffering,\n  ServiceInventory\n} from '@redhat-cloud-services/sources-client';\nimport { ApiCollectionResponse, SourceDetails } from '../../types/common-types';\nconst axiosInstance = getAxiosInstance();\n\nexport const getPlatforms = (): Promise<SourceDetails> =>\n  axiosInstance.get(`${CATALOG_API_BASE}/sources/`);\n\nexport const getPlatform = (platformId: string): Promise<Source> => {\n  return axiosInstance.get(`${CATALOG_API_BASE}/sources/${platformId}/`);\n};\n\nexport const refreshPlatform = (platformId: string): Promise<Source> => {\n  return axiosInstance.patch(\n    `${CATALOG_API_BASE}/sources/${platformId}/refresh/`\n  );\n};\n\nexport const getPlatformItems = (\n  platformId: string,\n  filter?: string,\n  options?: PaginationConfiguration\n): Promise<ApiCollectionResponse<ServiceOffering>> => {\n  if (platformId) {\n    const filterQuery = filter ? `?name=${filter}` : '';\n    const optionsQuery = options\n      ? `page_size=${options.limit}&page=${options.offset || 1}`\n      : '';\n    return axiosInstance.get(\n      `${CATALOG_API_BASE}/sources/${platformId}/service_offerings/${filterQuery}${\n        filter ? '&' : '?'\n      }${optionsQuery}`\n    );\n  } else {\n    return axiosInstance.get(`${CATALOG_API_BASE}/service_offerings/`);\n  }\n};\n\nexport const getPlatformInventories = (\n  platformId: string,\n  filter = '',\n  options = defaultSettings\n): Promise<ApiCollectionResponse<ServiceInventory>> => {\n  if (platformId) {\n    const filterQuery = filter ? `name=${filter}` : '';\n    return axiosInstance.get(\n      `${CATALOG_API_BASE}/sources/${platformId}/service_inventories/?${filterQuery}${\n        options ? `&page_size=${options.limit}&page=${options.offset || 1}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(\n      `${CATALOG_API_BASE}/service_inventories/?page_size=${\n        options.limit\n      }&page=${options.offset || 1}`\n    );\n  }\n};\n","import * as ActionTypes from '../action-types';\nimport * as PlatformHelper from '../../helpers/platform/platform-helper-s';\nimport { Dispatch } from 'redux';\nimport {\n  ServiceInventory,\n  ServiceOffering,\n  Source\n} from '@redhat-cloud-services/sources-client';\nimport { AsyncMiddlewareAction } from '../../types/redux';\nimport { ApiCollectionResponse, SourceDetails } from '../../types/common-types';\nimport { PaginationConfiguration } from '../../helpers/shared/pagination';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const fetchPlatforms = () => (\n  dispatch: Dispatch\n): Promise<{ type: string; payload: SourceDetails }> => {\n  dispatch({ type: `${ActionTypes.FETCH_PLATFORMS}_PENDING` });\n  return PlatformHelper.getPlatforms()\n    .then((results) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_FULFILLED`,\n        payload: results\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchPlatformItems = (\n  platformId: string,\n  filter: string,\n  options: PaginationConfiguration\n): AsyncMiddlewareAction<ApiCollectionResponse<ServiceOffering>> => ({\n  type: ActionTypes.FETCH_PLATFORM_ITEMS,\n  payload: PlatformHelper.getPlatformItems(platformId, filter, options),\n  meta: {\n    platformId,\n    filter,\n    ...options\n  }\n});\n\nexport const fetchMultiplePlatformItems = (\n  platformsId: string[]\n): {\n  type: string;\n  payload: Promise<\n    [] | { [x: string]: ApiCollectionResponse<ServiceOffering> }\n  >;\n} => {\n  const platformPromisses = platformsId.map((platformId) =>\n    PlatformHelper.getPlatformItems(platformId).then((results) => ({\n      [platformId]: results\n    }))\n  );\n  return {\n    type: ActionTypes.FETCH_MULTIPLE_PLATFORM_ITEMS,\n    payload: Promise.all(platformPromisses).then((results) =>\n      results.reduce(\n        (acc, curr) => ({\n          ...acc,\n          ...curr\n        }),\n        {}\n      )\n    )\n  };\n};\n\nexport const fetchSelectedPlatform = (\n  id: string\n): AsyncMiddlewareAction<Source> => ({\n  type: ActionTypes.FETCH_PLATFORM,\n  payload: PlatformHelper.getPlatform(id)\n});\n\nexport const fetchPlatformInventories = (\n  platformId: string,\n  filter: string,\n  options: PaginationConfiguration\n): AsyncMiddlewareAction<ApiCollectionResponse<ServiceInventory>> => ({\n  type: ActionTypes.FETCH_PLATFORM_INVENTORIES,\n  payload: PlatformHelper.getPlatformInventories(platformId, filter, options)\n});\n\nexport const refreshPlatform = (platformId: string) => (\n  dispatch: Dispatch\n): AsyncMiddlewareAction => {\n  return dispatch({\n    type: ActionTypes.REFRESH_PLATFORM,\n    payload: PlatformHelper.refreshPlatform(platformId)\n      .then(() =>\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: 'Success starting the platform refresh',\n            dismissable: true,\n            description: 'The platform refresh started successfully'\n          })\n        )\n      )\n      .catch((error) => {\n        if (error.status === 429) {\n          dispatch(\n            addNotification({\n              variant: 'info',\n              title: 'Platform refresh in progress',\n              dismissable: true,\n              description: 'Platform refresh already running.'\n            })\n          );\n        } else {\n          dispatch({\n            type: `${ActionTypes.REFRESH_PLATFORM}_REJECTED`,\n            payload: error\n          });\n        }\n      })\n  });\n};\n","import { getAxiosInstance, getGraphqlInstance } from '../shared/user-login';\nimport {\n  CATALOG_INVENTORY_API_BASE,\n  SOURCES_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings, PaginationConfiguration } from '../shared/pagination';\nimport {\n  Source,\n  ServiceOffering,\n  ServiceInventory\n} from '@redhat-cloud-services/sources-client';\nimport { ApiCollectionResponse, SourceDetails } from '../../types/common-types';\nconst axiosInstance = getAxiosInstance();\nconst { post } = getGraphqlInstance();\n\nconst sourcesQuery = `\nquery {\n  application_types (filter: { name: \"/insights/platform/catalog\" }) {\n    id\n    name\n    sources {\n      id\n      name\n      source_type_id\n    }\n  }\n}`;\n\nconst getSourcesDetails = (\n  sourceIds: string[]\n): Promise<ApiCollectionResponse<SourceDetails>> => {\n  return axiosInstance.get(\n    `${CATALOG_INVENTORY_API_BASE}/sources?limit=${sourceIds.length ||\n      defaultSettings.limit}${sourceIds.length ? '&' : ''}${sourceIds\n      .map((sourceId) => `filter[id][]=${sourceId}`)\n      .join('&')}`\n  );\n};\n\nexport const getPlatforms = (): Promise<SourceDetails> =>\n  post(`${SOURCES_API_BASE}/graphql`, { query: sourcesQuery })\n    .then(({ data: { application_types } }) => application_types)\n    .then(([{ sources }]) => {\n      return getSourcesDetails(sources.map((source: Source) => source.id)).then(\n        (sourceDetails) => {\n          return sources.map((source: Source) => ({\n            ...source,\n            ...sourceDetails.data.find(\n              (sourceDetail) => sourceDetail.id === source.id\n            )\n          }));\n        }\n      );\n    });\n\nexport const getPlatform = (platformId: string): Promise<Source> => {\n  return axiosInstance.get(\n    `${CATALOG_INVENTORY_API_BASE}/sources/${platformId}`\n  );\n};\n\nexport const refreshPlatform = (platformId: string): Promise<Source> => {\n  return axiosInstance.patch(\n    `${CATALOG_INVENTORY_API_BASE}/sources/${platformId}/refresh`\n  );\n};\n\nexport const getPlatformItems = (\n  platformId: string,\n  filter?: string,\n  options?: PaginationConfiguration\n): Promise<ApiCollectionResponse<ServiceOffering>> => {\n  const filterQuery = filter ? `&filter[name][contains_i]=${filter}` : '';\n  if (platformId) {\n    return axiosInstance.get(\n      `${CATALOG_INVENTORY_API_BASE}/sources/${platformId}/service_offerings?filter[archived_at][nil]${filterQuery}${\n        options ? `&limit=${options.limit}&offset=${options.offset}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(`${CATALOG_INVENTORY_API_BASE}/service_offerings`);\n  }\n};\n\nexport const getPlatformInventories = (\n  platformId: string,\n  filter = '',\n  options = defaultSettings\n): Promise<ApiCollectionResponse<ServiceInventory>> => {\n  if (platformId) {\n    return axiosInstance.get(\n      `${CATALOG_INVENTORY_API_BASE}/sources/${platformId}/service_inventories?filter[name][contains_i]=${filter}${\n        options ? `&limit=${options.limit}&offset=${options.offset}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(\n      `${CATALOG_INVENTORY_API_BASE}/service_inventories?limit=${options.limit}&offset=${options.offset}`\n    );\n  }\n};\n\nexport const getServiceOffering = (\n  serviceOfferingId: string,\n  sourceId: string\n): Promise<{ service: ServiceOffering; source: Source }> =>\n  Promise.all([\n    axiosInstance.get(\n      `${CATALOG_INVENTORY_API_BASE}/service_offerings/${serviceOfferingId}`\n    ),\n    axiosInstance\n      .get(`${SOURCES_API_BASE}/sources/${sourceId}`)\n      .then((source) => {\n        return axiosInstance\n          .get(`${SOURCES_API_BASE}/source_types/${source.source_type_id}`)\n          .then(({ icon_url }) => ({\n            ...source,\n            icon_url\n          }));\n      })\n  ]).then(([service, source]: [ServiceOffering, Source]) => ({\n    service,\n    source\n  }));\n","import * as ActionTypes from '../action-types';\nimport * as PlatformHelper from '../../helpers/platform/platform-helper';\nimport { Dispatch } from 'redux';\nimport {\n  ServiceInventory,\n  ServiceOffering,\n  Source\n} from '@redhat-cloud-services/sources-client';\nimport { AsyncMiddlewareAction } from '../../types/redux';\nimport { ApiCollectionResponse, SourceDetails } from '../../types/common-types';\nimport { PaginationConfiguration } from '../../helpers/shared/pagination';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const fetchPlatforms = () => (\n  dispatch: Dispatch\n): Promise<{ type: string; payload: SourceDetails }> => {\n  dispatch({ type: `${ActionTypes.FETCH_PLATFORMS}_PENDING` });\n  return PlatformHelper.getPlatforms()\n    .then((data) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_FULFILLED`,\n        payload: data\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchPlatformItems = (\n  platformId: string,\n  filter: string,\n  options: PaginationConfiguration\n): AsyncMiddlewareAction<ApiCollectionResponse<ServiceOffering>> => ({\n  type: ActionTypes.FETCH_PLATFORM_ITEMS,\n  payload: PlatformHelper.getPlatformItems(platformId, filter, options),\n  meta: {\n    platformId,\n    filter,\n    ...options\n  }\n});\n\nexport const fetchMultiplePlatformItems = (\n  platformsId: string[]\n): {\n  type: string;\n  payload: Promise<\n    [] | { [x: string]: ApiCollectionResponse<ServiceOffering> }\n  >;\n} => {\n  const platformPromisses = platformsId.map((platformId) =>\n    PlatformHelper.getPlatformItems(platformId).then((data) => ({\n      [platformId]: data\n    }))\n  );\n  return {\n    type: ActionTypes.FETCH_MULTIPLE_PLATFORM_ITEMS,\n    payload: Promise.all(platformPromisses).then((data) =>\n      data.reduce(\n        (acc, curr) => ({\n          ...acc,\n          ...curr\n        }),\n        {}\n      )\n    )\n  };\n};\n\nexport const fetchSelectedPlatform = (\n  id: string\n): AsyncMiddlewareAction<Source> => ({\n  type: ActionTypes.FETCH_PLATFORM,\n  payload: PlatformHelper.getPlatform(id)\n});\n\nexport const fetchPlatformInventories = (\n  platformId: string,\n  filter: string,\n  options: PaginationConfiguration\n): AsyncMiddlewareAction<ApiCollectionResponse<ServiceInventory>> => ({\n  type: ActionTypes.FETCH_PLATFORM_INVENTORIES,\n  payload: PlatformHelper.getPlatformInventories(platformId, filter, options)\n});\n\nexport const fetchServiceOffering = (\n  serviceOfferingId: string,\n  sourceId: string\n): AsyncMiddlewareAction<{ service: ServiceOffering; source: Source }> => ({\n  type: ActionTypes.FETCH_SERVICE_OFFERING,\n  payload: PlatformHelper.getServiceOffering(serviceOfferingId, sourceId)\n});\n\nexport const refreshPlatform = (platformId: string) => (\n  dispatch: Dispatch\n): AsyncMiddlewareAction => {\n  return dispatch({\n    type: ActionTypes.REFRESH_PLATFORM,\n    payload: PlatformHelper.refreshPlatform(platformId)\n      .then(() =>\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: 'Success starting the platform refresh',\n            dismissable: true,\n            description: 'The platform refresh started successfully'\n          })\n        )\n      )\n      .catch((error) => {\n        if (error.status === 429) {\n          dispatch(\n            addNotification({\n              variant: 'info',\n              title: 'Platform refresh in progress',\n              dismissable: true,\n              description: 'Platform refresh already running.'\n            })\n          );\n        } else {\n          dispatch({\n            type: `${ActionTypes.REFRESH_PLATFORM}_REJECTED`,\n            payload: error\n          });\n        }\n      })\n  });\n};\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport {\n  Link,\n  NavLink,\n  useLocation,\n  LinkProps,\n  NavLinkProps\n} from 'react-router-dom';\nimport styled from 'styled-components';\nimport { StringObject } from '../../types/common-types';\n\nconst StyledLink = styled(({ isDisabled, ...props }) => <Link {...props} />)`\n  pointer-events: ${({ isDisabled }) => (isDisabled ? 'none' : 'initial')};\n`;\n\nconst StyledNavLink = styled(({ isDisabled, ...props }) => (\n  <NavLink {...props} />\n))`\n  pointer-events: ${({ isDisabled }) => (isDisabled ? 'none' : 'initial')};\n`;\n\nconst createSearchQuery = (\n  search: string,\n  searchParams: StringObject,\n  preserveSearch: boolean\n): string => {\n  const paramsQuery = Object.entries(searchParams)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&');\n  return preserveSearch\n    ? `${search}${paramsQuery.length > 0 ? `&${paramsQuery}` : ''}`\n    : paramsQuery.length > 0\n    ? `?${paramsQuery}`\n    : '';\n};\n\nexport type CatalogLinkTo =\n  | string\n  | { pathname: string; search?: string; hash?: string };\nexport interface CatalogLinkProps\n  extends Omit<LinkProps, 'to'>,\n    Omit<NavLinkProps, 'to'> {\n  pathname: string;\n  searchParams?: StringObject;\n  nav?: boolean;\n  preserveSearch?: boolean;\n  preserveHash?: boolean;\n  showDivider?: boolean;\n  to?: CatalogLinkTo;\n  isDisabled?: boolean;\n}\nconst CatalogLink: React.ComponentType<CatalogLinkProps> = ({\n  pathname,\n  searchParams = {},\n  nav = false,\n  preserveSearch = false,\n  preserveHash = false,\n  showDivider,\n  ...props\n}) => {\n  const { search, hash } = useLocation();\n  const Component = nav ? StyledNavLink : StyledLink;\n  const to = {\n    pathname,\n    search: createSearchQuery(search, searchParams, preserveSearch),\n    hash: preserveHash ? hash : undefined\n  };\n  return <Component {...props} to={to} />;\n};\n\nexport default CatalogLink;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\nimport { Title } from '@patternfly/react-core';\nimport ordersMessages from '../../../messages/orders.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\n\nconst OrderDetailTitle: React.ComponentType<{ orderId: string }> = ({\n  orderId\n}) => {\n  const formatMessage = useFormatMessage();\n  return (\n    <Title headingLevel=\"h1\" size=\"3xl\">\n      {formatMessage(ordersMessages.detailTitle, {\n        id: orderId\n      })}\n    </Title>\n  );\n};\n\nexport default OrderDetailTitle;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { Button, Modal, Title } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport ordersMessages from '../../messages/orders.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\n\nexport interface CancelOrderModal {\n  name: string;\n  cancelOrder: () => void;\n  onClose: () => void;\n  isOpen?: boolean;\n}\nconst CancelOrderModal: React.ComponentType<CancelOrderModal> = ({\n  name,\n  cancelOrder,\n  onClose,\n  isOpen\n}) => {\n  const formatMessage = useFormatMessage();\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      title=\" \"\n      aria-labelledby=\"cancel-order\"\n      header={\n        <Title size=\"2xl\" headingLevel=\"h2\">\n          <ExclamationTriangleIcon style={{ fill: '#F0AB00' }} />{' '}\n          {formatMessage(ordersMessages.cancelOrder)}\n        </Title>\n      }\n      variant=\"small\"\n      actions={[\n        <Button\n          onClick={cancelOrder}\n          ouiaId={'cancel-order'}\n          key=\"cancel-order\"\n          id=\"cancel-order\"\n          variant=\"danger\"\n        >\n          {formatMessage(ordersMessages.cancelOrder)}\n        </Button>,\n        <Button\n          onClick={onClose}\n          ouiaId={'keep-order'}\n          key=\"keep-order\"\n          id=\"keep-order\"\n          variant=\"link\"\n        >\n          {formatMessage(ordersMessages.keepOrder)}\n        </Button>\n      ]}\n    >\n      {formatMessage(ordersMessages.cancelDescription, { name })}\n    </Modal>\n  );\n};\n\nexport default CancelOrderModal;\n","/* eslint-disable react/prop-types */\nimport React, { useState, Fragment } from 'react';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\n\nimport { cancelOrder } from '../../../redux/actions/order-actions';\nimport CancelOrderModal from '../cancel-order-modal';\nimport ordersMessages from '../../../messages/orders.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport { PORTFOLIO_ITEM_ORDER_ROUTE } from '../../../constants/routes';\nimport useEnhancedHistory from '../../../utilities/use-enhanced-history';\n\nconst CANCELABLE_STATES = ['Approval Pending'];\nconst ORDERABLE_STATES = ['Completed'];\n\nconst canCancel = (state = '') => CANCELABLE_STATES.includes(state);\n\nexport interface OrderToolbarActions {\n  state?: string;\n  orderId: string;\n  portfolioItemName: string;\n  portfolioItemId: string;\n  portfolioId: string;\n  sourceId: string;\n  orderable: boolean;\n  icon_url: string;\n}\nconst OrderToolbarActions: React.ComponentType<OrderToolbarActions> = ({\n  state,\n  orderId,\n  portfolioItemName,\n  portfolioItemId,\n  portfolioId,\n  sourceId,\n  orderable = false,\n  icon_url\n}) => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const [cancelModalOpen, setCancelModalOpen] = useState(false);\n  const history = useEnhancedHistory();\n  const canReorder = () =>\n    orderable && state && ORDERABLE_STATES.includes(state);\n\n  const onReorder = (\n    portfolioId: string,\n    portfolioItemId: string,\n    sourceId: string\n  ) => {\n    history.push({\n      pathname: PORTFOLIO_ITEM_ORDER_ROUTE,\n      search: `?portfolio=${portfolioId}&portfolio-item=${portfolioItemId}&source=${sourceId}`\n    });\n  };\n\n  return (\n    <Fragment>\n      <CancelOrderModal\n        onClose={() => setCancelModalOpen(false)}\n        isOpen={cancelModalOpen}\n        cancelOrder={() => {\n          setCancelModalOpen(false);\n          dispatch(cancelOrder(orderId));\n        }}\n        name={portfolioItemName}\n      />\n      <ActionGroup>\n        {canCancel(state) && (\n          <Button\n            onClick={() => setCancelModalOpen(true)}\n            isDisabled={!canCancel(state)}\n            type=\"button\"\n            className=\"pf-u-mr-md\"\n            id=\"cancel-order-action\"\n            ouiaId=\"cancel-order-action\"\n          >\n            {formatMessage(ordersMessages.cancelOrder)}\n          </Button>\n        )}\n        {canReorder() && (\n          <Button\n            onClick={() => onReorder(portfolioId, portfolioItemId, sourceId)}\n            isDisabled={!canReorder()}\n            type=\"button\"\n            className=\"pf-u-mr-md\"\n            id=\"reorder-order-action\"\n            ouiaId=\"reorder-order-action\"\n          >\n            {formatMessage(ordersMessages.reOrder)}\n          </Button>\n        )}\n      </ActionGroup>\n    </Fragment>\n  );\n};\n\nexport default OrderToolbarActions;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { LevelItem, Level, Title, Label } from '@patternfly/react-core';\n\nimport CardIcon from '../../../presentational-components/shared/card-icon';\nimport { CATALOG_API_BASE } from '../../../utilities/constants';\nimport CatalogLink from '../../common/catalog-link';\nimport statesMessages, {\n  getTranslatableState\n} from '../../../messages/states.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport orderStatusMapper from '../order-status-mapper';\n\nexport interface OrderDetailInformationProps {\n  portfolioItemId: string;\n  sourceId: string;\n  jobName: string;\n  portfolioId: string;\n  state: keyof typeof orderStatusMapper;\n  icon_url: string;\n}\nconst OrderDetailInformation: React.ComponentType<OrderDetailInformationProps> = ({\n  portfolioId,\n  jobName,\n  portfolioItemId,\n  sourceId,\n  state,\n  icon_url\n}) => {\n  const formatMessage = useFormatMessage();\n  return (\n    <Level className=\"pf-u-mt-sm\" hasGutter>\n      <Level hasGutter>\n        <CardIcon sourceId={sourceId} height={60} src={icon_url} />\n        <Title headingLevel=\"h2\" size=\"lg\">\n          <CatalogLink\n            pathname=\"/portfolios/portfolio/portfolio-item\"\n            searchParams={{\n              portfolio: portfolioId,\n              source: sourceId,\n              'portfolio-item': portfolioItemId\n            }}\n          >\n            {jobName}\n          </CatalogLink>\n        </Title>\n      </Level>\n      <LevelItem>\n        <Label {...orderStatusMapper[state]} variant=\"outline\">\n          {formatMessage(statesMessages[getTranslatableState(state)])}\n        </Label>\n      </LevelItem>\n    </Level>\n  );\n};\n\nexport default OrderDetailInformation;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport styled from 'styled-components';\nimport useEnhancedHistory from '../../../utilities/use-enhanced-history';\nimport CatalogLink from '../../common/catalog-link';\nimport ordersMessages from '../../../messages/orders.messages';\nimport { stateToDisplay } from '../../../helpers/shared/helpers';\n\n/**\n * Make sure to import correct Tabs styles\n */\nimport '@patternfly/react-styles/css/components/Tabs/tabs.css';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport { OrderStateEnum } from '@redhat-cloud-services/catalog-client';\nimport { FormatMessage } from '../../../types/common-types';\nimport { CatalogRootState } from '../../../types/redux';\nimport { OrderDetail } from '../../../redux/reducers/order-reducer';\n\nconst StyledCatalogLink = styled(CatalogLink)`\n  color: var(--pf-c-tabs__link--Color);\n  text-decoration: none;\n`;\n\nconst StyledTabButton = styled(({ isDisabled, ...props }) => (\n  <button {...props} />\n))`\n  pointer-events: ${({ isDisabled }) => (isDisabled ? 'none' : 'initial')};\n`;\n\nconst StyledTabItem = styled(({ isDisabled, ...props }) => <li {...props} />)`\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\n`;\n\nconst useNavItems = (\n  { state }: { state?: OrderStateEnum } = {},\n  formatMessage: FormatMessage\n) => [\n  {\n    link: '',\n    title: formatMessage(ordersMessages.orderDetails)\n  },\n  {\n    link: '/approval',\n    title: formatMessage(ordersMessages.menuApproval)\n  },\n  {\n    link: '/provision',\n    title: formatMessage(ordersMessages.menuProvision)\n  },\n  {\n    link: '/lifecycle',\n    title: formatMessage(ordersMessages.menuLifecycle),\n    isDisabled: stateToDisplay(state)\n  }\n];\n\nexport interface OrderDetailMenuProps {\n  baseUrl: string;\n  isFetching?: boolean;\n}\n\nconst OrderDetailMenu: React.ComponentType<OrderDetailMenuProps> = ({\n  baseUrl,\n  isFetching\n}) => {\n  const formatMessage = useFormatMessage();\n  const { push } = useEnhancedHistory();\n  const orderDetailData = useSelector<CatalogRootState, OrderDetail>(\n    ({ orderReducer: { orderDetail } }) => orderDetail || {}\n  );\n  const { pathname, search } = useLocation();\n  const { order } = orderDetailData;\n  const navItems = useNavItems(order, formatMessage);\n  let activeKey = navItems.findIndex(\n    ({ link }) => pathname.split('/').pop() === link.replace('/', '')\n  );\n  activeKey = activeKey > 0 ? activeKey : 0;\n  const handleTabClick = (tabIndex: number) =>\n    push({ pathname: `${baseUrl}${navItems[tabIndex].link}`, search });\n\n  return (\n    <div className=\"pf-c-tabs pf-u-pl-xl pf-u-pr-md\">\n      <ul className=\"pf-c-tabs__list\">\n        {navItems.map(({ link, title, isDisabled }, index) => (\n          <StyledTabItem\n            className={`pf-c-tabs__item${\n              index === activeKey ? ' pf-m-current' : ''\n            }`}\n            isDisabled={isDisabled || isFetching}\n            key={link || index}\n          >\n            <StyledTabButton\n              className=\"pf-c-tabs__link\"\n              isDisabled={isDisabled || isFetching}\n              {...(isDisabled || isFetching ? { tabIndex: -1 } : {})}\n              onClick={() => handleTabClick(index)}\n            >\n              <StyledCatalogLink\n                exact\n                nav\n                isDisabled={isDisabled || isFetching}\n                pathname={`${baseUrl}${link}`}\n                preserveSearch\n                activeClassName=\"pf-m-active\"\n                {...(isDisabled || isFetching ? { tabIndex: -1 } : {})}\n              >\n                {title}\n              </StyledCatalogLink>\n            </StyledTabButton>\n          </StyledTabItem>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default OrderDetailMenu;\n","import styled from 'styled-components';\n\nconst UnAvailableAlertContainer = styled.div`\n  width: 100%;\n  > *:not(:last-child) {\n    margin-bottom: 4px;\n    width: 100%;\n  }\n`;\n\nexport default UnAvailableAlertContainer;\n","import React, { useEffect, useState, Fragment, Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport {\n  Level,\n  LevelItem,\n  Stack,\n  StackItem,\n  Bullseye,\n  Alert\n} from '@patternfly/react-core';\nimport { Spinner } from '@patternfly/react-core/dist/js/components/Spinner/Spinner';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/js/icons/angle-left-icon';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchOrderDetails } from '../../../redux/actions/order-actions';\nimport { fetchOrderDetails as fetchOrderDetailsS } from '../../../redux/actions/order-actions-s';\nimport OrderDetailTitle from './order-detail-title';\nimport OrderToolbarActions from './order-toolbar-actions';\nimport OrderDetailInformation from './order-detail-information';\nimport OrderDetailMenu from './order-detail-menu';\nimport { OrderDetailToolbarPlaceholder } from '../../../presentational-components/shared/loader-placeholders';\nimport useQuery from '../../../utilities/use-query';\nimport useBreadcrumbs from '../../../utilities/use-breadcrumbs';\nimport { fetchPlatforms } from '../../../redux/actions/platform-actions';\nimport { fetchPlatforms as fetchPlatformsS } from '../../../redux/actions/platform-actions-s';\nimport UnAvailableAlertContainer from '../../../presentational-components/styled-components/unavailable-alert-container';\nimport ordersMessages from '../../../messages/orders.messages';\nimport CatalogLink from '../../common/catalog-link';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport { CatalogRootState } from '../../../types/redux';\nimport { OrderDetail as OrderDetailType } from '../../../redux/reducers/order-reducer';\nimport { GetOrderDetailParams } from '../../../helpers/order/order-helper';\nimport { ORDER_ROUTE } from '../../../constants/routes';\n\nconst ApprovalRequests = lazy(() =>\n  import(/* webpackChunkName: \"approval-request\" */ './approval-request')\n);\nconst OrderLifecycle = lazy(() =>\n  import(/* webpackChunkName: \"order-lifecycle\" */ './order-lifecycle')\n);\nconst OrderProvision = lazy(() =>\n  import(/* webpackChunkName: \"order-provision\" */ './order-provision')\n);\nconst OrderDetails = lazy(() =>\n  import(/* webpackChunkName: \"order-details\" */ './order-details')\n);\nconst requiredParams = [\n  'order-item',\n  'portfolio-item',\n  'platform',\n  'portfolio',\n  'order'\n];\n\nconst OrderDetail: React.ComponentType = () => {\n  const formatMessage = useFormatMessage();\n  const [isFetching, setIsFetching] = useState(true);\n  const [queryValues] = useQuery<GetOrderDetailParams>(requiredParams);\n  const orderDetailData = useSelector<CatalogRootState, OrderDetailType>(\n    ({ orderReducer: { orderDetail } }) => orderDetail\n  );\n  const dispatch = useDispatch();\n  const resetBreadcrumbs = useBreadcrumbs([orderDetailData]);\n  useEffect(() => {\n    setIsFetching(true);\n    Promise.all([\n      dispatch(\n        localStorage.getItem('catalog_standalone')\n          ? fetchPlatformsS()\n          : fetchPlatforms()\n      ),\n      dispatch(\n        localStorage.getItem('catalog_standalone')\n          ? fetchOrderDetailsS(queryValues)\n          : fetchOrderDetails(queryValues)\n      )\n    ]).then(() => setIsFetching(false));\n    return () => {\n      if (typeof resetBreadcrumbs === 'function') {\n        resetBreadcrumbs();\n      }\n    };\n  }, []);\n\n  const { order, portfolioItem, platform, portfolio } = orderDetailData;\n\n  const unAvailable = () => {\n    const notFound = [portfolioItem, platform, portfolio || {}].filter(\n      ({ notFound }) => notFound\n    );\n    if (notFound.length === 0) {\n      return null;\n    }\n\n    let notFoundObjects = [];\n    if (portfolioItem.notFound) {\n      notFoundObjects.push(portfolioItem.object);\n    } else {\n      notFoundObjects = notFound.map(({ object }) => object);\n    }\n\n    return (\n      <Alert\n        key=\"order-object-missing\"\n        variant=\"warning\"\n        isInline\n        title={formatMessage(ordersMessages.objectsNotFound, {\n          objects: notFoundObjects.join(', '),\n          count: notFoundObjects.length\n        })}\n      />\n    );\n  };\n\n  const unavailableMessages = unAvailable();\n  // @ts-ignore\n  return (\n    <Stack>\n      <StackItem className=\"pf-u-p-lg global-primary-background\">\n        {isFetching ? (\n          <OrderDetailToolbarPlaceholder />\n        ) : (\n          <Fragment>\n            <Level className=\"pf-u-mb-md\">\n              <LevelItem>\n                <AngleLeftIcon className=\"pf-u-mr-md\" />\n                <CatalogLink pathname=\"/orders\">\n                  {formatMessage(ordersMessages.backToOrders)}\n                </CatalogLink>\n              </LevelItem>\n            </Level>\n            <Level className=\"flex-no-wrap\">\n              {unavailableMessages ? (\n                <UnAvailableAlertContainer>\n                  {unavailableMessages}\n                </UnAvailableAlertContainer>\n              ) : (\n                <Fragment>\n                  <LevelItem>\n                    <OrderDetailTitle orderId={order.id} />\n                  </LevelItem>\n                  <LevelItem>\n                    <OrderToolbarActions\n                      portfolioItemName={portfolioItem.name}\n                      orderId={order.id}\n                      state={order.state}\n                      portfolioItemId={portfolioItem.id}\n                      portfolioId={portfolio.id}\n                      sourceId={platform.id}\n                      orderable={portfolioItem.metadata?.orderable || false}\n                      icon_url={portfolioItem.icon_url}\n                    />\n                  </LevelItem>\n                </Fragment>\n              )}\n            </Level>\n            {!unavailableMessages && (\n              <OrderDetailInformation\n                portfolioItemId={portfolioItem.id}\n                portfolioId={portfolio.id}\n                sourceId={platform.id}\n                jobName={portfolioItem.name}\n                state={order.state}\n                icon_url={portfolioItem.icon_url}\n              />\n            )}\n          </Fragment>\n        )}\n      </StackItem>\n      <StackItem>\n        <Stack hasGutter>\n          <StackItem className=\"global-primary-background\">\n            <OrderDetailMenu isFetching={isFetching} baseUrl={ORDER_ROUTE} />\n          </StackItem>\n          <StackItem className=\"pf-u-pl-lg pf-u-pr-lg pf-u-mb-lg pf-u-mt-0 pf-u-pt-0\">\n            {isFetching ? (\n              <Bullseye>\n                <Spinner />\n              </Bullseye>\n            ) : (\n              <Suspense fallback={<div></div>}>\n                <Switch>\n                  <Route\n                    path={`${ORDER_ROUTE}/approval`}\n                    component={ApprovalRequests}\n                  />\n                  <Route path={`${ORDER_ROUTE}/provision`}>\n                    <OrderProvision />\n                  </Route>\n                  <Route path={`${ORDER_ROUTE}/lifecycle`}>\n                    <OrderLifecycle />\n                  </Route>\n                  <Route path={ORDER_ROUTE} component={OrderDetails} />\n                </Switch>\n              </Suspense>\n            )}\n          </StackItem>\n        </Stack>\n      </StackItem>\n    </Stack>\n  );\n};\n\nexport default OrderDetail;\n","import React, { ReactNode } from 'react';\nimport {\n  ExclamationCircleIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  ClockIcon,\n  PlusCircleIcon\n} from '@patternfly/react-icons';\n\nconst orderStatusMapper: {\n  Completed: { icon: ReactNode; color: 'green' };\n  Ordered: { icon: ReactNode; color: 'grey' };\n  Failed: { icon: ReactNode; color: 'red' };\n  Canceled: { icon: ReactNode; color: 'orange' };\n  Created: { icon: ReactNode; color: 'grey' };\n  'Approval Pending': { icon: ReactNode; color: 'blue' };\n  Approved: { icon: ReactNode; color: 'green' };\n  Denied: { icon: ReactNode; color: 'red' };\n  Undecided: { icon: ReactNode; color: 'blue' };\n  Unknown: { icon: ReactNode; color: 'grey' };\n  Error: { icon: ReactNode; color: 'red' };\n} = {\n  Completed: { icon: <CheckCircleIcon />, color: 'green' },\n  'Approval Pending': {\n    icon: <ClockIcon />,\n    color: 'blue'\n  },\n  Ordered: { icon: <PlusCircleIcon />, color: 'grey' },\n  Failed: { icon: <ExclamationCircleIcon />, color: 'red' },\n  Canceled: { icon: <ExclamationTriangleIcon />, color: 'orange' },\n  Created: { icon: <PlusCircleIcon />, color: 'grey' },\n  Approved: { icon: <CheckCircleIcon />, color: 'green' },\n  Denied: { icon: <ExclamationCircleIcon />, color: 'red' },\n  Error: { icon: <ExclamationCircleIcon />, color: 'red' },\n  Undecided: {\n    icon: <ClockIcon />,\n    color: 'blue'\n  },\n  Unknown: { icon: <ExclamationTriangleIcon />, color: 'grey' }\n};\n\nexport default orderStatusMapper;\n","import {\n  PORTFOLIOS_ROUTE,\n  PORTFOLIO_ROUTE,\n  PORTFOLIO_ITEM_ROUTE,\n  ORDER_ROUTE,\n  PLATFORM_ROUTE,\n  PLATFORM_SERVICE_OFFERINGS_ROUTE,\n  PLATFORMS_ROUTE,\n  ORDERS_ROUTE,\n  EDIT_SURVEY_ROUTE,\n  ADD_PRODUCTS_ROUTE,\n  PORTFOLIO_ITEM_ROUTE_EDIT\n} from '../../constants/routes';\nimport { PortfolioReducerState } from '../../redux/reducers/portfolio-reducer';\nimport { ReactNode } from 'react';\nimport { PlatformReducerState } from '../../redux/reducers/platform-reducer';\nimport { OrderReducerState } from '../../redux/reducers/order-reducer';\n\nexport const BASE_PORTFOLIO_FRAGMENTS = [\n  {\n    title: 'Portfolios',\n    pathname: PORTFOLIOS_ROUTE,\n    searchParams: {}\n  }\n];\n\nexport const ENTITIES_EXTRA_PARAMS = {\n  'portfolio-item': ['source', 'portfolio'],\n  'edit-survey': ['source', 'portfolio', 'portfolio-item']\n};\n\nexport const FRAGMENT_TITLE = {\n  [PORTFOLIO_ROUTE]: (\n    getState: () => { portfolioReducer: PortfolioReducerState }\n  ): ReactNode => getState().portfolioReducer.selectedPortfolio.name,\n  [PORTFOLIO_ITEM_ROUTE]: (\n    getState: () => { portfolioReducer: PortfolioReducerState }\n  ): ReactNode => getState().portfolioReducer.portfolioItem.portfolioItem.name,\n  [EDIT_SURVEY_ROUTE]: (): string => 'Edit survey',\n  [ADD_PRODUCTS_ROUTE]: (): string => 'Add products',\n  [PLATFORM_ROUTE]: (\n    getState: () => { platformReducer: PlatformReducerState }\n  ): ReactNode => getState().platformReducer.selectedPlatform.name,\n  [PLATFORM_SERVICE_OFFERINGS_ROUTE]: (\n    getState: () => { platformReducer: PlatformReducerState }\n  ): ReactNode => getState().platformReducer.serviceOffering.service.name,\n  [ORDER_ROUTE]: (\n    getState: () => { orderReducer: OrderReducerState }\n  ): ReactNode => {\n    const { portfolioItem, order } = getState().orderReducer.orderDetail;\n    return `${portfolioItem.name} # ${order.id}`;\n  },\n  [PORTFOLIO_ITEM_ROUTE_EDIT]: (): string => 'Edit product'\n};\n\nexport const FRAGMENT_PREFIX = {\n  [PORTFOLIO_ROUTE]: {\n    pathname: PORTFOLIOS_ROUTE,\n    title: 'Portfolios',\n    searchParams: {}\n  },\n  [PLATFORM_ROUTE]: {\n    pathname: PLATFORMS_ROUTE,\n    title: 'Platforms',\n    searchParams: {}\n  },\n  [ORDER_ROUTE]: {\n    pathname: ORDERS_ROUTE,\n    title: 'Orders',\n    searchParams: {}\n  }\n};\n","import { INITIALIZE_BREADCRUMBS } from '../action-types';\nimport {\n  FRAGMENT_TITLE,\n  ENTITIES_EXTRA_PARAMS,\n  FRAGMENT_PREFIX\n} from '../../helpers/shared/breadcrumbs-creators';\nimport { Dispatch } from 'redux';\nimport { BreadcrumbFragment } from '../reducers/breadcrumbs-reducer';\nimport { GetReduxState } from '../../types/redux';\nimport { AnyObject, ReduxAction } from '../../types/common-types';\n\nexport const createBreadcrumbsFromLocations = (\n  pathname = '',\n  search: AnyObject = {}\n) => (\n  dispatch: Dispatch,\n  getState: GetReduxState\n): ReduxAction<BreadcrumbFragment[]> => {\n  if (pathname.length === 0) {\n    return dispatch({ type: INITIALIZE_BREADCRUMBS, payload: [] });\n  }\n\n  const prefix: string[] = [];\n  if (pathname === '/portfolios/portfolio') {\n    prefix.push('/portfolios');\n  }\n\n  if (pathname.startsWith('/portfolios/portfolio/portfolio-item')) {\n    prefix[0] = '/portfolios';\n    prefix[1] = '/portfolio';\n    if (pathname.startsWith('/portfolios/portfolio/portfolio-item/')) {\n      prefix[2] = '/portfolio-item';\n    }\n  }\n\n  if (pathname.startsWith('/platforms/platform')) {\n    prefix[0] = '/platforms';\n  }\n\n  pathname = pathname.replace(prefix[0], '');\n  let result = pathname\n    .replace(/^\\//, '')\n    .split('/')\n    .reduce<BreadcrumbFragment[]>((acc, curr, index) => {\n      const pathname = `${\n        index > 0 && acc[index - 1] ? acc[index - 1].pathname : ''\n      }${prefix[index]}/${curr}`;\n      const generateTitle = (FRAGMENT_TITLE[\n        pathname as keyof typeof FRAGMENT_TITLE\n      ] as unknown) as (getState: GetReduxState) => string;\n      if (!generateTitle) {\n        return acc;\n      }\n\n      const searchParams = {\n        ...(index > 0 && acc[index - 1]?.searchParams),\n        ...(search[curr] ? { [curr]: search[curr] } : {})\n      };\n      if ((ENTITIES_EXTRA_PARAMS as AnyObject)[curr]) {\n        (ENTITIES_EXTRA_PARAMS as AnyObject)[curr].forEach((key: string) => {\n          searchParams[key] = search[key];\n        });\n      }\n\n      if ((FRAGMENT_PREFIX as AnyObject)[pathname]) {\n        acc = [(FRAGMENT_PREFIX as AnyObject)[pathname]];\n      }\n\n      const currTitle = generateTitle(getState);\n\n      return !currTitle\n        ? acc\n        : [\n            ...acc,\n            {\n              pathname,\n              searchParams,\n              title: currTitle\n            }\n          ];\n    }, []);\n  if (result.length > 0 && (FRAGMENT_PREFIX as AnyObject)[result[0].pathname]) {\n    result = [(FRAGMENT_PREFIX as AnyObject)[result[0].pathname], ...result];\n  }\n\n  // if portfolio item, add the 2 breadcrumbs\n  return dispatch({ type: INITIALIZE_BREADCRUMBS, payload: result });\n};\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { createBreadcrumbsFromLocations } from '../redux/actions/breadcrumbs-actions';\nimport { INITIALIZE_BREADCRUMBS } from '../redux/action-types';\nimport { AnyObject, ReduxAction } from '../types/common-types';\nimport { AnyAction } from 'redux';\n\nconst useBreadcrumbs = (\n  updateTriggers: any[] = []\n):\n  | (() => ReduxAction<{\n      type: typeof INITIALIZE_BREADCRUMBS;\n    }>)\n  | ReduxAction<{ type: typeof INITIALIZE_BREADCRUMBS }> => {\n  const dispatch = useDispatch();\n  const { pathname, search } = useLocation();\n  if (updateTriggers.length === 0) {\n    return dispatch(\n      (createBreadcrumbsFromLocations('', {}) as unknown) as AnyAction\n    );\n  }\n\n  const searchParams = new URLSearchParams(search);\n  const searchObject: AnyObject = {};\n  searchParams.forEach((value, key) => {\n    searchObject[key] = value;\n  });\n\n  useEffect(() => {\n    dispatch(createBreadcrumbsFromLocations(pathname, searchObject));\n  }, [pathname, ...updateTriggers]);\n\n  return () =>\n    dispatch((createBreadcrumbsFromLocations('', {}) as unknown) as AnyAction);\n};\n\nexport default useBreadcrumbs;\n","import { useHistory } from 'react-router-dom';\nimport { History, Path } from 'history';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\n\nexport type EnhancedHistoryPushtarget =\n  | Path\n  | { pathname: string; hash?: string; search?: string; state?: AnyObject };\n\nconst removeSearchQuery = (target: EnhancedHistoryPushtarget) => {\n  if (typeof target === 'string') {\n    return target.split('?')[0];\n  }\n\n  if (typeof target === 'object') {\n    return {\n      ...target,\n      search: undefined\n    };\n  }\n\n  return target;\n};\n\n/**\n * Wrapper around useHistory hook which adds aditional settings to standard history methods\n * @param {Boolean} removeSearch if true, using history navigation methods will remove search string from path\n * @param {Boolean} keepHash if true, using history navigation methods will not remove hash from URL\n */\nconst useEnhancedHistory = ({\n  removeSearch,\n  keepHash\n}: {\n  removeSearch?: boolean;\n  keepHash?: boolean;\n} = {}): History<History.UnknownFacade> => {\n  const history = useHistory();\n  return {\n    ...history,\n    push: (target: EnhancedHistoryPushtarget) => {\n      let internalTarget = target;\n      if (keepHash && history.location.hash.length > 0) {\n        internalTarget =\n          typeof internalTarget === 'object'\n            ? { ...internalTarget, hash: history.location.hash }\n            : `${internalTarget}${history.location.hash}`;\n      }\n\n      if (removeSearch) {\n        return history.push(removeSearchQuery(internalTarget));\n      }\n\n      return history.push(internalTarget);\n    }\n  };\n};\n\nexport default useEnhancedHistory;\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","statesMessages","title","id","defaultMessage","ordered","approvalPending","canceled","completed","failed","undecided","approved","denied","error","pending","skipped","started","notified","unknown","getTranslatableState","state","replace","char","toLowerCase","created","LazyLoadImage","CardIconContainer","src","sourceId","useState","isLoaded","setLoaded","isUnknown","setUnknown","platformIconMapping","defaultIcon","threshold","delayTime","hidden","onError","onLoad","axiosInstance","refreshPlatform","platformId","patch","getPlatformItems","filter","options","filterQuery","optionsQuery","limit","offset","get","getPlatformInventories","fetchPlatforms","dispatch","type","then","results","payload","catch","fetchPlatformItems","meta","fetchSelectedPlatform","fetchPlatformInventories","variant","dismissable","description","status","post","getServiceOffering","serviceOfferingId","Promise","all","source","source_type_id","icon_url","service","query","sourceIds","sources","map","length","join","sourceDetails","data","find","sourceDetail","fetchServiceOffering","StyledLink","props","Link","StyledNavLink","NavLink","createSearchQuery","search","searchParams","preserveSearch","paramsQuery","Object","entries","pathname","nav","preserveHash","useLocation","hash","Component","to","undefined","orderId","formatMessage","Title","headingLevel","size","cancelOrder","onClose","isOpen","Modal","header","ExclamationTriangleIcon","style","fill","actions","Button","onClick","ouiaId","key","CANCELABLE_STATES","ORDERABLE_STATES","canCancel","includes","portfolioItemName","portfolioItemId","portfolioId","orderable","cancelModalOpen","setCancelModalOpen","history","canReorder","Fragment","ActionGroup","isDisabled","className","push","onReorder","jobName","Level","hasGutter","portfolio","LevelItem","Label","StyledCatalogLink","StyledTabButton","StyledTabItem","baseUrl","isFetching","orderDetailData","navItems","link","useNavItems","activeKey","findIndex","split","pop","index","tabIndex","exact","activeClassName","ApprovalRequests","lazy","OrderLifecycle","OrderProvision","OrderDetails","requiredParams","setIsFetching","queryValues","resetBreadcrumbs","useEffect","localStorage","getItem","order","portfolioItem","platform","unavailableMessages","notFound","notFoundObjects","object","Alert","isInline","objects","count","unAvailable","Stack","StackItem","metadata","Bullseye","Spinner","Suspense","fallback","Switch","Route","path","component","Completed","icon","CheckCircleIcon","color","ClockIcon","Ordered","PlusCircleIcon","Failed","ExclamationCircleIcon","Canceled","Created","Approved","Denied","Error","Undecided","Unknown","ENTITIES_EXTRA_PARAMS","FRAGMENT_TITLE","getState","portfolioReducer","selectedPortfolio","platformReducer","selectedPlatform","serviceOffering","orderReducer","orderDetail","FRAGMENT_PREFIX","createBreadcrumbsFromLocations","prefix","startsWith","result","reduce","acc","curr","generateTitle","forEach","currTitle","updateTriggers","URLSearchParams","searchObject","value","removeSearch","keepHash","useHistory","target","internalTarget","location","removeSearchQuery"],"sourceRoot":""}