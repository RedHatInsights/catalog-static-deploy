{"version":3,"file":"js/1608.181747786999bf7b690a.js","mappings":"gaAYMA,GAAgB,UACdC,GAAS,UAAoB,KAgDxBC,EAAkB,SAACC,GAC9B,OAAOH,EAAcI,MAChB,KAA0B,YAAYD,EAAU,aAI1CE,EAAmB,SAC9BF,EACAG,EACAC,GAEA,IAAMC,EAAcF,EAAS,6BAA6BA,EAAW,GACrE,OAAIH,EACKH,EAAcS,IAChB,KAA0B,YAAYN,EAAU,8CAA8CK,GAC/FD,EAAU,UAAUA,EAAQG,MAAK,WAAWH,EAAQI,OAAW,KAI5DX,EAAcS,IAAO,KAA0B,uBAI7CG,EAAyB,SACpCT,EACAG,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAA,SACA,IAAAC,IAAAA,EAAU,MAENJ,EACKH,EAAcS,IAChB,KAA0B,YAAYN,EAAU,iDAAiDG,GAClGC,EAAU,UAAUA,EAAQG,MAAK,WAAWH,EAAQI,OAAW,KAI5DX,EAAcS,IAChB,KAA0B,8BAA8BF,EAAQG,MAAK,WAAWH,EAAQI,SAKpFE,EAAqB,SAChCC,EACAC,GAEA,OAAAC,QAAQC,IAAI,CACVjB,EAAcS,IACT,KAA0B,sBAAsBK,GAErDd,EACGS,IAAO,KAAgB,YAAYM,GACnCG,MAAK,SAACC,GACL,OAAOnB,EACJS,IAAO,KAAgB,iBAAiBU,EAAOC,gBAC/CF,MAAK,SAAC,G,IAAEG,EAAQ,WAAO,cACnBF,GAAM,CACTE,SAAQ,YAGfH,MAAK,SAAC,GAAiD,OACxDI,QADe,KAEfH,OAFuB,U,0NC3GdI,EAAiB,WAAM,gBAClCC,GAGA,OADAA,EAAS,CAAEC,KAAS,KAA2B,aDwB/CxB,EAAQ,KAAgB,WAAY,CAAEyB,MAzBnB,kLA0BhBR,MAAK,SAAC,GAAoC,OAAT,4BACjCA,MAAK,SAAC,G,IAbTS,EAaYC,EAAO,aACf,OAdJD,EAc6BC,EAAQC,KAAI,SAACV,GAAmB,OAAAA,EAAOW,MAZ7D9B,EAAcS,IAChB,KAA0B,mBAAkBkB,EAAUI,QACvD,aAAwBJ,EAAUI,OAAS,IAAM,IAAKJ,EACrDE,KAAI,SAACd,GAAa,sBAAgBA,KAClCiB,KAAK,OAQ+Dd,MACnE,SAACe,GACC,OAAOL,EAAQC,KAAI,SAACV,GAAmB,cAClCA,GACAc,EAAcC,KAAKC,MACpB,SAACC,GAAiB,OAAAA,EAAaN,KAAOX,EAAOW,gBC9BtDZ,MAAK,SAACgB,GACL,OAAAV,EAAS,CACPC,KAAS,KAA2B,aACpCY,QAASH,OAGZI,OAAM,SAACC,GACN,OAAAf,EAAS,CACPC,KAAS,KAA2B,YACpCY,QAASE,SAKJC,EAAqB,SAChCrC,EACAG,EACAC,GACkE,OAClEkB,KAAM,KACNY,QAAS,EAAgClC,EAAYG,EAAQC,GAC7DkC,KAAM,GACJtC,WAAU,EACVG,OAAM,GACHC,KA+BMmC,EAAwB,SACnCZ,GACkC,OAClCL,KAAM,KACNY,SDtB0BlC,ECsBU2B,EDrB7B9B,EAAcS,IAChB,KAA0B,YAAYN,KAFlB,IAACA,GCyBfwC,EAA2B,SACtCxC,EACAG,EACAC,GACmE,OACnEkB,KAAM,KACNY,QAAS,EAAsClC,EAAYG,EAAQC,KAGxDqC,EAAuB,SAClC9B,EACAC,GACwE,OACxEU,KAAM,KACNY,QAAS,EAAkCvB,EAAmBC,KAGnD,EAAkB,SAACZ,GAAuB,gBACrDqB,GAEA,OAAOA,EAAS,CACdC,KAAM,KACNY,QAAS,EAA+BlC,GACrCe,MAAK,WACJ,OAAAM,GACE,QAAgB,CACdqB,QAAS,UACTC,MAAO,wCACPC,aAAa,EACbC,YAAa,kDAIlBV,OAAM,SAACC,GACe,MAAjBA,EAAMU,OACRzB,GACE,QAAgB,CACdqB,QAAS,OACTC,MAAO,+BACPC,aAAa,EACbC,YAAa,uCAIjBxB,EAAS,CACPC,KAAS,KAA4B,YACrCY,QAASE","sources":["webpack:///./src/helpers/platform/platform-helper.ts","webpack:///./src/redux/actions/platform-actions.ts"],"sourcesContent":["import { getAxiosInstance, getGraphqlInstance } from '../shared/user-login';\nimport {\n  CATALOG_INVENTORY_API_BASE,\n  SOURCES_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings, PaginationConfiguration } from '../shared/pagination';\nimport {\n  Source,\n  ServiceOffering,\n  ServiceInventory\n} from '@redhat-cloud-services/sources-client';\nimport { ApiCollectionResponse, SourceDetails } from '../../types/common-types';\nconst axiosInstance = getAxiosInstance();\nconst { post } = getGraphqlInstance();\n\nconst sourcesQuery = `\nquery {\n  application_types (filter: { name: \"/insights/platform/catalog\" }) {\n    id\n    name\n    sources {\n      id\n      name\n      source_type_id\n    }\n  }\n}`;\n\nconst getSourcesDetails = (\n  sourceIds: string[]\n): Promise<ApiCollectionResponse<SourceDetails>> => {\n  return axiosInstance.get(\n    `${CATALOG_INVENTORY_API_BASE}/sources?limit=${sourceIds.length ||\n      defaultSettings.limit}${sourceIds.length ? '&' : ''}${sourceIds\n      .map((sourceId) => `filter[id][]=${sourceId}`)\n      .join('&')}`\n  );\n};\n\nexport const getPlatforms = (): Promise<SourceDetails> =>\n  post(`${SOURCES_API_BASE}/graphql`, { query: sourcesQuery })\n    .then(({ data: { application_types } }) => application_types)\n    .then(([{ sources }]) => {\n      return getSourcesDetails(sources.map((source: Source) => source.id)).then(\n        (sourceDetails) => {\n          return sources.map((source: Source) => ({\n            ...source,\n            ...sourceDetails.data.find(\n              (sourceDetail) => sourceDetail.id === source.id\n            )\n          }));\n        }\n      );\n    });\n\nexport const getPlatform = (platformId: string): Promise<Source> => {\n  return axiosInstance.get(\n    `${CATALOG_INVENTORY_API_BASE}/sources/${platformId}`\n  );\n};\n\nexport const refreshPlatform = (platformId: string): Promise<Source> => {\n  return axiosInstance.patch(\n    `${CATALOG_INVENTORY_API_BASE}/sources/${platformId}/refresh`\n  );\n};\n\nexport const getPlatformItems = (\n  platformId: string,\n  filter?: string,\n  options?: PaginationConfiguration\n): Promise<ApiCollectionResponse<ServiceOffering>> => {\n  const filterQuery = filter ? `&filter[name][contains_i]=${filter}` : '';\n  if (platformId) {\n    return axiosInstance.get(\n      `${CATALOG_INVENTORY_API_BASE}/sources/${platformId}/service_offerings?filter[archived_at][nil]${filterQuery}${\n        options ? `&limit=${options.limit}&offset=${options.offset}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(`${CATALOG_INVENTORY_API_BASE}/service_offerings`);\n  }\n};\n\nexport const getPlatformInventories = (\n  platformId: string,\n  filter = '',\n  options = defaultSettings\n): Promise<ApiCollectionResponse<ServiceInventory>> => {\n  if (platformId) {\n    return axiosInstance.get(\n      `${CATALOG_INVENTORY_API_BASE}/sources/${platformId}/service_inventories?filter[name][contains_i]=${filter}${\n        options ? `&limit=${options.limit}&offset=${options.offset}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(\n      `${CATALOG_INVENTORY_API_BASE}/service_inventories?limit=${options.limit}&offset=${options.offset}`\n    );\n  }\n};\n\nexport const getServiceOffering = (\n  serviceOfferingId: string,\n  sourceId: string\n): Promise<{ service: ServiceOffering; source: Source }> =>\n  Promise.all([\n    axiosInstance.get(\n      `${CATALOG_INVENTORY_API_BASE}/service_offerings/${serviceOfferingId}`\n    ),\n    axiosInstance\n      .get(`${SOURCES_API_BASE}/sources/${sourceId}`)\n      .then((source) => {\n        return axiosInstance\n          .get(`${SOURCES_API_BASE}/source_types/${source.source_type_id}`)\n          .then(({ icon_url }) => ({\n            ...source,\n            icon_url\n          }));\n      })\n  ]).then(([service, source]: [ServiceOffering, Source]) => ({\n    service,\n    source\n  }));\n","import * as ActionTypes from '../action-types';\nimport * as PlatformHelper from '../../helpers/platform/platform-helper';\nimport { Dispatch } from 'redux';\nimport {\n  ServiceInventory,\n  ServiceOffering,\n  Source\n} from '@redhat-cloud-services/sources-client';\nimport { AsyncMiddlewareAction } from '../../types/redux';\nimport { ApiCollectionResponse, SourceDetails } from '../../types/common-types';\nimport { PaginationConfiguration } from '../../helpers/shared/pagination';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const fetchPlatforms = () => (\n  dispatch: Dispatch\n): Promise<{ type: string; payload: SourceDetails }> => {\n  dispatch({ type: `${ActionTypes.FETCH_PLATFORMS}_PENDING` });\n  return PlatformHelper.getPlatforms()\n    .then((data) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_FULFILLED`,\n        payload: data\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchPlatformItems = (\n  platformId: string,\n  filter: string,\n  options: PaginationConfiguration\n): AsyncMiddlewareAction<ApiCollectionResponse<ServiceOffering>> => ({\n  type: ActionTypes.FETCH_PLATFORM_ITEMS,\n  payload: PlatformHelper.getPlatformItems(platformId, filter, options),\n  meta: {\n    platformId,\n    filter,\n    ...options\n  }\n});\n\nexport const fetchMultiplePlatformItems = (\n  platformsId: string[]\n): {\n  type: string;\n  payload: Promise<\n    [] | { [x: string]: ApiCollectionResponse<ServiceOffering> }\n  >;\n} => {\n  const platformPromisses = platformsId.map((platformId) =>\n    PlatformHelper.getPlatformItems(platformId).then((data) => ({\n      [platformId]: data\n    }))\n  );\n  return {\n    type: ActionTypes.FETCH_MULTIPLE_PLATFORM_ITEMS,\n    payload: Promise.all(platformPromisses).then((data) =>\n      data.reduce(\n        (acc, curr) => ({\n          ...acc,\n          ...curr\n        }),\n        {}\n      )\n    )\n  };\n};\n\nexport const fetchSelectedPlatform = (\n  id: string\n): AsyncMiddlewareAction<Source> => ({\n  type: ActionTypes.FETCH_PLATFORM,\n  payload: PlatformHelper.getPlatform(id)\n});\n\nexport const fetchPlatformInventories = (\n  platformId: string,\n  filter: string,\n  options: PaginationConfiguration\n): AsyncMiddlewareAction<ApiCollectionResponse<ServiceInventory>> => ({\n  type: ActionTypes.FETCH_PLATFORM_INVENTORIES,\n  payload: PlatformHelper.getPlatformInventories(platformId, filter, options)\n});\n\nexport const fetchServiceOffering = (\n  serviceOfferingId: string,\n  sourceId: string\n): AsyncMiddlewareAction<{ service: ServiceOffering; source: Source }> => ({\n  type: ActionTypes.FETCH_SERVICE_OFFERING,\n  payload: PlatformHelper.getServiceOffering(serviceOfferingId, sourceId)\n});\n\nexport const refreshPlatform = (platformId: string) => (\n  dispatch: Dispatch\n): AsyncMiddlewareAction => {\n  return dispatch({\n    type: ActionTypes.REFRESH_PLATFORM,\n    payload: PlatformHelper.refreshPlatform(platformId)\n      .then(() =>\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: 'Success starting the platform refresh',\n            dismissable: true,\n            description: 'The platform refresh started successfully'\n          })\n        )\n      )\n      .catch((error) => {\n        if (error.status === 429) {\n          dispatch(\n            addNotification({\n              variant: 'info',\n              title: 'Platform refresh in progress',\n              dismissable: true,\n              description: 'Platform refresh already running.'\n            })\n          );\n        } else {\n          dispatch({\n            type: `${ActionTypes.REFRESH_PLATFORM}_REJECTED`,\n            payload: error\n          });\n        }\n      })\n  });\n};\n"],"names":["axiosInstance","post","refreshPlatform","platformId","patch","getPlatformItems","filter","options","filterQuery","get","limit","offset","getPlatformInventories","getServiceOffering","serviceOfferingId","sourceId","Promise","all","then","source","source_type_id","icon_url","service","fetchPlatforms","dispatch","type","query","sourceIds","sources","map","id","length","join","sourceDetails","data","find","sourceDetail","payload","catch","error","fetchPlatformItems","meta","fetchSelectedPlatform","fetchPlatformInventories","fetchServiceOffering","variant","title","dismissable","description","status"],"sourceRoot":""}