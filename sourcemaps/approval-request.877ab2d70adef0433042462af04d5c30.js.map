{"version":3,"file":"js/approval-request.1643082344305.7b745b8a0444fb0dc4fa.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/info-icon.js","webpack:///./src/smart-components/order/order-detail/approval-request.tsx"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.InfoIconConfig = {\n  name: 'InfoIcon',\n  height: 512,\n  width: 192,\n  svgPath: 'M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.InfoIcon = require('../createIcon').createIcon(exports.InfoIconConfig);\nexports[\"default\"] = exports.InfoIcon;","import React, { Fragment, useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Bullseye,\n  Flex,\n  Spinner,\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n  Title,\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n  Card,\n  CardBody\n} from '@patternfly/react-core';\n\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n  ISortBy,\n  TableText\n} from '@patternfly/react-table';\n\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport InfoIcon from '@patternfly/react-icons/dist/js/icons/info-icon';\nimport { fetchApprovalRequests } from '../../../redux/actions/order-actions';\nimport { fetchApprovalRequests as fetchApprovalRequestsS } from '../../../redux/actions/order-actions-s';\nimport ordersMessages from '../../../messages/orders.messages';\nimport statesMessages, {\n  getTranslatableState\n} from '../../../messages/states.messages';\nimport labelMessages from '../../../messages/labels.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport {\n  AnyObject,\n  ApiCollectionResponse,\n  StringObject\n} from '../../../types/common-types';\nimport {\n  ApprovalRequest,\n  OrderItemStateEnum\n} from '@redhat-cloud-services/catalog-client';\nimport { CatalogRootState } from '../../../types/redux';\nimport { OrderDetail } from '../../../redux/reducers/order-reducer';\nimport orderStatusMapper from '../order-status-mapper';\nimport { MAX_RETRY_LIMIT } from '../../../utilities/constants';\nimport { delay } from '../../../helpers/shared/helpers';\n\n/**\n * We are using type conversion of **request as StringObject** because the generated client does not have correct states listed\n * Probably a discrepancy inside the OpenAPI spec\n */\n\nconst rowOrder = ['updated', 'group_name', 'decision'];\n\nconst checkRequest = async (\n  fetchRequests: () => Promise<ApiCollectionResponse<any>>\n) => {\n  // eslint-disable-next-line no-constant-condition\n  let retries = 0;\n  while (retries <= MAX_RETRY_LIMIT) {\n    const result = await fetchRequests();\n    if (result?.data.length > 0 || retries++ >= MAX_RETRY_LIMIT) {\n      return 'Finished';\n    }\n\n    await delay(3000);\n  }\n};\n\nconst isEmpty = (approvalRequest?: ApiCollectionResponse<ApprovalRequest>) =>\n  !approvalRequest ||\n  !approvalRequest.data ||\n  approvalRequest.data.length === 0;\n\nconst fetchApprovalRequestsData = (id: string) =>\n  localStorage.getItem('catalog_standalone')\n    ? fetchApprovalRequestsS(id)\n    : fetchApprovalRequests(id);\n\nconst ApprovalRequests: React.ComponentType = () => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const [sortBy, setSortBy] = useState<ISortBy>({});\n  const {\n    order,\n    approvalRequest,\n    platform,\n    orderItem,\n    portfolio,\n    portfolioItem\n  } = useSelector<CatalogRootState, OrderDetail>(\n    ({ orderReducer: { orderDetail } }) => orderDetail\n  );\n  const [isFetching, setFetching] = useState(true);\n\n  useEffect(() => {\n    if (orderItem?.id && isEmpty(approvalRequest)) {\n      setFetching(true);\n      checkRequest(() =>\n        dispatch(\n          (fetchApprovalRequestsData(orderItem.id!) as unknown) as Promise<\n            ApiCollectionResponse<ApprovalRequest>\n          >\n        )\n      ).then(() => setFetching(false));\n    }\n  }, []);\n\n  const handleSort = (\n    _e: React.SyntheticEvent,\n    index: number,\n    direction: SortByDirection\n  ) => setSortBy({ index, direction });\n\n  if (isEmpty(approvalRequest) && !isFetching) {\n    return (\n      <Bullseye id=\"no-approval-requests\">\n        <Flex direction={{ default: 'column' }} grow={{ default: 'grow' }}>\n          <Bullseye>\n            <InfoIcon size=\"xl\" />\n          </Bullseye>\n          <Bullseye>\n            <Title headingLevel=\"h1\" size=\"2xl\">\n              {formatMessage(ordersMessages.noApprovalRequests)}\n            </Title>\n          </Bullseye>\n        </Flex>\n      </Bullseye>\n    );\n  }\n\n  const columns = [\n    { title: 'Updated', transforms: [sortable] },\n    { title: 'Name', transforms: [sortable] },\n    'Decision'\n  ];\n\n  const approvalRequestDecision = (request: StringObject) =>\n    orderStatusMapper[\n      (statesMessages[getTranslatableState(request.decision)].defaultMessage ||\n        'Unknown') as keyof typeof orderStatusMapper\n    ];\n\n  const rows =\n    approvalRequest?.data\n      .map((request) =>\n        rowOrder.map((key) => {\n          if (key === 'decision') {\n            return (\n              <TableText>\n                <TextContent\n                  style={{\n                    color: approvalRequestDecision(request as StringObject)\n                      .color\n                  }}\n                >\n                  {approvalRequestDecision(request as StringObject).icon}\n                  &nbsp;\n                  {formatMessage(\n                    statesMessages[\n                      getTranslatableState(\n                        (request as StringObject)[key] as OrderItemStateEnum\n                      )\n                    ]\n                  )}\n                </TextContent>\n              </TableText>\n            );\n          }\n\n          if (key === 'updated') {\n            /**\n             * The fragment here is required other wise the super smart PF table will delete the first React element\n             */\n            return (\n              <Fragment>\n                <DateFormat\n                  date={(request as StringObject)[key]}\n                  type=\"exact\"\n                />\n              </Fragment>\n            );\n          }\n\n          return (request as AnyObject)[key];\n        })\n      )\n      .sort((a: AnyObject, b: AnyObject) =>\n        a[sortBy.index!] < b[sortBy.index!]\n          ? -1\n          : a[sortBy.index!] < b[sortBy.index!]\n          ? 1\n          : 0\n      ) || [];\n\n  return (\n    <TextContent>\n      {isEmpty(approvalRequest) ? (\n        <Bullseye>\n          <Flex direction={{ default: 'column' }} grow={{ default: 'grow' }}>\n            <Bullseye id=\"creating-approval-request\">\n              <Title headingLevel=\"h1\" size=\"xl\">\n                {formatMessage(ordersMessages.creatingApprovalRequest)}\n              </Title>\n            </Bullseye>\n            <Bullseye>\n              <Spinner size=\"xl\" />\n            </Bullseye>\n          </Flex>\n        </Bullseye>\n      ) : (\n        <Grid hasGutter>\n          <GridItem md={12} lg={6} xl={4}>\n            <Stack hasGutter>\n              <StackItem>\n                <Card>\n                  <CardBody>\n                    <Text className=\"pf-u-mb-md\" component={TextVariants.h2}>\n                      {formatMessage(ordersMessages.approvalTitle)}\n                    </Text>\n                    <TextList component={TextListVariants.dl}>\n                      <TextListItem component={TextListItemVariants.dt}>\n                        {formatMessage(labelMessages.product)}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dd}>\n                        {portfolioItem.name}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dt}>\n                        {formatMessage(ordersMessages.orderID)}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dd}>\n                        {order.id}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dt}>\n                        {formatMessage(ordersMessages.orderDate)}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dd}>\n                        <DateFormat\n                          date={order.created_at}\n                          variant=\"relative\"\n                        />\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dt}>\n                        {formatMessage(ordersMessages.orderedByLabel)}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dd}>\n                        {order.owner}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dt}>\n                        {formatMessage(labelMessages.portfolio)}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dd}>\n                        {portfolio.name}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dt}>\n                        {formatMessage(labelMessages.platform)}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dd}>\n                        {platform.name}\n                      </TextListItem>\n                    </TextList>\n                  </CardBody>\n                </Card>\n              </StackItem>\n              <StackItem>\n                <Card>\n                  <CardBody>\n                    <Text className=\"pf-u-mb-md\" component={TextVariants.h2}>\n                      {formatMessage(ordersMessages.approvalParameters)}\n                    </Text>\n                    <TextList\n                      className=\"overflow-wrap\"\n                      component={TextListVariants.dl}\n                    >\n                      {Object.entries(orderItem?.service_parameters || []).map(\n                        ([key, value]) => (\n                          <Fragment key={key}>\n                            <TextListItem component={TextListItemVariants.dt}>\n                              {key}\n                            </TextListItem>\n                            <TextListItem component={TextListItemVariants.dd}>\n                              {value}\n                            </TextListItem>\n                          </Fragment>\n                        )\n                      )}\n                    </TextList>\n                  </CardBody>\n                </Card>\n              </StackItem>\n            </Stack>\n          </GridItem>\n          <GridItem md={12} lg={6} xl={8}>\n            <Card>\n              <CardBody>\n                <Text className=\"pf-u-mb-md\" component={TextVariants.h2}>\n                  {formatMessage(ordersMessages.activity)}\n                </Text>\n                <Table\n                  aria-label=\"Approval request activity\"\n                  onSort={handleSort}\n                  sortBy={sortBy}\n                  cells={columns}\n                  rows={\n                    sortBy.direction === SortByDirection.asc\n                      ? rows\n                      : rows.reverse()\n                  }\n                >\n                  <TableHeader />\n                  <TableBody />\n                </Table>\n              </CardBody>\n            </Card>\n          </GridItem>\n        </Grid>\n      )}\n    </TextContent>\n  );\n};\n\nexport default ApprovalRequests;\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","rowOrder","isEmpty","approvalRequest","data","length","formatMessage","dispatch","useState","sortBy","setSortBy","order","platform","orderItem","portfolio","portfolioItem","isFetching","setFetching","useEffect","fetchRequests","id","localStorage","getItem","retries","result","then","Bullseye","Flex","direction","default","grow","size","Title","headingLevel","columns","title","transforms","sortable","approvalRequestDecision","request","decision","defaultMessage","rows","map","key","TableText","TextContent","style","color","icon","Fragment","date","type","sort","a","b","index","Spinner","Grid","hasGutter","GridItem","md","lg","xl","Stack","StackItem","Card","CardBody","Text","className","component","TextVariants","TextList","TextListVariants","TextListItem","TextListItemVariants","created_at","variant","owner","Object","entries","service_parameters","value","Table","onSort","_e","cells","SortByDirection","reverse","TableHeader","TableBody"],"sourceRoot":""}