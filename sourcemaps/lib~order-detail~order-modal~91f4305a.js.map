{"version":3,"sources":["webpack:///./src/messages/orders.messages.ts","webpack:///./src/helpers/order/new-order-helper.ts","webpack:///./src/helpers/order/order-helper.ts","webpack:///./src/presentational-components/order/order-notification.tsx","webpack:///./src/redux/actions/order-actions.tsx"],"names":["ordersMessages","orderedBy","id","defaultMessage","orderedByLabel","lastUpdated","compositeTitle","detailTitle","orderSuccess","noOrdersTitle","noOrdersDescription","noApprovalRequests","creatingApprovalRequest","approvalTitle","approvalDetail","approvalCreated","approvalReason","approvalCompleted","orderDetails","menuApproval","menuProvision","menuLifecycle","menuSteps","objectsNotFound","orderID","orderParameters","orderProgressMessages","lifecycleLink","cancelOrder","keepOrder","cancelDescription","backToOrders","orderDate","approvalParameters","activity","artifacts","noOrderProvision","fetchingOrderProvision","axiosInstance","orderApi","portfolioItemApi","graphqlInstance","getServicePlans","portfolioItemId","listServicePlans","getOrders","filter","pagination","get","limit","offset","then","orders","orderIds","data","map","orderId","join","orderItems","itemIds","itemId","portfolioItems","order","getOrderDetail","params","Object","values","some","value","status","replace","pathname","state","from","location","orderItem","object","notFound","portfolioItem","portfolio_item_id","parallerRequests","service_offering_source_ref","catch","portfolio_id","Promise","all","platform","progressMessages","portfolio","detailPromises","error","getApprovalRequests","orderItemId","promises","requestId","parent_id","approval_request_ref","post","query","requests","length","number_of_children","actions","request","updated","pop","created_at","getOrderProvisionItems","items","console","log","fetchOrderProvisionItems","dispatch","portfolioId","platformId","formatMessage","link","chunks","onClick","to","search","fetchServicePlans","type","payload","apiProps","service_parameters","providerControlParameters","parameters","createOrder","count","provider_control_parameters","addToOrder","orderItemResponse","submitOrder","variant","title","description","dismissable","getState","orderDetail","Canceled","approvalRequest","fetchOrders","filters","queryFilter","entries","key","Array","isArray","sortBy","sortDirection","meta","storeState","stateKey","fetchOrderDetails","fetchApprovalRequests","err","fetchOrderProvision"],"mappings":"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","file":"js/lib~order-detail~order-modal~91f4305a.c5e480c1c17363430c11.js","sourcesContent":["import { defineMessages } from 'react-intl';\n\nconst ordersMessages = defineMessages({\n  orderedBy: {\n    id: 'orders.common.orderedBy',\n    defaultMessage: 'Ordered by {owner}'\n  },\n  orderedByLabel: {\n    id: 'orders.approval.orderedBy',\n    defaultMessage: 'Ordered by'\n  },\n  lastUpdated: {\n    id: 'orders.common.lastUpdated',\n    defaultMessage: 'Last updated'\n  },\n  compositeTitle: {\n    id: 'orders.common.compositeTitle',\n    defaultMessage: '{name} - Order # {id}'\n  },\n  detailTitle: {\n    id: 'orders.detail.title',\n    defaultMessage: 'Order ID {id}'\n  },\n  orderSuccess: {\n    id: 'orders.notification.success',\n    defaultMessage:\n      'You can track the progress of Order # {id} in your <link>Orders</link> page.'\n  },\n  noOrdersTitle: {\n    id: 'orders.list.empty.title',\n    defaultMessage: 'No orders'\n  },\n  noOrdersDescription: {\n    id: 'orders.list.empty.description',\n    defaultMessage: 'No orders have been created.'\n  },\n  noApprovalRequests: {\n    id: 'orders.approval.no-requests',\n    defaultMessage:\n      'We were unable to find any approval requests for this order.'\n  },\n  creatingApprovalRequest: {\n    id: 'orders.approval.creating',\n    defaultMessage: 'Creating approval request'\n  },\n  approvalTitle: {\n    id: 'orders.approval.title',\n    defaultMessage: 'Summary'\n  },\n  approvalDetail: {\n    id: 'orders.approval.view-detail',\n    // eslint-disable-next-line quotes\n    defaultMessage: \"View this order's approval request details\"\n  },\n  approvalCreated: {\n    id: 'orders.approval.details.created',\n    defaultMessage: 'Request created'\n  },\n  approvalReason: {\n    id: 'orders.approval.details.reason',\n    defaultMessage: 'Approval reason'\n  },\n  approvalCompleted: {\n    id: 'orders.approval.details.completed',\n    defaultMessage: 'Completed at'\n  },\n  orderDetails: {\n    id: 'orders.common.details',\n    defaultMessage: 'Order details'\n  },\n  menuApproval: {\n    id: 'orders.menu.approval',\n    defaultMessage: 'Approval'\n  },\n  menuProvision: {\n    id: 'orders.menu.provision',\n    defaultMessage: 'Provision'\n  },\n  menuLifecycle: {\n    id: 'orders.menu.lifecycle',\n    defaultMessage: 'Lifecycle'\n  },\n  menuSteps: {\n    id: 'orders.menu.steps',\n    defaultMessage: 'Order steps'\n  },\n  objectsNotFound: {\n    id: 'order.detail.not-found',\n    defaultMessage:\n      'The {objects} for this order {count, plural, one {is} other {are}} not available'\n  },\n  orderID: {\n    id: 'orders.order.detail.ID',\n    defaultMessage: 'Order ID'\n  },\n  orderParameters: {\n    id: 'orders.order.detail.parameters',\n    defaultMessage: 'Order parameters'\n  },\n  orderProgressMessages: {\n    id: 'orders.order.detail.messages',\n    defaultMessage: 'Progress messages'\n  },\n  lifecycleLink: {\n    id: 'orders.order.lifecicle.link',\n    defaultMessage: 'Manage product'\n  },\n  cancelOrder: {\n    id: 'orders.actions.cancel',\n    defaultMessage: 'Cancel order'\n  },\n  keepOrder: {\n    id: 'orders.actions.keep',\n    defaultMessage: 'Keep order'\n  },\n  cancelDescription: {\n    id: 'orders.cancel.description',\n    defaultMessage: 'Are you sure you want to cancel {name}?'\n  },\n  backToOrders: {\n    id: 'orders.toolbar.backLink',\n    defaultMessage: 'Back to orders'\n  },\n  orderDate: {\n    id: 'orders.approval.order-date',\n    defaultMessage: 'Order date'\n  },\n  approvalParameters: {\n    id: 'orders.approval.parameters',\n    defaultMessage: 'Parameters'\n  },\n  activity: {\n    id: 'orders.approval.activity',\n    defaultMessage: 'Activity'\n  },\n  artifacts: {\n    id: 'orders.artifacts',\n    defaultMessage: 'Order artifacts'\n  },\n  noOrderProvision: {\n    id: 'orders.provision.no-items',\n    defaultMessage: 'We were unable to find provisioning data for this order.'\n  },\n  fetchingOrderProvision: {\n    id: 'orders.provision.fetching-provision',\n    defaultMessage: 'Retrieving order provisioning data'\n  }\n});\n\nexport default ordersMessages;\n","// TODO migrate whole order-helper.js to TS\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  Order,\n  OrderItem,\n  PortfolioItem,\n  Portfolio,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\nimport { Source } from '@redhat-cloud-services/sources-client';\nimport { getAxiosInstance } from '../shared/user-login';\nimport { CATALOG_API_BASE, SOURCES_API_BASE } from '../../utilities/constants';\nconst axiosInstance = getAxiosInstance();\n\nexport interface ObjectNotFound {\n  object: 'Order item' | 'Product' | 'Portfolio' | 'Messages' | 'Platform';\n  notFound: boolean;\n}\n\nexport type OrderDetailPayload = [\n  Order,\n  OrderItem | ObjectNotFound,\n  PortfolioItem | ObjectNotFound,\n  Source | ObjectNotFound,\n  ProgressMessage | ObjectNotFound,\n  Portfolio | ObjectNotFound\n];\n\nexport type OrderProvisionPayload = {\n  orderItems: OrderItem[] | [];\n  progressMessages: ProgressMessage[] | [];\n};\n\nexport const fetchOrderDetailSequence = async (\n  orderId: string\n): Promise<OrderDetailPayload> => {\n  let order: Order;\n  try {\n    order = await axiosInstance.get(`${CATALOG_API_BASE}/orders/${orderId}`);\n  } catch (error) {\n    order = {};\n    if (error.status === 404 || error.status === 400) {\n      catalogHistory.replace({\n        pathname: '/404',\n        state: { from: catalogHistory.location }\n      });\n    } else {\n      throw error;\n    }\n  }\n\n  let orderItem: OrderItem | ObjectNotFound = {\n    object: 'Order item',\n    notFound: true\n  };\n  try {\n    const orderItems = await axiosInstance.get(\n      `${CATALOG_API_BASE}/order_items?order_id=${order.id}`\n    );\n    orderItem = orderItems.data[0];\n  } catch (_error) {\n    // no handler\n  }\n\n  let portfolioItem: PortfolioItem | ObjectNotFound = {\n    object: 'Product',\n    notFound: true\n  };\n\n  try {\n    portfolioItem = await axiosInstance.get(\n      `${CATALOG_API_BASE}/portfolio_items/${\n        (orderItem as OrderItem).portfolio_item_id\n      }`\n    );\n  } catch (_error) {\n    // nohandler\n  }\n\n  const parallerRequests = [\n    axiosInstance\n      .get(\n        `${SOURCES_API_BASE}/sources/${\n          (portfolioItem as PortfolioItem).service_offering_source_ref\n        }`\n      )\n      .catch(() => ({ object: 'Platform', notFound: true })),\n\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/order_items/${\n          (orderItem as OrderItem).id\n        }/progress_messages`\n      )\n      .catch(() => ({ object: 'Messages', notFound: true })),\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/portfolios/${\n          (portfolioItem as PortfolioItem).portfolio_id\n        }`\n      )\n      .catch(() => ({ object: 'Portfolio', notFound: true }))\n  ];\n\n  return Promise.all(\n    parallerRequests\n  ).then(([platform, progressMessages, portfolio]) => [\n    order,\n    orderItem,\n    portfolioItem,\n    platform as Source | ObjectNotFound,\n    progressMessages as ProgressMessage | ObjectNotFound,\n    portfolio as Portfolio | ObjectNotFound\n  ]);\n};\n\nexport const fetchOrderProvisionItems = async (\n  orderId: string\n): Promise<OrderProvisionPayload> => {\n  let orderItems: OrderItem[];\n  try {\n    const items = await axiosInstance.get(\n      `${CATALOG_API_BASE}/order_items/?order_id=${orderId}`\n    );\n    orderItems = items.data;\n    console.log('Debug - orderItems: items, orderItems', items, orderItems);\n  } catch (error) {\n    orderItems = [];\n    if (error.status === 404 || error.status === 400) {\n      catalogHistory.replace({\n        pathname: '/404',\n        state: { from: catalogHistory.location }\n      });\n    } else {\n      throw error;\n    }\n  }\n\n  const progressMessages: ProgressMessage[] | [] = [];\n  return { orderItems, progressMessages };\n};\n","/* eslint camelcase: 0 */\nimport {\n  getAxiosInstance,\n  getPortfolioItemApi,\n  getOrderApi,\n  getOrderItemApi,\n  getGraphqlInstance\n} from '../shared/user-login';\nimport {\n  CATALOG_API_BASE,\n  SOURCES_API_BASE,\n  APPROVAL_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  fetchOrderDetailSequence,\n  fetchOrderProvisionItems,\n  OrderDetailPayload,\n  OrderProvisionPayload\n} from './new-order-helper';\nimport {\n  ApiCollectionResponse,\n  ApiMetadata,\n  EnhancedOrder,\n  Full\n} from '../../types/common-types';\nimport {\n  ServicePlan,\n  Order,\n  OrderItem,\n  PortfolioItem,\n  ApprovalRequest\n} from '@redhat-cloud-services/catalog-client';\nimport { AxiosPromise } from 'axios';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\nimport { Request, Action } from '@redhat-cloud-services/approval-client';\n\nconst orderApi = getOrderApi();\nconst orderItemApi = getOrderItemApi();\nconst portfolioItemApi = getPortfolioItemApi();\nconst axiosInstance = getAxiosInstance();\nconst graphqlInstance = getGraphqlInstance();\n\nexport const getServicePlans = (\n  portfolioItemId: string\n): Promise<ApiCollectionResponse<ServicePlan>> =>\n  (portfolioItemApi.listServicePlans(portfolioItemId) as unknown) as Promise<\n    ApiCollectionResponse<ServicePlan>\n  >;\n\nexport const sendSubmitOrder = async ({\n  service_parameters: { providerControlParameters, ...service_parameters },\n  ...parameters\n}: AnyObject): Promise<EnhancedOrder> => {\n  const order: Order = ((await orderApi.createOrder()) as unknown) as Order;\n  let orderItem: Partial<OrderItem> = {};\n  orderItem.count = 1;\n  orderItem = {\n    ...orderItem,\n    ...parameters,\n    service_parameters,\n    provider_control_parameters: providerControlParameters || {}\n  };\n  const orderItemResponse = await orderApi.addToOrder(\n    order.id as string,\n    orderItem as OrderItem\n  );\n  return orderApi.submitOrder(order.id as string).then((order) => ({\n    ...order,\n    orderItem: (orderItemResponse as unknown) as OrderItem\n  }));\n};\n\nexport const cancelOrder = (orderId: string): AxiosPromise<Order> =>\n  orderApi.cancelOrder(orderId);\n\nconst getOrderItems = (\n  orderIds: string[]\n): Promise<ApiCollectionResponse<OrderItem>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/order_items?${orderIds\n      .map((orderId) => `filter[order_id][]=${orderId}`)\n      .join('&')}`\n  );\n\nconst getOrderPortfolioItems = (\n  itemIds: string[]\n): Promise<ApiCollectionResponse<PortfolioItem>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolio_items?${itemIds\n      .map((itemId) => `filter[id][]=${itemId}`)\n      .join('&')}`\n  );\n\nexport const getOrders = (\n  filter = '',\n  pagination = defaultSettings\n): Promise<{\n  data: (Order & { orderItems: OrderItem[] })[];\n  portfolioItems: ApiCollectionResponse<PortfolioItem>;\n  meta: ApiMetadata;\n}> =>\n  axiosInstance\n    .get(\n      `${CATALOG_API_BASE}/orders?${filter}&limit=${pagination.limit}&offset=${pagination.offset}`\n    ) // eslint-disable-line max-len\n    .then((orders: ApiCollectionResponse<Full<Order>>) =>\n      getOrderItems(orders.data.map(({ id }) => id)).then((orderItems) =>\n        getOrderPortfolioItems(\n          orderItems.data.map(({ portfolio_item_id }) => portfolio_item_id)\n        ).then((portfolioItems) => {\n          return {\n            portfolioItems,\n            ...orders,\n            data: orders.data.map((order) => ({\n              ...order,\n              orderItems: orderItems.data.filter(\n                ({ order_id }) => order_id === order.id\n              )\n            }))\n          };\n        })\n      )\n    );\n\nexport const getOrderApprovalRequests = (\n  orderItemId: string\n): Promise<ApiCollectionResponse<Request>> =>\n  (orderItemApi.listApprovalRequests(orderItemId) as unknown) as Promise<\n    ApiCollectionResponse<Request>\n  >;\n\nexport interface GetOrderDetailParams {\n  order: string;\n  'order-item'?: string;\n  'portfolio-item'?: string;\n  platform?: string;\n  portfolio?: string;\n}\nexport const getOrderDetail = (\n  params: GetOrderDetailParams\n): Promise<OrderDetailPayload> => {\n  if (Object.values(params).some((value) => !value)) {\n    /**\n     * Try to fetch data sequentially if any of the parameters is unknown\n     */\n    return fetchOrderDetailSequence(params.order);\n  }\n\n  const detailPromises = [\n    (axiosInstance\n      .get(`${CATALOG_API_BASE}/orders/${params.order}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return catalogHistory.replace({\n            pathname: '/404',\n            state: { from: catalogHistory.location }\n          });\n        }\n\n        throw error;\n      }) as unknown) as Promise<Order>,\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/order_items/${params['order-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Order item',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/portfolio_items/${params['portfolio-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Product',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${SOURCES_API_BASE}/sources/${params.platform}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Platform',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/order_items/${params['order-item']}/progress_messages`\n      )\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {};\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/portfolios/${params.portfolio}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Portfolio',\n            notFound: true\n          };\n        }\n\n        throw error;\n      })\n  ];\n\n  return (Promise.all(detailPromises) as unknown) as Promise<\n    OrderDetailPayload\n  >;\n};\n\nconst APPROVAL_REQUESTER_PERSONA = 'approval/requester';\nexport interface RequestTranscript extends Full<Request> {\n  actions: Action[];\n}\nconst requestTranscriptQuery = (parent_id: string) => `query {\n  requests(id: \"${parent_id}\") {\n    id\n    number_of_children\n    decision\n    group_name\n    created_at\n    state\n    actions {\n      id\n      created_at\n    }\n    requests {\n      id\n      number_of_children\n      decision\n      group_name\n      state\n      parent_id\n      created_at\n      actions {\n        id\n        created_at\n      }\n    }\n  }\n}`;\nconst fetchRequestTranscript = (\n  requestId: string\n): Promise<RequestTranscript[]> =>\n  graphqlInstance\n    .post(\n      `${APPROVAL_API_BASE}/graphql`,\n      { query: requestTranscriptQuery(requestId) },\n      { 'x-rh-persona': APPROVAL_REQUESTER_PERSONA }\n    )\n    .then(({ data: { requests } }) => {\n      return requests &&\n        requests.length > 0 &&\n        requests[0].number_of_children > 0\n        ? requests[0].requests\n        : requests;\n    });\n\nexport const getApprovalRequests = (\n  orderItemId: string\n): Promise<{\n  data: { group_name: string; state: string; updated?: string }[];\n}> =>\n  axiosInstance\n    .get(`${CATALOG_API_BASE}/order_items/${orderItemId}/approval_requests`)\n    .then(({ data }: { data: Full<ApprovalRequest>[] }) => {\n      const promises = data.map(({ approval_request_ref }) =>\n        fetchRequestTranscript(approval_request_ref)\n      );\n      return Promise.all(promises).then((requests) => {\n        const data = requests?.[0]?.map(({ actions, ...request }) => ({\n          ...request,\n          updated:\n            actions?.length > 0 ? actions.pop()?.created_at : request.created_at\n        }));\n        return { data: data || [] };\n      });\n    });\n\nexport const getOrderProvisionItems = (\n  orderId: string\n): Promise<OrderProvisionPayload> => {\n  return fetchOrderProvisionItems(orderId);\n};\n","import React, { ComponentType, ReactElement, ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport { ORDER_ROUTE } from '../../constants/routes';\nimport ordersMessages from '../../messages/orders.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport { Dispatch } from 'redux';\n\nexport interface OrderNotificationProps {\n  id: string;\n  dispatch: Dispatch;\n  portfolioItemId: string;\n  portfolioId: string;\n  platformId: string;\n  orderItemId: string;\n}\n\nconst OrderNotification: ComponentType<OrderNotificationProps> = ({\n  id,\n  dispatch,\n  portfolioItemId,\n  portfolioId,\n  platformId,\n  orderItemId\n}) => {\n  const formatMessage = useFormatMessage();\n  return formatMessage(ordersMessages.orderSuccess, {\n    id,\n    // eslint-disable-next-line react/display-name\n    link: (chunks: ReactNode | ReactNode[]) => (\n      <Link\n        onClick={() => dispatch(clearNotifications())}\n        to={{\n          pathname: ORDER_ROUTE,\n          search: `?order=${id}&order-item=${orderItemId}&portfolio-item=${portfolioItemId}&platform=${platformId}&portfolio=${portfolioId}`\n        }}\n      >\n        {chunks}\n      </Link>\n    )\n  }) as ReactElement;\n};\n\nexport default OrderNotification;\n","import React from 'react';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\n\nimport * as ActionTypes from '../action-types';\nimport * as OrderHelper from '../../helpers/order/order-helper';\nimport OrderNotification from '../../presentational-components/order/order-notification';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport {\n  ApprovalRequestStateEnum,\n  Order,\n  OrderItem,\n  OrderStateEnum,\n  Portfolio,\n  PortfolioItem,\n  ProgressMessage,\n  ServicePlan\n} from '@redhat-cloud-services/catalog-client';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\nimport { Dispatch } from 'redux';\nimport {\n  Full,\n  StringObject,\n  ReduxAction,\n  ApiCollectionResponse\n} from '../../types/common-types';\nimport { AsyncMiddlewareAction, GetReduxState } from '../../types/redux';\nimport { Source } from '@redhat-cloud-services/sources-client';\nimport { ObjectNotFound } from '../../helpers/order/new-order-helper';\n\nexport const fetchServicePlans = (\n  portfolioItemId: string\n): AsyncMiddlewareAction<ApiCollectionResponse<ServicePlan>> => ({\n  type: ActionTypes.FETCH_SERVICE_PLANS,\n  payload: OrderHelper.getServicePlans(portfolioItemId)\n});\n\nexport const setSelectedPlan = (\n  data: ServicePlan\n): ReduxAction<ServicePlan> => ({\n  type: ActionTypes.SET_SELECTED_PLAN,\n  payload: data\n});\n\nexport const sendSubmitOrder = (\n  apiProps: AnyObject,\n  portfolioItem: Full<PortfolioItem>\n) => (dispatch: Dispatch): AsyncMiddlewareAction =>\n  dispatch({\n    type: ActionTypes.SUBMIT_SERVICE_ORDER,\n    payload: OrderHelper.sendSubmitOrder(apiProps).then(({ id, orderItem }) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been accepted successfully',\n          description: (\n            <OrderNotification\n              id={id!}\n              dispatch={dispatch}\n              portfolioItemId={portfolioItem.id}\n              portfolioId={portfolioItem.portfolio_id}\n              platformId={portfolioItem.service_offering_source_ref}\n              orderItemId={orderItem.id!}\n            />\n          ),\n          dismissable: true\n        })\n      )\n    )\n  });\n\nexport const cancelOrder = (orderId: string) => (\n  dispatch: Dispatch,\n  getState: GetReduxState\n): Promise<void | { type: string }> => {\n  dispatch({ type: `${ActionTypes.CANCEL_ORDER}_PENDING` });\n  const {\n    orderReducer: { orderDetail }\n  } = getState();\n  return OrderHelper.cancelOrder(orderId)\n    .then(() => {\n      orderDetail.order.state = OrderStateEnum.Canceled;\n      if (\n        orderDetail.approvalRequest &&\n        orderDetail.approvalRequest.data.length > 0\n      ) {\n        orderDetail.approvalRequest.data[0].state = 'canceled' as ApprovalRequestStateEnum;\n      }\n\n      dispatch({\n        type: ActionTypes.SET_ORDER_DETAIL,\n        payload: { ...orderDetail }\n      });\n      return orderDetail;\n    })\n    .then((orderDetail) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been canceled successfully',\n          description: `Order ${`Order #${orderDetail.order.id}`} was canceled.`,\n          dismissable: true\n        })\n      )\n    )\n    .then(() => dispatch({ type: `${ActionTypes.CANCEL_ORDER}_FULFILLED` }))\n    .catch((error) => {\n      dispatch({\n        type: `${ActionTypes.CANCEL_ORDER}_REJECTED`,\n        payload: error\n      });\n    });\n};\n\nexport const fetchOrders = (\n  filters: StringObject,\n  pagination = defaultSettings\n) => (dispatch: Dispatch): Promise<ReduxAction> => {\n  let queryFilter = Object.entries(filters)\n    .filter(([, value]) => value && value.length > 0)\n    .map(([key, value]) =>\n      Array.isArray(value)\n        ? value.map((value) => `filter[${key}][]=${value}`).join('&')\n        : `filter[${key}][contains_i]=${value}`\n    )\n    .join('&');\n  if (pagination.sortBy) {\n    queryFilter = `${queryFilter}&sort_by=${\n      pagination.sortBy\n    }:${pagination.sortDirection || 'desc'}`;\n  }\n\n  dispatch({ type: `${ActionTypes.FETCH_ORDERS}_PENDING` });\n  return OrderHelper.getOrders(queryFilter, pagination)\n    .then(({ portfolioItems, ...orders }) => {\n      dispatch({\n        type: ActionTypes.SET_PORTFOLIO_ITEMS,\n        payload: portfolioItems\n      });\n      return dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_FULFILLED`,\n        meta: {\n          ...pagination,\n          filter: queryFilter,\n          filters,\n          storeState: true,\n          stateKey: 'orders'\n        },\n        payload: orders\n      });\n    })\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchOrderDetails = (params: OrderHelper.GetOrderDetailParams) => (\n  dispatch: Dispatch\n): Promise<{\n  type: string;\n  payload: {\n    order: Order | ObjectNotFound;\n    orderItem: OrderItem | ObjectNotFound;\n    portfolioItem: PortfolioItem | ObjectNotFound;\n    platform: Source | ObjectNotFound;\n    progressMessages: ProgressMessage | ObjectNotFound;\n    portfolio: Portfolio | ObjectNotFound;\n  };\n}> => {\n  dispatch({ type: `${ActionTypes.SET_ORDER_DETAIL}_PENDING` });\n  return OrderHelper.getOrderDetail(params)\n    .then(\n      ([\n        order,\n        orderItem,\n        portfolioItem,\n        platform,\n        progressMessages,\n        portfolio\n      ]) =>\n        dispatch({\n          type: `${ActionTypes.SET_ORDER_DETAIL}_FULFILLED`,\n          payload: {\n            order,\n            orderItem,\n            portfolioItem,\n            platform,\n            progressMessages,\n            portfolio\n          }\n        })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_DETAIL}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchApprovalRequests = (orderItemId: string) => (\n  dispatch: Dispatch\n): Promise<\n  | {\n      data: {\n        group_name: string;\n        state: string;\n        updated?: string | undefined;\n      }[];\n    }\n  | { type: string; payload: any } /** the action in catch branch */\n> => {\n  dispatch({ type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_PENDING` });\n  return OrderHelper.getApprovalRequests(orderItemId)\n    .then((data) => {\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_FULFILLED`,\n        payload: data\n      });\n      return data;\n    })\n    .catch((err) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_REJECTED`,\n        payload: err\n      })\n    );\n};\n\nexport const fetchOrderProvision = (orderId: string) => (\n  dispatch: Dispatch\n): Promise<{\n  type: string;\n  payload: {\n    orderItems: OrderItem[] | [];\n    progressMessages: ProgressMessage[] | [];\n  };\n}> => {\n  dispatch({ type: `${ActionTypes.SET_ORDER_PROVISION_ITEMS}_PENDING` });\n  return OrderHelper.getOrderProvisionItems(orderId)\n    .then(({ orderItems, progressMessages }) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_PROVISION_ITEMS}_FULFILLED`,\n        payload: {\n          orderItems,\n          progressMessages\n        }\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_PROVISION_ITEMS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n"],"sourceRoot":""}