{"version":3,"sources":["webpack:///./node_modules/awesome-imperative-promise/dist/index.es.js","webpack:///./node_modules/awesome-debounce-promise/dist/index.es.js","webpack:///./node_modules/awesome-only-resolves-last-promise/dist/index.es.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/dist/index.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/dist/api.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/dist/base.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/dist/configuration.js"],"names":["createImperativePromise","promiseArg","resolve","reject","wrappedPromise","Promise","_resolve","_reject","then","val","error","promise","value","reason","cancel","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","DefaultOptions","key","_args","_i","onlyResolvesLast","DebounceCache","config","debounceSingleton","debounceCache","_createDebouncedFunction","asyncFunction","cancelPrevious","debouncedFunc","func","wait","options","args","initialPromise","_a","getDebouncedFunction","finalOptions","debouncedFn","__export","m","exports","defineProperty","extendStatics","__extends","d","b","setPrototypeOf","__proto__","Array","__","constructor","create","globalImportUrl","axios_1","base_1","ResourceDefinitionFilterOperationEnum","AccessApiAxiosParamCreator","configuration","getPrincipalAccess","application","username","limit","offset","RequiredError","baseOptions","localVarUrlObj","parse","localVarRequestOptions","method","localVarQueryParameter","password","undefined","query","search","headersFromBaseOptions","headers","url","format","AccessApiFp","localVarAxiosArgs","axios","basePath","default","BASE_PATH","axiosRequestArgs","request","AccessApiFactory","AccessApi","_super","BaseAPI","GroupApiAxiosParamCreator","addPrincipalToGroup","uuid","groupPrincipalIn","localVarPath","replace","encodeURIComponent","String","localVarHeaderParameter","needsSerialization","data","JSON","stringify","addRoleToGroup","groupRoleIn","createGroup","group","deleteGroup","deletePrincipalFromGroup","usernames","deleteRoleFromGroup","roles","getGroup","getPrincipalsFromGroup","principalUsername","orderBy","listGroups","name","scope","roleNames","roleDiscriminator","join","COLLECTION_FORMATS","csv","listRolesForGroup","exclude","roleName","roleDescription","updateGroup","GroupApiFp","GroupApiFactory","GroupApi","PolicyApiAxiosParamCreator","createPolicies","policyIn","deletePolicy","getPolicy","listPolicies","groupName","groupUuid","updatePolicy","PolicyApiFp","PolicyApiFactory","PolicyApi","PrincipalApiAxiosParamCreator","listPrincipals","sortOrder","email","PrincipalApiFp","PrincipalApiFactory","PrincipalApi","RoleApiAxiosParamCreator","createRoles","roleIn","deleteRole","getRole","getRoleAccess","listRoles","addFields","updateRole","roleWithAccess","RoleApiFp","RoleApiFactory","RoleApi","StatusApiAxiosParamCreator","getStatus","StatusApiFp","StatusApiFactory","StatusApi","ssv","tsv","pipes","field","msg","_this","Error","Configuration","param","apiKey","accessToken"],"mappings":"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","file":"js/lib~App~253ae210.7220bafc0bdddba18767.js","sourcesContent":["function createImperativePromise(promiseArg) {\r\n    var resolve = null;\r\n    var reject = null;\r\n    var wrappedPromise = new Promise(function (_resolve, _reject) {\r\n        resolve = _resolve;\r\n        reject = _reject;\r\n    });\r\n    promiseArg && promiseArg.then(function (val) {\r\n        resolve && resolve(val);\r\n    }, function (error) {\r\n        reject && reject(error);\r\n    });\r\n    return {\r\n        promise: wrappedPromise,\r\n        resolve: function (value) {\r\n            resolve && resolve(value);\r\n        },\r\n        reject: function (reason) {\r\n            reject && reject(reason);\r\n        },\r\n        cancel: function () {\r\n            resolve = null;\r\n            reject = null;\r\n        }\r\n    };\r\n}\n\nexport { createImperativePromise };\n//# sourceMappingURL=index.es.js.map\n","import DebouncePromise from 'debounce-promise';\nimport { onlyResolvesLast } from 'awesome-only-resolves-last-promise';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\n\nvar DefaultOptions = {\r\n    // One distinct debounced function is created per key and added to an internal cache\r\n    // By default, the key is null, which means that all the calls\r\n    // will share the same debounced function\r\n    key: function () {\r\n        var _args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            _args[_i] = arguments[_i];\r\n        }\r\n        return null;\r\n    },\r\n    // By default, a debounced function will only resolve\r\n    // the last promise it returned\r\n    // Former calls will stay unresolved, so that you don't have\r\n    // to handle concurrency issues in your code\r\n    // Setting this to false means all returned promises will resolve to the last result\r\n    onlyResolvesLast: true,\r\n};\r\n// We create a debouncing function cache, because when wrapping the original function,\r\n// we may actually want to route the function call to different debounced functions depending function paameters\r\nvar DebounceCache = /** @class */ (function () {\r\n    function DebounceCache(config) {\r\n        this.config = config;\r\n        this.debounceSingleton = null;\r\n        this.debounceCache = {}; // when key feature is used\r\n    }\r\n    DebounceCache.prototype._createDebouncedFunction = function () {\r\n        var debouncedFunc = DebouncePromise(this.config.func, this.config.wait, this.config.options); // TODO TS\r\n        if (this.config.options.onlyResolvesLast) {\r\n            debouncedFunc = onlyResolvesLast(debouncedFunc);\r\n        }\r\n        return {\r\n            func: debouncedFunc,\r\n        };\r\n    };\r\n    DebounceCache.prototype.getDebouncedFunction = function (args) {\r\n        var _a;\r\n        var key = (_a = this.config.options).key.apply(_a, args);\r\n        if (key === null || typeof key === 'undefined') {\r\n            if (!this.debounceSingleton) {\r\n                this.debounceSingleton = this._createDebouncedFunction();\r\n            }\r\n            return this.debounceSingleton;\r\n        }\r\n        else {\r\n            if (!this.debounceCache[key]) {\r\n                this.debounceCache[key] = this._createDebouncedFunction();\r\n            }\r\n            return this.debounceCache[key];\r\n        }\r\n    };\r\n    return DebounceCache;\r\n}());\r\nfunction AwesomeDebouncePromise(func, wait, options) {\r\n    var finalOptions = __assign({}, DefaultOptions, options);\r\n    var debounceCache = new DebounceCache({\r\n        func: func,\r\n        wait: wait,\r\n        options: finalOptions,\r\n    });\r\n    var AwesomeDebouncePromiseWrapper = (function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        var debouncedFn = debounceCache.getDebouncedFunction(args).func;\r\n        return debouncedFn.apply(void 0, args);\r\n    }); // TODO fix TS\r\n    /*\r\n    AwesomeDebouncePromiseWrapper.cancel = (key?: string) => {\r\n  \n    };\r\n    */\r\n    return AwesomeDebouncePromiseWrapper;\r\n}\n\nexport default AwesomeDebouncePromise;\n//# sourceMappingURL=index.es.js.map\n","import { createImperativePromise } from 'awesome-imperative-promise';\n\n// see https://stackoverflow.com/a/54825370/82609\r\nfunction onlyResolvesLast(asyncFunction) {\r\n    var cancelPrevious = null;\r\n    var wrappedFunction = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        cancelPrevious && cancelPrevious();\r\n        var initialPromise = asyncFunction.apply(void 0, args);\r\n        var _a = createImperativePromise(initialPromise), promise = _a.promise, cancel = _a.cancel;\r\n        cancelPrevious = cancel;\r\n        return promise;\r\n    };\r\n    return wrappedFunction; // TODO fix TS\r\n}\n\nexport { onlyResolvesLast };\n//# sourceMappingURL=index.es.js.map\n","\"use strict\";\n// tslint:disable\n/**\n * Role Based Access Control\n * The API for Role Based Access Control.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./api\"));\n__export(require(\"./configuration\"));\n","\"use strict\";\n// tslint:disable\n/**\n * Role Based Access Control\n * The API for Role Based Access Control.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar globalImportUrl = require(\"url\");\nvar axios_1 = require(\"axios\");\n// Some imports not used depending on template conditions\n// @ts-ignore\nvar base_1 = require(\"./base\");\n/**\n    * @export\n    * @enum {string}\n    */\nvar ResourceDefinitionFilterOperationEnum;\n(function (ResourceDefinitionFilterOperationEnum) {\n    ResourceDefinitionFilterOperationEnum[\"Equal\"] = \"equal\";\n    ResourceDefinitionFilterOperationEnum[\"In\"] = \"in\";\n})(ResourceDefinitionFilterOperationEnum = exports.ResourceDefinitionFilterOperationEnum || (exports.ResourceDefinitionFilterOperationEnum = {}));\n/**\n * AccessApi - axios parameter creator\n * @export\n */\nexports.AccessApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Access responses are sorted in ascending order by an ID internal to the database\n         * @summary Get the permitted access for a principal in the tenant (defaults to principal from the identity header)\n         * @param {string} application The application name(s) to obtain access for the principal. This is an exact match. When no application is supplied, all permissions for the principal are returned. You may also use a comma-separated list to match on multiple applications.\n         * @param {string} [username] Unique username of the principal to obtain access for (only available for admins, and if supplied, takes precedence over the identity header).\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPrincipalAccess: function (application, username, limit, offset, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'application' is not null or undefined\n            if (application === null || application === undefined) {\n                throw new base_1.RequiredError('application', 'Required parameter application was null or undefined when calling getPrincipalAccess.');\n            }\n            var localVarPath = \"/access/\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (application !== undefined) {\n                localVarQueryParameter['application'] = application;\n            }\n            if (username !== undefined) {\n                localVarQueryParameter['username'] = username;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * AccessApi - functional programming interface\n * @export\n */\nexports.AccessApiFp = function (configuration) {\n    return {\n        /**\n         * Access responses are sorted in ascending order by an ID internal to the database\n         * @summary Get the permitted access for a principal in the tenant (defaults to principal from the identity header)\n         * @param {string} application The application name(s) to obtain access for the principal. This is an exact match. When no application is supplied, all permissions for the principal are returned. You may also use a comma-separated list to match on multiple applications.\n         * @param {string} [username] Unique username of the principal to obtain access for (only available for admins, and if supplied, takes precedence over the identity header).\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPrincipalAccess: function (application, username, limit, offset, options) {\n            var localVarAxiosArgs = exports.AccessApiAxiosParamCreator(configuration).getPrincipalAccess(application, username, limit, offset, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * AccessApi - factory interface\n * @export\n */\nexports.AccessApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Access responses are sorted in ascending order by an ID internal to the database\n         * @summary Get the permitted access for a principal in the tenant (defaults to principal from the identity header)\n         * @param {string} application The application name(s) to obtain access for the principal. This is an exact match. When no application is supplied, all permissions for the principal are returned. You may also use a comma-separated list to match on multiple applications.\n         * @param {string} [username] Unique username of the principal to obtain access for (only available for admins, and if supplied, takes precedence over the identity header).\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPrincipalAccess: function (application, username, limit, offset, options) {\n            return exports.AccessApiFp(configuration).getPrincipalAccess(application, username, limit, offset, options)(axios, basePath);\n        },\n    };\n};\n/**\n * AccessApi - object-oriented interface\n * @export\n * @class AccessApi\n * @extends {BaseAPI}\n */\nvar AccessApi = /** @class */ (function (_super) {\n    __extends(AccessApi, _super);\n    function AccessApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Access responses are sorted in ascending order by an ID internal to the database\n     * @summary Get the permitted access for a principal in the tenant (defaults to principal from the identity header)\n     * @param {string} application The application name(s) to obtain access for the principal. This is an exact match. When no application is supplied, all permissions for the principal are returned. You may also use a comma-separated list to match on multiple applications.\n     * @param {string} [username] Unique username of the principal to obtain access for (only available for admins, and if supplied, takes precedence over the identity header).\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AccessApi\n     */\n    AccessApi.prototype.getPrincipalAccess = function (application, username, limit, offset, options) {\n        return exports.AccessApiFp(this.configuration).getPrincipalAccess(application, username, limit, offset, options)(this.axios, this.basePath);\n    };\n    return AccessApi;\n}(base_1.BaseAPI));\nexports.AccessApi = AccessApi;\n/**\n * GroupApi - axios parameter creator\n * @export\n */\nexports.GroupApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Add a principal to a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {GroupPrincipalIn} groupPrincipalIn Principal to add to a group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPrincipalToGroup: function (uuid, groupPrincipalIn, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling addPrincipalToGroup.');\n            }\n            // verify required parameter 'groupPrincipalIn' is not null or undefined\n            if (groupPrincipalIn === null || groupPrincipalIn === undefined) {\n                throw new base_1.RequiredError('groupPrincipalIn', 'Required parameter groupPrincipalIn was null or undefined when calling addPrincipalToGroup.');\n            }\n            var localVarPath = \"/groups/{uuid}/principals/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof groupPrincipalIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(groupPrincipalIn !== undefined ? groupPrincipalIn : {}) : (groupPrincipalIn || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Add a role to a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {GroupRoleIn} groupRoleIn Role to add to a group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addRoleToGroup: function (uuid, groupRoleIn, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling addRoleToGroup.');\n            }\n            // verify required parameter 'groupRoleIn' is not null or undefined\n            if (groupRoleIn === null || groupRoleIn === undefined) {\n                throw new base_1.RequiredError('groupRoleIn', 'Required parameter groupRoleIn was null or undefined when calling addRoleToGroup.');\n            }\n            var localVarPath = \"/groups/{uuid}/roles/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof groupRoleIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(groupRoleIn !== undefined ? groupRoleIn : {}) : (groupRoleIn || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Create a group in a tenant\n         * @param {Group} group Group to create in tenant\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createGroup: function (group, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new base_1.RequiredError('group', 'Required parameter group was null or undefined when calling createGroup.');\n            }\n            var localVarPath = \"/groups/\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof group !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(group !== undefined ? group : {}) : (group || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Delete a group in the tenant\n         * @param {string} uuid ID of group to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteGroup: function (uuid, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling deleteGroup.');\n            }\n            var localVarPath = \"/groups/{uuid}/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Remove a principal from a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {string} usernames A comma separated list of usernames for principals to remove from the group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePrincipalFromGroup: function (uuid, usernames, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling deletePrincipalFromGroup.');\n            }\n            // verify required parameter 'usernames' is not null or undefined\n            if (usernames === null || usernames === undefined) {\n                throw new base_1.RequiredError('usernames', 'Required parameter usernames was null or undefined when calling deletePrincipalFromGroup.');\n            }\n            var localVarPath = \"/groups/{uuid}/principals/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (usernames !== undefined) {\n                localVarQueryParameter['usernames'] = usernames;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Remove a role from a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {string} roles A comma separated list of role UUIDs for roles to remove from the group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteRoleFromGroup: function (uuid, roles, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling deleteRoleFromGroup.');\n            }\n            // verify required parameter 'roles' is not null or undefined\n            if (roles === null || roles === undefined) {\n                throw new base_1.RequiredError('roles', 'Required parameter roles was null or undefined when calling deleteRoleFromGroup.');\n            }\n            var localVarPath = \"/groups/{uuid}/roles/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (roles !== undefined) {\n                localVarQueryParameter['roles'] = roles;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Get a group in the tenant\n         * @param {string} uuid ID of group to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGroup: function (uuid, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling getGroup.');\n            }\n            var localVarPath = \"/groups/{uuid}/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by username\n         * @summary Get a list of principals from a group in the tenant\n         * @param {string} uuid ID of group from which to get principals\n         * @param {string} [principalUsername] Parameter for filtering group principals by principal &#x60;username&#x60; using string contains search.\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'username'} [orderBy] Parameter for ordering principals by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPrincipalsFromGroup: function (uuid, principalUsername, limit, offset, orderBy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling getPrincipalsFromGroup.');\n            }\n            var localVarPath = \"/groups/{uuid}/principals/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (principalUsername !== undefined) {\n                localVarQueryParameter['principal_username'] = principalUsername;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by group name\n         * @summary List the groups for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [username] A username for a principal to filter for groups\n         * @param {Array<string>} [uuid] A list of UUIDs to filter listed groups.\n         * @param {Array<string>} [roleNames] List of role name to filter for groups. It is exact match but case-insensitive\n         * @param {'all' | 'any'} [roleDiscriminator] Discriminator that works with role_names to indicate matching all/any of the role names\n         * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listGroups: function (limit, offset, name, scope, username, uuid, roleNames, roleDiscriminator, orderBy, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/groups/\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n            if (scope !== undefined) {\n                localVarQueryParameter['scope'] = scope;\n            }\n            if (username !== undefined) {\n                localVarQueryParameter['username'] = username;\n            }\n            if (uuid) {\n                localVarQueryParameter['uuid'] = uuid.join(base_1.COLLECTION_FORMATS.csv);\n            }\n            if (roleNames) {\n                localVarQueryParameter['role_names'] = roleNames.join(base_1.COLLECTION_FORMATS.csv);\n            }\n            if (roleDiscriminator !== undefined) {\n                localVarQueryParameter['role_discriminator'] = roleDiscriminator;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by role name\n         * @summary List the roles for a group in the tenant\n         * @param {string} uuid ID of group\n         * @param {boolean} [exclude] If this is set to true, the result would be roles excluding the ones in the group\n         * @param {string} [roleName] Parameter for filtering group roles by role &#x60;name&#x60; using string contains search.\n         * @param {string} [roleDescription] Parameter for filtering group roles by role &#x60;description&#x60; using string contains search.\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'name' | 'modified' | 'policyCount'} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listRolesForGroup: function (uuid, exclude, roleName, roleDescription, limit, offset, orderBy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling listRolesForGroup.');\n            }\n            var localVarPath = \"/groups/{uuid}/roles/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (exclude !== undefined) {\n                localVarQueryParameter['exclude'] = exclude;\n            }\n            if (roleName !== undefined) {\n                localVarQueryParameter['role_name'] = roleName;\n            }\n            if (roleDescription !== undefined) {\n                localVarQueryParameter['role_description'] = roleDescription;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Udate a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {Group} group Group to update in tenant\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGroup: function (uuid, group, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling updateGroup.');\n            }\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new base_1.RequiredError('group', 'Required parameter group was null or undefined when calling updateGroup.');\n            }\n            var localVarPath = \"/groups/{uuid}/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof group !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(group !== undefined ? group : {}) : (group || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * GroupApi - functional programming interface\n * @export\n */\nexports.GroupApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Add a principal to a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {GroupPrincipalIn} groupPrincipalIn Principal to add to a group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPrincipalToGroup: function (uuid, groupPrincipalIn, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).addPrincipalToGroup(uuid, groupPrincipalIn, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Add a role to a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {GroupRoleIn} groupRoleIn Role to add to a group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addRoleToGroup: function (uuid, groupRoleIn, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).addRoleToGroup(uuid, groupRoleIn, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Create a group in a tenant\n         * @param {Group} group Group to create in tenant\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createGroup: function (group, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).createGroup(group, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Delete a group in the tenant\n         * @param {string} uuid ID of group to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteGroup: function (uuid, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).deleteGroup(uuid, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Remove a principal from a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {string} usernames A comma separated list of usernames for principals to remove from the group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePrincipalFromGroup: function (uuid, usernames, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).deletePrincipalFromGroup(uuid, usernames, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Remove a role from a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {string} roles A comma separated list of role UUIDs for roles to remove from the group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteRoleFromGroup: function (uuid, roles, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).deleteRoleFromGroup(uuid, roles, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Get a group in the tenant\n         * @param {string} uuid ID of group to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGroup: function (uuid, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).getGroup(uuid, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by username\n         * @summary Get a list of principals from a group in the tenant\n         * @param {string} uuid ID of group from which to get principals\n         * @param {string} [principalUsername] Parameter for filtering group principals by principal &#x60;username&#x60; using string contains search.\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'username'} [orderBy] Parameter for ordering principals by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPrincipalsFromGroup: function (uuid, principalUsername, limit, offset, orderBy, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).getPrincipalsFromGroup(uuid, principalUsername, limit, offset, orderBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by group name\n         * @summary List the groups for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [username] A username for a principal to filter for groups\n         * @param {Array<string>} [uuid] A list of UUIDs to filter listed groups.\n         * @param {Array<string>} [roleNames] List of role name to filter for groups. It is exact match but case-insensitive\n         * @param {'all' | 'any'} [roleDiscriminator] Discriminator that works with role_names to indicate matching all/any of the role names\n         * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listGroups: function (limit, offset, name, scope, username, uuid, roleNames, roleDiscriminator, orderBy, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).listGroups(limit, offset, name, scope, username, uuid, roleNames, roleDiscriminator, orderBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by role name\n         * @summary List the roles for a group in the tenant\n         * @param {string} uuid ID of group\n         * @param {boolean} [exclude] If this is set to true, the result would be roles excluding the ones in the group\n         * @param {string} [roleName] Parameter for filtering group roles by role &#x60;name&#x60; using string contains search.\n         * @param {string} [roleDescription] Parameter for filtering group roles by role &#x60;description&#x60; using string contains search.\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'name' | 'modified' | 'policyCount'} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listRolesForGroup: function (uuid, exclude, roleName, roleDescription, limit, offset, orderBy, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).listRolesForGroup(uuid, exclude, roleName, roleDescription, limit, offset, orderBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Udate a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {Group} group Group to update in tenant\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGroup: function (uuid, group, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).updateGroup(uuid, group, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * GroupApi - factory interface\n * @export\n */\nexports.GroupApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Add a principal to a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {GroupPrincipalIn} groupPrincipalIn Principal to add to a group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPrincipalToGroup: function (uuid, groupPrincipalIn, options) {\n            return exports.GroupApiFp(configuration).addPrincipalToGroup(uuid, groupPrincipalIn, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Add a role to a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {GroupRoleIn} groupRoleIn Role to add to a group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addRoleToGroup: function (uuid, groupRoleIn, options) {\n            return exports.GroupApiFp(configuration).addRoleToGroup(uuid, groupRoleIn, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Create a group in a tenant\n         * @param {Group} group Group to create in tenant\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createGroup: function (group, options) {\n            return exports.GroupApiFp(configuration).createGroup(group, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Delete a group in the tenant\n         * @param {string} uuid ID of group to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteGroup: function (uuid, options) {\n            return exports.GroupApiFp(configuration).deleteGroup(uuid, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Remove a principal from a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {string} usernames A comma separated list of usernames for principals to remove from the group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePrincipalFromGroup: function (uuid, usernames, options) {\n            return exports.GroupApiFp(configuration).deletePrincipalFromGroup(uuid, usernames, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Remove a role from a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {string} roles A comma separated list of role UUIDs for roles to remove from the group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteRoleFromGroup: function (uuid, roles, options) {\n            return exports.GroupApiFp(configuration).deleteRoleFromGroup(uuid, roles, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Get a group in the tenant\n         * @param {string} uuid ID of group to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGroup: function (uuid, options) {\n            return exports.GroupApiFp(configuration).getGroup(uuid, options)(axios, basePath);\n        },\n        /**\n         * By default, responses are sorted in ascending order by username\n         * @summary Get a list of principals from a group in the tenant\n         * @param {string} uuid ID of group from which to get principals\n         * @param {string} [principalUsername] Parameter for filtering group principals by principal &#x60;username&#x60; using string contains search.\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'username'} [orderBy] Parameter for ordering principals by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPrincipalsFromGroup: function (uuid, principalUsername, limit, offset, orderBy, options) {\n            return exports.GroupApiFp(configuration).getPrincipalsFromGroup(uuid, principalUsername, limit, offset, orderBy, options)(axios, basePath);\n        },\n        /**\n         * By default, responses are sorted in ascending order by group name\n         * @summary List the groups for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [username] A username for a principal to filter for groups\n         * @param {Array<string>} [uuid] A list of UUIDs to filter listed groups.\n         * @param {Array<string>} [roleNames] List of role name to filter for groups. It is exact match but case-insensitive\n         * @param {'all' | 'any'} [roleDiscriminator] Discriminator that works with role_names to indicate matching all/any of the role names\n         * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listGroups: function (limit, offset, name, scope, username, uuid, roleNames, roleDiscriminator, orderBy, options) {\n            return exports.GroupApiFp(configuration).listGroups(limit, offset, name, scope, username, uuid, roleNames, roleDiscriminator, orderBy, options)(axios, basePath);\n        },\n        /**\n         * By default, responses are sorted in ascending order by role name\n         * @summary List the roles for a group in the tenant\n         * @param {string} uuid ID of group\n         * @param {boolean} [exclude] If this is set to true, the result would be roles excluding the ones in the group\n         * @param {string} [roleName] Parameter for filtering group roles by role &#x60;name&#x60; using string contains search.\n         * @param {string} [roleDescription] Parameter for filtering group roles by role &#x60;description&#x60; using string contains search.\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'name' | 'modified' | 'policyCount'} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listRolesForGroup: function (uuid, exclude, roleName, roleDescription, limit, offset, orderBy, options) {\n            return exports.GroupApiFp(configuration).listRolesForGroup(uuid, exclude, roleName, roleDescription, limit, offset, orderBy, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Udate a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {Group} group Group to update in tenant\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGroup: function (uuid, group, options) {\n            return exports.GroupApiFp(configuration).updateGroup(uuid, group, options)(axios, basePath);\n        },\n    };\n};\n/**\n * GroupApi - object-oriented interface\n * @export\n * @class GroupApi\n * @extends {BaseAPI}\n */\nvar GroupApi = /** @class */ (function (_super) {\n    __extends(GroupApi, _super);\n    function GroupApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Add a principal to a group in the tenant\n     * @param {string} uuid ID of group to update\n     * @param {GroupPrincipalIn} groupPrincipalIn Principal to add to a group\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.addPrincipalToGroup = function (uuid, groupPrincipalIn, options) {\n        return exports.GroupApiFp(this.configuration).addPrincipalToGroup(uuid, groupPrincipalIn, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Add a role to a group in the tenant\n     * @param {string} uuid ID of group to update\n     * @param {GroupRoleIn} groupRoleIn Role to add to a group\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.addRoleToGroup = function (uuid, groupRoleIn, options) {\n        return exports.GroupApiFp(this.configuration).addRoleToGroup(uuid, groupRoleIn, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Create a group in a tenant\n     * @param {Group} group Group to create in tenant\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.createGroup = function (group, options) {\n        return exports.GroupApiFp(this.configuration).createGroup(group, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Delete a group in the tenant\n     * @param {string} uuid ID of group to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.deleteGroup = function (uuid, options) {\n        return exports.GroupApiFp(this.configuration).deleteGroup(uuid, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Remove a principal from a group in the tenant\n     * @param {string} uuid ID of group to update\n     * @param {string} usernames A comma separated list of usernames for principals to remove from the group\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.deletePrincipalFromGroup = function (uuid, usernames, options) {\n        return exports.GroupApiFp(this.configuration).deletePrincipalFromGroup(uuid, usernames, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Remove a role from a group in the tenant\n     * @param {string} uuid ID of group to update\n     * @param {string} roles A comma separated list of role UUIDs for roles to remove from the group\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.deleteRoleFromGroup = function (uuid, roles, options) {\n        return exports.GroupApiFp(this.configuration).deleteRoleFromGroup(uuid, roles, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Get a group in the tenant\n     * @param {string} uuid ID of group to get\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.getGroup = function (uuid, options) {\n        return exports.GroupApiFp(this.configuration).getGroup(uuid, options)(this.axios, this.basePath);\n    };\n    /**\n     * By default, responses are sorted in ascending order by username\n     * @summary Get a list of principals from a group in the tenant\n     * @param {string} uuid ID of group from which to get principals\n     * @param {string} [principalUsername] Parameter for filtering group principals by principal &#x60;username&#x60; using string contains search.\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {'username'} [orderBy] Parameter for ordering principals by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-username\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.getPrincipalsFromGroup = function (uuid, principalUsername, limit, offset, orderBy, options) {\n        return exports.GroupApiFp(this.configuration).getPrincipalsFromGroup(uuid, principalUsername, limit, offset, orderBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * By default, responses are sorted in ascending order by group name\n     * @summary List the groups for a tenant\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {string} [name] Parameter for filtering resource by name using string contains search.\n     * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n     * @param {string} [username] A username for a principal to filter for groups\n     * @param {Array<string>} [uuid] A list of UUIDs to filter listed groups.\n     * @param {Array<string>} [roleNames] List of role name to filter for groups. It is exact match but case-insensitive\n     * @param {'all' | 'any'} [roleDiscriminator] Discriminator that works with role_names to indicate matching all/any of the role names\n     * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.listGroups = function (limit, offset, name, scope, username, uuid, roleNames, roleDiscriminator, orderBy, options) {\n        return exports.GroupApiFp(this.configuration).listGroups(limit, offset, name, scope, username, uuid, roleNames, roleDiscriminator, orderBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * By default, responses are sorted in ascending order by role name\n     * @summary List the roles for a group in the tenant\n     * @param {string} uuid ID of group\n     * @param {boolean} [exclude] If this is set to true, the result would be roles excluding the ones in the group\n     * @param {string} [roleName] Parameter for filtering group roles by role &#x60;name&#x60; using string contains search.\n     * @param {string} [roleDescription] Parameter for filtering group roles by role &#x60;description&#x60; using string contains search.\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {'name' | 'modified' | 'policyCount'} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.listRolesForGroup = function (uuid, exclude, roleName, roleDescription, limit, offset, orderBy, options) {\n        return exports.GroupApiFp(this.configuration).listRolesForGroup(uuid, exclude, roleName, roleDescription, limit, offset, orderBy, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Udate a group in the tenant\n     * @param {string} uuid ID of group to update\n     * @param {Group} group Group to update in tenant\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.updateGroup = function (uuid, group, options) {\n        return exports.GroupApiFp(this.configuration).updateGroup(uuid, group, options)(this.axios, this.basePath);\n    };\n    return GroupApi;\n}(base_1.BaseAPI));\nexports.GroupApi = GroupApi;\n/**\n * PolicyApi - axios parameter creator\n * @export\n */\nexports.PolicyApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Create a policy in a tenant\n         * @param {PolicyIn} policyIn Policy to create\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPolicies: function (policyIn, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'policyIn' is not null or undefined\n            if (policyIn === null || policyIn === undefined) {\n                throw new base_1.RequiredError('policyIn', 'Required parameter policyIn was null or undefined when calling createPolicies.');\n            }\n            var localVarPath = \"/policies/\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof policyIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(policyIn !== undefined ? policyIn : {}) : (policyIn || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Delete a policy in the tenant\n         * @param {string} uuid ID of policy to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePolicy: function (uuid, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling deletePolicy.');\n            }\n            var localVarPath = \"/policies/{uuid}/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Get a policy in the tenant\n         * @param {string} uuid ID of policy to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPolicy: function (uuid, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling getPolicy.');\n            }\n            var localVarPath = \"/policies/{uuid}/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by policy name\n         * @summary List the policies in the tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [groupName] Parameter for filtering resource by group name using string contains search.\n         * @param {string} [groupUuid] Parameter for filtering resource by group uuid using UUID exact match.\n         * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPolicies: function (limit, offset, name, scope, groupName, groupUuid, orderBy, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/policies/\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n            if (scope !== undefined) {\n                localVarQueryParameter['scope'] = scope;\n            }\n            if (groupName !== undefined) {\n                localVarQueryParameter['group_name'] = groupName;\n            }\n            if (groupUuid !== undefined) {\n                localVarQueryParameter['group_uuid'] = groupUuid;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Update a policy in the tenant\n         * @param {string} uuid ID of policy to update\n         * @param {PolicyIn} policyIn Policy to update\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePolicy: function (uuid, policyIn, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling updatePolicy.');\n            }\n            // verify required parameter 'policyIn' is not null or undefined\n            if (policyIn === null || policyIn === undefined) {\n                throw new base_1.RequiredError('policyIn', 'Required parameter policyIn was null or undefined when calling updatePolicy.');\n            }\n            var localVarPath = \"/policies/{uuid}/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof policyIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(policyIn !== undefined ? policyIn : {}) : (policyIn || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * PolicyApi - functional programming interface\n * @export\n */\nexports.PolicyApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Create a policy in a tenant\n         * @param {PolicyIn} policyIn Policy to create\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPolicies: function (policyIn, options) {\n            var localVarAxiosArgs = exports.PolicyApiAxiosParamCreator(configuration).createPolicies(policyIn, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Delete a policy in the tenant\n         * @param {string} uuid ID of policy to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePolicy: function (uuid, options) {\n            var localVarAxiosArgs = exports.PolicyApiAxiosParamCreator(configuration).deletePolicy(uuid, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Get a policy in the tenant\n         * @param {string} uuid ID of policy to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPolicy: function (uuid, options) {\n            var localVarAxiosArgs = exports.PolicyApiAxiosParamCreator(configuration).getPolicy(uuid, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by policy name\n         * @summary List the policies in the tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [groupName] Parameter for filtering resource by group name using string contains search.\n         * @param {string} [groupUuid] Parameter for filtering resource by group uuid using UUID exact match.\n         * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPolicies: function (limit, offset, name, scope, groupName, groupUuid, orderBy, options) {\n            var localVarAxiosArgs = exports.PolicyApiAxiosParamCreator(configuration).listPolicies(limit, offset, name, scope, groupName, groupUuid, orderBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Update a policy in the tenant\n         * @param {string} uuid ID of policy to update\n         * @param {PolicyIn} policyIn Policy to update\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePolicy: function (uuid, policyIn, options) {\n            var localVarAxiosArgs = exports.PolicyApiAxiosParamCreator(configuration).updatePolicy(uuid, policyIn, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * PolicyApi - factory interface\n * @export\n */\nexports.PolicyApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Create a policy in a tenant\n         * @param {PolicyIn} policyIn Policy to create\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPolicies: function (policyIn, options) {\n            return exports.PolicyApiFp(configuration).createPolicies(policyIn, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Delete a policy in the tenant\n         * @param {string} uuid ID of policy to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePolicy: function (uuid, options) {\n            return exports.PolicyApiFp(configuration).deletePolicy(uuid, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Get a policy in the tenant\n         * @param {string} uuid ID of policy to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPolicy: function (uuid, options) {\n            return exports.PolicyApiFp(configuration).getPolicy(uuid, options)(axios, basePath);\n        },\n        /**\n         * By default, responses are sorted in ascending order by policy name\n         * @summary List the policies in the tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [groupName] Parameter for filtering resource by group name using string contains search.\n         * @param {string} [groupUuid] Parameter for filtering resource by group uuid using UUID exact match.\n         * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPolicies: function (limit, offset, name, scope, groupName, groupUuid, orderBy, options) {\n            return exports.PolicyApiFp(configuration).listPolicies(limit, offset, name, scope, groupName, groupUuid, orderBy, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Update a policy in the tenant\n         * @param {string} uuid ID of policy to update\n         * @param {PolicyIn} policyIn Policy to update\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePolicy: function (uuid, policyIn, options) {\n            return exports.PolicyApiFp(configuration).updatePolicy(uuid, policyIn, options)(axios, basePath);\n        },\n    };\n};\n/**\n * PolicyApi - object-oriented interface\n * @export\n * @class PolicyApi\n * @extends {BaseAPI}\n */\nvar PolicyApi = /** @class */ (function (_super) {\n    __extends(PolicyApi, _super);\n    function PolicyApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Create a policy in a tenant\n     * @param {PolicyIn} policyIn Policy to create\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PolicyApi\n     */\n    PolicyApi.prototype.createPolicies = function (policyIn, options) {\n        return exports.PolicyApiFp(this.configuration).createPolicies(policyIn, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Delete a policy in the tenant\n     * @param {string} uuid ID of policy to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PolicyApi\n     */\n    PolicyApi.prototype.deletePolicy = function (uuid, options) {\n        return exports.PolicyApiFp(this.configuration).deletePolicy(uuid, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Get a policy in the tenant\n     * @param {string} uuid ID of policy to get\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PolicyApi\n     */\n    PolicyApi.prototype.getPolicy = function (uuid, options) {\n        return exports.PolicyApiFp(this.configuration).getPolicy(uuid, options)(this.axios, this.basePath);\n    };\n    /**\n     * By default, responses are sorted in ascending order by policy name\n     * @summary List the policies in the tenant\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {string} [name] Parameter for filtering resource by name using string contains search.\n     * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n     * @param {string} [groupName] Parameter for filtering resource by group name using string contains search.\n     * @param {string} [groupUuid] Parameter for filtering resource by group uuid using UUID exact match.\n     * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PolicyApi\n     */\n    PolicyApi.prototype.listPolicies = function (limit, offset, name, scope, groupName, groupUuid, orderBy, options) {\n        return exports.PolicyApiFp(this.configuration).listPolicies(limit, offset, name, scope, groupName, groupUuid, orderBy, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Update a policy in the tenant\n     * @param {string} uuid ID of policy to update\n     * @param {PolicyIn} policyIn Policy to update\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PolicyApi\n     */\n    PolicyApi.prototype.updatePolicy = function (uuid, policyIn, options) {\n        return exports.PolicyApiFp(this.configuration).updatePolicy(uuid, policyIn, options)(this.axios, this.basePath);\n    };\n    return PolicyApi;\n}(base_1.BaseAPI));\nexports.PolicyApi = PolicyApi;\n/**\n * PrincipalApi - axios parameter creator\n * @export\n */\nexports.PrincipalApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * By default, responses are sorted in ascending order by username\n         * @summary List the principals for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [usernames] Usernames of principals to get\n         * @param {'asc' | 'desc'} [sortOrder] The sort order of the query, either ascending or descending\n         * @param {string} [email] Exact e-mail address of principal to search for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPrincipals: function (limit, offset, usernames, sortOrder, email, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/principals/\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (usernames !== undefined) {\n                localVarQueryParameter['usernames'] = usernames;\n            }\n            if (sortOrder !== undefined) {\n                localVarQueryParameter['sort_order'] = sortOrder;\n            }\n            if (email !== undefined) {\n                localVarQueryParameter['email'] = email;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * PrincipalApi - functional programming interface\n * @export\n */\nexports.PrincipalApiFp = function (configuration) {\n    return {\n        /**\n         * By default, responses are sorted in ascending order by username\n         * @summary List the principals for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [usernames] Usernames of principals to get\n         * @param {'asc' | 'desc'} [sortOrder] The sort order of the query, either ascending or descending\n         * @param {string} [email] Exact e-mail address of principal to search for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPrincipals: function (limit, offset, usernames, sortOrder, email, options) {\n            var localVarAxiosArgs = exports.PrincipalApiAxiosParamCreator(configuration).listPrincipals(limit, offset, usernames, sortOrder, email, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * PrincipalApi - factory interface\n * @export\n */\nexports.PrincipalApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * By default, responses are sorted in ascending order by username\n         * @summary List the principals for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [usernames] Usernames of principals to get\n         * @param {'asc' | 'desc'} [sortOrder] The sort order of the query, either ascending or descending\n         * @param {string} [email] Exact e-mail address of principal to search for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPrincipals: function (limit, offset, usernames, sortOrder, email, options) {\n            return exports.PrincipalApiFp(configuration).listPrincipals(limit, offset, usernames, sortOrder, email, options)(axios, basePath);\n        },\n    };\n};\n/**\n * PrincipalApi - object-oriented interface\n * @export\n * @class PrincipalApi\n * @extends {BaseAPI}\n */\nvar PrincipalApi = /** @class */ (function (_super) {\n    __extends(PrincipalApi, _super);\n    function PrincipalApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * By default, responses are sorted in ascending order by username\n     * @summary List the principals for a tenant\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {string} [usernames] Usernames of principals to get\n     * @param {'asc' | 'desc'} [sortOrder] The sort order of the query, either ascending or descending\n     * @param {string} [email] Exact e-mail address of principal to search for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PrincipalApi\n     */\n    PrincipalApi.prototype.listPrincipals = function (limit, offset, usernames, sortOrder, email, options) {\n        return exports.PrincipalApiFp(this.configuration).listPrincipals(limit, offset, usernames, sortOrder, email, options)(this.axios, this.basePath);\n    };\n    return PrincipalApi;\n}(base_1.BaseAPI));\nexports.PrincipalApi = PrincipalApi;\n/**\n * RoleApi - axios parameter creator\n * @export\n */\nexports.RoleApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Create a roles for a tenant\n         * @param {RoleIn} roleIn Role to create\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createRoles: function (roleIn, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'roleIn' is not null or undefined\n            if (roleIn === null || roleIn === undefined) {\n                throw new base_1.RequiredError('roleIn', 'Required parameter roleIn was null or undefined when calling createRoles.');\n            }\n            var localVarPath = \"/roles/\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof roleIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(roleIn !== undefined ? roleIn : {}) : (roleIn || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Delete a role in the tenant\n         * @param {string} uuid ID of role to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteRole: function (uuid, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling deleteRole.');\n            }\n            var localVarPath = \"/roles/{uuid}/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Get a role in the tenant\n         * @param {string} uuid ID of role to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRole: function (uuid, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling getRole.');\n            }\n            var localVarPath = \"/roles/{uuid}/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Get access for a role in the tenant\n         * @param {string} uuid ID of the role\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRoleAccess: function (uuid, limit, offset, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling getRoleAccess.');\n            }\n            var localVarPath = \"/roles/{uuid}/access/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by role name\n         * @summary List the roles for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {Array<'groups_in' | 'groups_in_count'>} [addFields] Parameter for add list of fields to display for roles.\n         * @param {string} [username] Unique username of the principal to obtain roles for (only available for admins, and if supplied, takes precedence over the identity header).\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listRoles: function (limit, offset, name, scope, orderBy, addFields, username, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/roles/\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n            if (scope !== undefined) {\n                localVarQueryParameter['scope'] = scope;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            if (addFields) {\n                localVarQueryParameter['add_fields'] = addFields.join(base_1.COLLECTION_FORMATS.csv);\n            }\n            if (username !== undefined) {\n                localVarQueryParameter['username'] = username;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Update a Role in the tenant\n         * @param {string} uuid ID of role to update\n         * @param {RoleWithAccess} roleWithAccess Update to a Role\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateRole: function (uuid, roleWithAccess, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling updateRole.');\n            }\n            // verify required parameter 'roleWithAccess' is not null or undefined\n            if (roleWithAccess === null || roleWithAccess === undefined) {\n                throw new base_1.RequiredError('roleWithAccess', 'Required parameter roleWithAccess was null or undefined when calling updateRole.');\n            }\n            var localVarPath = \"/roles/{uuid}/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof roleWithAccess !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(roleWithAccess !== undefined ? roleWithAccess : {}) : (roleWithAccess || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * RoleApi - functional programming interface\n * @export\n */\nexports.RoleApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Create a roles for a tenant\n         * @param {RoleIn} roleIn Role to create\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createRoles: function (roleIn, options) {\n            var localVarAxiosArgs = exports.RoleApiAxiosParamCreator(configuration).createRoles(roleIn, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Delete a role in the tenant\n         * @param {string} uuid ID of role to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteRole: function (uuid, options) {\n            var localVarAxiosArgs = exports.RoleApiAxiosParamCreator(configuration).deleteRole(uuid, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Get a role in the tenant\n         * @param {string} uuid ID of role to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRole: function (uuid, options) {\n            var localVarAxiosArgs = exports.RoleApiAxiosParamCreator(configuration).getRole(uuid, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Get access for a role in the tenant\n         * @param {string} uuid ID of the role\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRoleAccess: function (uuid, limit, offset, options) {\n            var localVarAxiosArgs = exports.RoleApiAxiosParamCreator(configuration).getRoleAccess(uuid, limit, offset, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by role name\n         * @summary List the roles for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {Array<'groups_in' | 'groups_in_count'>} [addFields] Parameter for add list of fields to display for roles.\n         * @param {string} [username] Unique username of the principal to obtain roles for (only available for admins, and if supplied, takes precedence over the identity header).\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listRoles: function (limit, offset, name, scope, orderBy, addFields, username, options) {\n            var localVarAxiosArgs = exports.RoleApiAxiosParamCreator(configuration).listRoles(limit, offset, name, scope, orderBy, addFields, username, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Update a Role in the tenant\n         * @param {string} uuid ID of role to update\n         * @param {RoleWithAccess} roleWithAccess Update to a Role\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateRole: function (uuid, roleWithAccess, options) {\n            var localVarAxiosArgs = exports.RoleApiAxiosParamCreator(configuration).updateRole(uuid, roleWithAccess, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * RoleApi - factory interface\n * @export\n */\nexports.RoleApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Create a roles for a tenant\n         * @param {RoleIn} roleIn Role to create\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createRoles: function (roleIn, options) {\n            return exports.RoleApiFp(configuration).createRoles(roleIn, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Delete a role in the tenant\n         * @param {string} uuid ID of role to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteRole: function (uuid, options) {\n            return exports.RoleApiFp(configuration).deleteRole(uuid, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Get a role in the tenant\n         * @param {string} uuid ID of role to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRole: function (uuid, options) {\n            return exports.RoleApiFp(configuration).getRole(uuid, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Get access for a role in the tenant\n         * @param {string} uuid ID of the role\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRoleAccess: function (uuid, limit, offset, options) {\n            return exports.RoleApiFp(configuration).getRoleAccess(uuid, limit, offset, options)(axios, basePath);\n        },\n        /**\n         * By default, responses are sorted in ascending order by role name\n         * @summary List the roles for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {Array<'groups_in' | 'groups_in_count'>} [addFields] Parameter for add list of fields to display for roles.\n         * @param {string} [username] Unique username of the principal to obtain roles for (only available for admins, and if supplied, takes precedence over the identity header).\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listRoles: function (limit, offset, name, scope, orderBy, addFields, username, options) {\n            return exports.RoleApiFp(configuration).listRoles(limit, offset, name, scope, orderBy, addFields, username, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Update a Role in the tenant\n         * @param {string} uuid ID of role to update\n         * @param {RoleWithAccess} roleWithAccess Update to a Role\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateRole: function (uuid, roleWithAccess, options) {\n            return exports.RoleApiFp(configuration).updateRole(uuid, roleWithAccess, options)(axios, basePath);\n        },\n    };\n};\n/**\n * RoleApi - object-oriented interface\n * @export\n * @class RoleApi\n * @extends {BaseAPI}\n */\nvar RoleApi = /** @class */ (function (_super) {\n    __extends(RoleApi, _super);\n    function RoleApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Create a roles for a tenant\n     * @param {RoleIn} roleIn Role to create\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    RoleApi.prototype.createRoles = function (roleIn, options) {\n        return exports.RoleApiFp(this.configuration).createRoles(roleIn, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Delete a role in the tenant\n     * @param {string} uuid ID of role to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    RoleApi.prototype.deleteRole = function (uuid, options) {\n        return exports.RoleApiFp(this.configuration).deleteRole(uuid, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Get a role in the tenant\n     * @param {string} uuid ID of role to get\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    RoleApi.prototype.getRole = function (uuid, options) {\n        return exports.RoleApiFp(this.configuration).getRole(uuid, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Get access for a role in the tenant\n     * @param {string} uuid ID of the role\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    RoleApi.prototype.getRoleAccess = function (uuid, limit, offset, options) {\n        return exports.RoleApiFp(this.configuration).getRoleAccess(uuid, limit, offset, options)(this.axios, this.basePath);\n    };\n    /**\n     * By default, responses are sorted in ascending order by role name\n     * @summary List the roles for a tenant\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {string} [name] Parameter for filtering resource by name using string contains search.\n     * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n     * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n     * @param {Array<'groups_in' | 'groups_in_count'>} [addFields] Parameter for add list of fields to display for roles.\n     * @param {string} [username] Unique username of the principal to obtain roles for (only available for admins, and if supplied, takes precedence over the identity header).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    RoleApi.prototype.listRoles = function (limit, offset, name, scope, orderBy, addFields, username, options) {\n        return exports.RoleApiFp(this.configuration).listRoles(limit, offset, name, scope, orderBy, addFields, username, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Update a Role in the tenant\n     * @param {string} uuid ID of role to update\n     * @param {RoleWithAccess} roleWithAccess Update to a Role\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    RoleApi.prototype.updateRole = function (uuid, roleWithAccess, options) {\n        return exports.RoleApiFp(this.configuration).updateRole(uuid, roleWithAccess, options)(this.axios, this.basePath);\n    };\n    return RoleApi;\n}(base_1.BaseAPI));\nexports.RoleApi = RoleApi;\n/**\n * StatusApi - axios parameter creator\n * @export\n */\nexports.StatusApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Obtain server status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStatus: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/status/\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * StatusApi - functional programming interface\n * @export\n */\nexports.StatusApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Obtain server status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStatus: function (options) {\n            var localVarAxiosArgs = exports.StatusApiAxiosParamCreator(configuration).getStatus(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * StatusApi - factory interface\n * @export\n */\nexports.StatusApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Obtain server status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStatus: function (options) {\n            return exports.StatusApiFp(configuration).getStatus(options)(axios, basePath);\n        },\n    };\n};\n/**\n * StatusApi - object-oriented interface\n * @export\n * @class StatusApi\n * @extends {BaseAPI}\n */\nvar StatusApi = /** @class */ (function (_super) {\n    __extends(StatusApi, _super);\n    function StatusApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Obtain server status\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StatusApi\n     */\n    StatusApi.prototype.getStatus = function (options) {\n        return exports.StatusApiFp(this.configuration).getStatus(options)(this.axios, this.basePath);\n    };\n    return StatusApi;\n}(base_1.BaseAPI));\nexports.StatusApi = StatusApi;\n","\"use strict\";\n// tslint:disable\n/**\n * Role Based Access Control\n * The API for Role Based Access Control.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Some imports not used depending on template conditions\n// @ts-ignore\nvar axios_1 = require(\"axios\");\nexports.BASE_PATH = \"https://raw.githubusercontent.com/api/rbac/v1\".replace(/\\/+$/, \"\");\n/**\n *\n * @export\n */\nexports.COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n/**\n *\n * @export\n * @class BaseAPI\n */\nvar BaseAPI = /** @class */ (function () {\n    function BaseAPI(configuration, basePath, axios) {\n        if (basePath === void 0) { basePath = exports.BASE_PATH; }\n        if (axios === void 0) { axios = axios_1.default; }\n        this.basePath = basePath;\n        this.axios = axios;\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n    return BaseAPI;\n}());\nexports.BaseAPI = BaseAPI;\n;\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nvar RequiredError = /** @class */ (function (_super) {\n    __extends(RequiredError, _super);\n    function RequiredError(field, msg) {\n        var _this = _super.call(this, msg) || this;\n        _this.field = field;\n        _this.name = \"RequiredError\";\n        return _this;\n    }\n    return RequiredError;\n}(Error));\nexports.RequiredError = RequiredError;\n","\"use strict\";\n// tslint:disable\n/**\n * Role Based Access Control\n * The API for Role Based Access Control.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Configuration = /** @class */ (function () {\n    function Configuration(param) {\n        if (param === void 0) { param = {}; }\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n    }\n    return Configuration;\n}());\nexports.Configuration = Configuration;\n"],"sourceRoot":""}