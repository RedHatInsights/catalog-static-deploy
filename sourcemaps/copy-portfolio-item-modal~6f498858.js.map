{"version":3,"sources":["webpack:///./src/smart-components/portfolio/portfolio-item-detail/copy-portfolio-item-modal.tsx"],"names":["loadPortfolios","name","limit","offset","then","filter","map","value","label","copySchema","getName","formatMessage","initialOptions","fields","component","fieldSpy","portfolio","isRequired","loadOptions","isSearchable","options","menuIsPortal","portfolioId","portfolioItemId","closeUrl","search","portfolioName","dispatch","push","isOpen","title","copyItemTitle","onClose","pathname","variant","initialValues","portfolio_id","schema","getPortfolioItemNextName","onSubmit","values","id","service_offering_source_ref","onCancel","templateProps","submitLabel","save","disableSubmit"],"mappings":"mjDA+BMA,EAAiB,SAACC,GACtB,mBAAe,CAAEA,KAAI,GAAI,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,MAAK,SAAC,GACxD,OAD8D,OAE3DC,QACC,SAAC,GAIK,OAFyB,uCAIhCC,KAAI,SAAC,G,IAAEL,EAAI,OAAW,OAAGM,MAAV,KAAqBC,MAAOP,UAG5CQ,EAAa,SACjBC,EACAC,EACAC,GACG,OACHC,OAAQ,CACN,CACEC,UAAW,oBACXb,KAAM,sBACNO,MAAOG,EAAc,IAAcV,MACnCS,QAAO,EACPK,SAAU,gBAEZ,CACED,UAAW,iBACXb,KAAM,eACNO,MAAOG,EAAc,IAAcK,WACnCC,YAAY,EACZC,YAAa,YAAmBlB,GAChCmB,cAAc,EACdC,QAASR,EACTS,cAAc,MA6FL,UAhFkE,SAAC,G,IAChFC,EAAW,cACXC,EAAe,kBACfC,EAAQ,WACRC,EAAM,SACNC,EAAa,gBAEPf,EAAgB,cAChBgB,EAAW,cACTC,EAAS,cAAY,KAsC7B,OACE,kBAAC,IAAK,CACJC,QAAM,EACNC,MAAOnB,EAAc,IAAkBoB,eACvCC,QAAS,WACP,OAAAJ,EAAK,CACHK,SAAUT,EACVC,OAAM,KAGVS,QAAQ,SAER,kBAAC,IAAY,CACXC,cAAe,CAAEC,aAAcd,GAC/Be,OAAQ5B,GApBU,SAACa,GACvB,OAAC,cAAsBgB,yBACrBf,EACAD,GACmClB,MAAK,SAAC,GAAkB,OAAP,iBAgBdO,EAAe,CACjD,CAAEJ,MAAOe,EAAad,MAAOkB,KAE/Ba,SArDW,SAAOC,GAA2B,0C,wDAKpB,SAAMb,EACjC,YAAuBa,EAAOJ,gB,OAIhC,OALepB,EAAc,SAI5B,MACM,CAAP,EAAOW,EACJ,YACCJ,EACAiB,EACAxB,IAGDZ,MAAK,SAAC,G,IAAEqC,EAAE,KAAEC,EAA2B,8BACtC,OAAAd,EAAK,CACHK,SAAU,IACVR,OAAQ,cAAce,EAAOJ,aAAY,mBAAmBK,EAAE,WAAWC,OAG5EtC,MACC,WACE,OAAAoC,EAAOJ,eAAiBd,GACxBK,EAAS,YAAiCL,gBA4B5CqB,SAAU,WACR,OAAAf,EAAK,CACHK,SAAUT,EACVC,OAAM,KAGVmB,cAAe,CACbC,YAAalC,EAAc,IAAemC,MAC1CC,cAAe,CAAC,aAAc","file":"js/copy-portfolio-item-modal~6f498858.01e764c1c8c11d0ee436.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Modal } from '@patternfly/react-core';\n\nimport FormRenderer from '../../common/form-renderer';\nimport { getPortfolioItemApi } from '../../../helpers/shared/user-login';\nimport {\n  copyPortfolioItem,\n  fetchPortfolioItemsWithPortfolio,\n  fetchSelectedPortfolio\n} from '../../../redux/actions/portfolio-actions';\nimport asyncFormValidator from '../../../utilities/async-form-validator';\nimport { listPortfolios } from '../../../helpers/portfolio/portfolio-helper';\nimport { PORTFOLIO_ITEM_ROUTE } from '../../../constants/routes';\nimport actionMessages from '../../../messages/actions.messages';\nimport labelMessages from '../../../messages/labels.messages';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport {\n  FormatMessage,\n  Full,\n  SelectOptions\n} from '../../../types/common-types';\nimport {\n  Portfolio,\n  PortfolioItem,\n  PortfolioItemNextName\n} from '@redhat-cloud-services/catalog-client';\n\nconst loadPortfolios = (name: string) =>\n  listPortfolios({ name }, { limit: 100, offset: 0 }).then(({ data }) =>\n    data\n      .filter(\n        ({\n          metadata: {\n            user_capabilities: { update }\n          }\n        }) => update\n      )\n      .map(({ name, id }) => ({ value: id, label: name }))\n  );\n\nconst copySchema = (\n  getName: (value: string) => Promise<string | undefined>,\n  formatMessage: FormatMessage,\n  initialOptions: SelectOptions\n) => ({\n  fields: [\n    {\n      component: 'copy-name-display',\n      name: 'portfolio_item_name',\n      label: formatMessage(labelMessages.name),\n      getName,\n      fieldSpy: 'portfolio_id'\n    },\n    {\n      component: 'initial-select',\n      name: 'portfolio_id',\n      label: formatMessage(labelMessages.portfolio),\n      isRequired: true,\n      loadOptions: asyncFormValidator(loadPortfolios),\n      isSearchable: true,\n      options: initialOptions,\n      menuIsPortal: true\n    }\n  ]\n});\n\nexport interface CopyPortfolioItemModalProps {\n  closeUrl: string;\n  portfolioId?: string;\n  portfolioItemId: string;\n  search?: string;\n  portfolioName?: string;\n}\n\nconst CopyPortfolioItemModal: React.ComponentType<CopyPortfolioItemModalProps> = ({\n  portfolioId,\n  portfolioItemId,\n  closeUrl,\n  search,\n  portfolioName\n}) => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n\n  const onSubmit = async (values: Full<PortfolioItem>) => {\n    /**\n     * dispatch redux action to set selected portfolio in store\n     * this will ensure that correct portfolio data will be loaded after the redirect occurs\n     */\n    const { value: portfolio } = await dispatch(\n      fetchSelectedPortfolio(values.portfolio_id) as Promise<{\n        value: Full<Portfolio>;\n      }>\n    );\n    return dispatch(\n      (copyPortfolioItem(\n        portfolioItemId,\n        values,\n        portfolio\n      ) as unknown) as Promise<PortfolioItem>\n    )\n      .then(({ id, service_offering_source_ref }) =>\n        push({\n          pathname: PORTFOLIO_ITEM_ROUTE,\n          search: `?portfolio=${values.portfolio_id}&portfolio-item=${id}&source=${service_offering_source_ref}`\n        })\n      )\n      .then(\n        () =>\n          values.portfolio_id === portfolioId &&\n          dispatch(fetchPortfolioItemsWithPortfolio(portfolioId))\n      );\n  };\n\n  const portfolioChange = (portfolioId: string) =>\n    (getPortfolioItemApi().getPortfolioItemNextName(\n      portfolioItemId,\n      portfolioId\n    ) as Promise<PortfolioItemNextName>).then(({ next_name }) => next_name);\n\n  return (\n    <Modal\n      isOpen\n      title={formatMessage(portfolioMessages.copyItemTitle) as string}\n      onClose={() =>\n        push({\n          pathname: closeUrl,\n          search\n        })\n      }\n      variant=\"small\"\n    >\n      <FormRenderer\n        initialValues={{ portfolio_id: portfolioId }}\n        schema={copySchema(portfolioChange, formatMessage, [\n          { value: portfolioId, label: portfolioName }\n        ])}\n        onSubmit={onSubmit}\n        onCancel={() =>\n          push({\n            pathname: closeUrl,\n            search\n          })\n        }\n        templateProps={{\n          submitLabel: formatMessage(actionMessages.save),\n          disableSubmit: ['validating', 'submitting']\n        }}\n      />\n    </Modal>\n  );\n};\n\nexport default CopyPortfolioItemModal;\n"],"sourceRoot":""}