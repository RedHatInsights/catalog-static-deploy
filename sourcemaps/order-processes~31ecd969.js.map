{"version":3,"sources":["webpack:///./src/utilities/use-enhanced-history.ts","webpack:///./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack:///./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyState.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateIcon.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateBody.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateSecondaryActions.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/components/cjs/EmptyTable.js","webpack:///./src/smart-components/order-process/order-process-table-context.js","webpack:///./src/smart-components/order-process/order-process-table-helpers.js","webpack:///./src/presentational-components/shared/table-toolbar-view.tsx","webpack:///./src/presentational-components/shared/table-empty-state.tsx","webpack:///./src/forms/name-async-validator.ts","webpack:///./src/forms/load-items-debounced.ts","webpack:///./src/forms/set-portfolio-item.schema.ts","webpack:///./src/forms/create-order-process.schema.ts","webpack:///./src/utilities/use-order-process.js","webpack:///./src/smart-components/order-process/add-order-process-modal.js","webpack:///./src/smart-components/order-process/remove-order-process-modal.js","webpack:///./src/smart-components/order-process/order-processes.js"],"names":["removeSearch","keepHash","history","push","target","internalTarget","location","hash","length","split","search","undefined","removeSearchQuery","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","module","exports","arr","arrayLikeToArray","Array","isArray","iter","Symbol","iterator","Object","from","TypeError","__esModule","ExclamationTriangleIconConfig","name","height","width","svgPath","yOffset","xOffset","transform","ExclamationTriangleIcon","createIcon","EmptyStateVariant","EmptyState","_a","children","className","variant","full","isFullHeight","props","assign","emptyState","modifiers","sm","lg","xl","fullHeight","emptyStateContent","displayName","EmptyStateIcon","icon","IconComponent","component","AnyComponent","classNames","emptyStateIcon","EmptyStateBody","emptyStateBody","EmptyStateSecondaryActions","emptyStateSecondary","_interopDefault","e","default","defineProperty","value","_extends","objectWithoutProperties","React__default","PropTypes","EmptyTable","t","centered","r","s","a","_objectWithoutProperties","o","_defineProperty","createElement","propTypes","bool","any","string","OrderProcessTableContext","createContext","selectedOrderProcesses","SelectBox","id","useContext","setSelectedOrderProcesses","Checkbox","isChecked","includes","onChange","isRequired","createRows","data","map","description","created_at","cells","Fragment","key","date","TableToolbarView","columns","fetchData","toolbarButtons","actionResolver","routes","plural","pagination","filterValue","onFilterChange","isLoading","renderEmptyState","sortBy","onSort","activeFiltersConfig","filterConfig","rows","intl","useIntl","paginationConfig","itemCount","count","page","limit","offset","perPage","onSetPage","_e","onPerPageSelect","size","isDisabled","Section","type","PrimaryToolbar","actionsConfig","dropdownProps","position","actions","items","label","formatMessage","defaultMessage","filterValues","placeholder","orderProcessesFilter","_event","Table","dropDirection","isCompact","TableEmptyState","title","Icon","PrimaryAction","renderDescription","h1","func","then","find","op","nameTaken","SELECT","beforeProvision","afterProvision","loadOptions","noValueUpdates","isSearchable","isClearable","fields","TEXT_FIELD","orderProcessName","validate","REQUIRED","message","enterOrderProcessName","TEXTAREA","useOrderProcess","orderProcesses","useSelector","orderProcessReducer","shallowEqual","reducer","state","initialValues","schema","AddOrderProcess","edit","dispatch","useDispatch","useQuery","order_process","useEnhancedHistory","loadedProcess","useReducer","stateDispatch","useEffect","createOrderProcessSchema","fetchOrderProcess","onCancel","ORDER_PROCESSES_ROUTE","Modal","isOpen","onClose","orderProcessesMessages","updateOrderProcess","createOrderProcess","onSubmit","values","submitAction","addOrderProcess","fetchOrderProcesses","templateProps","submitLabel","labelMessages","save","create","disableSubmit","defaultProps","RemoveOrderProcessModal","ids","resetSelectedOrderProcesses","useState","fetchedOrderProcess","setFetchedOrderProcess","submitting","setSubmitting","finalId","orderProcess","orderProcessMessages","aria-label","removeProcessAriaLabel","header","Title","headingLevel","fill","removeProcessTitle","Button","onClick","removeOrderProcess","removeOrderProcesses","Spinner","actionMessages","deleting","cancel","TextContent","Text","TextVariants","p","removeProcessDescription","array","allSelected","selectAll","transforms","cellWidth","sortable","created","debouncedFilter","asyncFormValidator","filter","filteringCallback","meta","defaultSettings","prepareChips","category","chips","initialState","isFetching","isFiltering","areAllSelected","selected","every","row","unique","index","self","indexOf","orderProcessesState","action","payload","selectedOrderProceses","OrderProcesses","viewState","useInitialUriHash","updateOrderProcesses","insights","chrome","appNavClick","secondaryNav","scrollToTop","handleFilterChange","anyOrderProcessSelected","Provider","direction","property","sortOrderProcesses","exact","path","ADD_ORDER_PROCESS_ROUTE","postMethod","REMOVE_ORDER_PROCESS_ROUTE","UPDATE_ORDER_PROCESS_ROUTE","titlePlural","titleSingular","ToolbarItem","to","pathname","deleteOrderProcess","_rowId","noOrderProcesses","filteringMessages","noResultsFound","SearchIcon","clearFilters","noResultsDescription","filters","onDelete"],"mappings":"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","file":"js/order-processes~31ecd969.31f5371ecf252253d9f2.js","sourcesContent":["import { useHistory } from 'react-router-dom';\nimport { History, Path } from 'history';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\n\nexport type EnhancedHistoryPushtarget =\n  | Path\n  | { pathname: string; hash?: string; search?: string; state?: AnyObject };\n\nconst removeSearchQuery = (target: EnhancedHistoryPushtarget) => {\n  if (typeof target === 'string') {\n    return target.split('?')[0];\n  }\n\n  if (typeof target === 'object') {\n    return {\n      ...target,\n      search: undefined\n    };\n  }\n\n  return target;\n};\n\n/**\n * Wrapper around useHistory hook which adds aditional settings to standard history methods\n * @param {Boolean} removeSearch if true, using history navigation methods will remove search string from path\n * @param {Boolean} keepHash if true, using history navigation methods will not remove hash from URL\n */\nconst useEnhancedHistory = ({\n  removeSearch,\n  keepHash\n}: {\n  removeSearch?: boolean;\n  keepHash?: boolean;\n} = {}): History<History.UnknownFacade> => {\n  const history = useHistory();\n  return {\n    ...history,\n    push: (target: EnhancedHistoryPushtarget) => {\n      let internalTarget = target;\n      if (keepHash && history.location.hash.length > 0) {\n        internalTarget =\n          typeof internalTarget === 'object'\n            ? { ...internalTarget, hash: history.location.hash }\n            : `${internalTarget}${history.location.hash}`;\n      }\n\n      if (removeSearch) {\n        return history.push(removeSearchQuery(internalTarget));\n      }\n\n      return history.push(internalTarget);\n    }\n  };\n};\n\nexport default useEnhancedHistory;\n","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","\"use strict\"\nexports.__esModule = true;\nexports.ExclamationTriangleIconConfig = {\n  name: 'ExclamationTriangleIcon',\n  height: 512,\n  width: 576,\n  svgPath: 'M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z',\n  yOffset: 0,\n  xOffset: 0,\n  transform: ''\n};\nexports.ExclamationTriangleIcon = require('../createIcon').createIcon(exports.ExclamationTriangleIconConfig);\nexports[\"default\"] = exports.ExclamationTriangleIcon;","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/EmptyState/empty-state';\nexport var EmptyStateVariant;\n(function (EmptyStateVariant) {\n    EmptyStateVariant[\"small\"] = \"small\";\n    EmptyStateVariant[\"large\"] = \"large\";\n    EmptyStateVariant[\"xl\"] = \"xl\";\n    EmptyStateVariant[\"full\"] = \"full\";\n})(EmptyStateVariant || (EmptyStateVariant = {}));\nexport const EmptyState = (_a) => {\n    var { children, className = '', variant = EmptyStateVariant.full, isFullHeight } = _a, props = __rest(_a, [\"children\", \"className\", \"variant\", \"isFullHeight\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.emptyState, variant === 'small' && styles.modifiers.sm, variant === 'large' && styles.modifiers.lg, variant === 'xl' && styles.modifiers.xl, isFullHeight && styles.modifiers.fullHeight, className) }, props),\n        React.createElement(\"div\", { className: css(styles.emptyStateContent) }, children)));\n};\nEmptyState.displayName = 'EmptyState';\n//# sourceMappingURL=EmptyState.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/EmptyState/empty-state';\nexport const EmptyStateIcon = (_a) => {\n    var { className = '', icon: IconComponent, component: AnyComponent, variant = 'icon' } = _a, props = __rest(_a, [\"className\", \"icon\", \"component\", \"variant\"]);\n    const classNames = css(styles.emptyStateIcon, className);\n    return variant === 'icon' ? (React.createElement(IconComponent, Object.assign({ className: classNames }, props, { \"aria-hidden\": \"true\" }))) : (React.createElement(\"div\", { className: classNames },\n        React.createElement(AnyComponent, null)));\n};\nEmptyStateIcon.displayName = 'EmptyStateIcon';\n//# sourceMappingURL=EmptyStateIcon.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/EmptyState/empty-state';\nexport const EmptyStateBody = (_a) => {\n    var { children, className = '' } = _a, props = __rest(_a, [\"children\", \"className\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.emptyStateBody, className) }, props), children));\n};\nEmptyStateBody.displayName = 'EmptyStateBody';\n//# sourceMappingURL=EmptyStateBody.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/EmptyState/empty-state';\nexport const EmptyStateSecondaryActions = (_a) => {\n    var { children = null, className = '' } = _a, props = __rest(_a, [\"children\", \"className\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.emptyStateSecondary, className) }, props), children));\n};\nEmptyStateSecondaryActions.displayName = 'EmptyStateSecondaryActions';\n//# sourceMappingURL=EmptyStateSecondaryActions.js.map","\"use strict\";function _interopDefault(e){return e&&\"object\"==typeof e&&\"default\"in e?e.default:e}Object.defineProperty(exports,\"__esModule\",{value:!0}),require(\"./_commonjsHelpers-32c5d30b.js\");var _extends=require(\"./extends-7fa7e501.js\"),defineProperty=require(\"./defineProperty-cf06dcaa.js\"),objectWithoutProperties=require(\"./objectWithoutProperties-9e2b4e81.js\"),React=require(\"react\"),React__default=_interopDefault(React),PropTypes=_interopDefault(require(\"prop-types\")),classNames=_interopDefault(require(\"classnames\")),EmptyTable=function EmptyTable(e){var t=e.centered,r=e.className,s=e.children,a=objectWithoutProperties._objectWithoutProperties(e,[\"centered\",\"className\",\"children\"]),o=classNames(\"ins-c-table__empty\",defineProperty._defineProperty({},\"is-centered\",t),r);return React__default.createElement(\"div\",_extends._extends({className:o},a),\" \",s)};EmptyTable.propTypes={centered:PropTypes.bool,children:PropTypes.any,className:PropTypes.string},exports.EmptyTable=EmptyTable;\n","import { createContext } from 'react';\n\nconst OrderProcessTableContext = createContext({ selectedOrderProcesses: [] });\n\nexport default OrderProcessTableContext;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox } from '@patternfly/react-core';\nimport { TimeAgo } from '../../helpers/shared/helpers';\nimport OrderProcessTableContext from './order-process-table-context';\n\nexport const SelectBox = ({ id }) => {\n  const { selectedOrderProcesses, setSelectedOrderProcesses } = useContext(\n    OrderProcessTableContext\n  );\n\n  return (\n    <Checkbox\n      id={`select-${id}`}\n      isChecked={selectedOrderProcesses.includes(id)}\n      onChange={() => setSelectedOrderProcesses(id)}\n    />\n  );\n};\n\nSelectBox.propTypes = {\n  id: PropTypes.string.isRequired\n};\n\nexport const createRows = (data) =>\n  data.map(({ id, name, description, created_at }) => ({\n    id,\n    cells: [\n      <React.Fragment key={`${id}-checkbox`}>\n        <SelectBox id={id} />\n      </React.Fragment>,\n      name,\n      description,\n      <React.Fragment key={id}>\n        <TimeAgo date={created_at} />\n      </React.Fragment>\n    ]\n  }));\n","/* eslint-disable react/prop-types */\nimport React, { Fragment, ReactNode } from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  IActionsResolver,\n  ISortBy,\n  OnSort,\n  IRow,\n  ICell\n} from '@patternfly/react-table';\nimport {\n  defaultSettings,\n  getCurrentPage,\n  getNewPage,\n  PaginationConfiguration\n} from '../../helpers/shared/pagination';\nimport { ListLoader } from './loader-placeholders';\nimport { useIntl } from 'react-intl';\nimport { Section } from '@redhat-cloud-services/frontend-components/components/cjs/Section';\nimport {\n  PrimaryToolbar,\n  ActiveFiltersConfig,\n  FilterItem\n} from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport orderProcessesMessages from '../../messages/order-processes.messages';\n\nexport interface TableToolbarViewProps {\n  columns: ICell[];\n  toolbarButtons?: () => ReactNode;\n  fetchData: (pagination: PaginationConfiguration) => Promise<any | void>;\n  pagination?: PaginationConfiguration;\n  plural?: string;\n  singular?: string;\n  routes?: () => ReactNode;\n  actionResolver?: IActionsResolver;\n  filterValue?: string;\n  onFilterChange: (value?: string) => void;\n  isLoading?: boolean;\n  renderEmptyState?: () => ReactNode;\n  sortBy?: ISortBy;\n  onSort?: OnSort;\n  activeFiltersConfig?: ActiveFiltersConfig;\n  filterConfig?: FilterItem[];\n  rows: IRow[];\n}\nexport const TableToolbarView: React.ComponentType<TableToolbarViewProps> = ({\n  columns,\n  fetchData,\n  toolbarButtons,\n  actionResolver,\n  routes = () => null,\n  plural,\n  pagination = defaultSettings,\n  filterValue,\n  onFilterChange,\n  isLoading = false,\n  renderEmptyState = () => null,\n  sortBy,\n  onSort,\n  activeFiltersConfig,\n  filterConfig = [],\n  rows\n}) => {\n  const intl = useIntl();\n\n  const paginationConfig = {\n    itemCount: pagination.count,\n    page: getCurrentPage(pagination.limit, pagination.offset),\n    perPage: pagination.limit,\n    onSetPage: (_e: React.MouseEvent, page: number) =>\n      fetchData({ ...pagination, offset: getNewPage(page, pagination.limit) }),\n    onPerPageSelect: (_e: React.MouseEvent, size: number) =>\n      fetchData({ ...pagination, limit: size }),\n    isDisabled: isLoading\n  };\n\n  const renderToolbar = () => (\n    <PrimaryToolbar\n      className=\"pf-u-p-lg\"\n      pagination={paginationConfig}\n      {...(toolbarButtons && {\n        actionsConfig: {\n          dropdownProps: {\n            position: 'right'\n          },\n          actions: [toolbarButtons()]\n        }\n      })}\n      filterConfig={{\n        items: [\n          {\n            label: intl.formatMessage({\n              id: 'name',\n              defaultMessage: 'Name'\n            }),\n            filterValues: {\n              id: 'filter-by-name',\n              placeholder: intl.formatMessage(\n                orderProcessesMessages.orderProcessesFilter\n              ),\n              'aria-label': intl.formatMessage(\n                orderProcessesMessages.orderProcessesFilter\n              ),\n              onChange: (\n                _event: React.SyntheticEvent<Element, Event>,\n                value?: string\n              ) => onFilterChange(value),\n              value: filterValue\n            }\n          },\n          ...filterConfig\n        ]\n      }}\n      activeFiltersConfig={activeFiltersConfig}\n    />\n  );\n\n  return (\n    <Section type=\"content\" page-type={`tab-${plural}`} id={`tab-${plural}`}>\n      {routes()}\n      {renderToolbar()}\n      {isLoading && <ListLoader />}\n      {!isLoading && rows.length === 0 ? (\n        renderEmptyState()\n      ) : (\n        <Fragment>\n          {!isLoading && (\n            <Table\n              aria-label={`${plural} table`}\n              rows={rows}\n              cells={columns}\n              actionResolver={actionResolver}\n              className=\"pf-u-pt-0\"\n              sortBy={sortBy}\n              onSort={onSort}\n            >\n              <TableHeader />\n              <TableBody />\n            </Table>\n          )}\n          {pagination.count! > 0 && (\n            <PrimaryToolbar\n              className=\"pf-u-pl-lg pf-u-pr-lg\"\n              pagination={{\n                ...paginationConfig,\n                dropDirection: 'up',\n                variant: 'bottom',\n                isCompact: false,\n                className: 'pf-u-pr-0'\n              }}\n            />\n          )}\n        </Fragment>\n      )}\n    </Section>\n  );\n};\n","import React, { ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  Text,\n  TextContent,\n  TextVariants\n} from '@patternfly/react-core';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/components/cjs/EmptyTable';\n\nexport interface TableEmptyState {\n  title: ReactNode;\n  Icon: React.ComponentType;\n  description: ReactNode;\n  PrimaryAction?: React.ElementType;\n  renderDescription?: () => ReactNode;\n}\nconst TableEmptyState: React.ComponentType<TableEmptyState> = ({\n  title,\n  Icon,\n  description,\n  PrimaryAction,\n  renderDescription\n}) => (\n  <EmptyTable centered aria-label=\"No records\">\n    <EmptyState className=\"pf-u-ml-auto pf-u-mr-auto\">\n      <EmptyStateIcon icon={Icon} />\n      <TextContent>\n        <Text component={TextVariants.h1}>{title}</Text>\n      </TextContent>\n      <EmptyStateBody>\n        {description}\n        {renderDescription && renderDescription()}\n      </EmptyStateBody>\n      <EmptyStateSecondaryActions>\n        {PrimaryAction && <PrimaryAction />}\n      </EmptyStateSecondaryActions>\n    </EmptyState>\n  </EmptyTable>\n);\n\nTableEmptyState.propTypes = {\n  title: PropTypes.string.isRequired,\n  Icon: PropTypes.any.isRequired,\n  description: PropTypes.string.isRequired,\n  PrimaryAction: PropTypes.any,\n  renderDescription: PropTypes.func\n};\n\nexport default TableEmptyState;\n","import { IntlShape } from 'react-intl';\nimport { fetchOrderProcessByName } from '../helpers/order-process/order-process-helper';\nimport asyncFormValidator from '../utilities/async-form-validator';\nimport formsMessages from '../messages/forms.messages';\n\nconst validateName = (name: string, id: string, intl: IntlShape) =>\n  fetchOrderProcessByName(name).then(({ data }) => {\n    const order_process = id\n      ? data.find((op) => name === op.name && id !== op.id)\n      : data.find((op) => name === op.name);\n\n    if (order_process) {\n      throw intl.formatMessage(formsMessages.nameTaken);\n    }\n  });\n\nexport default asyncFormValidator(validateName);\n","import asyncDebounce from '../utilities/async-form-validator';\nimport { loadProductOptions } from '../helpers/order-process/order-process-helper';\n\nexport default asyncDebounce(loadProductOptions);\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport Field from '@data-driven-forms/react-form-renderer/dist/cjs/field';\nimport loadOptions from './load-items-debounced';\nimport formMessages from '../messages/forms.messages';\nimport { BEFORE_TYPE } from '../utilities/constants';\nimport { IntlShape } from 'react-intl';\n\nconst setItemsSelectSchema = (\n  type: 'before' | 'after',\n  intl: IntlShape\n): Field[] => [\n  {\n    component: componentTypes.SELECT,\n    name: `${type}_portfolio_item_id`,\n    label: intl.formatMessage(\n      type === BEFORE_TYPE\n        ? formMessages.beforeProvision\n        : formMessages.afterProvision\n    ),\n    loadOptions,\n    noValueUpdates: true,\n    isSearchable: true,\n    isClearable: true\n  }\n];\n\nexport default setItemsSelectSchema;\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport Schema from '@data-driven-forms/react-form-renderer/dist/cjs/schema';\n\nimport labelMessages from '../messages/labels.messages';\nimport debouncedValidatorName from './name-async-validator';\nimport orderProcessesMessages from '../messages/order-processes.messages';\nimport setItemsSelectSchema from './set-portfolio-item.schema';\nimport { BEFORE_TYPE, AFTER_TYPE } from '../utilities/constants';\nimport { IntlShape } from 'react-intl';\n\n/**\n * Creates a data-driven-form schema for adding an order processes\n * @param {object} intl React.intl with formatMessage function\n * @param {string} id Id of order process (when editing)\n */\nconst createOrderProcessSchema = (intl: IntlShape, id: string): Schema => {\n  return {\n    fields: [\n      {\n        component: componentTypes.TEXT_FIELD,\n        name: 'name',\n        isRequired: true,\n        id: 'order-process-name',\n        label: intl.formatMessage(orderProcessesMessages.orderProcessName),\n        validate: [\n          (value: string) => debouncedValidatorName(value, id, intl),\n          {\n            type: validatorTypes.REQUIRED,\n            message: intl.formatMessage(\n              orderProcessesMessages.enterOrderProcessName\n            )\n          }\n        ]\n      },\n      {\n        component: componentTypes.TEXTAREA,\n        name: 'description',\n        id: 'order-process-description',\n        label: intl.formatMessage(labelMessages.description)\n      },\n      ...setItemsSelectSchema(BEFORE_TYPE, intl),\n      ...setItemsSelectSchema(AFTER_TYPE, intl)\n    ]\n  };\n};\n\nexport default createOrderProcessSchema;\n","import { shallowEqual, useSelector } from 'react-redux';\n\nconst useOrderProcess = (id) => {\n  const { orderProcesses } = useSelector(\n    ({ orderProcessReducer: { orderProcesses } }) => ({ orderProcesses }),\n    shallowEqual\n  );\n\n  return orderProcesses?.data?.find((op) => op.id === id);\n};\n\nexport default useOrderProcess;\n","import React, { useReducer, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { Modal } from '@patternfly/react-core';\n\nimport { ORDER_PROCESSES_ROUTE } from '../../constants/routes';\nimport createOrderProcessSchema from '../../forms/create-order-process.schema';\nimport {\n  addOrderProcess,\n  fetchOrderProcesses,\n  updateOrderProcess\n} from '../../redux/actions/order-process-actions';\nimport FormRenderer from '../common/form-renderer';\nimport labelMessages from '../../messages/labels.messages';\nimport useQuery from '../../utilities/use-query';\nimport orderProcessesMessages from '../../messages/order-processes.messages';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\nimport useOrderProcess from '../../utilities/use-order-process';\nimport { fetchOrderProcess } from '../../redux/actions/order-process-actions';\n\nconst reducer = (state, { type, initialValues, schema }) => {\n  switch (type) {\n    case 'loaded':\n      return {\n        ...state,\n        initialValues,\n        schema,\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n};\n\nconst AddOrderProcess = ({ edit }) => {\n  const dispatch = useDispatch();\n  const [{ order_process }] = useQuery(['order_process']);\n  const data = useSelector(\n    ({\n      orderProcessReducer: {\n        orderProcesses: { data }\n      }\n    }) => (edit ? data.find(({ id }) => id === order_process) : {})\n  );\n  const { push } = useEnhancedHistory({ keepHash: true });\n  const intl = useIntl();\n  const loadedProcess = useOrderProcess(order_process);\n\n  const [{ initialValues }, stateDispatch] = useReducer(reducer, {\n    isLoading: true\n  });\n\n  useEffect(() => {\n    if (!loadedProcess && loadedProcess !== undefined) {\n      fetchOrderProcess(order_process).then((data) =>\n        stateDispatch({\n          type: 'loaded',\n          initialValues: data,\n          schema: createOrderProcessSchema(intl, data.id)\n        })\n      );\n    } else if (loadedProcess !== undefined) {\n      stateDispatch({\n        type: 'loaded',\n        initialValues: loadedProcess,\n        schema: createOrderProcessSchema(intl, loadedProcess.id)\n      });\n    }\n  }, []);\n\n  const onCancel = () => push(ORDER_PROCESSES_ROUTE);\n\n  const onSave = (values) => {\n    const submitAction = edit\n      ? () => updateOrderProcess(order_process, values, intl)\n      : () => addOrderProcess(values, intl);\n    onCancel();\n\n    return dispatch(submitAction()).then(() => dispatch(fetchOrderProcesses()));\n  };\n\n  if (edit && !data) {\n    return null;\n  }\n\n  return (\n    <Modal\n      isOpen\n      onClose={onCancel}\n      title={intl.formatMessage(\n        edit\n          ? orderProcessesMessages.updateOrderProcess\n          : orderProcessesMessages.createOrderProcess\n      )}\n      variant=\"small\"\n    >\n      <FormRenderer\n        initialValues={initialValues}\n        onSubmit={onSave}\n        onCancel={onCancel}\n        schema={createOrderProcessSchema(intl, order_process)}\n        templateProps={{\n          submitLabel: edit\n            ? intl.formatMessage(labelMessages.save)\n            : intl.formatMessage(labelMessages.create),\n          disableSubmit: ['validating', 'pristine']\n        }}\n      />\n    </Modal>\n  );\n};\n\nAddOrderProcess.propTypes = {\n  edit: PropTypes.bool\n};\n\nAddOrderProcess.defaultProps = {\n  edit: false\n};\n\nexport default AddOrderProcess;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport {\n  Modal,\n  Button,\n  Text,\n  TextContent,\n  TextVariants,\n  Spinner,\n  Title\n} from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  removeOrderProcess,\n  removeOrderProcesses,\n  fetchOrderProcess\n} from '../../redux/actions/order-process-actions';\nimport useQuery from '../../utilities/use-query';\nimport { ORDER_PROCESSES_ROUTE } from '../../constants/routes';\nimport useOrderProcess from '../../utilities/use-order-process';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport orderProcessMessages from '../../messages/order-processes.messages';\nimport actionMessages from '../../messages/actions.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\n\nconst RemoveOrderProcessModal = ({\n  ids = [],\n  fetchData,\n  resetSelectedOrderProcesses\n}) => {\n  const dispatch = useDispatch();\n  const [fetchedOrderProcess, setFetchedOrderProcess] = useState();\n  const [submitting, setSubmitting] = useState(false);\n  const { push } = useEnhancedHistory({ keepHash: true });\n  const [{ order_process: orderProcessId }] = useQuery(['order_process']);\n\n  const finalId = orderProcessId || (ids.length === 1 && ids[0]);\n\n  const intl = useIntl();\n  const orderProcess = useOrderProcess(finalId);\n\n  useEffect(() => {\n    if (finalId && !orderProcess) {\n      dispatch(fetchOrderProcess(finalId))\n        .then(({ value }) => setFetchedOrderProcess(value))\n        .catch(() => push(ORDER_PROCESSES_ROUTE));\n    }\n  }, []);\n\n  if (!finalId && ids.length === 0) {\n    return null;\n  }\n\n  const removeProcesses = () =>\n    (finalId\n      ? dispatch(removeOrderProcess(finalId, intl))\n      : dispatch(removeOrderProcesses(ids, intl))\n    )\n      .catch(() => setSubmitting(false))\n      .then(() => push(ORDER_PROCESSES_ROUTE))\n      .then(() => resetSelectedOrderProcesses())\n      .then(() => fetchData());\n\n  const onCancel = () => push(ORDER_PROCESSES_ROUTE);\n\n  const onSubmit = () => {\n    setSubmitting(true);\n    return removeProcesses();\n  };\n\n  const name = (\n    <b key=\"remove-key\">\n      {finalId ? (\n        (fetchedOrderProcess && fetchedOrderProcess.name) ||\n        (orderProcess && orderProcess.name)\n      ) : (\n        <React.Fragment>\n          {ids.length} {intl.formatMessage(orderProcessMessages.orderProcesses)}\n        </React.Fragment>\n      )}\n    </b>\n  );\n\n  const isLoading = finalId && !orderProcess && !fetchedOrderProcess;\n\n  return (\n    <Modal\n      isOpen\n      variant=\"small\"\n      aria-label={intl.formatMessage(\n        orderProcessMessages.removeProcessAriaLabel,\n        { count: finalId ? 1 : ids.length }\n      )}\n      header={\n        <Title size=\"2xl\" headingLevel=\"h1\">\n          <ExclamationTriangleIcon\n            size=\"sm\"\n            fill=\"#f0ab00\"\n            className=\"pf-u-mr-sm\"\n          />\n          {intl.formatMessage(orderProcessMessages.removeProcessTitle, {\n            count: finalId ? 1 : ids.length\n          })}\n        </Title>\n      }\n      onClose={onCancel}\n      actions={[\n        <Button\n          id=\"submit-remove-order-process\"\n          key=\"submit\"\n          variant=\"danger\"\n          type=\"button\"\n          isDisabled={submitting}\n          onClick={onSubmit}\n        >\n          {submitting ? (\n            <React.Fragment>\n              <Spinner size=\"sm\" className=\"pf-u-mr-md\" />\n              {intl.formatMessage(actionMessages.deleting)}\n            </React.Fragment>\n          ) : (\n            intl.formatMessage(actionMessages.delete)\n          )}\n        </Button>,\n        <Button\n          id=\"cancel-remove-order-process\"\n          key=\"cancel\"\n          variant=\"link\"\n          type=\"button\"\n          isDisabled={submitting}\n          onClick={onCancel}\n        >\n          {intl.formatMessage(labelMessages.cancel)}\n        </Button>\n      ]}\n    >\n      <TextContent>\n        <Text component={TextVariants.p}>\n          {isLoading ? (\n            <FormItemLoader />\n          ) : (\n            intl.formatMessage(orderProcessMessages.removeProcessDescription, {\n              name\n            })\n          )}\n        </Text>\n      </TextContent>\n    </Modal>\n  );\n};\n\nRemoveOrderProcessModal.propTypes = {\n  fetchData: PropTypes.func.isRequired,\n  ids: PropTypes.array,\n  resetSelectedOrderProcesses: PropTypes.func.isRequired\n};\n\nexport default RemoveOrderProcessModal;\n","import React, { Fragment, useEffect, useReducer } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Link, Route } from 'react-router-dom';\nimport {\n  Button,\n  Text,\n  TextContent,\n  TextVariants,\n  ToolbarItem\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { sortable, cellWidth } from '@patternfly/react-table';\nimport {\n  fetchOrderProcesses,\n  sortOrderProcesses\n} from '../../redux/actions/order-process-actions';\nimport { createRows } from './order-process-table-helpers';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport TopToolbar from '../../presentational-components/shared/top-toolbar';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport TableEmptyState from '../../presentational-components/shared/table-empty-state';\nimport { useIntl } from 'react-intl';\nimport orderProcessesMessages from '../../messages/order-processes.messages';\nimport filteringMessages from '../../messages/filtering.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport { StyledToolbarGroup } from '../../presentational-components/styled-components/toolbars';\nimport {\n  ADD_ORDER_PROCESS_ROUTE,\n  REMOVE_ORDER_PROCESS_ROUTE,\n  UPDATE_ORDER_PROCESS_ROUTE\n} from '../../constants/routes';\nimport AddOrderProcess from './add-order-process-modal';\nimport useInitialUriHash from '../../routing/use-initial-uri-hash';\nimport RemoveOrderProcess from './remove-order-process-modal';\nimport actionMessages from '../../messages/actions.messages';\nimport OrderProcessTableContext from './order-process-table-context';\nimport { Checkbox } from '@patternfly/react-core';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\n\nconst columns = (intl, allSelected, selectAll) => [\n  {\n    title: (\n      <Checkbox onChange={selectAll} isChecked={allSelected} id=\"select-all\" />\n    ),\n    transforms: [cellWidth(1)]\n  },\n  {\n    title: intl.formatMessage(labelMessages.name),\n    transforms: [sortable]\n  },\n  {\n    title: intl.formatMessage(labelMessages.description),\n    transforms: [sortable]\n  },\n  {\n    title: intl.formatMessage(labelMessages.created),\n    transforms: [sortable]\n  }\n];\n\nconst debouncedFilter = asyncFormValidator(\n  (filter, dispatch, filteringCallback, meta = defaultSettings) => {\n    filteringCallback(true);\n    return dispatch(\n      fetchOrderProcesses({ filterValue: filter, ...meta })\n    ).then(() => filteringCallback(false));\n  },\n  1000\n);\n\nconst prepareChips = (filterValue, intl) =>\n  filterValue\n    ? [\n        {\n          category: intl.formatMessage(labelMessages.name),\n          key: 'name',\n          chips: [{ name: filterValue, value: filterValue }]\n        }\n      ]\n    : [];\n\nconst initialState = {\n  filter: '',\n  isFetching: true,\n  isFiltering: false,\n  selectedOrderProcesses: [],\n  allSelected: false,\n  rows: []\n};\n\nconst areAllSelected = (rows = [], selected) =>\n  rows.every((row) => selected.includes(row.id));\nconst unique = (value, index, self) => self.indexOf(value) === index;\n\nconst orderProcessesState = (state, action) => {\n  switch (action.type) {\n    case 'setRows':\n      return {\n        ...state,\n        rows: action.payload,\n        allSelected: areAllSelected(\n          action.payload,\n          state.selectedOrderProcesses\n        )\n      };\n    case 'setFetching':\n      return {\n        ...state,\n        isFetching: action.payload\n      };\n    case 'setFilterValue':\n      return { ...state, filterValue: action.payload };\n    case 'select':\n      return {\n        ...state,\n        allSelected: false,\n        selectedOrderProcesses: state.selectedOrderProcesses.includes(\n          action.payload\n        )\n          ? state.selectedOrderProcesses.filter((id) => id !== action.payload)\n          : [...state.selectedOrderProcesses, action.payload]\n      };\n    case 'selectAll':\n      return {\n        ...state,\n        selectedOrderProcesses: [\n          ...state.selectedOrderProcesses,\n          ...action.payload\n        ].filter(unique),\n        allSelected: true\n      };\n    case 'unselectAll':\n      return {\n        ...state,\n        selectedOrderProcesses: state.selectedOrderProcesses.filter(\n          (selected) => !action.payload.includes(selected)\n        ),\n        allSelected: false\n      };\n    case 'resetSelected':\n      return {\n        ...state,\n        selectedOrderProceses: [],\n        allSelected: false\n      };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst OrderProcesses = () => {\n  const viewState = useInitialUriHash();\n  const {\n    orderProcesses: { data, meta },\n    sortBy\n  } = useSelector(\n    ({ orderProcessReducer: { orderProcesses, sortBy } }) => ({\n      orderProcesses,\n      sortBy\n    }),\n    shallowEqual\n  );\n  const [\n    {\n      filterValue,\n      isFetching,\n      isFiltering,\n      selectedOrderProcesses,\n      allSelected,\n      rows\n    },\n    stateDispatch\n  ] = useReducer(orderProcessesState, {\n    ...initialState,\n    filterValue: viewState?.orderProcesses.filter || initialState.filterValue\n  });\n\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const history = useEnhancedHistory({ keepHash: true });\n  const setSelectedOrderProcesses = (id) =>\n    stateDispatch({ type: 'select', payload: id });\n\n  const updateOrderProcesses = (pagination) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    return dispatch(fetchOrderProcesses(pagination))\n      .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n      .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  useEffect(() => {\n    insights.chrome.appNavClick({ id: 'order-processes', secondaryNav: true });\n    updateOrderProcesses(\n      viewState?.orderProcesses\n        ? {\n            ...viewState.orderProcesses,\n            filterValue\n          }\n        : defaultSettings\n    );\n    scrollToTop();\n  }, []);\n\n  useEffect(() => {\n    stateDispatch({ type: 'setRows', payload: createRows(data) });\n  }, [data]);\n\n  const handleFilterChange = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      value,\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering }),\n      { ...meta, offset: 0 }\n    );\n  };\n\n  const routes = () => (\n    <Fragment>\n      <Route exact path={ADD_ORDER_PROCESS_ROUTE}>\n        <AddOrderProcess postMethod={updateOrderProcesses} />\n      </Route>\n      <Route exact path={REMOVE_ORDER_PROCESS_ROUTE}>\n        <RemoveOrderProcess\n          ids={selectedOrderProcesses}\n          fetchData={updateOrderProcesses}\n          resetSelectedOrderProcesses={() =>\n            stateDispatch({ type: 'resetSelected' })\n          }\n        />\n      </Route>\n      <Route exact path={UPDATE_ORDER_PROCESS_ROUTE}>\n        <AddOrderProcess edit />\n      </Route>\n    </Fragment>\n  );\n\n  const actionResolver = () => [\n    {\n      title: intl.formatMessage(actionMessages.edit),\n      onClick: (_event, _rowId, orderProcess) =>\n        history.push({\n          pathname: UPDATE_ORDER_PROCESS_ROUTE,\n          search: `?order_process=${orderProcess.id}`\n        })\n    },\n    {\n      title: intl.formatMessage(actionMessages.delete),\n      onClick: (_event, _rowId, orderProcess) =>\n        history.push({\n          pathname: REMOVE_ORDER_PROCESS_ROUTE,\n          search: `?order_process=${orderProcess.id}`\n        })\n    }\n  ];\n\n  const doSelectAll = () => {\n    return allSelected\n      ? stateDispatch({ type: 'unselectAll', payload: data.map((op) => op.id) })\n      : stateDispatch({ type: 'selectAll', payload: data.map((op) => op.id) });\n  };\n\n  const anyOrderProcessSelected = selectedOrderProcesses.length > 0;\n\n  const onSort = (_e, index, direction, { property }) => {\n    dispatch(sortOrderProcesses({ index, direction, property }));\n    return updateOrderProcesses({\n      ...meta,\n      filterValue\n    });\n  };\n\n  const toolbarButtons = () => (\n    <StyledToolbarGroup className=\"pf-u-pl-lg top-toolbar\">\n      <ToolbarItem>\n        <Link\n          id=\"add-order-process-link\"\n          to={{ pathname: ADD_ORDER_PROCESS_ROUTE }}\n        >\n          <Button\n            variant=\"primary\"\n            aria-label={intl.formatMessage(labelMessages.create)}\n          >\n            {intl.formatMessage(labelMessages.create)}\n          </Button>\n        </Link>\n      </ToolbarItem>\n      <ToolbarItem>\n        <Link\n          id=\"remove-multiple-order-processes'\"\n          className={anyOrderProcessSelected ? '' : 'disabled-link'}\n          to={{ pathname: REMOVE_ORDER_PROCESS_ROUTE }}\n        >\n          <Button\n            variant=\"secondary\"\n            isDisabled={!anyOrderProcessSelected}\n            aria-label={intl.formatMessage(\n              orderProcessesMessages.deleteOrderProcess\n            )}\n          >\n            {intl.formatMessage(actionMessages.delete)}\n          </Button>\n        </Link>\n      </ToolbarItem>\n    </StyledToolbarGroup>\n  );\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TextContent className=\"pf-u-ml-md\">\n          <Text component={TextVariants.h1}>\n            {intl.formatMessage(orderProcessesMessages.title)}\n          </Text>\n        </TextContent>\n      </TopToolbar>\n      <OrderProcessTableContext.Provider\n        value={{ selectedOrderProcesses, setSelectedOrderProcesses }}\n      >\n        <TableToolbarView\n          sortBy={sortBy}\n          onSort={onSort}\n          rows={rows}\n          columns={columns(intl, allSelected, doSelectAll)}\n          routes={routes}\n          fetchData={updateOrderProcesses}\n          titlePlural={intl.formatMessage(orderProcessesMessages.title)}\n          titleSingular={intl.formatMessage(\n            orderProcessesMessages.orderProcess\n          )}\n          pagination={meta}\n          filterValue={filterValue}\n          onFilterChange={handleFilterChange}\n          isLoading={isFetching || isFiltering}\n          toolbarButtons={toolbarButtons}\n          actionResolver={actionResolver}\n          renderEmptyState={() => (\n            <TableEmptyState\n              title={\n                filterValue === ''\n                  ? intl.formatMessage(orderProcessesMessages.noOrderProcesses)\n                  : intl.formatMessage(filteringMessages.noResultsFound)\n              }\n              Icon={SearchIcon}\n              PrimaryAction={() =>\n                filterValue !== '' ? (\n                  <Button onClick={() => handleFilterChange('')} variant=\"link\">\n                    {intl.formatMessage(filteringMessages.clearFilters)}\n                  </Button>\n                ) : null\n              }\n              description={\n                filterValue === ''\n                  ? intl.formatMessage(orderProcessesMessages.noOrderProcesses)\n                  : intl.formatMessage(filteringMessages.noResultsDescription)\n              }\n            />\n          )}\n          activeFiltersConfig={{\n            filters: prepareChips(filterValue, intl),\n            onDelete: () => handleFilterChange('')\n          }}\n        />\n      </OrderProcessTableContext.Provider>\n    </Fragment>\n  );\n};\n\nexport default OrderProcesses;\n"],"sourceRoot":""}