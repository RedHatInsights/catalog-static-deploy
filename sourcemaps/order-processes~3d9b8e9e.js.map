{"version":3,"sources":["webpack:///./src/utilities/async-form-validator.js","webpack:///./src/redux/actions/order-process-actions.js","webpack:///./src/smart-components/order-process/order-process-table-helpers.js","webpack:///./src/presentational-components/shared/table-toolbar-view.js","webpack:///./src/presentational-components/shared/table-empty-state.js","webpack:///./src/smart-components/order-process/add-order-process-modal.js","webpack:///./src/smart-components/order-process/order-processes.js"],"names":["asyncFunction","debounceTime","options","onlyResolvesLast","awesomeDebouncePromise","fetchOrderProcesses","pagination","dispatch","getState","orderProcessReducer","sortBy","orderProcesses","filterValue","finalPagination","meta","limit","offset","type","ActionTypes","payload","OrderProcessHelper","setFilterValueOrderProcesses","createRows","data","reduce","acc","key","id","name","description","created_at","isOpen","cells","timeAgo","TableToolbarView","columns","fetchData","toolbarButtons","actionResolver","routes","plural","onFilterChange","isLoading","renderEmptyState","onSort","activeFiltersConfig","filterConfig","intl","useIntl","useState","rows","setRows","useEffect","paginationConfig","itemCount","count","page","getCurrentPage","perPage","onSetPage","_e","getNewPage","onPerPageSelect","size","isDisabled","Section","page-type","PrimaryToolbar","className","actionsConfig","dropdownProps","position","actions","items","label","formatMessage","defaultMessage","filterValues","placeholder","orderProcessesMessages","orderProcessesFilter","onChange","_event","value","length","Table","aria-label","dropDirection","variant","isCompact","propTypes","func","isRequired","array","shape","number","string","singular","bool","object","defaultProps","requests","defaultSettings","isSelectable","TableEmptyState","title","Icon","PrimaryAction","renderDescription","EmptyTable","centered","EmptyState","EmptyStateIcon","icon","TextContent","Text","component","TextVariants","h1","EmptyStateBody","EmptyStateSecondaryActions","PropTypes","any","AddOrderProcess","useDispatch","push","useHistory","onCancel","ORDER_PROCESSES_ROUTE","Modal","onClose","formsMessages","createOrderProcessTitle","onSubmit","values","processData","notifications","fulfilled","addProcessSuccessTitle","addProcessSuccessDescription","addOrderProcess","then","schema","createOrderProcessSchema","disableSubmit","labelMessages","transforms","sortable","created","debouncedFilter","asyncFormValidator","filter","filteringCallback","prepareChips","category","chips","orderProcessesState","state","action","isFetching","isFiltering","OrderProcesses","useSelector","filterValueRedux","shallowEqual","useReducer","initialState","stateDispatch","updateOrderProcesses","insights","chrome","appNavClick","secondaryNav","scrollToTop","handleFilterChange","index","direction","property","sortOrderProcesses","exact","path","ADD_ORDER_PROCESS_ROUTE","render","props","postMethod","titlePlural","titleSingular","orderProcess","ToolbarItem","to","pathname","Button","noOrderProcesses","filteringMessages","noResultsFound","SearchIcon","onClick","clearFilters","noResultsDescription","filters","onDelete"],"mappings":"2FAAA,aAEe,aACbA,GADa,IAEbC,EAFa,uDAEE,IACfC,EAHa,uDAGH,CAAEC,kBAAkB,GAHjB,OAIVC,YAAuBJ,EAAeC,EAAcC,K,2NCF5CG,EAAsB,SAACC,GAAD,OAAgB,SAACC,EAAUC,GAAa,MAKrEA,IAAWC,oBAHbC,EAFuE,EAEvEA,OACAC,EAHuE,EAGvEA,eACAC,EAJuE,EAIvEA,YAGEC,EAAkBP,EAEtB,IAAKA,GAAcK,EAAgB,OACPA,EAAeG,KACzCD,EAAkB,CAAEE,MAFa,EACzBA,MACmBC,OAFM,EAClBA,QAIjB,OAAOT,EAAS,CACdU,KAAMC,IACNC,QAASC,IACPR,EACAC,EACAH,OA4BOW,EAA+B,SAACT,GAAD,MAAkB,CAC5DK,KAAMC,IACNC,QAASP,I,yBCnDEU,EAAa,SAACC,GAAD,OACxBA,EAAKC,QACH,SAACC,EAAD,EAA6CC,GAA7C,IAAQC,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,YAAaC,EAA/B,EAA+BA,WAA/B,oBACKL,GADL,CAEE,CACEE,KACAD,MACAK,QAAQ,EACRC,MAAO,CAACJ,EAAMC,EAAaI,YAAQH,SAGvC,K,wpBCCG,IAAMI,EAAmB,SAAC,GAkB3B,IAjBJZ,EAiBI,EAjBJA,WACAa,EAgBI,EAhBJA,QACAC,EAeI,EAfJA,UACAC,EAcI,EAdJA,eACAd,EAaI,EAbJA,KACAe,EAYI,EAZJA,eACAC,EAWI,EAXJA,OACAC,EAUI,EAVJA,OACAlC,EASI,EATJA,WACAM,EAQI,EARJA,YACA6B,EAOI,EAPJA,eACAC,EAMI,EANJA,UACAC,EAKI,EALJA,iBACAjC,EAII,EAJJA,OACAkC,EAGI,EAHJA,OACAC,EAEI,EAFJA,oBACAC,EACI,EADJA,aAEMC,EAAOC,cADT,EAEoBC,mBAAS,IAF7B,WAEGC,EAFH,KAESC,EAFT,KAIJC,qBAAU,WACRD,EAAQ7B,EAAWC,MAClB,CAACA,IAEJ,IAAM8B,EAAmB,CACvBC,UAAWhD,EAAWiD,MACtBC,KAAMC,YAAenD,EAAWS,MAAOT,EAAWU,QAClD0C,QAASpD,EAAWS,MACpB4C,UAAW,SAACC,EAAIJ,GAAL,OACTpB,EAAU,EAAD,KAAM9B,GAAN,IAAkBU,OAAQ6C,YAAWL,EAAMlD,EAAWS,WACjE+C,gBAAiB,SAACF,EAAIG,GAAL,OAAc3B,EAAU,EAAD,KAAM9B,GAAN,IAAkBS,MAAOgD,MACjEC,WAAYtB,GAyCd,OACE,kBAACuB,EAAA,QAAD,CAAShD,KAAK,UAAUiD,YAAA,cAAkB1B,GAAUb,GAAE,cAASa,IAC5DD,IAvCH,kBAAC4B,EAAA,eAAD,KACEC,UAAU,YACV9D,WAAY+C,GACPhB,GAAkB,CACrBgC,cAAe,CACbC,cAAe,CACbC,SAAU,SAEZC,QAAS,CAACnC,OARhB,CAWES,aAAc,CACZ2B,MAAO,CACL,CACEC,MAAO3B,EAAK4B,cAAc,CACxBhD,GAAI,OACJiD,eAAgB,SAElBC,aAAc,CACZlD,GAAI,iBACJmD,YAAa/B,EAAK4B,cAChBI,IAAuBC,sBAEzB,aAAcjC,EAAK4B,cACjBI,IAAuBC,sBAEzBC,SAAU,SAACC,EAAQC,GAAT,OAAmB1C,EAAe0C,IAC5CA,MAAOvE,KAfR,WAkBAkC,KAGPD,oBAAqBA,KAQpBH,GAAa,kBAAC,IAAD,MACZA,GAA6B,IAAhBQ,EAAKkC,OAGlB,kBAAC,WAAD,MACI1C,GACA,kBAAC2C,EAAA,EAAD,CACEC,aAAA,UAAe9C,EAAf,UACAU,KAAMA,EACNlB,MAAOG,EACPG,eAAgBA,EAChB8B,UAAU,YACV1D,OAAQA,EACRkC,OAAQA,GAER,kBAAC,IAAD,MACA,kBAAC,IAAD,OAGHtC,EAAWiD,MAAQ,GAClB,kBAACY,EAAA,eAAD,CACEC,UAAU,wBACV9D,WAAU,OACL+C,GADK,IAERkC,cAAe,KACfC,QAAS,SACTC,WAAW,OAxBnB9C,MAkCRT,EAAiBwD,UAAY,CAC3BpE,WAAYoE,IAAUC,KAAKC,WAC3BzD,QAASuD,IAAUG,MAAMD,WACzBvD,eAAgBqD,IAAUC,KAC1BvD,UAAWsD,IAAUC,KAAKC,WAC1BrE,KAAMmE,IAAUG,MAChBvF,WAAYoF,IAAUI,MAAM,CAC1B/E,MAAO2E,IAAUK,OACjB/E,OAAQ0E,IAAUK,OAClBxC,MAAOmC,IAAUK,SAEnBvD,OAAQkD,IAAUM,OAClBC,SAAUP,IAAUM,OACpBzD,OAAQmD,IAAUC,KAClBrD,eAAgBoD,IAAUC,KAC1B/E,YAAa8E,IAAUM,OACvBvD,eAAgBiD,IAAUC,KAC1BjD,UAAWgD,IAAUQ,KACrBvD,iBAAkB+C,IAAUC,KAC5BjF,OAAQgF,IAAUS,OAClBvD,OAAQ8C,IAAUC,KAClB9C,oBAAqB6C,IAAUS,OAC/BrD,aAAc4C,IAAUG,OAG1B3D,EAAiBkE,aAAe,CAC9BC,SAAU,GACV3D,WAAW,EACXpC,WAAYgG,IACZC,aAAc,KACdhE,OAAQ,kBAAM,MACdI,iBAAkB,kBAAM,MACxBG,aAAc,I,mECnJV0D,EAAkB,SAAC,GAAD,IACtBC,EADsB,EACtBA,MACAC,EAFsB,EAEtBA,KACA7E,EAHsB,EAGtBA,YACA8E,EAJsB,EAItBA,cACAC,EALsB,EAKtBA,kBALsB,OAOtB,kBAACC,EAAA,WAAD,CAAYC,UAAQ,EAACxB,aAAW,cAC9B,kBAACyB,EAAA,WAAD,CAAY3C,UAAU,6BACpB,kBAAC4C,EAAA,eAAD,CAAgBC,KAAMP,IACtB,kBAACQ,EAAA,YAAD,KACE,kBAACC,EAAA,KAAD,CAAMC,UAAWC,eAAaC,IAAKb,IAErC,kBAACc,EAAA,eAAD,KACG1F,EACA+E,GAAqBA,KAExB,kBAACY,EAAA,2BAAD,KACGb,GAAiB,kBAACA,EAAD,UAM1BH,EAAgBd,UAAY,CAC1Be,MAAOgB,IAAUzB,OAAOJ,WACxBc,KAAMe,IAAUC,IAAI9B,WACpB/D,YAAa4F,IAAUzB,OAAOJ,WAC9Be,cAAec,IAAUC,IACzBd,kBAAmBa,IAAU9B,MAGhBa,Q,4ECCAmB,GAhCS,WACtB,IAAMpH,EAAWqH,wBACTC,EAASC,cAATD,KACF9E,EAAOC,cAUP+E,EAAW,kBAAMF,EAAKG,OAE5B,OACE,kBAACC,GAAA,MAAD,CACElG,QAAM,EACNmG,QAASH,EACTtB,MAAO1D,EAAK4B,cAAcwD,KAAcC,yBACxC5C,QAAQ,SAER,kBAAC,KAAD,CACE6C,SAlBS,SAACC,GAGd,OAFAT,EAAKG,MAEEzH,EJMoB,SAACgI,EAAaxF,GAAd,MAAwB,CACrD9B,KAAMC,IACNC,QAASC,IAAmCmH,GAC5CzH,KAAM,CACJ0H,cAAe,CACbC,UAAW,CACTjD,QAAS,UACTiB,MAAO1D,EAAK4B,cACVI,IAAuB2D,wBAEzB7G,YAAakB,EAAK4B,cAChBI,IAAuB4D,kCIjBbC,CAAgBN,EAAQvF,IAAO8F,MAAK,kBAClDtI,EAASF,SAeP0H,SAAUA,EACVe,OAAQC,aAAyBhG,GACjCiG,cAAe,CAAC,kB,qkBCPxB,IAAM7G,GAAU,SAACY,GAAD,MAAU,CACxB,CACE0D,MAAO1D,EAAK4B,cAAcsE,IAAcrH,MACxCsH,WAAY,CAACC,MAEf,CACE1C,MAAO1D,EAAK4B,cAAcsE,IAAcpH,aACxCqH,WAAY,CAACC,MAEf,CACE1C,MAAO1D,EAAK4B,cAAcsE,IAAcG,SACxCF,WAAY,CAACC,QAIXE,GAAkBC,aACtB,SAACC,EAAQhJ,EAAUiJ,GAA8C,IAA3B1I,EAA2B,uDAApBwF,IAG3C,OAFAkD,GAAkB,GAClBjJ,EAASc,EAA6BkI,IAC/BhJ,EAASF,EAAoBS,IAAO+H,MAAK,kBAC9CW,GAAkB,QAGtB,KAGIC,GAAe,SAAC7I,EAAamC,GAAd,OACnBnC,EACI,CACE,CACE8I,SAAU3G,EAAK4B,cAAcsE,IAAcrH,MAC3CF,IAAK,OACLiI,MAAO,CAAC,CAAE/H,KAAMhB,EAAauE,MAAOvE,MAGxC,IASAgJ,GAAsB,SAACC,EAAOC,GAClC,OAAQA,EAAO7I,MACb,IAAK,cACH,gBAAY4I,GAAZ,IAAmBE,WAAYD,EAAO3I,UACxC,IAAK,iBACH,gBAAY0I,GAAZ,IAAmBjJ,YAAakJ,EAAO3I,UACzC,IAAK,mBACH,gBAAY0I,GAAZ,IAAmBG,YAAaF,EAAO3I,UACzC,QACE,OAAO0I,IA6IEI,UAzIQ,WAAM,MAKvBC,uBACF,oBACEzJ,oBADF,MAMO,CAAEE,eANT,EAEIA,eAIqBD,OANzB,EAGIA,OAG6ByJ,iBANjC,EAIIvJ,eAGJwJ,gBAbyB,IAEzBzJ,eAAkBY,EAFO,EAEPA,KAAMT,EAFC,EAEDA,KACxBJ,EAHyB,EAGzBA,OACAyJ,EAJyB,EAIzBA,iBAJyB,EAeuCE,qBAChET,GApCiB,eAAChJ,EAAD,uDAAe,GAAf,MAAuB,CAC1CA,cACAmB,QAAQ,EACRgI,YAAY,EACZC,aAAa,GAiCXM,CAAaH,IAjBY,kBAelBvJ,EAfkB,EAelBA,YAAamJ,EAfK,EAeLA,WAAYC,EAfP,EAeOA,YAAeO,EAftB,KAoBrBhK,EAAWqH,wBACX7E,EAAOC,cAEPwH,EAAuB,SAAClK,GAE5B,OADAiK,EAAc,CAAEtJ,KAAM,cAAeE,SAAS,IACvCZ,EAASF,EAAoBC,IACjCuI,MAAK,kBAAM0B,EAAc,CAAEtJ,KAAM,cAAeE,SAAS,OADrD,OAEE,kBAAMoJ,EAAc,CAAEtJ,KAAM,cAAeE,SAAS,QAG/DiC,qBAAU,WACRqH,SAASC,OAAOC,YAAY,CAAEhJ,GAAI,kBAAmBiJ,cAAc,IACnEJ,EAAqBlE,KACrBuE,gBACC,IAEH,IAAMC,EAAqB,SAAC3F,GAC1BoF,EAAc,CAAEtJ,KAAM,iBAAkBE,QAASgE,IACjDkE,GACElE,EACA5E,GACA,SAACyJ,GAAD,OACEO,EAAc,CAAEtJ,KAAM,mBAAoBE,QAAS6I,MAJxC,GAAC,MAKTlJ,GALQ,IAKFE,OAAQ,MAuCvB,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,KACE,kBAACkG,EAAA,YAAD,CAAa9C,UAAU,cACrB,kBAAC+C,EAAA,KAAD,CAAMC,UAAWC,eAAaC,IAC3BvE,EAAK4B,cAAcI,IAAuB0B,UAIjD,kBAAC,EAAD,CACE/F,OAAQA,EACRkC,OApCS,SAACgB,EAAImH,EAAOC,EAAZ,GAAwC,IAAfC,EAAe,EAAfA,SAEtC,OADA1K,ELtG8B,SAACG,GAAD,MAAa,CAC7CO,KAAMC,IACNC,QAAST,GKoGEwK,CAAmB,CAAEH,QAAOC,YAAWC,cACzCT,KAmCHjJ,KAAMA,EACND,WAAYA,EACZiB,OAjDS,kBACb,kBAAC,IAAD,CACE4I,OAAK,EACLC,KAAMC,KACNC,OAAQ,SAACC,GAAD,OACN,kBAAC,GAAD,OAAqBA,EAArB,CAA4BC,WAAYhB,SA6CxCrI,QAASA,GAAQY,GACjBX,UAAWoI,EACXiB,YAAa1I,EAAK4B,cAAcI,IAAuBpE,gBACvD+K,cAAe3I,EAAK4B,cAAcI,IAAuB4G,cACzDrL,WAAYQ,EACZF,YAAaA,EACb6B,eAAgBqI,EAChBpI,UAAWqH,GAAcC,EACzB3H,eA3CiB,kBACrB,kBAAC,KAAD,CAAoB+B,UAAS,0BAC3B,kBAACwH,EAAA,YAAD,KACE,kBAAC,IAAD,CACEjK,GAAG,yBACHkK,GAAI,CAAEC,SAAUT,OAEhB,kBAACU,EAAA,OAAD,CACEvG,QAAQ,UACRF,aAAYvC,EAAK4B,cACfwD,KAAcC,0BAGfrF,EAAK4B,cAAcwD,KAAcC,8BA+BtCzF,iBAAkB,kBAChB,kBAAC,EAAD,CACE8D,MACkB,KAAhB7F,EACImC,EAAK4B,cAAcI,IAAuBiH,kBAC1CjJ,EAAK4B,cAAcsH,IAAkBC,gBAE3CxF,KAAMyF,IACNxF,cAAe,iBACG,KAAhB/F,EACE,kBAACmL,EAAA,OAAD,CAAQK,QAAS,kBAAMtB,EAAmB,KAAKtF,QAAQ,QACpDzC,EAAK4B,cAAcsH,IAAkBI,eAEtC,MAENxK,YACkB,KAAhBjB,EACImC,EAAK4B,cAAcI,IAAuBiH,kBAC1CjJ,EAAK4B,cAAcsH,IAAkBK,yBAI/CzJ,oBAAqB,CACnB0J,QAAS9C,GAAa7I,EAAamC,GACnCyJ,SAAU,kBAAM1B,EAAmB","file":"js/order-processes~3d9b8e9e.d6a1d658a09c68d2c209.js","sourcesContent":["import awesomeDebouncePromise from 'awesome-debounce-promise';\n\nexport default (\n  asyncFunction,\n  debounceTime = 250,\n  options = { onlyResolvesLast: false }\n) => awesomeDebouncePromise(asyncFunction, debounceTime, options);\n","import * as ActionTypes from '../action-types';\nimport * as OrderProcessHelper from '../../helpers/order-process/order-process-helper';\nimport orderProcessesMessages from '../../messages/order-processes.messages';\n\nexport const fetchOrderProcesses = (pagination) => (dispatch, getState) => {\n  const {\n    sortBy,\n    orderProcesses,\n    filterValue\n  } = getState().orderProcessReducer;\n\n  let finalPagination = pagination;\n\n  if (!pagination && orderProcesses) {\n    const { limit, offset } = orderProcesses.meta;\n    finalPagination = { limit, offset };\n  }\n\n  return dispatch({\n    type: ActionTypes.FETCH_ORDER_PROCESSES,\n    payload: OrderProcessHelper.listOrderProcesses(\n      filterValue,\n      finalPagination,\n      sortBy\n    )\n  });\n};\n\nexport const addOrderProcess = (processData, intl) => ({\n  type: ActionTypes.ADD_ORDER_PROCESS,\n  payload: OrderProcessHelper.addOrderProcess(processData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(\n          orderProcessesMessages.addProcessSuccessTitle\n        ),\n        description: intl.formatMessage(\n          orderProcessesMessages.addProcessSuccessDescription\n        )\n      }\n    }\n  }\n});\n\nexport const sortOrderProcesses = (sortBy) => ({\n  type: ActionTypes.SORT_ORDER_PROCESSES,\n  payload: sortBy\n});\n\nexport const setFilterValueOrderProcesses = (filterValue) => ({\n  type: ActionTypes.SET_FILTER_ORDER_PROCESSES,\n  payload: filterValue\n});\n","import { timeAgo } from '../../helpers/shared/helpers';\n\nexport const createRows = (data) =>\n  data.reduce(\n    (acc, { id, name, description, created_at }, key) => [\n      ...acc,\n      {\n        id,\n        key,\n        isOpen: false,\n        cells: [name, description, timeAgo(created_at)]\n      }\n    ],\n    []\n  );\n","import React, { Fragment, useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport {\n  defaultSettings,\n  getCurrentPage,\n  getNewPage\n} from '../../helpers/shared/pagination';\nimport { ListLoader } from './loader-placeholders';\nimport { useIntl } from 'react-intl';\nimport { Section } from '@redhat-cloud-services/frontend-components/components/cjs/Section';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport orderProcessesMessages from '../../messages/order-processes.messages';\n\nexport const TableToolbarView = ({\n  createRows,\n  columns,\n  fetchData,\n  toolbarButtons,\n  data,\n  actionResolver,\n  routes,\n  plural,\n  pagination,\n  filterValue,\n  onFilterChange,\n  isLoading,\n  renderEmptyState,\n  sortBy,\n  onSort,\n  activeFiltersConfig,\n  filterConfig\n}) => {\n  const intl = useIntl();\n  const [rows, setRows] = useState([]);\n\n  useEffect(() => {\n    setRows(createRows(data));\n  }, [data]);\n\n  const paginationConfig = {\n    itemCount: pagination.count,\n    page: getCurrentPage(pagination.limit, pagination.offset),\n    perPage: pagination.limit,\n    onSetPage: (_e, page) =>\n      fetchData({ ...pagination, offset: getNewPage(page, pagination.limit) }),\n    onPerPageSelect: (_e, size) => fetchData({ ...pagination, limit: size }),\n    isDisabled: isLoading\n  };\n\n  const renderToolbar = () => (\n    <PrimaryToolbar\n      className=\"pf-u-p-lg\"\n      pagination={paginationConfig}\n      {...(toolbarButtons && {\n        actionsConfig: {\n          dropdownProps: {\n            position: 'right'\n          },\n          actions: [toolbarButtons()]\n        }\n      })}\n      filterConfig={{\n        items: [\n          {\n            label: intl.formatMessage({\n              id: 'name',\n              defaultMessage: 'Name'\n            }),\n            filterValues: {\n              id: 'filter-by-name',\n              placeholder: intl.formatMessage(\n                orderProcessesMessages.orderProcessesFilter\n              ),\n              'aria-label': intl.formatMessage(\n                orderProcessesMessages.orderProcessesFilter\n              ),\n              onChange: (_event, value) => onFilterChange(value),\n              value: filterValue\n            }\n          },\n          ...filterConfig\n        ]\n      }}\n      activeFiltersConfig={activeFiltersConfig}\n    />\n  );\n\n  return (\n    <Section type=\"content\" page-type={`tab-${plural}`} id={`tab-${plural}`}>\n      {routes()}\n      {renderToolbar(isLoading)}\n      {isLoading && <ListLoader />}\n      {!isLoading && rows.length === 0 ? (\n        renderEmptyState()\n      ) : (\n        <Fragment>\n          {!isLoading && (\n            <Table\n              aria-label={`${plural} table`}\n              rows={rows}\n              cells={columns}\n              actionResolver={actionResolver}\n              className=\"pf-u-pt-0\"\n              sortBy={sortBy}\n              onSort={onSort}\n            >\n              <TableHeader />\n              <TableBody />\n            </Table>\n          )}\n          {pagination.count > 0 && (\n            <PrimaryToolbar\n              className=\"pf-u-pl-lg pf-u-pr-lg\"\n              pagination={{\n                ...paginationConfig,\n                dropDirection: 'up',\n                variant: 'bottom',\n                isCompact: false\n              }}\n            />\n          )}\n        </Fragment>\n      )}\n    </Section>\n  );\n};\n\nTableToolbarView.propTypes = {\n  createRows: propTypes.func.isRequired,\n  columns: propTypes.array.isRequired,\n  toolbarButtons: propTypes.func,\n  fetchData: propTypes.func.isRequired,\n  data: propTypes.array,\n  pagination: propTypes.shape({\n    limit: propTypes.number,\n    offset: propTypes.number,\n    count: propTypes.number\n  }),\n  plural: propTypes.string,\n  singular: propTypes.string,\n  routes: propTypes.func,\n  actionResolver: propTypes.func,\n  filterValue: propTypes.string,\n  onFilterChange: propTypes.func,\n  isLoading: propTypes.bool,\n  renderEmptyState: propTypes.func,\n  sortBy: propTypes.object,\n  onSort: propTypes.func,\n  activeFiltersConfig: propTypes.object,\n  filterConfig: propTypes.array\n};\n\nTableToolbarView.defaultProps = {\n  requests: [],\n  isLoading: false,\n  pagination: defaultSettings,\n  isSelectable: null,\n  routes: () => null,\n  renderEmptyState: () => null,\n  filterConfig: []\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  Text,\n  TextContent,\n  TextVariants\n} from '@patternfly/react-core';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/components/cjs/EmptyTable';\n\nconst TableEmptyState = ({\n  title,\n  Icon,\n  description,\n  PrimaryAction,\n  renderDescription\n}) => (\n  <EmptyTable centered aria-label=\"No records\">\n    <EmptyState className=\"pf-u-ml-auto pf-u-mr-auto\">\n      <EmptyStateIcon icon={Icon} />\n      <TextContent>\n        <Text component={TextVariants.h1}>{title}</Text>\n      </TextContent>\n      <EmptyStateBody>\n        {description}\n        {renderDescription && renderDescription()}\n      </EmptyStateBody>\n      <EmptyStateSecondaryActions>\n        {PrimaryAction && <PrimaryAction />}\n      </EmptyStateSecondaryActions>\n    </EmptyState>\n  </EmptyTable>\n);\n\nTableEmptyState.propTypes = {\n  title: PropTypes.string.isRequired,\n  Icon: PropTypes.any.isRequired,\n  description: PropTypes.string.isRequired,\n  PrimaryAction: PropTypes.any,\n  renderDescription: PropTypes.func\n};\n\nexport default TableEmptyState;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { Modal } from '@patternfly/react-core';\nimport { ORDER_PROCESSES_ROUTE } from '../../constants/routes';\nimport createOrderProcessSchema from '../../forms/create-order-process.schema';\nimport formsMessages from '../../messages/forms.messages';\nimport {\n  addOrderProcess,\n  fetchOrderProcesses\n} from '../../redux/actions/order-process-actions';\nimport FormRenderer from '../common/form-renderer';\n\nconst AddOrderProcess = () => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const intl = useIntl();\n\n  const onSave = (values) => {\n    push(ORDER_PROCESSES_ROUTE);\n\n    return dispatch(addOrderProcess(values, intl)).then(() =>\n      dispatch(fetchOrderProcesses())\n    );\n  };\n\n  const onCancel = () => push(ORDER_PROCESSES_ROUTE);\n\n  return (\n    <Modal\n      isOpen\n      onClose={onCancel}\n      title={intl.formatMessage(formsMessages.createOrderProcessTitle)}\n      variant=\"small\"\n    >\n      <FormRenderer\n        onSubmit={onSave}\n        onCancel={onCancel}\n        schema={createOrderProcessSchema(intl)}\n        disableSubmit={['validating']}\n      />\n    </Modal>\n  );\n};\n\nexport default AddOrderProcess;\n","import React, { Fragment, useEffect, useReducer } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Link, Route } from 'react-router-dom';\nimport {\n  Button,\n  Text,\n  TextContent,\n  TextVariants,\n  ToolbarItem\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { sortable } from '@patternfly/react-table';\nimport {\n  fetchOrderProcesses,\n  sortOrderProcesses,\n  setFilterValueOrderProcesses\n} from '../../redux/actions/order-process-actions';\nimport { createRows } from './order-process-table-helpers';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport TopToolbar from '../../presentational-components/shared/top-toolbar';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport TableEmptyState from '../../presentational-components/shared/table-empty-state';\nimport { useIntl } from 'react-intl';\nimport orderProcessesMessages from '../../messages/order-processes.messages';\nimport filteringMessages from '../../messages/filtering.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport { StyledToolbarGroup } from '../../presentational-components/styled-components/toolbars';\nimport { ADD_ORDER_PROCESS_ROUTE } from '../../constants/routes';\nimport AddOrderProcess from './add-order-process-modal';\nimport formsMessages from '../../messages/forms.messages';\n\nconst columns = (intl) => [\n  {\n    title: intl.formatMessage(labelMessages.name),\n    transforms: [sortable]\n  },\n  {\n    title: intl.formatMessage(labelMessages.description),\n    transforms: [sortable]\n  },\n  {\n    title: intl.formatMessage(labelMessages.created),\n    transforms: [sortable]\n  }\n];\n\nconst debouncedFilter = asyncFormValidator(\n  (filter, dispatch, filteringCallback, meta = defaultSettings) => {\n    filteringCallback(true);\n    dispatch(setFilterValueOrderProcesses(filter, meta));\n    return dispatch(fetchOrderProcesses(meta)).then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst prepareChips = (filterValue, intl) =>\n  filterValue\n    ? [\n        {\n          category: intl.formatMessage(labelMessages.name),\n          key: 'name',\n          chips: [{ name: filterValue, value: filterValue }]\n        }\n      ]\n    : [];\n\nconst initialState = (filterValue = '') => ({\n  filterValue,\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false\n});\n\nconst orderProcessesState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return { ...state, filterValue: action.payload };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst OrderProcesses = () => {\n  const {\n    orderProcesses: { data, meta },\n    sortBy,\n    filterValueRedux\n  } = useSelector(\n    ({\n      orderProcessReducer: {\n        orderProcesses,\n        sortBy,\n        filterValue: filterValueRedux\n      }\n    }) => ({ orderProcesses, sortBy, filterValueRedux }),\n    shallowEqual\n  );\n  const [{ filterValue, isFetching, isFiltering }, stateDispatch] = useReducer(\n    orderProcessesState,\n    initialState(filterValueRedux)\n  );\n\n  const dispatch = useDispatch();\n  const intl = useIntl();\n\n  const updateOrderProcesses = (pagination) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    return dispatch(fetchOrderProcesses(pagination))\n      .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n      .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  useEffect(() => {\n    insights.chrome.appNavClick({ id: 'order-processes', secondaryNav: true });\n    updateOrderProcesses(defaultSettings);\n    scrollToTop();\n  }, []);\n\n  const handleFilterChange = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      value,\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering }),\n      { ...meta, offset: 0 }\n    );\n  };\n\n  const routes = () => (\n    <Route\n      exact\n      path={ADD_ORDER_PROCESS_ROUTE}\n      render={(props) => (\n        <AddOrderProcess {...props} postMethod={updateOrderProcesses} />\n      )}\n    />\n  );\n\n  const onSort = (_e, index, direction, { property }) => {\n    dispatch(sortOrderProcesses({ index, direction, property }));\n    return updateOrderProcesses();\n  };\n\n  const toolbarButtons = () => (\n    <StyledToolbarGroup className={`pf-u-pl-lg top-toolbar`}>\n      <ToolbarItem>\n        <Link\n          id=\"add-order-process-link\"\n          to={{ pathname: ADD_ORDER_PROCESS_ROUTE }}\n        >\n          <Button\n            variant=\"primary\"\n            aria-label={intl.formatMessage(\n              formsMessages.createOrderProcessTitle\n            )}\n          >\n            {intl.formatMessage(formsMessages.createOrderProcessTitle)}\n          </Button>\n        </Link>\n      </ToolbarItem>\n    </StyledToolbarGroup>\n  );\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TextContent className=\"pf-u-ml-md\">\n          <Text component={TextVariants.h1}>\n            {intl.formatMessage(orderProcessesMessages.title)}\n          </Text>\n        </TextContent>\n      </TopToolbar>\n      <TableToolbarView\n        sortBy={sortBy}\n        onSort={onSort}\n        data={data}\n        createRows={createRows}\n        routes={routes}\n        columns={columns(intl)}\n        fetchData={updateOrderProcesses}\n        titlePlural={intl.formatMessage(orderProcessesMessages.orderProcesses)}\n        titleSingular={intl.formatMessage(orderProcessesMessages.orderProcess)}\n        pagination={meta}\n        filterValue={filterValue}\n        onFilterChange={handleFilterChange}\n        isLoading={isFetching || isFiltering}\n        toolbarButtons={toolbarButtons}\n        renderEmptyState={() => (\n          <TableEmptyState\n            title={\n              filterValue === ''\n                ? intl.formatMessage(orderProcessesMessages.noOrderProcesses)\n                : intl.formatMessage(filteringMessages.noResultsFound)\n            }\n            Icon={SearchIcon}\n            PrimaryAction={() =>\n              filterValue !== '' ? (\n                <Button onClick={() => handleFilterChange('')} variant=\"link\">\n                  {intl.formatMessage(filteringMessages.clearFilters)}\n                </Button>\n              ) : null\n            }\n            description={\n              filterValue === ''\n                ? intl.formatMessage(orderProcessesMessages.noOrderProcesses)\n                : intl.formatMessage(filteringMessages.noResultsDescription)\n            }\n          />\n        )}\n        activeFiltersConfig={{\n          filters: prepareChips(filterValue, intl),\n          onDelete: () => handleFilterChange('')\n        }}\n      />\n    </Fragment>\n  );\n};\n\nexport default OrderProcesses;\n"],"sourceRoot":""}