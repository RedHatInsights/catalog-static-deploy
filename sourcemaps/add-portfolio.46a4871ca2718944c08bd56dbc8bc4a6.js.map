{"version":3,"file":"js/add-portfolio.f9c0bd9fbbc26666fb9f.js","mappings":"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","sources":["webpack:///./src/forms/portfolio-form.schema.ts","webpack:///./src/smart-components/portfolio/add-portfolio-modal.tsx"],"sourcesContent":["import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Schema from '@data-driven-forms/react-form-renderer/common-types/schema';\nimport { DEFAULT_MAX_LENGTH } from '../utilities/constants';\n\nimport asyncFormValidator from '../utilities/async-form-validator';\nimport { fetchPortfolioByName } from '../helpers/portfolio/portfolio-helper';\nimport { fetchPortfolioByName as fetchPortfolioByNameS } from '../helpers/portfolio/portfolio-helper-s';\nimport { AnyObject } from '../types/common-types';\n\nexport const validateName = (name: string, portfolioId: string) => {\n  if (window.catalog?.standalone) {\n    fetchPortfolioByNameS(name).then(({ results }) => {\n      if (!name || name.trim().length === 0) {\n        throw 'Required';\n      }\n\n      const conflict = results.find(\n        (portfolio) => portfolio.name === name && portfolio.id !== portfolioId\n      );\n      if (conflict) {\n        throw 'Name has already been taken';\n      }\n    });\n  } else {\n    fetchPortfolioByName(name).then(({ data }) => {\n      if (!name || name.trim().length === 0) {\n        throw 'Required';\n      }\n\n      const conflict = data.find(\n        (portfolio) => portfolio.name === name && portfolio.id !== portfolioId\n      );\n      if (conflict) {\n        throw 'Name has already been taken';\n      }\n    });\n  }\n};\n\nconst debouncedValidator = asyncFormValidator(validateName);\n\n/**\n * Creates a data-driven-form schema for adding/editing portfolio\n * @param {bool} newRecord sets the variant of portfolio form\n * @param openApiSchema\n * @param portfolioId\n */\nexport const createPortfolioSchema = (\n  openApiSchema: AnyObject,\n  portfolioId: string\n): Schema => ({\n  fields: [\n    {\n      label: 'schemas.portfolio.name',\n      name: 'name',\n      component: componentTypes.TEXT_FIELD,\n      isRequired: true,\n      maxLength:\n        openApiSchema?.components?.schemas?.Portfolio?.properties?.name\n          ?.maxLength || DEFAULT_MAX_LENGTH,\n      validate: [(value: string) => debouncedValidator(value, portfolioId)]\n    },\n    {\n      label: 'schemas.portfolio.description',\n      component: componentTypes.TEXTAREA,\n      name: 'description'\n    }\n  ]\n});\n","/* eslint-disable react/prop-types */\nimport React, { ReactNode, useContext, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FormRenderer from '../common/form-renderer';\nimport { createPortfolioSchema } from '../../forms/portfolio-form.schema';\nimport {\n  addPortfolio,\n  updatePortfolio\n} from '../../redux/actions/portfolio-actions';\nimport {\n  addPortfolio as addPortfolioS,\n  updatePortfolio as updatePortfolioS\n} from '../../redux/actions/portfolio-actions-s';\nimport useQuery from '../../utilities/use-query';\nimport { getPortfolioFromState } from '../../helpers/portfolio/portfolio-helper';\nimport { getPortfolioFromState as getPortfolioFromStateS } from '../../helpers/portfolio/portfolio-helper-s';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\nimport { UnauthorizedRedirect } from '../error-pages/error-redirects';\nimport { PORTFOLIO_ROUTE } from '../../constants/routes';\nimport UserContext from '../../user-context';\nimport actionMessages from '../../messages/actions.messages';\nimport portfolioMessages from '../../messages/portfolio.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport { CatalogLinkTo } from '../common/catalog-link';\nimport { PaginationConfiguration } from '../../helpers/shared/pagination';\nimport { CatalogRootState } from '../../types/redux';\nimport { Portfolio } from '@redhat-cloud-services/catalog-client';\nimport { InternalPortfolio } from '../../types/common-types';\n\nexport interface AddPortfolioModalProps {\n  removeQuery?: boolean;\n  closeTarget: CatalogLinkTo;\n  viewState?: PaginationConfiguration;\n}\nconst AddPortfolioModal: React.ComponentType<AddPortfolioModalProps> = ({\n  removeQuery,\n  closeTarget,\n  viewState\n}) => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const [isOpen, setIsOpen] = useState(true);\n  const { openApiSchema: openApiSchema } = useContext(UserContext);\n  const [{ portfolio: portfolioId }] = useQuery(['portfolio']);\n  const { push } = useEnhancedHistory({\n    removeSearch: removeQuery,\n    keepHash: true\n  });\n  const initialValues = useSelector<\n    CatalogRootState,\n    InternalPortfolio | undefined\n  >(({ portfolioReducer }) =>\n    // eslint-disable-next-line no-undef\n    window.catalog?.standalone\n      ? (getPortfolioFromStateS(portfolioReducer, portfolioId) as\n          | InternalPortfolio\n          | undefined)\n      : (getPortfolioFromState(portfolioReducer, portfolioId) as\n          | InternalPortfolio\n          | undefined)\n  );\n\n  const onAddPortfolio = async (data: Partial<Portfolio>) => {\n    const notification = {\n      variant: 'success',\n      title: formatMessage(portfolioMessages.addSuccessTitle),\n      description: formatMessage(portfolioMessages.addSuccessDescription, {\n        name: data.name,\n        // eslint-disable-next-line react/display-name\n        b: (chunks: ReactNode) => <b key=\"strong\">{chunks}</b>\n      })\n    };\n    const newPortfolio = await dispatch(\n      window.catalog?.standalone\n        ? (addPortfolioS(data, notification) as Promise<{ value: Portfolio }>)\n        : (addPortfolio(data, notification) as Promise<{ value: Portfolio }>)\n    );\n    return newPortfolio && newPortfolio.value && newPortfolio.value.id\n      ? push({\n          pathname: PORTFOLIO_ROUTE,\n          search: `?portfolio=${newPortfolio.value.id}`\n        })\n      : push(closeTarget);\n  };\n\n  const onSubmit = (data: Portfolio) => {\n    if (initialValues) {\n      /**\n       * Fake the redirect by closing the modal\n       */\n      setIsOpen(false);\n      return dispatch(\n        (window.catalog?.standalone\n          ? updatePortfolioS(data, viewState)\n          : (updatePortfolio(data, viewState) as unknown)) as Promise<void>\n      ).then(() =>\n        /**\n         * Redirect only after the update was finished.\n         * This will ensure that API requests are triggered in correct order when chaning the router pathname\n         * */\n        push(closeTarget)\n      );\n    } else {\n      return onAddPortfolio(data);\n    }\n  };\n\n  const editVariant =\n    portfolioId && initialValues && Object.keys(initialValues).length > 0;\n\n  if (initialValues?.metadata?.user_capabilities?.update === false) {\n    return <UnauthorizedRedirect />;\n  }\n\n  const schema = createPortfolioSchema(openApiSchema, portfolioId);\n  return (\n    <FormRenderer\n      schema={schema}\n      onSubmit={onSubmit}\n      onCancel={() => push(closeTarget)}\n      initialValues={{ ...initialValues }}\n      isModal\n      modalProps={{\n        title: portfolioId\n          ? (formatMessage(portfolioMessages.modalEditTitle) as string)\n          : (formatMessage(portfolioMessages.modalCreateTitle) as string),\n        isOpen,\n        onClose: () => push(closeTarget),\n        variant: 'small'\n      }}\n      templateProps={{\n        submitLabel: portfolioId\n          ? formatMessage(actionMessages.save)\n          : formatMessage(labelMessages.create)\n      }}\n    />\n  );\n};\n\nexport default AddPortfolioModal;\n"],"names":["debouncedValidator","name","portfolioId","window","catalog","standalone","then","results","trim","length","find","portfolio","id","data","removeQuery","closeTarget","viewState","formatMessage","dispatch","useDispatch","useState","isOpen","setIsOpen","openApiSchema","useContext","push","removeSearch","keepHash","initialValues","useSelector","portfolioReducer","Object","keys","metadata","user_capabilities","update","schema","fields","label","component","isRequired","maxLength","components","schemas","Portfolio","properties","validate","value","createPortfolioSchema","onSubmit","notification","variant","title","description","b","chunks","key","newPortfolio","pathname","search","onAddPortfolio","onCancel","isModal","modalProps","onClose","templateProps","submitLabel"],"sourceRoot":""}