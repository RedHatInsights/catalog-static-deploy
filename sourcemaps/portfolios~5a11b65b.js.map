{"version":3,"sources":["webpack:///./src/messages/filtering.messages.ts","webpack:///./src/presentational-components/shared/content-gallery-empty-state.tsx","webpack:///./src/presentational-components/styled-components/styled-gallery.tsx","webpack:///./src/smart-components/content-gallery/content-gallery.tsx","webpack:///./src/presentational-components/shared/bottom-pagination-container.tsx","webpack:///./src/presentational-components/shared/card-common.tsx","webpack:///./src/presentational-components/styled-components/ellipsis-text-container.ts","webpack:///./src/presentational-components/styled-components/card.ts","webpack:///./src/utilities/use-is-mounted.js","webpack:///./src/presentational-components/portfolio/portfolio-card-header.tsx","webpack:///./src/presentational-components/portfolio/porfolio-card.tsx","webpack:///./src/smart-components/portfolio/toolbars/portfolios-primary-toolbar.js","webpack:///./src/smart-components/portfolio/portfolios.js"],"names":["filteringMessages","noItems","id","defaultMessage","filterByProduct","noResults","noResultsDescription","clearFilters","noProducts","noRecords","filterByTitle","noResultsFound","noResult","unknown","title","Icon","description","PrimaryAction","renderDescription","className","icon","component","h1","EmptyStatePrimaryAction","url","label","hasPermission","pathname","preserveSearch","variant","StyledCard","StyledGalleryItem","props","NoItems","formatMessage","isLoading","items","renderEmptyState","length","type","hasGutter","children","CardPropText","div","toDisplay","item","map","prop","key","lines","ellipsis","content","EllipsisTextContainer","StyledCardBody","useIsMounted","isMounted","useRef","useEffect","current","HeaderTitle","LevelItem","HeaderLevel","Level","to","portfolioName","portfolio_items","headerActions","TextContent","Text","h3","Badge","isRead","onClick","event","preventDefault","TO_DISPLAY","HeaderActions","portfolioId","handleCopyPortfolio","canLinkOrderProcesses","userCapabilities","share","copy","unshare","update","destroy","set_approval","isOpen","setOpen","dropdownItems","push","DropdownItem","searchParams","portfolio","preserveHash","setApproval","orderProcessAction","setOrderProcess","role","edit","delete","Dropdown","isPlain","onSelect","position","right","toggle","KebabToggle","onToggle","imageUrl","isDisabled","name","metadata","user_capabilities","statistics","shared_groups","approval_processes","search","ouiaId","CardHeader","small","DateFormat","date","updated_at","created_at","owner","CardFooter","Label","color","approvalProcessSet","shared","chipCategories","labelMessages","sort_by","sortBy","sortByMapping","updated","created","PortfoliosPrimaryToolbar","filters","stateDispatch","debouncedFilter","initialState","meta","filterType","handleFilterItems","sortDirection","handleSort","fetchPortfoliosWithState","isFetching","isFiltering","canCreate","dispatch","useDispatch","useFormatMessage","noData","PrimaryToolbar","dedicatedAction","Button","create","activeFiltersConfig","Object","entries","filter","value","category","chips","Array","isArray","onDelete","_e","clearAll","chip","payload","newFilters","filterConfig","onChange","filterValues","placeholder","sortByConfig","direction","onSortChange","_event","pagination","count","apiRequest","_","options","isCompact","undefined","propTypes","PropTypes","shape","string","isRequired","func","any","object","bool","asyncFormValidator","defaultSettings","filteringCallback","then","SortByDirection","asc","portfoliosState","state","action","Portfolios","viewState","useInitialUriHash","useReducer","useSelector","portfolioReducer","portfolios","data","userPermissions","useContext","UserContext","permissions","history","useHistory","scrollToTop","insights","chrome","appNavClick","secondaryNav","offset","copyPortfolio","PORTFOLIO_ROUTE","emptyStateProps","ADD_PORTFOLIO_ROUTE","portfolioMessages","portfoliosNoData","portfoliosNoDataDescription","WrenchIcon","SearchIcon","galleryItems","portfoliosTitle","dropDirection"],"mappings":"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","file":"js/portfolios~5a11b65b.1e4c19d8e0c5f74687a0.js","sourcesContent":["import { defineMessages } from 'react-intl';\n\nconst filteringMessages = defineMessages({\n  noItems: {\n    id: 'common.filtering.noItems',\n    defaultMessage: 'No items found'\n  },\n  filterByProduct: {\n    id: 'common.filtering.filterByProduct',\n    defaultMessage: 'Filter by product'\n  },\n  noResults: {\n    id: 'common.filtering.noResults',\n    defaultMessage: 'No results found'\n  },\n  noResultsDescription: {\n    id: 'common.filtering.noResultsDescription',\n    defaultMessage:\n      'No results match the filter criteria. Remove all filters or clear all filters to show results.'\n  },\n  clearFilters: {\n    id: 'common.filtering.clear-filters',\n    defaultMessage: 'Clear all filters'\n  },\n  noProducts: {\n    id: 'common.filtering.no-products',\n    defaultMessage: 'No products yet'\n  },\n  noRecords: {\n    id: 'commonMessages.noRecords',\n    defaultMessage: 'No records'\n  },\n  filterByTitle: {\n    id: 'tableToolbar.filterByTitle',\n    defaultMessage: 'Filter by {title}'\n  },\n  noResultsFound: {\n    id: 'tableToolbar.noResultsFound',\n    defaultMessage: 'No results found'\n  },\n  noResult: {\n    id: 'tableToolbar.noResult',\n    defaultMessage: 'No {results}'\n  },\n  unknown: {\n    id: 'commonMessages.unknown',\n    defaultMessage: 'Unknown'\n  }\n});\n\nexport default filteringMessages;\n","/* eslint-disable react/prop-types */\nimport React, { ReactNode } from 'react';\nimport {\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  Text,\n  TextContent,\n  TextVariants\n} from '@patternfly/react-core';\nimport CatalogLink from '../../smart-components/common/catalog-link';\n\nexport interface ContentGalleryEmptyStateProps {\n  title: string;\n  Icon: React.ComponentType;\n  description?: ReactNode;\n  PrimaryAction?: React.ComponentType;\n  renderDescription?: () => ReactNode;\n}\n\nconst ContentGalleryEmptyState: React.ComponentType<ContentGalleryEmptyStateProps> = ({\n  title,\n  Icon,\n  description,\n  PrimaryAction,\n  renderDescription = () => null\n}) => (\n  <div className=\"pf-u-mt-xl\">\n    <EmptyState className=\"pf-u-ml-auto pf-u-mr-auto\">\n      <EmptyStateIcon icon={Icon} />\n      <TextContent>\n        <Text component={TextVariants.h1}>{title}</Text>\n      </TextContent>\n      <EmptyStateBody>\n        {description}\n        {renderDescription()}\n      </EmptyStateBody>\n      <EmptyStateSecondaryActions>\n        {PrimaryAction && <PrimaryAction />}\n      </EmptyStateSecondaryActions>\n    </EmptyState>\n  </div>\n);\n\nexport default ContentGalleryEmptyState;\n\nexport interface EmptyStatePrimaryAction {\n  url: string;\n  label: string;\n  hasPermission?: boolean;\n  id?: string;\n}\nexport const EmptyStatePrimaryAction: React.ComponentType<EmptyStatePrimaryAction> = ({\n  url,\n  label,\n  hasPermission = false,\n  id\n}) =>\n  hasPermission ? (\n    <CatalogLink id={id} pathname={url} preserveSearch>\n      <Button variant=\"primary\">{label}</Button>\n    </CatalogLink>\n  ) : null;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Card, GalleryItem } from '@patternfly/react-core';\n\nexport const StyledCard = styled(Card)`\n  height: 330px;\n  position: relative;\n`;\n\nexport const StyledGalleryItem = styled(({ isDisabled, ...props }) => (\n  <GalleryItem {...props} />\n))`\n  position: relative;\n  ::after {\n    display: ${({ isDisabled }) => (isDisabled ? 'block' : 'none')};\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    content: '';\n    background-color: rgba(210, 210, 210, 0.5);\n    z-index: 1;\n    cursor: progress;\n  }\n`;\n","/* eslint-disable react/prop-types */\nimport React, { Fragment, ReactNode } from 'react';\nimport { Section } from '@redhat-cloud-services/frontend-components/components/cjs/Section';\nimport { Text, TextVariants, Gallery } from '@patternfly/react-core';\n\nimport { CardLoader } from '../../presentational-components/shared/loader-placeholders';\nimport filteringMessages from '../../messages/filtering.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\n\nconst NoItems = () => {\n  const formatMessage = useFormatMessage();\n  return (\n    <div>\n      <Text component={TextVariants.h1}>\n        {formatMessage(filteringMessages.noItems)}\n      </Text>\n    </div>\n  );\n};\n\nexport interface ContentGalleryProps {\n  isLoading?: boolean;\n  items?: ReactNode[];\n  renderEmptyState?: () => ReactNode;\n}\nconst ContentGallery: React.ComponentType<ContentGalleryProps> = ({\n  isLoading,\n  items,\n  renderEmptyState\n}) => (\n  <Fragment>\n    {isLoading ? (\n      <CardLoader />\n    ) : items?.length === 0 ? (\n      renderEmptyState ? (\n        renderEmptyState()\n      ) : (\n        <NoItems />\n      )\n    ) : (\n      <Section type=\"content\">\n        <Gallery hasGutter className=\"content-gallery\">\n          {items}\n        </Gallery>\n      </Section>\n    )}\n  </Fragment>\n);\n\nexport default ContentGallery;\n","/* eslint-disable react/prop-types */\nimport React, { HTMLProps } from 'react';\nimport clsx from 'clsx';\n\nconst BottomPaginationContainer: React.ComponentType<HTMLProps<\n  HTMLDivElement\n>> = ({ children, className, ...props }) => (\n  <div\n    className={clsx(\n      'pf-u-p-lg pf-u-pt-md pf-u-pb-md global-primary-background pf-u-mt-auto',\n      className\n    )}\n    {...props}\n  >\n    {children}\n  </div>\n);\n\nexport default BottomPaginationContainer;\n","/* eslint-disable react/prop-types */\nimport React, { Fragment } from 'react';\nimport styled from 'styled-components';\nimport { AnyObject } from '../../types/common-types';\nimport Truncate from 'react-truncate';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst CardPropText = styled.div`\n  overflow: hidden;\n`;\n\nexport interface ItemDetailsProps extends AnyObject {\n  toDisplay?: string[];\n}\n\nconst ItemDetails: React.ComponentType<ItemDetailsProps> = ({\n  toDisplay = [],\n  ...item\n}) => (\n  <Fragment>\n    {toDisplay.map((prop) => (\n      <Truncate\n        key={`tcard-prop-${prop}`}\n        lines={3}\n        ellipsis={\n          <Tooltip content={<div>{item[prop]}</div>}>\n            <span>...</span>\n          </Tooltip>\n        }\n      >\n        {<CardPropText key={`card-prop-${prop}`}>{item[prop]}</CardPropText>}\n      </Truncate>\n    ))}\n  </Fragment>\n);\n\nexport default ItemDetails;\n","import styled from 'styled-components';\n\nconst EllipsisTextContainer = styled.div`\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n`;\n\nexport default EllipsisTextContainer;\n","import styled from 'styled-components';\nimport { CardBody } from '@patternfly/react-core';\n\nexport const StyledCardBody = styled(CardBody)`\n  height: 230px;\n  overflow: hidden;\n  padding: 0 !important;\n  margin: 0 24px 16px;\n`;\n","import { useRef, useEffect } from 'react';\n\nconst useIsMounted = () => {\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => (isMounted.current = false);\n  }, []);\n  return isMounted;\n};\n\nexport default useIsMounted;\n","/* eslint-disable react/prop-types */\nimport React, { ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  Badge,\n  Level,\n  LevelItem,\n  Text,\n  TextContent,\n  TextVariants\n} from '@patternfly/react-core';\nimport EllipsisTextContainer from '../styled-components/ellipsis-text-container';\nimport styled from 'styled-components';\nimport { CatalogLinkTo } from '../../smart-components/common/catalog-link';\n\nconst HeaderTitle = styled(LevelItem)`\n  max-width: calc(100% - 80px);\n  width: calc(100% - 80px);\n`;\n\nconst HeaderLevel = styled(Level)`\n  width: 100%;\n`;\n\nexport interface PortfolioCardHeaderProps {\n  id: string;\n  to: CatalogLinkTo;\n  portfolioName?: string;\n  portfolio_items: number;\n  headerActions: ReactNode;\n}\nconst PortfolioCardHeader: React.ComponentType<PortfolioCardHeaderProps> = ({\n  id,\n  to,\n  portfolioName,\n  portfolio_items,\n  headerActions = []\n}) => (\n  <HeaderLevel>\n    <HeaderTitle>\n      <TextContent>\n        <Link to={to} id={`portfolio-link-${id}`}>\n          <Text\n            title={portfolioName}\n            className=\"pf-u-mb-0\"\n            component={TextVariants.h3}\n          >\n            <EllipsisTextContainer>{portfolioName}</EllipsisTextContainer>\n          </Text>\n        </Link>\n      </TextContent>\n    </HeaderTitle>\n    <Badge isRead>{portfolio_items}</Badge>\n    <div onClick={(event) => event.preventDefault()}>{headerActions}</div>\n  </HeaderLevel>\n);\n\nexport default PortfolioCardHeader;\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\nimport ItemDetails from '../shared/card-common';\nimport {\n  CardHeader,\n  CardFooter,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  KebabToggle,\n  Text,\n  TextContent,\n  TextVariants,\n  Label\n} from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\nimport PortfolioCardHeader from './portfolio-card-header';\n\nimport CatalogLink from '../../smart-components/common/catalog-link';\nimport {\n  SHARE_PORTFOLIO_ROUTE,\n  EDIT_PORTFOLIO_WORKFLOW_ROUTE,\n  EDIT_PORTFOLIO_ROUTE,\n  REMOVE_PORTFOLIO_ROUTE,\n  PORTFOLIO_ROUTE,\n  EDIT_ORDER_PROCESS_ROUTE\n} from '../../constants/routes';\nimport {\n  StyledCard,\n  StyledGalleryItem\n} from '../styled-components/styled-gallery';\nimport { StyledCardBody } from '../styled-components/card';\nimport actionMessages from '../../messages/actions.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport orderProcessesMessages from '../../messages/order-processes.messages';\nimport { UserCapabilities, PortfolioMetadata } from '../../types/common-types';\n\nconst TO_DISPLAY = ['description'];\n\ninterface HeaderActionsProps {\n  portfolioId: string;\n  handleCopyPortfolio: (portfolioId: string) => void;\n  userCapabilities: UserCapabilities;\n  canLinkOrderProcesses: boolean;\n}\nconst HeaderActions: React.ComponentType<HeaderActionsProps> = ({\n  portfolioId,\n  handleCopyPortfolio,\n  canLinkOrderProcesses,\n  userCapabilities: { share, copy, unshare, update, destroy, set_approval }\n}) => {\n  const formatMessage = useFormatMessage();\n  const [isOpen, setOpen] = useState(false);\n  const dropdownItems = [];\n  if (share || unshare) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"share-portfolio-action\"\n        id=\"share-portfolio-action\"\n        component={\n          <CatalogLink\n            searchParams={{ portfolio: portfolioId }}\n            pathname={SHARE_PORTFOLIO_ROUTE}\n            preserveHash\n          >\n            {formatMessage(actionMessages.share)}\n          </CatalogLink>\n        }\n      />\n    );\n  }\n\n  if (copy) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"copy-portfolio-action\"\n        id=\"copy-portfolio-action\"\n        onClick={() => handleCopyPortfolio(portfolioId)}\n      >\n        {formatMessage(actionMessages.copy)}\n      </DropdownItem>\n    );\n  }\n\n  if (set_approval) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"workflow-portfolio-action\"\n        id=\"workflow-portfolio-action\"\n        component={\n          <CatalogLink\n            searchParams={{ portfolio: portfolioId }}\n            pathname={EDIT_PORTFOLIO_WORKFLOW_ROUTE}\n            preserveHash\n          >\n            {formatMessage(actionMessages.setApproval)}\n          </CatalogLink>\n        }\n      />\n    );\n  }\n\n  if (update && canLinkOrderProcesses) {\n    const orderProcessAction = formatMessage(\n      orderProcessesMessages.setOrderProcess\n    ) as string;\n    dropdownItems.push(\n      <DropdownItem\n        aria-label={orderProcessAction}\n        key=\"attach-order-processes\"\n        id=\"attach-order-processes\"\n        component={\n          <CatalogLink\n            preserveSearch\n            pathname={EDIT_ORDER_PROCESS_ROUTE}\n            searchParams={{ portfolio: portfolioId }}\n          >\n            {orderProcessAction}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (update) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"edit-portfolio-action\"\n        id=\"edit-portfolio-action\"\n        component={\n          <CatalogLink\n            searchParams={{ portfolio: portfolioId }}\n            pathname={EDIT_PORTFOLIO_ROUTE}\n            preserveHash\n          >\n            {formatMessage(actionMessages.edit)}\n          </CatalogLink>\n        }\n      />\n    );\n  }\n\n  if (destroy) {\n    dropdownItems.push(\n      <DropdownItem\n        key=\"remove-portfolio-action\"\n        id=\"remove-portfolio-action\"\n        component={\n          <CatalogLink\n            searchParams={{ portfolio: portfolioId }}\n            pathname={REMOVE_PORTFOLIO_ROUTE}\n            preserveHash\n          >\n            {formatMessage(actionMessages.delete)}\n          </CatalogLink>\n        }\n      />\n    );\n  }\n\n  return dropdownItems.length === 0 ? null : (\n    <Dropdown\n      key=\"portfolio-dropdown\"\n      id={`portfolio-${portfolioId}-dropdown`}\n      isOpen={isOpen}\n      isPlain\n      onSelect={() => setOpen(false)}\n      position={DropdownPosition.right}\n      toggle={\n        <KebabToggle\n          id={`portfolio-${portfolioId}-toggle`}\n          onToggle={(isOpen) => setOpen(isOpen)}\n        />\n      }\n      dropdownItems={dropdownItems}\n    />\n  );\n};\n\nexport interface PortfolioCardProps {\n  imageUrl?: string;\n  name?: string;\n  id: string;\n  updated_at?: string;\n  created_at: string;\n  owner?: string;\n  isDisabled?: boolean;\n  metadata: PortfolioMetadata;\n  handleCopyPortfolio: (portfolioId: string) => void;\n  canLinkOrderProcesses: boolean;\n}\nconst PortfolioCard: React.ComponentType<PortfolioCardProps> = ({\n  imageUrl,\n  isDisabled,\n  name,\n  id,\n  handleCopyPortfolio,\n  metadata: {\n    user_capabilities,\n    statistics: { shared_groups, approval_processes, portfolio_items }\n  },\n  canLinkOrderProcesses,\n  ...props\n}) => {\n  const formatMessage = useFormatMessage();\n  const to = {\n    pathname: PORTFOLIO_ROUTE,\n    search: `?portfolio=${id}`\n  };\n  return (\n    <StyledGalleryItem isDisabled={isDisabled}>\n      <StyledCard ouiaId={`portfolio-${id}`}>\n        <CardHeader>\n          <PortfolioCardHeader\n            id={id}\n            to={to}\n            portfolioName={name}\n            portfolio_items={portfolio_items || 0}\n            headerActions={\n              <HeaderActions\n                portfolioId={id}\n                userCapabilities={user_capabilities}\n                handleCopyPortfolio={handleCopyPortfolio}\n                canLinkOrderProcesses={canLinkOrderProcesses}\n              />\n            }\n          />\n        </CardHeader>\n        <StyledCardBody>\n          <TextContent className=\"pf-u-mb-md\">\n            <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n              Last updated&nbsp;\n              <DateFormat\n                date={props.updated_at || props.created_at}\n                type=\"relative\"\n              />\n            </Text>\n            <Text component={TextVariants.small}>by {props.owner}</Text>\n          </TextContent>\n          <ItemDetails\n            {...{ name, imageUrl, ...props }}\n            toDisplay={TO_DISPLAY}\n          />\n        </StyledCardBody>\n        <CardFooter>\n          {approval_processes && approval_processes > 0 && (\n            <Label variant=\"filled\" color=\"grey\">\n              {formatMessage(labelMessages.approvalProcessSet)}\n            </Label>\n          )}\n          &nbsp;\n          {shared_groups && shared_groups > 0 && (\n            <Label variant=\"filled\" color=\"grey\">\n              {formatMessage(labelMessages.shared)}\n            </Label>\n          )}\n        </CardFooter>\n      </StyledCard>\n    </StyledGalleryItem>\n  );\n};\n\nexport default PortfolioCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\n\nimport AsyncPagination from '../../common/async-pagination';\nimport CatalogLink from '../../common/catalog-link';\nimport { Button } from '@patternfly/react-core';\nimport labelMessages from '../../../messages/labels.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\n\nconst chipCategories = {\n  name: labelMessages.name,\n  owner: labelMessages.owner,\n  sort_by: labelMessages.sortBy\n};\n\nconst sortByMapping = {\n  name: labelMessages.name,\n  owner: labelMessages.owner,\n  updated_at: labelMessages.updated,\n  created_at: labelMessages.created\n};\n\nconst PortfoliosPrimaryToolbar = ({\n  filters,\n  stateDispatch,\n  debouncedFilter,\n  initialState,\n  meta,\n  filterType,\n  handleFilterItems,\n  sortDirection,\n  handleSort,\n  fetchPortfoliosWithState,\n  isFetching,\n  isFiltering,\n  canCreate\n}) => {\n  const dispatch = useDispatch();\n  const formatMessage = useFormatMessage();\n  if (meta.noData) {\n    return null;\n  }\n\n  return (\n    <PrimaryToolbar\n      {...(canCreate\n        ? {\n            dedicatedAction: (\n              <CatalogLink pathname=\"/portfolios/add-portfolio\">\n                <Button\n                  variant=\"primary\"\n                  id=\"create-portfolio\"\n                  ouiaId={'create-portfolio'}\n                  type=\"button\"\n                >\n                  {formatMessage(labelMessages.create)}\n                </Button>\n              </CatalogLink>\n            )\n          }\n        : {})}\n      activeFiltersConfig={{\n        filters: Object.entries(filters)\n          .filter(([, value]) => value && value.length > 0)\n          .map(([key, value]) => {\n            return {\n              category: formatMessage(chipCategories[key]),\n              type: key,\n              chips: Array.isArray(value)\n                ? value.map((name) => ({\n                    name\n                  }))\n                : [\n                    {\n                      name:\n                        key === 'sort_by'\n                          ? formatMessage(sortByMapping[value])\n                          : value\n                    }\n                  ]\n            };\n          }),\n        onDelete: (_e, [chip], clearAll) => {\n          if (clearAll) {\n            stateDispatch({\n              type: 'replaceFilterChip',\n              payload: initialState.filters\n            });\n            return debouncedFilter(\n              initialState.filters,\n              meta,\n              dispatch,\n              (isFiltering) =>\n                stateDispatch({\n                  type: 'setFilteringFlag',\n                  payload: isFiltering\n                })\n            );\n          }\n\n          const newFilters = { ...filters };\n          if (chip.type === 'state') {\n            newFilters[chip.type] = newFilters[chip.type].filter(\n              (value) => value !== chip.chips[0].name\n            );\n          } else {\n            newFilters[chip.type] = '';\n          }\n\n          stateDispatch({\n            type: 'replaceFilterChip',\n            payload: newFilters\n          });\n          debouncedFilter(newFilters, meta, dispatch, (isFiltering) =>\n            stateDispatch({\n              type: 'setFilteringFlag',\n              payload: isFiltering\n            })\n          );\n        }\n      }}\n      filterConfig={{\n        onChange: (_e, value) =>\n          stateDispatch({ type: 'setFilterType', payload: value }),\n        value: filterType,\n        items: [\n          {\n            filterValues: {\n              value: filters.name,\n              onChange: (_e, value) => handleFilterItems(value)\n            },\n            label: formatMessage(labelMessages.name),\n            value: 'name'\n          },\n          {\n            filterValues: {\n              value: filters.owner,\n              onChange: (_e, value) => handleFilterItems(value)\n            },\n            label: formatMessage(labelMessages.owner),\n            value: 'owner'\n          },\n          {\n            filterValues: {\n              value: filters.sort_by || 'name',\n              onChange: (_e, value) => handleFilterItems(value),\n              items: [\n                {\n                  label: formatMessage(labelMessages.name),\n                  value: 'name'\n                },\n                {\n                  label: formatMessage(labelMessages.owner),\n                  value: 'owner'\n                },\n                {\n                  label: formatMessage(labelMessages.created),\n                  value: 'created_at'\n                },\n                {\n                  label: formatMessage(labelMessages.updated),\n                  value: 'updated_at'\n                }\n              ]\n            },\n            placeholder: filters.sort_by\n              ? formatMessage(sortByMapping[filters.sort_by])\n              : formatMessage(labelMessages.name),\n            label: formatMessage(labelMessages.sortBy),\n            value: 'sort_by',\n            type: 'radio'\n          }\n        ]\n      }}\n      sortByConfig={{\n        direction: sortDirection,\n        onSortChange: (_event, direction) => handleSort(direction)\n      }}\n      pagination={\n        meta.count > 0 ? (\n          <AsyncPagination\n            isDisabled={isFetching || isFiltering}\n            meta={meta}\n            apiRequest={(_, options) =>\n              dispatch(fetchPortfoliosWithState(filters, options))\n            }\n            isCompact\n          />\n        ) : (\n          undefined\n        )\n      }\n    />\n  );\n};\n\nPortfoliosPrimaryToolbar.propTypes = {\n  filters: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    owner: PropTypes.string.isRequired,\n    sort_by: PropTypes.string\n  }).isRequired,\n  stateDispatch: PropTypes.func.isRequired,\n  debouncedFilter: PropTypes.func.isRequired,\n  initialState: PropTypes.shape({\n    filters: PropTypes.shape({ [PropTypes.string]: PropTypes.any }).isRequired\n  }).isRequired,\n  meta: PropTypes.object.isRequired,\n  filterType: PropTypes.string.isRequired,\n  handleFilterItems: PropTypes.func.isRequired,\n  sortDirection: PropTypes.string.isRequired,\n  handleSort: PropTypes.func.isRequired,\n  fetchPortfoliosWithState: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  isFiltering: PropTypes.bool.isRequired,\n  canCreate: PropTypes.bool\n};\n\nexport default PortfoliosPrimaryToolbar;\n","import React, { Fragment, useEffect, useReducer, useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { SearchIcon, WrenchIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\n\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport ContentGallery from '../content-gallery/content-gallery';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport {\n  fetchPortfoliosWithState,\n  copyPortfolio\n} from '../../redux/actions/portfolio-actions';\nimport PortfolioCard from '../../presentational-components/portfolio/porfolio-card';\nimport ContentGalleryEmptyState, {\n  EmptyStatePrimaryAction\n} from '../../presentational-components/shared/content-gallery-empty-state';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport AsyncPagination from '../common/async-pagination';\nimport BottomPaginationContainer from '../../presentational-components/shared/bottom-pagination-container';\nimport { ADD_PORTFOLIO_ROUTE, PORTFOLIO_ROUTE } from '../../constants/routes';\nimport UserContext from '../../user-context';\nimport { hasPermission } from '../../helpers/shared/helpers';\nimport useInitialUriHash from '../../routing/use-initial-uri-hash';\nimport filteringMessages from '../../messages/filtering.messages';\nimport portfolioMessages from '../../messages/portfolio.messages';\n\nimport { SortByDirection } from '@patternfly/react-table';\nimport useIsMounted from '../../utilities/use-is-mounted';\nimport PortfoliosPrimaryToolbar from './toolbars/portfolios-primary-toolbar';\nimport TopToolbar, {\n  TopToolbarTitle\n} from '../../presentational-components/shared/top-toolbar';\nimport useFormatMessage from '../../utilities/use-format-message';\n\nconst debouncedFilter = asyncFormValidator(\n  (filters, meta = defaultSettings, dispatch, filteringCallback) => {\n    filteringCallback(true);\n    dispatch(fetchPortfoliosWithState(filters, meta)).then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst initialState = {\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false,\n  filterType: 'name',\n  filters: {\n    name: '',\n    owner: '',\n    sort_by: undefined\n  },\n  sortDirection: SortByDirection.asc\n};\n\nconst changeFilters = (value, type, filters) => ({\n  ...filters,\n  [type]: value\n});\n\nconst portfoliosState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return {\n        ...state,\n        filters: changeFilters(action.payload, state.filterType, state.filters)\n      };\n    case 'replaceFilterChip':\n      return {\n        ...state,\n        sortDirection: SortByDirection.asc,\n        filters: action.payload\n      };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    case 'setFilterType':\n      return { ...state, filterType: action.payload };\n    case 'setSortBy':\n      return {\n        ...state,\n        sortDirection: action.payload,\n        filters: !state.filters.sort_by\n          ? { ...state.filters, sort_by: 'name' }\n          : state.filters\n      };\n  }\n\n  return state;\n};\n\nconst Portfolios = () => {\n  const formatMessage = useFormatMessage();\n  const viewState = useInitialUriHash();\n  const isMounted = useIsMounted();\n  const [\n    { isFetching, isFiltering, filters, filterType, sortDirection },\n    stateDispatch\n  ] = useReducer(portfoliosState, {\n    ...initialState,\n    ...viewState?.portfolio\n  });\n  const { data, meta } = useSelector(\n    ({ portfolioReducer: { portfolios } }) => portfolios\n  );\n  const dispatch = useDispatch();\n  const { permissions: userPermissions } = useContext(UserContext);\n  const history = useHistory();\n\n  useEffect(() => {\n    dispatch(\n      fetchPortfoliosWithState(filters, { ...meta, sortDirection })\n    ).then(() => stateDispatch({ type: 'setFetching', payload: false }));\n    scrollToTop();\n    insights.chrome.appNavClick({ id: 'portfolios', secondaryNav: true });\n  }, []);\n\n  const handleFilterItems = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      { ...filters, [filterType]: value },\n      { ...meta, offset: 0, sortDirection },\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering })\n    );\n  };\n\n  useEffect(() => {\n    if (isMounted && (!isFiltering || !isFetching)) {\n      handleFilterItems(filters[filterType]);\n    }\n  }, [sortDirection]);\n\n  const handleSort = (direction) =>\n    stateDispatch({ type: 'setSortBy', payload: direction });\n\n  const handleCopyPortfolio = (id) =>\n    dispatch(copyPortfolio(id)).then(({ id }) =>\n      history.push({\n        pathname: PORTFOLIO_ROUTE,\n        search: `?portfolio=${id}`\n      })\n    );\n\n  const canCreate = hasPermission(userPermissions, [\n    'catalog:portfolios:create'\n  ]);\n\n  const canLinkOrderProcesses = hasPermission(userPermissions, [\n    'catalog:order_processes:link'\n  ]);\n\n  const NoDataAction = () => (\n    <EmptyStatePrimaryAction\n      url={ADD_PORTFOLIO_ROUTE}\n      id=\"create-portfolio\"\n      label=\"Create portfolio\"\n      hasPermission={canCreate}\n    />\n  );\n  const FilterAction = () => (\n    <Button\n      ouiaId={'clear-filter'}\n      variant=\"link\"\n      onClick={() => handleFilterItems('')}\n    >\n      {formatMessage(filteringMessages.clearFilters)}\n    </Button>\n  );\n\n  const emptyStateProps = {\n    PrimaryAction: meta.noData ? NoDataAction : FilterAction,\n    title: meta.noData\n      ? formatMessage(portfolioMessages.portfoliosNoData)\n      : formatMessage(filteringMessages.noResults),\n    description: meta.noData\n      ? formatMessage(portfolioMessages.portfoliosNoDataDescription)\n      : formatMessage(filteringMessages.noResultsDescription),\n    Icon: meta.noData ? WrenchIcon : SearchIcon\n  };\n  const galleryItems = data.map((item) => (\n    <PortfolioCard\n      key={item.id}\n      ouiaId={`portfolio-${item.id}`}\n      {...item}\n      canLinkOrderProcesses={canLinkOrderProcesses}\n      handleCopyPortfolio={handleCopyPortfolio}\n    />\n  ));\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TopToolbarTitle\n          title={formatMessage(portfolioMessages.portfoliosTitle)}\n        />\n        <PortfoliosPrimaryToolbar\n          filters={filters}\n          stateDispatch={stateDispatch}\n          debouncedFilter={debouncedFilter}\n          initialState={initialState}\n          meta={meta}\n          filterType={filterType}\n          handleFilterItems={handleFilterItems}\n          sortDirection={sortDirection}\n          handleSort={handleSort}\n          fetchPortfoliosWithState={fetchPortfoliosWithState}\n          isFetching={isFetching}\n          isFiltering={isFiltering}\n          canCreate={canCreate}\n        />\n      </TopToolbar>\n      <ContentGallery\n        items={galleryItems}\n        isLoading={isFetching || isFiltering}\n        renderEmptyState={() => (\n          <ContentGalleryEmptyState {...emptyStateProps} />\n        )}\n      />\n      {meta.count > 0 && (\n        <BottomPaginationContainer>\n          <AsyncPagination\n            meta={meta}\n            apiRequest={(_, options) =>\n              dispatch(fetchPortfoliosWithState(filters, options))\n            }\n            dropDirection=\"up\"\n          />\n        </BottomPaginationContainer>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Portfolios;\n"],"sourceRoot":""}