{"version":3,"file":"js/6678.af467817d7ae6d738da4.js","mappings":"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","sources":["webpack:///./src/presentational-components/shared/app-tabs.tsx","webpack:///./src/presentational-components/shared/filter-toolbar-item.tsx","webpack:///./src/toolbar/toolbar-mapper.tsx","webpack:///./src/toolbar/toolbar-renderer.tsx"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { Tabs, Tab } from '@patternfly/react-core';\nimport { useLocation } from 'react-router-dom';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\n\nexport interface AppTabsProps {\n  tabItems: {\n    name: string;\n    eventKey: number;\n    title: string;\n    disabled?: boolean;\n  }[];\n}\nconst AppTabs: React.ComponentType<AppTabsProps> = ({ tabItems }) => {\n  const { push } = useEnhancedHistory();\n  const { pathname, search } = useLocation();\n  const activeTab = tabItems.find(({ name }) => pathname.includes(name));\n  const handleTabClick = (\n    _event: React.MouseEvent<HTMLElement, MouseEvent>,\n    tabIndex: number | string\n  ) => push({ pathname: tabItems[tabIndex as number].name, search });\n\n  return (\n    <Tabs\n      activeKey={activeTab ? activeTab.eventKey : 0}\n      onSelect={handleTabClick}\n    >\n      {tabItems.map((item) => (\n        <Tab\n          title={item.title}\n          key={item.eventKey}\n          eventKey={item.eventKey}\n          name={item.name}\n          disabled={item.disabled}\n        />\n      ))}\n    </Tabs>\n  );\n};\n\nexport default AppTabs;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport styled from 'styled-components';\nimport { SearchIcon, CloseIcon } from '@patternfly/react-icons';\nimport { ToolbarItem, TextInput } from '@patternfly/react-core';\n\nconst FilterInputGroup = styled.div`\n  position: relative;\n  width: 300px;\n  height: 36px;\n`;\n\nconst FilterInput = styled(TextInput)`\n  position: absolute;\n  width: 300px;\n  padding-right: 34px;\n  background: transparent;\n`;\n\nconst FilterIconsContainer = styled.span`\n  position: absolute;\n  right: 8px;\n  top: 8px;\n`;\n\nconst StyledCloseIcon = styled(CloseIcon)`\n  z-index: 1000;\n  fill: #72767b;\n  :hover {\n    fill: var(--pf-global--Color--100);\n    cursor: pointer;\n  }\n`;\n\nconst StyledSearchIcon = styled(SearchIcon)`\n  z-index: 1000;\n  fill: #72767b;\n`;\n\nexport interface FilterToolbarItemProps {\n  searchValue?: string;\n  onFilterChange: (value: string) => void;\n  placeholder?: string;\n  isClearable?: boolean;\n}\nconst FilterToolbarItem: React.ComponentType<FilterToolbarItemProps> = ({\n  searchValue = '',\n  onFilterChange,\n  placeholder,\n  isClearable = false,\n  ...rest\n}) => (\n  <ToolbarItem>\n    <FilterInputGroup>\n      <FilterInput\n        id=\"toolbar-filter\"\n        placeholder={placeholder}\n        value={searchValue}\n        type=\"text\"\n        onChange={onFilterChange}\n        aria-label={placeholder}\n        {...rest}\n      />\n      <FilterIconsContainer>\n        {(isClearable && searchValue && (\n          <StyledCloseIcon\n            width=\"16\"\n            height=\"16\"\n            onClick={() => onFilterChange('')}\n          />\n        )) || <StyledSearchIcon />}\n      </FilterIconsContainer>\n    </FilterInputGroup>\n  </ToolbarItem>\n);\n\nexport default FilterToolbarItem;\n","/* eslint-disable react/prop-types */\nimport React, { ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Label,\n  Level,\n  LevelItem,\n  ToolbarItem,\n  ToolbarContent,\n  ButtonProps,\n  LabelProps\n} from '@patternfly/react-core';\n\nimport FilterToolbarItem from '../presentational-components/shared/filter-toolbar-item';\nimport TopToolbar, {\n  TopToolbarTitle\n} from '../presentational-components/shared/top-toolbar';\nimport AppTabs from '../presentational-components/shared/app-tabs';\nimport CatalogLink from '../smart-components/common/catalog-link';\nimport {\n  StyledToolbar,\n  StyledToolbarGroup,\n  StyledToolbarProps\n} from '../presentational-components/styled-components/toolbars';\n\nexport interface ToolbarButtonProps extends Omit<ButtonProps, 'title'> {\n  title: ReactNode;\n}\n\nexport interface ToolbarLabelProps extends Omit<LabelProps, 'title'> {\n  title: ReactNode;\n}\n\nconst ToolbarButton: React.ComponentType<ToolbarButtonProps> = ({\n  title,\n  ...props\n}) => <Button {...props}>{title}</Button>;\n\nToolbarButton.propTypes = {\n  title: PropTypes.string.isRequired\n};\n\nconst ToolbarLabel: React.ComponentType<ToolbarLabelProps> = ({\n  title,\n  ...props\n}) => <Label {...props}>{title}</Label>;\n\nToolbarLabel.propTypes = {\n  title: PropTypes.string.isRequired\n};\n\nconst AppToolbar: React.ComponentType<StyledToolbarProps> = ({\n  children,\n  ...props\n}) => (\n  <StyledToolbar className=\"pf-u-p-0\" {...props}>\n    <ToolbarContent className=\"pf-u-pl-0\">{children}</ToolbarContent>\n  </StyledToolbar>\n);\nconst toolbarMapper = {\n  TopToolbar,\n  TopToolbarTitle,\n  Toolbar: AppToolbar,\n  ToolbarGroup: StyledToolbarGroup,\n  ToolbarItem,\n  FilterToolbarItem,\n  Link: CatalogLink,\n  Level,\n  LevelItem,\n  Button: ToolbarButton,\n  AppTabs,\n  Label: ToolbarLabel\n};\n\nexport const toolbarComponentTypes = {\n  TOP_TOOLBAR: 'TopToolbar',\n  TOP_TOOLBAR_TITLE: 'TopToolbarTitle',\n  TOOLBAR: 'Toolbar',\n  TOOLBAR_ITEM: 'ToolbarItem',\n  TOOLBAR_GROUP: 'ToolbarGroup',\n  FILTER_TOOLBAR_ITEM: 'FilterToolbarItem',\n  LINK: 'Link',\n  BUTTON: 'Button',\n  LEVEL: 'Level',\n  LEVEL_ITEM: 'LevelItem',\n  TABS: 'AppTabs',\n  LABEL: 'Label'\n};\n\nexport default toolbarMapper;\n","/* eslint-disable react/prop-types */\nimport React, { createContext, ReactNode } from 'react';\nimport toolbarMapper, { toolbarComponentTypes } from './toolbar-mapper';\nimport { AnyObject, ValueOf } from '../types/common-types';\n\nexport interface ToolbarField extends AnyObject {\n  component:\n    | ValueOf<typeof toolbarMapper>\n    | React.ComponentType\n    | ValueOf<typeof toolbarComponentTypes>;\n  hidden?: boolean;\n  fields?: ToolbarField[];\n  key: string;\n}\n\nexport interface ToolbarSchema {\n  fields: ToolbarField[];\n}\n\nconst ToolbarContext = createContext<{\n  render?: (fields: ToolbarField[]) => ReactNode;\n  componentMapper?: typeof toolbarMapper;\n}>({});\n\ninterface ComponentProps extends AnyObject {\n  component:\n    | ValueOf<typeof toolbarMapper>\n    | React.ComponentType\n    | ValueOf<typeof toolbarComponentTypes>;\n}\nconst Component: React.ComponentType<ComponentProps> = ({\n  component,\n  ...props\n}) => (\n  <ToolbarContext.Consumer>\n    {({ componentMapper }) => {\n      const C =\n        typeof component === 'string'\n          ? componentMapper &&\n            componentMapper[component as keyof typeof toolbarMapper]\n          : (component as React.ComponentType<any>);\n      return C ? <C {...props} /> : null;\n    }}\n  </ToolbarContext.Consumer>\n);\n\nconst render = (fields: ToolbarField[]): React.ReactNode =>\n  fields.map(({ hidden, fields, key, ...field }) =>\n    hidden ? null : fields ? (\n      <Component key={key} {...field}>\n        {render(fields)}\n      </Component>\n    ) : (\n      <Component key={key} {...field} />\n    )\n  );\n\nexport interface ToolbarRendererProps {\n  schema: ToolbarSchema;\n  componentMapper?: typeof toolbarMapper;\n}\nconst ToolbarRenderer: React.ComponentType<ToolbarRendererProps> = ({\n  schema,\n  componentMapper = toolbarMapper\n}) => (\n  <ToolbarContext.Provider value={{ render, componentMapper }}>\n    {render(schema.fields)}\n  </ToolbarContext.Provider>\n);\n\nexport default ToolbarRenderer;\n"],"names":["tabItems","push","useLocation","pathname","search","activeTab","find","name","includes","Tabs","activeKey","eventKey","onSelect","_event","tabIndex","map","item","Tab","title","key","disabled","FilterInputGroup","FilterInput","TextInput","FilterIconsContainer","StyledCloseIcon","CloseIcon","StyledSearchIcon","SearchIcon","ToolbarButton","props","Button","propTypes","ToolbarLabel","Label","toolbarMapper","TopToolbar","TopToolbarTitle","Toolbar","children","className","ToolbarContent","ToolbarGroup","ToolbarItem","FilterToolbarItem","searchValue","onFilterChange","placeholder","isClearable","rest","id","value","type","onChange","width","height","onClick","Link","Level","LevelItem","AppTabs","toolbarComponentTypes","TOP_TOOLBAR","TOP_TOOLBAR_TITLE","TOOLBAR","TOOLBAR_ITEM","TOOLBAR_GROUP","FILTER_TOOLBAR_ITEM","LINK","BUTTON","LEVEL","LEVEL_ITEM","TABS","LABEL","ToolbarContext","createContext","Component","component","Consumer","componentMapper","C","render","fields","hidden","field","schema","Provider"],"sourceRoot":""}