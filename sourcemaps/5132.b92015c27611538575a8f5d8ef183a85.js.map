{"version":3,"file":"js/5132.0c77f00955a7671b987d.js","mappings":"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","sources":["webpack:///./src/helpers/order/service-plan-helper-s.ts","webpack:///./src/helpers/order/new-order-helper-s.ts","webpack:///./src/helpers/order/order-helper-s.ts","webpack:///./src/redux/actions/order-actions-s.tsx"],"sourcesContent":["/* eslint camelcase: 0 */\nimport { getAxiosInstance } from '../shared/user-login';\nimport { CATALOG_API_BASE } from '../../utilities/constants';\nimport { ApiCollectionResponse } from '../../types/common-types-s';\nimport { AxiosInstance, AxiosPromise } from 'axios';\nconst axiosInstance = getAxiosInstance();\n\nexport interface ImportServicePlan {\n  /**\n   * The Portfolio Item to import the service plans for.\n   * @type {string}\n   * @memberof ImportServicePlan\n   */\n  portfolio_item_id?: string;\n}\n\nexport interface ServicePlan {\n  /**\n   * The name of the service plan.\n   * @type {string}\n   * @memberof ServicePlan\n   */\n  name?: string;\n  /**\n   * The service plan description.\n   * @type {string}\n   * @memberof ServicePlan\n   */\n  description?: string;\n  /**\n   * JSON schema for the object.\n   * @type {object}\n   * @memberof ServicePlan\n   */\n  create_json_schema?: any;\n  /**\n   * The reference ID of the Portfolio Item\n   * @type {string}\n   * @memberof ServicePlan\n   */\n  portfolio_item_id?: string;\n  /**\n   * The unique identifier for this service plan.\n   * @type {string}\n   * @memberof ServicePlan\n   */\n  id?: string;\n  /**\n   * Whether or not the ServicePlan has been imported for editing\n   * @type {boolean}\n   * @memberof ServicePlan\n   */\n  imported?: boolean;\n  /**\n   * Whether or not the ServicePlan has a modified schema\n   * @type {boolean}\n   * @memberof ServicePlan\n   */\n  modified?: boolean;\n}\n\nexport interface PatchModifiedServicePlan {\n  /**\n   * the new modified schema for the service plan\n   * @type {object}\n   * @memberof PatchModifiedServicePlan\n   */\n  modified?: any;\n}\n\nexport const getServicePlans = (\n  portfolioItemId: string\n): Promise<ApiCollectionResponse<ServicePlan>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolio_items/${portfolioItemId}/service_plans/`\n  ) as Promise<ApiCollectionResponse<ServicePlan>>;\n\nexport const patchServicePlanModified = (\n  servicePlanId: string,\n  patchModifiedServicePlan?: PatchModifiedServicePlan\n): Promise<ApiCollectionResponse<ServicePlan>> =>\n  axiosInstance.patch(\n    `${CATALOG_API_BASE}/catalog_service_plans/${servicePlanId}/modified/`,\n    patchModifiedServicePlan\n  ) as Promise<ApiCollectionResponse<ServicePlan>>;\n\nexport const showServicePlanModified = (\n  servicePlanId: string\n): Promise<ApiCollectionResponse<ServicePlan>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/catalog_service_plans/${servicePlanId}/modified/`\n  );\n\nexport const createServicePlan = (\n  importServicePlan?: ImportServicePlan,\n  options: any = {}\n) =>\n  axiosInstance.post(\n    `${CATALOG_API_BASE}/catalog_service_plans/`,\n    importServicePlan\n  );\n\nexport const resetServicePlanModified = (\n  id: string,\n  options?: any\n): AxiosPromise<Array<ServicePlan>> =>\n  axiosInstance.post(`${CATALOG_API_BASE}$/catalog_service_plans/${id}/reset/`);\n","// TODO migrate whole order-helper.js to TS\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  Order,\n  OrderItem,\n  PortfolioItem,\n  Portfolio,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\nimport { Source } from '@redhat-cloud-services/sources-client';\nimport { getAxiosInstance } from '../shared/user-login';\nimport {\n  CATALOG_API_BASE,\n  CATALOG_INVENTORY_API_BASE\n} from '../../utilities/constants';\nconst axiosInstance = getAxiosInstance();\n\nexport interface ObjectNotFound {\n  object: 'Order item' | 'Product' | 'Portfolio' | 'Messages' | 'Platform';\n  notFound: boolean;\n}\n\nexport type OrderDetailPayload = [\n  Order,\n  OrderItem | ObjectNotFound,\n  PortfolioItem | ObjectNotFound,\n  Source | ObjectNotFound,\n  ProgressMessage | ObjectNotFound,\n  Portfolio | ObjectNotFound\n];\n\nexport type ProgressMessageItem = {\n  orderItemId: string;\n  progressMessages: ProgressMessage[];\n};\n\nexport interface OrderProvisionPayload {\n  orderItems: OrderItem[] | [];\n  progressMessageItems: ProgressMessageItem[] | [];\n}\n\nexport const fetchOrderDetailSequence = async (\n  orderId: string\n): Promise<OrderDetailPayload> => {\n  let order: Order;\n  try {\n    order = await axiosInstance.get(`${CATALOG_API_BASE}/orders/${orderId}`);\n  } catch (error) {\n    order = {};\n    // @ts-ignore\n    if (error.status === 404 || error.status === 400) {\n      catalogHistory.replace({\n        pathname: '/404',\n        state: { from: catalogHistory.location }\n      });\n    } else {\n      throw error;\n    }\n  }\n\n  let orderItem: OrderItem | ObjectNotFound = {\n    object: 'Order item',\n    notFound: true\n  };\n  try {\n    const orderItems = await axiosInstance.get(\n      `${CATALOG_API_BASE}/order_items?order_id=${order.id}`\n    );\n    orderItem = orderItems.data[0];\n  } catch (_error) {\n    // no handler\n  }\n\n  let portfolioItem: PortfolioItem | ObjectNotFound = {\n    object: 'Product',\n    notFound: true\n  };\n\n  try {\n    portfolioItem = await axiosInstance.get(\n      `${CATALOG_API_BASE}/portfolio_items/${\n        (orderItem as OrderItem).portfolio_item_id\n      }`\n    );\n  } catch (_error) {\n    // nohandler\n  }\n\n  const parallerRequests = [\n    axiosInstance\n      .get(\n        `${CATALOG_INVENTORY_API_BASE}/sources/${\n          (portfolioItem as PortfolioItem).service_offering_source_ref\n        }`\n      )\n      .catch(() => ({ object: 'Platform', notFound: true })),\n\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/order_items/${\n          (orderItem as OrderItem).id\n        }/progress_messages`\n      )\n      .catch(() => ({ object: 'Messages', notFound: true })),\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/portfolios/${\n          (portfolioItem as PortfolioItem).portfolio_id\n        }`\n      )\n      .catch(() => ({ object: 'Portfolio', notFound: true }))\n  ];\n\n  return Promise.all(\n    parallerRequests\n  ).then(([platform, progressMessages, portfolio]) => [\n    order,\n    orderItem,\n    portfolioItem,\n    platform as Source | ObjectNotFound,\n    progressMessages as ProgressMessage | ObjectNotFound,\n    portfolio as Portfolio | ObjectNotFound\n  ]);\n};\n\nexport const fetchOrderProvisionItems = async (\n  orderId: string\n): Promise<OrderProvisionPayload> => {\n  let orderItems: OrderItem[];\n  try {\n    const items = await axiosInstance.get(\n      `${CATALOG_API_BASE}/order_items/?order_id=${orderId}`\n    );\n    orderItems = items.data;\n  } catch (error) {\n    orderItems = [];\n    // @ts-ignore\n    if (error.status === 404 || error.status === 400) {\n      catalogHistory.replace({\n        pathname: '/404',\n        state: { from: catalogHistory.location }\n      });\n    } else {\n      throw error;\n    }\n  }\n\n  const progressMessageItems: ProgressMessageItem[] = [];\n  const promises = orderItems.map((orderItem) =>\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/order_items/${orderItem.id}/progress_messages`)\n      .then((item) => {\n        progressMessageItems.push({\n          orderItemId: orderItem.id || '',\n          progressMessages: item.data\n        });\n        return progressMessageItems;\n      })\n  );\n  await Promise.all(promises);\n  return { orderItems, progressMessageItems };\n};\n","/* eslint camelcase: 0 */\nimport { getAxiosInstance } from '../shared/user-login';\nimport {\n  CATALOG_API_BASE,\n  APPROVAL_API_BASE,\n  CATALOG_INVENTORY_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  fetchOrderDetailSequence,\n  fetchOrderProvisionItems,\n  OrderDetailPayload,\n  OrderProvisionPayload\n} from './new-order-helper-s';\nimport {\n  ApiCollectionResponse,\n  EnhancedOrder,\n  Full\n} from '../../types/common-types-s';\nimport { ApiMetadata } from '../../types/common-types';\nimport {\n  ServicePlan,\n  Order,\n  OrderItem,\n  PortfolioItem,\n  ApprovalRequest,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\nimport { AxiosPromise } from 'axios';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\nimport { Request, Action } from '@redhat-cloud-services/approval-client';\nimport { GetOrderDetailParams } from './order-helper';\n\nconst axiosInstance = getAxiosInstance();\n\nexport const sendSubmitOrder = async (\n  {\n    service_parameters: { providerControlParameters, ...service_parameters },\n    ...parameters\n  }: AnyObject,\n  portfolioItem: AnyObject\n): Promise<EnhancedOrder> => {\n  const order: Order = await axiosInstance.post(`${CATALOG_API_BASE}/orders/`);\n  let orderItem: Partial<OrderItem> = {};\n  orderItem.count = 1;\n  orderItem = {\n    ...orderItem,\n    ...parameters,\n    service_parameters,\n    provider_control_parameters: providerControlParameters || {}\n  };\n  const orderItemResponse = await axiosInstance.post(\n    `${CATALOG_API_BASE}/orders/${order.id}/order_items/`,\n    {\n      id: order.id,\n      name: `orderItem_${order.id}`,\n      portfolio_item: portfolioItem.id,\n      ...orderItem\n    }\n  );\n  return axiosInstance\n    .post(`${CATALOG_API_BASE}/orders/${order.id}/submit/`)\n    .then((order) => ({\n      ...order,\n      orderItem: (orderItemResponse as unknown) as OrderItem\n    }));\n};\n\nexport const cancelOrder = (orderId: string): AxiosPromise<Order> =>\n  axiosInstance.post(`${CATALOG_API_BASE}/orders/${orderId}/cancel`);\n\nconst getOrderItems = (\n  orderIds: string[]\n): Promise<ApiCollectionResponse<OrderItem>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/order_items/?page-size=${orderIds.length * 3 ||\n      defaultSettings.limit}${orderIds.length ? '&' : ''}${orderIds\n      .map((orderId) => `order_id=${orderId}`)\n      .join('&')}`\n  );\n\nconst getOrderPortfolioItems = (\n  itemIds: string[]\n): Promise<ApiCollectionResponse<PortfolioItem>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolio_items/?${itemIds\n      .map((itemId) => `id=${itemId}`)\n      .join('&')}`\n  );\n\nexport const getOrders = (\n  filter = '',\n  pagination = defaultSettings\n): Promise<{\n  data: (Order & { orderItems: OrderItem[] })[];\n  portfolioItems: ApiCollectionResponse<PortfolioItem>;\n}> =>\n  axiosInstance\n    .get(\n      `${CATALOG_API_BASE}/orders/${filter}${\n        filter?.length > 1 ? '&' : '?'\n      }page_size=${pagination.limit}&page=${pagination.offset || 1}`\n    ) // eslint-disable-line max-len\n    .then((orders: ApiCollectionResponse<Full<Order>>) => {\n      return getOrderItems(orders.results.map(({ id }) => id)).then(\n        (orderItems) => {\n          return getOrderPortfolioItems(\n            orderItems.results.map(({ portfolio_item_id }) => portfolio_item_id)\n          ).then((portfolioItems) => {\n            return {\n              portfolioItems,\n              ...orders,\n              data: orders.results.map((order) => ({\n                ...order,\n                orderItems: orderItems.results.filter(\n                  ({ order_id }) => order_id === order.id\n                )\n              }))\n            };\n          });\n        }\n      );\n    });\n\nexport const getOrderDetail = (\n  params: GetOrderDetailParams\n): Promise<OrderDetailPayload> => {\n  if (Object.values(params).some((value) => !value)) {\n    /**\n     * Try to fetch data sequentially if any of the parameters is unknown\n     */\n    return fetchOrderDetailSequence(params.order);\n  }\n\n  const detailPromises = [\n    (axiosInstance\n      .get(`${CATALOG_API_BASE}/orders/${params.order}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return catalogHistory.replace({\n            pathname: '/404',\n            state: { from: catalogHistory.location }\n          });\n        }\n\n        throw error;\n      }) as unknown) as Promise<Order>,\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/order_items/${params['order-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Order item',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/portfolio_items/${params['portfolio-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Product',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_INVENTORY_API_BASE}/sources/${params.platform}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Platform',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/orders/${params.order}/progress_messages`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {};\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/portfolios/${params.portfolio}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Portfolio',\n            notFound: true\n          };\n        }\n\n        throw error;\n      })\n  ];\n\n  return (Promise.all(detailPromises) as unknown) as Promise<\n    OrderDetailPayload\n  >;\n};\n\nconst APPROVAL_REQUESTER_PERSONA = 'approval/requester';\nexport interface RequestTranscript extends Full<Request> {\n  actions: Action[];\n}\nconst requestTranscriptQuery = (parent_id: string) => `query {\n  requests(id: \"${parent_id}\") {\n    id\n    number_of_children\n    decision\n    group_name\n    created_at\n    state\n    actions {\n      id\n      created_at\n    }\n    requests {\n      id\n      number_of_children\n      decision\n      group_name\n      state\n      parent_id\n      created_at\n      actions {\n        id\n        created_at\n      }\n    }\n  }\n}`;\nconst fetchRequestTranscript = (\n  requestId: string\n): Promise<RequestTranscript[]> =>\n  axiosInstance\n    .get(`${APPROVAL_API_BASE}/requests/${requestId}`, {\n      'x-rh-persona': APPROVAL_REQUESTER_PERSONA\n    })\n    .then(({ data: { requests } }) => {\n      return requests &&\n        requests.length > 0 &&\n        requests[0].number_of_children > 0\n        ? requests[0].requests\n        : requests;\n    });\n\nexport const getApprovalRequests = (\n  orderItemId: string\n): Promise<{\n  data: { group_name: string; decision: string; updated?: string }[];\n}> =>\n  axiosInstance\n    .get(`${CATALOG_API_BASE}/order_items/${orderItemId}/approval_requests`)\n    .then(({ data }: { data: Full<ApprovalRequest>[] }) => {\n      const promises = data.map(({ approval_request_ref }) =>\n        fetchRequestTranscript(approval_request_ref)\n      );\n      return Promise.all(promises).then((requests) => {\n        const data = requests?.[0]?.map(({ actions, ...request }) => ({\n          ...request,\n          updated:\n            actions?.length > 0 ? actions.pop()?.created_at : request.created_at\n        }));\n        return { data: data || [] };\n      });\n    });\n\nexport const getOrderProvisionItems = async (\n  orderId: string\n): Promise<OrderProvisionPayload> => {\n  const items = await fetchOrderProvisionItems(orderId);\n  return items;\n};\n\nexport const getProgressMessages = (\n  orderItemId: string\n): Promise<{\n  data: ProgressMessage[];\n}> =>\n  axiosInstance\n    .get(`${CATALOG_API_BASE}/order_items/${orderItemId}/progress_messages`)\n    .then(({ data }: { data: Full<ProgressMessage>[] }) => {\n      return { data: data || [] };\n    });\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport * as ActionTypes from '../action-types';\nimport * as OrderHelper from '../../helpers/order/order-helper-s';\nimport OrderNotification from '../../presentational-components/order/order-notification';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport {\n  ApprovalRequestStateEnum,\n  Order,\n  OrderItem,\n  OrderStateEnum,\n  Portfolio,\n  PortfolioItem,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\nimport { Dispatch } from 'redux';\nimport { Full, StringObject, ReduxAction } from '../../types/common-types';\nimport { ApiCollectionResponse } from '../../types/common-types-s';\nimport { AsyncMiddlewareAction, GetReduxState } from '../../types/redux';\nimport { Source } from '@redhat-cloud-services/sources-client';\nimport {\n  ObjectNotFound,\n  ProgressMessageItem\n} from '../../helpers/order/new-order-helper';\nimport { GetOrderDetailParams } from '../../helpers/order/order-helper';\nimport {\n  getServicePlans,\n  ServicePlan\n} from '../../helpers/order/service-plan-helper-s';\nimport React from 'react';\n\nexport const fetchServicePlans = (\n  portfolioItemId: string\n): AsyncMiddlewareAction<ApiCollectionResponse<ServicePlan>> => ({\n  type: ActionTypes.FETCH_SERVICE_PLANS,\n  payload: getServicePlans(portfolioItemId)\n});\n\nexport const setSelectedPlan = (\n  data: ServicePlan\n): ReduxAction<ServicePlan> => ({\n  type: ActionTypes.SET_SELECTED_PLAN,\n  payload: data\n});\n\nexport const sendSubmitOrder = (\n  apiProps: AnyObject,\n  portfolioItem: Full<PortfolioItem>\n) => (dispatch: Dispatch): AsyncMiddlewareAction =>\n  dispatch({\n    type: ActionTypes.SUBMIT_SERVICE_ORDER,\n    payload: OrderHelper.sendSubmitOrder(apiProps, portfolioItem).then(\n      ({ id, orderItem }) =>\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: 'Your order has been accepted successfully',\n            description: (\n              <OrderNotification\n                id={id!}\n                dispatch={dispatch}\n                portfolioItemId={portfolioItem.id}\n                portfolioId={portfolioItem.portfolio_id}\n                platformId={portfolioItem.service_offering_source_ref}\n                orderItemId={orderItem.id!}\n              />\n            ),\n            dismissable: true\n          })\n        )\n    )\n  });\n\nexport const cancelOrder = (orderId: string) => (\n  dispatch: Dispatch,\n  getState: GetReduxState\n): Promise<void | { type: string }> => {\n  dispatch({ type: `${ActionTypes.CANCEL_ORDER}_PENDING` });\n  const {\n    orderReducer: { orderDetail }\n  } = getState();\n  return OrderHelper.cancelOrder(orderId)\n    .then(() => {\n      orderDetail.order.state = OrderStateEnum.Canceled;\n      if (\n        orderDetail.approvalRequest &&\n        orderDetail.approvalRequest.data.length > 0\n      ) {\n        orderDetail.approvalRequest.data[0].state = 'canceled' as ApprovalRequestStateEnum;\n      }\n\n      dispatch({\n        type: ActionTypes.SET_ORDER_DETAIL,\n        payload: { ...orderDetail }\n      });\n      return orderDetail;\n    })\n    .then((orderDetail) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been canceled successfully',\n          description: `${`Order #${orderDetail.order.id}`} was canceled.`,\n          dismissable: true\n        })\n      )\n    )\n    .then(() => dispatch({ type: `${ActionTypes.CANCEL_ORDER}_FULFILLED` }))\n    .catch((error) => {\n      dispatch({\n        type: `${ActionTypes.CANCEL_ORDER}_REJECTED`,\n        payload: error\n      });\n    });\n};\n\nexport const fetchOrders = (\n  filters: StringObject,\n  pagination = defaultSettings\n) => (dispatch: Dispatch): Promise<ReduxAction> => {\n  let queryFilter = Object.entries(filters)\n    .filter(([, value]) => value && value.length > 0)\n    .map(([key, value]) =>\n      Array.isArray(value)\n        ? value.map((value) => `${key}=${value}`).join('&')\n        : `${key}=${value}`\n    )\n    .join('&');\n  if (pagination.sortBy) {\n    queryFilter = `${queryFilter}&sort_by=${\n      pagination.sortBy\n    }:${pagination.sortDirection || 'desc'}`;\n  }\n\n  dispatch({ type: `${ActionTypes.FETCH_ORDERS}_PENDING` });\n  return OrderHelper.getOrders(queryFilter, pagination)\n    .then(({ portfolioItems, ...orders }) => {\n      dispatch({\n        type: ActionTypes.SET_PORTFOLIO_ITEMS,\n        payload: portfolioItems\n      });\n      return dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_FULFILLED`,\n        meta: {\n          ...pagination,\n          filter: queryFilter,\n          filters,\n          storeState: true,\n          stateKey: 'orders'\n        },\n        payload: orders\n      });\n    })\n    .catch((error) => {\n      return dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_REJECTED`,\n        payload: error\n      });\n    });\n};\n\nexport const fetchOrderDetails = (params: GetOrderDetailParams) => (\n  dispatch: Dispatch\n): Promise<{\n  type: string;\n  payload: {\n    order: Order | ObjectNotFound;\n    orderItem: OrderItem | ObjectNotFound;\n    portfolioItem: PortfolioItem | ObjectNotFound;\n    platform: Source | ObjectNotFound;\n    progressMessages: ProgressMessage | ObjectNotFound;\n    portfolio: Portfolio | ObjectNotFound;\n  };\n}> => {\n  dispatch({ type: `${ActionTypes.SET_ORDER_DETAIL}_PENDING` });\n  return OrderHelper.getOrderDetail(params)\n    .then(\n      ([\n        order,\n        orderItem,\n        portfolioItem,\n        platform,\n        progressMessages,\n        portfolio\n      ]) =>\n        dispatch({\n          type: `${ActionTypes.SET_ORDER_DETAIL}_FULFILLED`,\n          payload: {\n            order,\n            orderItem,\n            portfolioItem,\n            platform,\n            progressMessages,\n            portfolio\n          }\n        })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_DETAIL}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchApprovalRequests = (orderItemId: string) => (\n  dispatch: Dispatch\n): Promise<\n  | {\n      data: {\n        group_name: string;\n        decision: string;\n        updated?: string | undefined;\n      }[];\n    }\n  | { type: string; payload: any } /** the action in catch branch */\n> => {\n  dispatch({ type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_PENDING` });\n  return OrderHelper.getApprovalRequests(orderItemId)\n    .then((data) => {\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_FULFILLED`,\n        payload: data\n      });\n      return data;\n    })\n    .catch((err) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_REJECTED`,\n        payload: err\n      })\n    );\n};\n\nexport const fetchOrderProvision = (orderId: string) => (\n  dispatch: Dispatch\n): Promise<{\n  type: string;\n  payload: {\n    orderItems: OrderItem[] | [];\n    progressMessageItems: ProgressMessageItem[] | [];\n  };\n}> => {\n  dispatch({ type: `${ActionTypes.SET_ORDER_PROVISION_ITEMS}_PENDING` });\n  return OrderHelper.getOrderProvisionItems(orderId)\n    .then(({ orderItems, progressMessageItems }) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_PROVISION_ITEMS}_FULFILLED`,\n        payload: {\n          orderItems,\n          progressMessageItems\n        }\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_PROVISION_ITEMS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n"],"names":["axiosInstance","getServicePlans","portfolioItemId","get","patchServicePlanModified","servicePlanId","patchModifiedServicePlan","patch","createServicePlan","importServicePlan","options","post","resetServicePlanModified","id","sendSubmitOrder","portfolioItem","service_parameters","providerControlParameters","parameters","order","orderItem","count","provider_control_parameters","name","portfolio_item","orderItemResponse","then","fetchServicePlans","type","payload","apiProps","dispatch","variant","title","description","portfolioId","portfolio_id","platformId","service_offering_source_ref","orderItemId","dismissable","fetchOrders","filters","pagination","queryFilter","Object","entries","filter","value","length","map","key","Array","isArray","join","sortBy","sortDirection","limit","offset","orders","orderIds","results","orderId","orderItems","itemIds","itemId","portfolioItems","data","meta","storeState","stateKey","catch","error"],"sourceRoot":""}