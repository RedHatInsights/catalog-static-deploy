{"version":3,"sources":["webpack:///./src/utilities/async-form-validator.js","webpack:///./src/redux/actions/portfolio-actions.js","webpack:///./src/helpers/platform/platform-helper.js","webpack:///./src/redux/actions/platform-actions.js","webpack:///./src/helpers/portfolio/portfolio-helper.js","webpack:///./src/presentational-components/styled-components/lazy-load-image.js","webpack:///./src/presentational-components/shared/card-icon.js","webpack:///./src/assets/images/card-icon-default.svg","webpack:///./src/presentational-components/shared/card-checkbox.js","webpack:///./src/presentational-components/shared/service-offering-body.js","webpack:///./src/toolbar/helpers.js","webpack:///./src/smart-components/portfolio/portfolio-item.js","webpack:///./src/toolbar/schemas/products-toolbar.schema.js","webpack:///./src/smart-components/products/products.js"],"names":["asyncFunction","debounceTime","options","onlyResolvesLast","awesomeDebouncePromise","doFetchPortfolios","defaultSettings","filter","type","ActionTypes","meta","payload","PortfolioHelper","fetchPortfolios","args","dispatch","fetchPortfolioItems","limit","offset","fetchPortfolioItemsWithPortfolio","portfolioId","fetchSelectedPortfolio","id","addPortfolio","portfolioData","items","isDisabled","isTemporary","then","error","notifications","fulfilled","variant","title","description","name","addToPortfolio","updatePortfolio","getState","ADD_NOTIFICATION","dismissable","removePortfolio","removeProductsFromPortfolio","portfolioItems","portfolioName","portfolioReducer","selectedPortfolio","data","defaultMessage","values","count","length","undo","href","onClick","event","preventDefault","restoreData","CLEAR_NOTIFICATIONS","err","undoRemoveProductsFromPortfolio","copyPortfolio","portfolio","copyPortfolioItem","portfolioItemId","copyObject","newPortfolio","resetSelectedPortfolio","updatePortfolioItem","item","getPortfolioItemDetail","params","portfolioItem","source","axiosInstance","getAxiosInstance","graphqlInstance","getGraphqlInstance","getPlatforms","post","SOURCES_API_BASE","query","application_types","sources","getPlatform","platformId","get","getPlatformItems","filterQuery","TOPOLOGICAL_INVENTORY_API_BASE","getPlatformInventories","getServiceOffering","serviceOfferingId","sourceId","Promise","all","source_type_id","icon_url","service","fetchPlatforms","PlatformHelper","fetchPlatformItems","fetchSelectedPlatform","fetchPlatformInventories","fetchServiceOffering","portfolioApi","getPortfolioApi","portfolioItemApi","getPortfolioItemApi","listPortfolios","CATALOG_API_BASE","listPortfolioItems","portfolioReference","reduce","acc","curr","index","portfolio_id","Object","keys","map","join","portfolios","forEach","portfolioItemIndex","getPortfolioItem","getPortfolio","showPortfolio","getPortfolioItemsWithPortfolio","a","async","createPortfolio","createPortfolioItem","service_offering_ref","store","sanitizeValues","destroyPortfolio","removePortfolioItem","destroyPortfolioItem","removePortfolioItems","portfolioItemIds","itemId","restore_key","restoreKey","fetchPortfolioByName","restorePortfolioItems","unDeletePortfolioItem","postCopyPortfolio","postCopyPortfolioItem","uploadPortfolioItemIcon","file","iconId","FormData","append","patch","headers","accept","_boundary","getPortfolioFromState","find","StyledLazyLoadImage","styled","LazyLoadImage","height","hidden","CardIconContainer","div","CardIcon","src","useState","isLoaded","setLoaded","isUnknown","setUnknown","platformIconMapping","useSelector","platformReducer","defaultIcon","CardIconDefault","threshold","delayTime","onError","onLoad","propTypes","PropTypes","string","style","object","number","defaultProps","module","exports","CardCheckbox","handleCheck","isChecked","stopPropagation","onChange","aria-label","func","bool","StyledCardBody","CardBody","ServiceOfferingCardBody","distributor","display_name","pathname","searchParams","preserveSearch","props","component","TextVariants","h3","small","className","toDisplay","long_description","shape","createSingleItemGroup","groupName","toolbarComponentTypes","TOOLBAR_GROUP","key","fields","TOOLBAR_ITEM","createLinkButton","LINK","BUTTON","PortfolioItem","removeInProgress","isSelected","service_offering_source_ref","isSelectable","onSelect","orderUrl","createPortfolioToolbarSchema","fetchProducts","isLoading","filterProps","searchValue","onFilterChange","placeholder","TOP_TOOLBAR","TOP_TOOLBAR_TITLE","noData","LEVEL","TOOLBAR","FILTER_TOOLBAR_ITEM","isClearable","LEVEL_ITEM","AsyncPagination","apiProps","apiRequest","isCompact","debouncedFilter","asyncFormValidator","value","filteringCallback","initialState","filterValue","isOpen","isFetching","isFiltering","productsState","state","action","Products","release","useContext","AppContext","useReducer","stateDispatch","useDispatch","useEffect","undefined","scrollToTop","insights","chrome","appNavClick","secondaryNav","handleFilterItems","galleryItems","PORTFOLIO_ITEM_ROUTE","emptyStateProps","PrimaryAction","Button","Icon","WrenchIcon","SearchIcon","schema","createProductsToolbarSchema","renderEmptyState","dropDirection"],"mappings":"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","file":"js/products.js","sourcesContent":["import awesomeDebouncePromise from 'awesome-debounce-promise';\n\nexport default (\n  asyncFunction,\n  debounceTime = 250,\n  options = { onlyResolvesLast: false }\n) => awesomeDebouncePromise(asyncFunction, debounceTime, options);\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport {\n  ADD_NOTIFICATION,\n  CLEAR_NOTIFICATIONS\n} from '@redhat-cloud-services/frontend-components-notifications/';\n\nimport * as ActionTypes from '../action-types';\nimport * as PortfolioHelper from '../../helpers/portfolio/portfolio-helper';\nimport { defaultSettings } from '../../helpers/shared/pagination';\n\nexport const doFetchPortfolios = ({\n  filter,\n  ...options\n} = defaultSettings) => ({\n  type: ActionTypes.FETCH_PORTFOLIOS,\n  meta: { filter },\n  payload: PortfolioHelper.listPortfolios(filter, options)\n});\n\nexport const fetchPortfolios = (...args) => (dispatch) => {\n  return dispatch(doFetchPortfolios(...args));\n};\n\nexport const fetchPortfolioItems = (\n  filter = '',\n  options = defaultSettings\n) => ({\n  type: ActionTypes.FETCH_PORTFOLIO_ITEMS,\n  meta: { filter },\n  payload: PortfolioHelper.listPortfolioItems(\n    options.limit,\n    options.offset,\n    filter\n  )\n});\n\nexport const fetchPortfolioItem = (portfolioItemId) => ({\n  type: ActionTypes.FETCH_PORTFOLIO_ITEM,\n  payload: PortfolioHelper.getPortfolioItem(portfolioItemId)\n});\n\nexport const fetchPortfolioItemsWithPortfolio = (\n  portfolioId,\n  options = defaultSettings\n) => ({\n  type: ActionTypes.FETCH_PORTFOLIO_ITEMS_WITH_PORTFOLIO,\n  meta: { filter: options.filter },\n  payload: PortfolioHelper.getPortfolioItemsWithPortfolio(portfolioId, options)\n});\n\nexport const fetchSelectedPortfolio = (id) => ({\n  type: ActionTypes.FETCH_PORTFOLIO,\n  payload: PortfolioHelper.getPortfolio(id)\n});\n\nexport const searchPortfolioItems = (value) => ({\n  type: ActionTypes.FILTER_PORTFOLIO_ITEMS,\n  payload: new Promise((resolve) => {\n    resolve(value);\n  })\n});\n\nexport const addPortfolio = (portfolioData, items) => (dispatch) => {\n  dispatch({\n    type: ActionTypes.ADD_TEMPORARY_PORTFOLIO,\n    payload: { ...portfolioData, isDisabled: true, isTemporary: true }\n  });\n  return dispatch({\n    type: ActionTypes.ADD_PORTFOLIO,\n    payload: PortfolioHelper.addPortfolio(\n      {\n        ...portfolioData\n      },\n      items\n    )\n      .then(() => dispatch(doFetchPortfolios()))\n      .catch((error) => {\n        dispatch({ type: ActionTypes.RESTORE_PORTFOLIO_PREV_STATE });\n        throw error;\n      }),\n    meta: {\n      notifications: {\n        fulfilled: {\n          variant: 'success',\n          title: 'Success adding portfolio',\n          description: `Portfolio ${portfolioData.name} was added successfully.`\n        }\n      }\n    }\n  });\n};\n\nexport const addToPortfolio = (portfolioId, items) => ({\n  type: ActionTypes.ADD_TO_PORTFOLIO,\n  payload: PortfolioHelper.addToPortfolio(portfolioId, items),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: 'Success adding products',\n        description: 'Products were successfully added to portfolio.'\n      }\n    }\n  }\n});\n\nexport const updatePortfolio = (portfolioData) => (dispatch, getState) => {\n  dispatch({\n    type: ActionTypes.UPDATE_TEMPORARY_PORTFOLIO,\n    payload: portfolioData\n  });\n\n  return PortfolioHelper.updatePortfolio(portfolioData, { getState })\n    .then(() => dispatch(doFetchPortfolios()))\n    .then(() =>\n      dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          dismissable: true,\n          variant: 'success',\n          title: 'Success updating portfolio',\n          description: 'The portfolio was updated successfully.'\n        }\n      })\n    )\n    .catch((error) => {\n      dispatch({ type: ActionTypes.RESTORE_PORTFOLIO_PREV_STATE });\n      throw error;\n    })\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.UPDATE_TEMPORARY_PORTFOLIO}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const removePortfolio = (portfolioId) => (dispatch) => {\n  dispatch({\n    type: ActionTypes.DELETE_TEMPORARY_PORTFOLIO,\n    payload: portfolioId\n  });\n  return dispatch({\n    type: ActionTypes.REMOVE_PORTFOLIO,\n    payload: PortfolioHelper.removePortfolio(portfolioId)\n      .then(() => dispatch(doFetchPortfolios()))\n      .catch((error) => {\n        dispatch({ type: ActionTypes.RESTORE_PORTFOLIO_PREV_STATE });\n        throw error;\n      }),\n    meta: {\n      notifications: {\n        fulfilled: {\n          variant: 'success',\n          title: 'Success removing portfolio',\n          description: 'The portfolio was removed successfully.'\n        }\n      }\n    }\n  });\n};\n\nexport const selectPortfolioItem = (portfolioItem) => ({\n  type: ActionTypes.SELECT_PORTFOLIO_ITEM,\n  payload: portfolioItem\n});\n\nexport const undoRemoveProductsFromPortfolio = (restoreData, portfolioId) => (\n  dispatch\n) => {\n  dispatch({ type: `${ActionTypes.RESTORE_PORTFOLIO_ITEMS}_PENDING` });\n  return PortfolioHelper.restorePortfolioItems(restoreData)\n    .then(() =>\n      dispatch({ type: `${ActionTypes.RESTORE_PORTFOLIO_ITEMS}_FULFILLED` })\n    )\n    .then(() => dispatch({ type: CLEAR_NOTIFICATIONS }))\n    .then(() => dispatch(fetchPortfolioItemsWithPortfolio(portfolioId)))\n    .then(() =>\n      dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          variant: 'success',\n          dismissable: true,\n          title: 'Products have been restored'\n        }\n      })\n    )\n    .catch((err) =>\n      dispatch({\n        type: `${ActionTypes.RESTORE_PORTFOLIO_ITEMS}_REJECTED`,\n        payload: err\n      })\n    );\n};\n\nexport const removeProductsFromPortfolio = (portfolioItems, portfolioName) => (\n  dispatch,\n  getState\n) => {\n  dispatch({\n    type: `${ActionTypes.REMOVE_PORTFOLIO_ITEMS}_PENDING`\n  });\n  const {\n    portfolioReducer: {\n      portfolioItems: { meta },\n      selectedPortfolio: { id: portfolioId }\n    }\n  } = getState();\n  return PortfolioHelper.removePortfolioItems(portfolioItems)\n    .then((data) =>\n      dispatch(\n        fetchPortfolioItemsWithPortfolio(portfolioId, {\n          offset: 0,\n          limit: meta.limit,\n          filter: ''\n        })\n      ).then(() => data)\n    )\n    .then((data) => {\n      return dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          variant: 'success',\n          title: 'Products removed',\n          dismissable: true,\n          description: (\n            <FormattedMessage\n              id=\"portfolio.remove-portfolio-items\"\n              defaultMessage={`You have removed {count, number} {count, plural,\n            one {product}\n            other {products}\n          } from the {portfolioName} portfolio. {undo} if this was a mistake.`}\n              values={{\n                count: portfolioItems.length,\n                portfolioName,\n                undo: (\n                  <a\n                    href=\"#\"\n                    onClick={(event) => {\n                      event.preventDefault();\n                      dispatch(\n                        undoRemoveProductsFromPortfolio(data, portfolioId)\n                      );\n                    }}\n                  >\n                    Undo\n                  </a>\n                )\n              }}\n            />\n          )\n        }\n      });\n    })\n    .then(() =>\n      dispatch({ type: `${ActionTypes.REMOVE_PORTFOLIO_ITEMS}_FULFILLED` })\n    )\n    .catch((err) =>\n      dispatch({\n        type: `${ActionTypes.REMOVE_PORTFOLIO_ITEMS}_REJECTED`,\n        payload: err\n      })\n    );\n};\n\nexport const copyPortfolio = (id) => (dispatch) => {\n  dispatch({ type: 'COPY_PORTFOLIO_PENDING' });\n  return PortfolioHelper.copyPortfolio(id)\n    .then((portfolio) => {\n      dispatch({ type: 'COPY_PORTFOLIO_FULFILLED' });\n      dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          variant: 'success',\n          title: 'You have successfully copied a portfolio',\n          description: `${portfolio.name} has been copied.`,\n          dismissable: true\n        }\n      });\n      return portfolio;\n    })\n    .catch((err) =>\n      dispatch({ type: 'COPY_PORTFOLIO_REJECTED', payload: err })\n    );\n};\n\nexport const copyPortfolioItem = (\n  portfolioItemId,\n  copyObject,\n  newPortfolio\n) => (dispatch) => {\n  return PortfolioHelper.copyPortfolioItem(portfolioItemId, copyObject)\n    .then((data) => {\n      dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          variant: 'success',\n          title: 'You have successfully copied a product',\n          description: `${data.name} has been copied into ${newPortfolio.name}`,\n          dismissable: true\n        }\n      });\n      return data;\n    })\n    .catch((err) =>\n      dispatch({ type: 'COPY_PORTFOLIO_ITEM_REJECTED', payload: err })\n    );\n};\n\nexport const resetSelectedPortfolio = () => ({\n  type: ActionTypes.RESET_SELECTED_PORTFOLIO\n});\n\nexport const updatePortfolioItem = (values) => (dispatch, getState) => {\n  dispatch({\n    type: ActionTypes.UPDATE_TEMPORARY_PORTFOLIO_ITEM,\n    payload: values\n  });\n  return PortfolioHelper.updatePortfolioItem(values, { getState })\n    .then(() => {\n      dispatch({ type: ActionTypes.UPDATE_PORTFOLIO_ITEM, payload: values });\n      return values;\n    })\n    .then((item) =>\n      dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          variant: 'success',\n          title: `Portfolio item \"${item.name}\" was successfully updated`,\n          dismissable: true\n        }\n      })\n    )\n    .catch((error) => {\n      dispatch({ type: ActionTypes.RESTORE_PORTFOLIO_ITEM_PREV_STATE });\n      throw error;\n    })\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.UPDATE_TEMPORARY_PORTFOLIO_ITEM}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const getPortfolioItemDetail = (params) => (dispatch) => {\n  dispatch({ type: `${ActionTypes.SELECT_PORTFOLIO_ITEM}_PENDING` });\n  return PortfolioHelper.getPortfolioItemDetail(params).then(\n    ([portfolioItem, portfolio, source]) =>\n      dispatch({\n        type: `${ActionTypes.SELECT_PORTFOLIO_ITEM}_FULFILLED`,\n        payload: {\n          portfolioItem,\n          portfolio,\n          source\n        }\n      })\n  );\n};\n","import { getAxiosInstance, getGraphqlInstance } from '../shared/user-login';\nimport {\n  TOPOLOGICAL_INVENTORY_API_BASE,\n  SOURCES_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\nconst axiosInstance = getAxiosInstance();\nconst graphqlInstance = getGraphqlInstance();\n\nconst sourcesQuery = `\nquery {\n  application_types (filter: { name: \"/insights/platform/catalog\" }) {\n    id\n    name\n    sources {\n      id\n      name\n      source_type_id\n    }\n  }\n}`;\n\nexport const getPlatforms = () => {\n  return graphqlInstance\n    .post(`${SOURCES_API_BASE}/graphql`, { query: sourcesQuery })\n    .then(({ data: { application_types } }) => application_types)\n    .then(([{ sources }]) => sources);\n};\n\nexport const getPlatform = (platformId) => {\n  return axiosInstance.get(`${SOURCES_API_BASE}/sources/${platformId}`);\n};\n\nexport const getPlatformItems = (platformId, filter, options) => {\n  const filterQuery = filter ? `&filter[name][contains_i]=${filter}` : '';\n  if (platformId) {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/sources/${platformId}/service_offerings?filter[archived_at][nil]${filterQuery}${\n        options ? `&limit=${options.limit}&offset=${options.offset}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/service_offerings`\n    );\n  }\n};\n\nexport const getPlatformInventories = (\n  platformId,\n  filter = '',\n  options = defaultSettings\n) => {\n  if (platformId) {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/sources/${platformId}/service_inventories?filter[name][contains_i]=${filter}${\n        options ? `&limit=${options.limit}&offset=${options.offset}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/service_inventories?limit=${options.limit}&offset=${options.offset}`\n    );\n  }\n};\n\nexport const getServiceOffering = (serviceOfferingId, sourceId) =>\n  Promise.all([\n    axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/service_offerings/${serviceOfferingId}`\n    ),\n    axiosInstance\n      .get(`${SOURCES_API_BASE}/sources/${sourceId}`)\n      .then((source) => {\n        return axiosInstance\n          .get(`${SOURCES_API_BASE}/source_types/${source.source_type_id}`)\n          .then(({ icon_url }) => ({\n            ...source,\n            icon_url\n          }));\n      })\n  ]).then(([service, source]) => ({\n    service,\n    source\n  }));\n","import * as ActionTypes from '../action-types';\nimport * as PlatformHelper from '../../helpers/platform/platform-helper';\n\nconst doFetchPlatforms = () => (dispatch) => {\n  dispatch({ type: `${ActionTypes.FETCH_PLATFORMS}_PENDING` });\n  return PlatformHelper.getPlatforms()\n    .then((data) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_FULFILLED`,\n        payload: data\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchPlatforms = () => (dispatch) => dispatch(doFetchPlatforms());\n\nexport const fetchPlatformItems = (platformId, filter, options) => ({\n  type: ActionTypes.FETCH_PLATFORM_ITEMS,\n  payload: PlatformHelper.getPlatformItems(platformId, filter, options),\n  meta: {\n    platformId,\n    filter,\n    ...options\n  }\n});\n\nexport const fetchMultiplePlatformItems = (platformsId) => {\n  const platformPromisses = platformsId.map((platformId) =>\n    PlatformHelper.getPlatformItems(platformId).then((data) => ({\n      [platformId]: data\n    }))\n  );\n  return {\n    type: ActionTypes.FETCH_MULTIPLE_PLATFORM_ITEMS,\n    payload: Promise.all(platformPromisses).then((data) =>\n      data.reduce(\n        (acc, curr) => ({\n          ...acc,\n          ...curr\n        }),\n        {}\n      )\n    )\n  };\n};\n\nexport const fetchSelectedPlatform = (id) => ({\n  type: ActionTypes.FETCH_PLATFORM,\n  payload: PlatformHelper.getPlatform(id)\n});\n\nexport const searchPlatformItems = (value) => ({\n  type: ActionTypes.FILTER_PLATFORM_ITEMS,\n  payload: new Promise((resolve) => {\n    resolve(value);\n  })\n});\n\nexport const fetchPlatformInventories = (platformId, filter, options) => ({\n  type: ActionTypes.FETCH_PLATFORM_INVENTORIES,\n  payload: PlatformHelper.getPlatformInventories(platformId, filter, options)\n});\n\nexport const fetchServiceOffering = (...args) => ({\n  type: ActionTypes.FETCH_SERVICE_OFFERING,\n  payload: PlatformHelper.getServiceOffering(...args)\n});\n","import {\n  getAxiosInstance,\n  getPortfolioApi,\n  getPortfolioItemApi\n} from '../shared/user-login';\nimport { CATALOG_API_BASE, SOURCES_API_BASE } from '../../utilities/constants';\nimport { sanitizeValues } from '../shared/helpers';\nimport { defaultSettings } from '../shared/pagination';\n\nconst axiosInstance = getAxiosInstance();\nconst portfolioApi = getPortfolioApi();\nconst portfolioItemApi = getPortfolioItemApi();\n\nexport function listPortfolios(\n  filter = '',\n  { limit, offset } = defaultSettings\n) {\n  return axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolios?filter[name][contains_i]=${filter}&limit=${limit}&offset=${offset}`\n  );\n}\n\nexport function listPortfolioItems(limit = 50, offset = 0, filter = '') {\n  return axiosInstance\n    .get(\n      `${CATALOG_API_BASE}/portfolio_items?filter[name][contains_i]=${filter}&limit=${limit}&offset=${offset}`\n    )\n    .then((portfolioItems) => {\n      const portfolioReference = portfolioItems.data.reduce(\n        (acc, curr, index) =>\n          curr.portfolio_id\n            ? {\n                ...acc,\n                [curr.portfolio_id]: acc[curr.portfolio_id]\n                  ? [...acc[curr.portfolio_id], index]\n                  : [index]\n              }\n            : acc,\n        {}\n      );\n      return axiosInstance\n        .get(\n          `${CATALOG_API_BASE}/portfolios?${Object.keys(portfolioReference)\n            .map((id) => `filter[id][]=${id}`)\n            .join('&')}`\n        )\n        .then(({ data }) => ({\n          portfolioItems,\n          portfolioReference,\n          portfolios: data\n        }));\n    })\n    .then(({ portfolioItems, portfolioReference, portfolios }) => {\n      portfolios.forEach(({ id, name }) =>\n        portfolioReference[id].forEach((portfolioItemIndex) => {\n          portfolioItems.data[portfolioItemIndex].portfolioName = name;\n        })\n      );\n      return portfolioItems;\n    });\n}\n\nexport function getPortfolioItem(portfolioItemId) {\n  return axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolio_items/${portfolioItemId}`\n  );\n}\n\nexport function getPortfolio(portfolioId) {\n  return portfolioApi.showPortfolio(portfolioId);\n}\n\nexport function getPortfolioItemsWithPortfolio(\n  portfolioId,\n  { limit, offset, filter = '' } = defaultSettings\n) {\n  return axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolios/${portfolioId}/portfolio_items?filter[name][contains_i]=${filter}&limit=${limit}&offset=${offset}`\n  );\n}\n\n// TO DO - change to use the API call that adds multiple items to a portfolio when available\nexport async function addPortfolio(portfolioData, items) {\n  let portfolio = await portfolioApi.createPortfolio(portfolioData);\n  if (!portfolio) {\n    return portfolio;\n  }\n\n  if (items && items.length > 0) {\n    return addToPortfolio(portfolio, items);\n  }\n}\n\nexport async function addToPortfolio(portfolioId, items) {\n  return Promise.all(\n    items.map((item) =>\n      portfolioItemApi.createPortfolioItem({\n        portfolio_id: portfolioId,\n        service_offering_ref: item\n      })\n    )\n  );\n}\n\nexport async function updatePortfolio({ id, ...portfolioData }, store) {\n  return await portfolioApi.updatePortfolio(\n    id,\n    sanitizeValues(portfolioData, 'Portfolio', store)\n  );\n}\n\nexport async function removePortfolio(portfolioId) {\n  await portfolioApi.destroyPortfolio(portfolioId);\n}\n\nexport async function removePortfolioItem(portfolioItemId) {\n  return portfolioItemApi.destroyPortfolioItem(portfolioItemId);\n}\n\nexport async function removePortfolioItems(portfolioItemIds) {\n  return Promise.all(\n    portfolioItemIds.map(async (itemId) => {\n      const { restore_key } = await removePortfolioItem(itemId);\n      return {\n        portfolioItemId: itemId,\n        restoreKey: restore_key\n      };\n    })\n  );\n}\n\nexport function fetchProviderControlParameters(portfolioItemId) {\n  return axiosInstance\n    .get(\n      `${CATALOG_API_BASE}/portfolio_items/${portfolioItemId}/provider_control_parameters`\n    )\n    .then((data) => ({\n      required: [],\n      ...data,\n      properties: {\n        ...data.properties,\n        namespace: {\n          ...data.properties.namespace,\n          enum: Array.from(new Set([...data.properties.namespace.enum]))\n        }\n      }\n    }));\n}\n\nexport async function updatePortfolioItem({ id, ...portfolioItem }, store) {\n  return await portfolioItemApi.updatePortfolioItem(\n    id,\n    sanitizeValues(portfolioItem, 'PortfolioItem', store)\n  );\n}\n\nexport function fetchPortfolioByName(name = '') {\n  return axiosInstance.get(`${CATALOG_API_BASE}/portfolios`, {\n    params: {\n      filter: {\n        name\n      }\n    }\n  });\n}\n\nexport const restorePortfolioItems = (restoreData) =>\n  Promise.all(\n    restoreData.map(({ portfolioItemId, restoreKey }) =>\n      portfolioItemApi.unDeletePortfolioItem(portfolioItemId, {\n        restore_key: restoreKey\n      })\n    )\n  );\n\nexport const copyPortfolio = (portfolioId) =>\n  portfolioApi.postCopyPortfolio(portfolioId);\n\nexport const copyPortfolioItem = (portfolioItemId, copyObject = {}) =>\n  portfolioItemApi.postCopyPortfolioItem(portfolioItemId, copyObject);\n\nexport const uploadPortfolioItemIcon = (portfolioItemId, file, iconId) => {\n  let data = new FormData();\n  data.append('content', file, file.name);\n  if (iconId) {\n    return axiosInstance.patch(`${CATALOG_API_BASE}/icons/${iconId}`, data);\n  }\n\n  data.append('portfolio_item_id', portfolioItemId);\n  return axiosInstance.post(`${CATALOG_API_BASE}/icons`, data, {\n    headers: {\n      accept: 'application/json',\n      'Content-Type': `multipart/form-data; boundary=${data._boundary}`\n    }\n  });\n};\n\nexport const getPortfolioItemDetail = (params) =>\n  Promise.all([\n    axiosInstance.get(\n      `${CATALOG_API_BASE}/portfolio_items/${params.portfolioItem}`\n    ),\n    axiosInstance.get(`${CATALOG_API_BASE}/portfolios/${params.portfolio}`),\n    axiosInstance.get(`${SOURCES_API_BASE}/sources/${params.source}`)\n  ]);\n\nexport const getPortfolioFromState = (portfolioReducer, portfolioId) =>\n  portfolioReducer.selectedPortfolio &&\n  portfolioReducer.selectedPortfolio.id === portfolioId\n    ? portfolioReducer.selectedPortfolio\n    : portfolioReducer.portfolios.data.find(({ id }) => id === portfolioId);\n","import styled from 'styled-components';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\nconst StyledLazyLoadImage = styled(LazyLoadImage)`\n  height: ${({ height, hidden }) => (hidden ? '0px' : `${height}px` || '40px')};\n  display: ${({ hidden }) => (hidden ? 'none' : 'inherit')};\n  float: ${({ hidden }) => (hidden ? 'left' : 'inherit')};\n  width: ${({ hidden }) => (hidden ? 0 : 'inherit')};\n`;\n\nexport default StyledLazyLoadImage;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\n\nimport { IconPlaceholder } from './loader-placeholders';\nimport CardIconDefault from '../../assets/images/card-icon-default.svg';\nimport StyledLazyLoadImage from '../styled-components/lazy-load-image';\n\nconst CardIconContainer = styled.div`\n  display: inline-block;\n  height: ${({ height }) => `${height}px`};\n`;\n\nconst CardIcon = ({ src, height, sourceId }) => {\n  const [isLoaded, setLoaded] = useState(false);\n  const [isUnknown, setUnknown] = useState(false);\n  const platformIconMapping = useSelector(\n    ({ platformReducer: { platformIconMapping } }) => platformIconMapping\n  );\n  const defaultIcon = sourceId\n    ? platformIconMapping[sourceId]\n    : CardIconDefault;\n\n  return (\n    <CardIconContainer height={height}>\n      {!isLoaded && <IconPlaceholder height={height} />}\n      <StyledLazyLoadImage\n        threshold={2000}\n        delayTime={0}\n        hidden={!isLoaded}\n        height={isLoaded ? height : 0}\n        onError={() => setUnknown(true)}\n        onLoad={() => setLoaded(true)}\n        src={!src || isUnknown ? defaultIcon : src}\n      />\n    </CardIconContainer>\n  );\n};\n\nCardIcon.propTypes = {\n  src: PropTypes.string,\n  platformId: PropTypes.string,\n  style: PropTypes.object,\n  height: PropTypes.number,\n  sourceId: PropTypes.string\n};\n\nCardIcon.defaultProps = {\n  style: {},\n  height: 40\n};\n\nexport default CardIcon;\n","module.exports = __webpack_public_path__ + \"fonts/card-icon-default.svg\";","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Checkbox } from '@patternfly/react-core';\n\nconst CardCheckbox = ({ handleCheck, isChecked, id }) => (\n  <Checkbox\n    onClick={(event) => event.stopPropagation()}\n    isChecked={isChecked}\n    onChange={handleCheck}\n    aria-label=\"card checkbox\"\n    id={id}\n  />\n);\n\nCardCheckbox.propTypes = {\n  handleCheck: propTypes.func,\n  isChecked: propTypes.bool,\n  id: propTypes.string\n};\n\nexport default CardCheckbox;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  CardBody,\n  Text,\n  TextContent,\n  TextVariants\n} from '@patternfly/react-core';\nimport ItemDetails from './card-common';\nimport ConditionalLink from './conditional-link';\nimport EllipsisTextContainer from '../styled-components/ellipsis-text-container';\nimport styled from 'styled-components';\n\nconst StyledCardBody = styled(CardBody)`\n  height: 240px;\n`;\n\nconst ServiceOfferingCardBody = ({\n  name,\n  display_name,\n  distributor,\n  pathname,\n  searchParams,\n  preserveSearch,\n  portfolioName,\n  ...props\n}) => (\n  <StyledCardBody>\n    <TextContent>\n      <ConditionalLink\n        pathname={pathname}\n        searchParams={searchParams}\n        preserveSearch={preserveSearch}\n      >\n        <Text component={TextVariants.h3} title={name}>\n          <EllipsisTextContainer>{name}</EllipsisTextContainer>\n        </Text>\n      </ConditionalLink>\n      {distributor && <Text component={TextVariants.small}>{distributor}</Text>}\n      {portfolioName && (\n        <Fragment>\n          <Text className=\"pf-u-mb-0\" component=\"small\">\n            Portfolio\n          </Text>\n          <Text>{portfolioName}</Text>\n        </Fragment>\n      )}\n    </TextContent>\n    <ItemDetails\n      toDisplay={[props.description ? 'description' : 'long_description']}\n      {...props}\n    />\n  </StyledCardBody>\n);\n\nServiceOfferingCardBody.propTypes = {\n  name: PropTypes.string,\n  display_name: PropTypes.string,\n  distributor: PropTypes.string,\n  long_description: PropTypes.string,\n  description: PropTypes.string,\n  pathname: PropTypes.string,\n  preserveSearch: PropTypes.bool,\n  searchParams: PropTypes.shape({ [PropTypes.string]: PropTypes.string }),\n  portfolioName: PropTypes.string\n};\n\nexport default ServiceOfferingCardBody;\n","import { toolbarComponentTypes } from './toolbar-mapper';\n\nexport const createSingleItemGroup = ({\n  groupName,\n  hidden = false,\n  ...item\n}) => ({\n  component: toolbarComponentTypes.TOOLBAR_GROUP,\n  key: `${groupName}/single-toolbar-item-group`,\n  fields: hidden\n    ? []\n    : [\n        {\n          component: toolbarComponentTypes.TOOLBAR_ITEM,\n          key: `${groupName}/single-toolbar-item`,\n          fields: [item]\n        }\n      ]\n});\n\nexport const createLinkButton = ({ pathname, preserveSearch, ...item }) => ({\n  component: toolbarComponentTypes.LINK,\n  pathname,\n  preserveSearch,\n  key: `${item.key}/button-link`,\n  isDisabled: item.isDisabled,\n  fields: [\n    {\n      component: toolbarComponentTypes.BUTTON,\n      ...item\n    }\n  ]\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CardHeader, CardFooter, Level } from '@patternfly/react-core';\n\nimport { CATALOG_API_BASE } from '../../utilities/constants';\nimport CardIcon from '../../presentational-components/shared/card-icon';\nimport CardCheckbox from '../../presentational-components/shared/card-checkbox';\nimport ServiceOfferingCardBody from '../../presentational-components/shared/service-offering-body';\nimport {\n  StyledCard,\n  StyledGalleryItem\n} from '../../presentational-components/styled-components/styled-gallery';\n\nconst PortfolioItem = (props) => (\n  <StyledGalleryItem isDisabled={props.removeInProgress && props.isSelected}>\n    <StyledCard>\n      <CardHeader className=\"card_header\">\n        <Level>\n          <CardIcon\n            src={`${CATALOG_API_BASE}/portfolio_items/${props.id}/icon`}\n            sourceId={props.service_offering_source_ref}\n          />\n          {props.isSelectable && (\n            <CardCheckbox\n              handleCheck={() => props.onSelect(props.id)}\n              isChecked={props.isSelected}\n              id={props.id}\n            />\n          )}\n        </Level>\n      </CardHeader>\n      <ServiceOfferingCardBody {...props} />\n      <CardFooter></CardFooter>\n    </StyledCard>\n  </StyledGalleryItem>\n);\n\nPortfolioItem.propTypes = {\n  id: PropTypes.string,\n  platformId: PropTypes.string,\n  service_offering_source_ref: PropTypes.string,\n  isSelectable: PropTypes.bool,\n  isSelected: PropTypes.bool,\n  onSelect: PropTypes.func,\n  orderUrl: PropTypes.string,\n  removeInProgress: PropTypes.bool,\n  portfolio_id: PropTypes.string\n};\n\nexport default PortfolioItem;\n","import { toolbarComponentTypes } from '../toolbar-mapper';\nimport { createSingleItemGroup } from '../helpers';\n\nimport AsyncPagination from '../../smart-components/common/async-pagination';\n\nconst createPortfolioToolbarSchema = ({\n  meta,\n  fetchProducts,\n  isLoading,\n  filterProps: { searchValue, onFilterChange, placeholder }\n}) => ({\n  fields: [\n    {\n      component: toolbarComponentTypes.TOP_TOOLBAR,\n      key: 'products-top-toolbar',\n      fields: [\n        {\n          component: toolbarComponentTypes.TOP_TOOLBAR_TITLE,\n          key: 'products-toolbar-title',\n          title: 'Products',\n          description: 'All products collected from your portfolios',\n          noData: meta.noData\n        },\n        {\n          component: toolbarComponentTypes.LEVEL,\n          key: 'Products-actions',\n          fields: meta.noData\n            ? []\n            : [\n                {\n                  component: toolbarComponentTypes.TOOLBAR,\n                  key: 'main-portfolio-toolbar',\n                  fields: [\n                    createSingleItemGroup({\n                      groupName: 'filter-group',\n                      component: toolbarComponentTypes.FILTER_TOOLBAR_ITEM,\n                      key: 'filter-input',\n                      searchValue,\n                      onFilterChange,\n                      placeholder,\n                      isClearable: true\n                    })\n                  ]\n                },\n                {\n                  component: toolbarComponentTypes.LEVEL_ITEM,\n                  key: 'pagination-item',\n                  fields:\n                    meta.count > 0\n                      ? [\n                          {\n                            component: AsyncPagination,\n                            key: 'products-pagination',\n                            meta,\n                            apiProps: searchValue,\n                            apiRequest: fetchProducts,\n                            isDisabled: isLoading,\n                            isCompact: true\n                          }\n                        ]\n                      : []\n                }\n              ]\n        }\n      ]\n    }\n  ]\n});\n\nexport default createPortfolioToolbarSchema;\n","import React, { useContext, useEffect, useReducer } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { WrenchIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport { fetchPortfolioItems } from '../../redux/actions/portfolio-actions';\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport PortfolioItem from '../portfolio/portfolio-item';\nimport createProductsToolbarSchema from '../../toolbar/schemas/products-toolbar.schema';\nimport ToolbarRenderer from '../../toolbar/toolbar-renderer';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport ContentGallery from '../content-gallery/content-gallery';\nimport { fetchPlatforms } from '../../redux/actions/platform-actions';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport ContentGalleryEmptyState from '../../presentational-components/shared/content-gallery-empty-state';\nimport { Button } from '@patternfly/react-core';\nimport AppContext from '../../app-context';\nimport AsyncPagination from '../common/async-pagination';\nimport { PORTFOLIO_ITEM_ROUTE } from '../../constants/routes';\n\nconst debouncedFilter = asyncFormValidator(\n  (value, dispatch, filteringCallback) => {\n    filteringCallback(true);\n    dispatch(fetchPortfolioItems(value, defaultSettings)).then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst buildItemLink = ({ portfolio_id, id, service_offering_source_ref }) => {\n  if (portfolio_id && id && service_offering_source_ref) {\n    return {\n      pathname: portfolio_id && PORTFOLIO_ITEM_ROUTE,\n      searchParams: {\n        portfolio: portfolio_id,\n        'portfolio-item': id,\n        source: service_offering_source_ref\n      }\n    };\n  }\n\n  return {};\n};\n\nconst initialState = {\n  filterValue: '',\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false\n};\n\nconst productsState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return { ...state, filterValue: action.payload };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n  }\n\n  return state;\n};\n\nconst Products = () => {\n  const { release } = useContext(AppContext);\n  const [{ isFetching, filterValue, isFiltering }, stateDispatch] = useReducer(\n    productsState,\n    initialState\n  );\n  const dispatch = useDispatch();\n  const { data, meta } = useSelector(\n    ({ portfolioReducer: { portfolioItems } }) => portfolioItems\n  );\n\n  useEffect(() => {\n    Promise.all([\n      dispatch(fetchPortfolioItems(undefined, defaultSettings)),\n      dispatch(fetchPlatforms())\n    ]).then(() => stateDispatch({ type: 'setFetching', payload: false }));\n    scrollToTop();\n    insights.chrome.appNavClick({ id: 'products', secondaryNav: true });\n  }, []);\n\n  const handleFilterItems = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(value, dispatch, (isFiltering) =>\n      stateDispatch({ type: 'setFilteringFlag', payload: isFiltering })\n    );\n  };\n\n  const galleryItems = data.map((item) => (\n    <PortfolioItem\n      key={item.id}\n      pathname={item.portfolio_id && PORTFOLIO_ITEM_ROUTE}\n      {...buildItemLink(item)}\n      {...item}\n      toDisplay={[]}\n    />\n  ));\n\n  const SourcesAction = () => (\n    <a href={`${release}settings/sources/new`}>\n      <Button variant=\"primary\">Add source</Button>\n    </a>\n  );\n\n  const FilterAction = () => (\n    <Button variant=\"link\" onClick={() => handleFilterItems('')}>\n      Clear all filters\n    </Button>\n  );\n\n  const emptyStateProps = {\n    PrimaryAction: meta.noData ? SourcesAction : FilterAction,\n    title: meta.noData ? 'No products yet' : 'No results found',\n    description: meta.noData\n      ? 'Configure a source to add products into portfolios.'\n      : 'No results match the filter criteria. Remove all filters or clear all filters to show results.',\n    Icon: meta.noData ? WrenchIcon : SearchIcon\n  };\n\n  return (\n    <div>\n      <ToolbarRenderer\n        schema={createProductsToolbarSchema({\n          filterProps: {\n            searchValue: filterValue,\n            onFilterChange: handleFilterItems,\n            placeholder: 'Filter by product...'\n          },\n          title: 'Products',\n          isLoading: isFiltering || isFetching,\n          meta,\n          fetchProducts: (...args) => dispatch(fetchPortfolioItems(...args))\n        })}\n      />\n      <ContentGallery\n        isLoading={isFiltering || isFetching}\n        items={galleryItems}\n        renderEmptyState={() => (\n          <ContentGalleryEmptyState {...emptyStateProps} />\n        )}\n      />\n      {meta.count > 0 && (\n        <div className=\"pf-u-p-lg global-primary-background content-layout\">\n          <AsyncPagination\n            dropDirection=\"up\"\n            meta={meta}\n            apiRequest={(...args) => dispatch(fetchPortfolioItems(...args))}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Products;\n"],"sourceRoot":""}