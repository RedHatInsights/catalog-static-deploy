{"version":3,"sources":["webpack:///./src/helpers/platform/platform-helper.js","webpack:///./src/redux/actions/platform-actions.js","webpack:///./src/presentational-components/styled-components/lazy-load-image.js","webpack:///./src/presentational-components/shared/card-icon.js","webpack:///./src/assets/images/card-icon-default.svg","webpack:///./src/presentational-components/shared/card-checkbox.js","webpack:///./src/presentational-components/shared/service-offering-body.js","webpack:///./src/smart-components/portfolio/portfolio-item.js","webpack:///./src/toolbar/schemas/products-toolbar.schema.js","webpack:///./src/smart-components/products/products.js"],"names":["axiosInstance","getAxiosInstance","graphqlInstance","getGraphqlInstance","getPlatforms","post","SOURCES_API_BASE","query","then","data","application_types","sources","getPlatform","platformId","get","getPlatformItems","filter","options","filterQuery","TOPOLOGICAL_INVENTORY_API_BASE","limit","offset","getPlatformInventories","defaultSettings","getServiceOffering","serviceOfferingId","sourceId","Promise","all","source","source_type_id","icon_url","service","fetchPlatforms","dispatch","type","ActionTypes","PlatformHelper","payload","error","fetchPlatformItems","meta","fetchSelectedPlatform","id","fetchPlatformInventories","fetchServiceOffering","StyledLazyLoadImage","styled","LazyLoadImage","height","hidden","CardIconContainer","div","CardIcon","src","useState","isLoaded","setLoaded","isUnknown","setUnknown","platformIconMapping","useSelector","platformReducer","defaultIcon","CardIconDefault","threshold","delayTime","onError","onLoad","propTypes","PropTypes","string","style","object","number","defaultProps","module","exports","CardCheckbox","handleCheck","isChecked","onClick","event","stopPropagation","onChange","aria-label","func","bool","ServiceOfferingCardBody","name","distributor","display_name","pathname","searchParams","preserveSearch","portfolioName","props","component","TextVariants","h3","title","small","className","toDisplay","description","long_description","shape","PortfolioItem","isDisabled","removeInProgress","isSelected","CATALOG_API_BASE","service_offering_source_ref","isSelectable","onSelect","orderUrl","portfolio_id","createPortfolioToolbarSchema","fetchProducts","isLoading","filterProps","searchValue","onFilterChange","placeholder","fields","toolbarComponentTypes","TOP_TOOLBAR","key","TOP_TOOLBAR_TITLE","noData","LEVEL","TOOLBAR","createSingleItemGroup","groupName","FILTER_TOOLBAR_ITEM","isClearable","LEVEL_ITEM","count","AsyncPagination","apiProps","apiRequest","isCompact","debouncedFilter","asyncFormValidator","value","filteringCallback","fetchPortfolioItems","initialState","filterValue","isOpen","isFetching","isFiltering","productsState","state","action","Products","release","useContext","AppContext","useReducer","stateDispatch","useDispatch","portfolioReducer","portfolioItems","useEffect","undefined","scrollToTop","insights","chrome","appNavClick","secondaryNav","handleFilterItems","galleryItems","map","item","PORTFOLIO_ITEM_ROUTE","portfolio","emptyStateProps","PrimaryAction","href","Button","variant","Icon","WrenchIcon","SearchIcon","schema","createProductsToolbarSchema","items","renderEmptyState","dropDirection"],"mappings":"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","file":"js/products.js","sourcesContent":["import { getAxiosInstance, getGraphqlInstance } from '../shared/user-login';\nimport {\n  TOPOLOGICAL_INVENTORY_API_BASE,\n  SOURCES_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\nconst axiosInstance = getAxiosInstance();\nconst graphqlInstance = getGraphqlInstance();\n\nconst sourcesQuery = `\nquery {\n  application_types (filter: { name: \"/insights/platform/catalog\" }) {\n    id\n    name\n    sources {\n      id\n      name\n      source_type_id\n    }\n  }\n}`;\n\nexport const getPlatforms = () => {\n  return graphqlInstance\n    .post(`${SOURCES_API_BASE}/graphql`, { query: sourcesQuery })\n    .then(({ data: { application_types } }) => application_types)\n    .then(([{ sources }]) => sources);\n};\n\nexport const getPlatform = (platformId) => {\n  return axiosInstance.get(`${SOURCES_API_BASE}/sources/${platformId}`);\n};\n\nexport const getPlatformItems = (platformId, filter, options) => {\n  const filterQuery = filter ? `&filter[name][contains_i]=${filter}` : '';\n  if (platformId) {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/sources/${platformId}/service_offerings?filter[archived_at][nil]${filterQuery}${\n        options ? `&limit=${options.limit}&offset=${options.offset}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/service_offerings`\n    );\n  }\n};\n\nexport const getPlatformInventories = (\n  platformId,\n  filter = '',\n  options = defaultSettings\n) => {\n  if (platformId) {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/sources/${platformId}/service_inventories?filter[name][contains_i]=${filter}${\n        options ? `&limit=${options.limit}&offset=${options.offset}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/service_inventories?limit=${options.limit}&offset=${options.offset}`\n    );\n  }\n};\n\nexport const getServiceOffering = (serviceOfferingId, sourceId) =>\n  Promise.all([\n    axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/service_offerings/${serviceOfferingId}`\n    ),\n    axiosInstance\n      .get(`${SOURCES_API_BASE}/sources/${sourceId}`)\n      .then((source) => {\n        return axiosInstance\n          .get(`${SOURCES_API_BASE}/source_types/${source.source_type_id}`)\n          .then(({ icon_url }) => ({\n            ...source,\n            icon_url\n          }));\n      })\n  ]).then(([service, source]) => ({\n    service,\n    source\n  }));\n","import * as ActionTypes from '../action-types';\nimport * as PlatformHelper from '../../helpers/platform/platform-helper';\n\nconst doFetchPlatforms = () => (dispatch) => {\n  dispatch({ type: `${ActionTypes.FETCH_PLATFORMS}_PENDING` });\n  return PlatformHelper.getPlatforms()\n    .then((data) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_FULFILLED`,\n        payload: data\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchPlatforms = () => (dispatch) => dispatch(doFetchPlatforms());\n\nexport const fetchPlatformItems = (platformId, filter, options) => ({\n  type: ActionTypes.FETCH_PLATFORM_ITEMS,\n  payload: PlatformHelper.getPlatformItems(platformId, filter, options),\n  meta: {\n    platformId,\n    filter,\n    ...options\n  }\n});\n\nexport const fetchMultiplePlatformItems = (platformsId) => {\n  const platformPromisses = platformsId.map((platformId) =>\n    PlatformHelper.getPlatformItems(platformId).then((data) => ({\n      [platformId]: data\n    }))\n  );\n  return {\n    type: ActionTypes.FETCH_MULTIPLE_PLATFORM_ITEMS,\n    payload: Promise.all(platformPromisses).then((data) =>\n      data.reduce(\n        (acc, curr) => ({\n          ...acc,\n          ...curr\n        }),\n        {}\n      )\n    )\n  };\n};\n\nexport const fetchSelectedPlatform = (id) => ({\n  type: ActionTypes.FETCH_PLATFORM,\n  payload: PlatformHelper.getPlatform(id)\n});\n\nexport const searchPlatformItems = (value) => ({\n  type: ActionTypes.FILTER_PLATFORM_ITEMS,\n  payload: new Promise((resolve) => {\n    resolve(value);\n  })\n});\n\nexport const fetchPlatformInventories = (platformId, filter, options) => ({\n  type: ActionTypes.FETCH_PLATFORM_INVENTORIES,\n  payload: PlatformHelper.getPlatformInventories(platformId, filter, options)\n});\n\nexport const fetchServiceOffering = (...args) => ({\n  type: ActionTypes.FETCH_SERVICE_OFFERING,\n  payload: PlatformHelper.getServiceOffering(...args)\n});\n","import styled from 'styled-components';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\nconst StyledLazyLoadImage = styled(LazyLoadImage)`\n  height: ${({ height, hidden }) => (hidden ? '0px' : `${height}px` || '40px')};\n  display: ${({ hidden }) => (hidden ? 'none' : 'inherit')};\n  float: ${({ hidden }) => (hidden ? 'left' : 'inherit')};\n  width: ${({ hidden }) => (hidden ? 0 : 'inherit')};\n`;\n\nexport default StyledLazyLoadImage;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\n\nimport { IconPlaceholder } from './loader-placeholders';\nimport CardIconDefault from '../../assets/images/card-icon-default.svg';\nimport StyledLazyLoadImage from '../styled-components/lazy-load-image';\n\nconst CardIconContainer = styled.div`\n  display: inline-block;\n  height: ${({ height }) => `${height}px`};\n`;\n\nconst CardIcon = ({ src, height, sourceId }) => {\n  const [isLoaded, setLoaded] = useState(false);\n  const [isUnknown, setUnknown] = useState(false);\n  const platformIconMapping = useSelector(\n    ({ platformReducer: { platformIconMapping } }) => platformIconMapping\n  );\n  const defaultIcon = sourceId\n    ? platformIconMapping[sourceId]\n    : CardIconDefault;\n\n  return (\n    <CardIconContainer height={height}>\n      {!isLoaded && <IconPlaceholder height={height} />}\n      <StyledLazyLoadImage\n        threshold={2000}\n        delayTime={0}\n        hidden={!isLoaded}\n        height={isLoaded ? height : 0}\n        onError={() => setUnknown(true)}\n        onLoad={() => setLoaded(true)}\n        src={!src || isUnknown ? defaultIcon : src}\n      />\n    </CardIconContainer>\n  );\n};\n\nCardIcon.propTypes = {\n  src: PropTypes.string,\n  platformId: PropTypes.string,\n  style: PropTypes.object,\n  height: PropTypes.number,\n  sourceId: PropTypes.string\n};\n\nCardIcon.defaultProps = {\n  style: {},\n  height: 40\n};\n\nexport default CardIcon;\n","module.exports = __webpack_public_path__ + \"fonts/card-icon-default.svg\";","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Checkbox } from '@patternfly/react-core';\n\nconst CardCheckbox = ({ handleCheck, isChecked, id }) => (\n  <Checkbox\n    onClick={(event) => event.stopPropagation()}\n    isChecked={isChecked}\n    onChange={handleCheck}\n    aria-label=\"card checkbox\"\n    id={id}\n  />\n);\n\nCardCheckbox.propTypes = {\n  handleCheck: propTypes.func,\n  isChecked: propTypes.bool,\n  id: propTypes.string\n};\n\nexport default CardCheckbox;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport ItemDetails from './card-common';\nimport ConditionalLink from './conditional-link';\nimport EllipsisTextContainer from '../styled-components/ellipsis-text-container';\nimport { StyledCardBody } from '../styled-components/card';\n\nconst ServiceOfferingCardBody = ({\n  name,\n  display_name,\n  distributor,\n  pathname,\n  searchParams,\n  preserveSearch,\n  portfolioName,\n  ...props\n}) => (\n  <StyledCardBody>\n    <TextContent>\n      <ConditionalLink\n        pathname={pathname}\n        searchParams={searchParams}\n        preserveSearch={preserveSearch}\n      >\n        <Text component={TextVariants.h3} title={name}>\n          <EllipsisTextContainer>{name}</EllipsisTextContainer>\n        </Text>\n      </ConditionalLink>\n      {distributor && <Text component={TextVariants.small}>{distributor}</Text>}\n      {portfolioName && (\n        <Fragment>\n          <Text className=\"pf-u-mb-0\" component=\"small\">\n            Portfolio\n          </Text>\n          <Text>{portfolioName}</Text>\n        </Fragment>\n      )}\n    </TextContent>\n    <ItemDetails\n      toDisplay={[props.description ? 'description' : 'long_description']}\n      {...props}\n    />\n  </StyledCardBody>\n);\n\nServiceOfferingCardBody.propTypes = {\n  name: PropTypes.string,\n  display_name: PropTypes.string,\n  distributor: PropTypes.string,\n  long_description: PropTypes.string,\n  description: PropTypes.string,\n  pathname: PropTypes.string,\n  preserveSearch: PropTypes.bool,\n  searchParams: PropTypes.shape({ [PropTypes.string]: PropTypes.string }),\n  portfolioName: PropTypes.string\n};\n\nexport default ServiceOfferingCardBody;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CardHeader, CardFooter, Level } from '@patternfly/react-core';\n\nimport { CATALOG_API_BASE } from '../../utilities/constants';\nimport CardIcon from '../../presentational-components/shared/card-icon';\nimport CardCheckbox from '../../presentational-components/shared/card-checkbox';\nimport ServiceOfferingCardBody from '../../presentational-components/shared/service-offering-body';\nimport {\n  StyledCard,\n  StyledGalleryItem\n} from '../../presentational-components/styled-components/styled-gallery';\n\nconst PortfolioItem = (props) => (\n  <StyledGalleryItem isDisabled={props.removeInProgress && props.isSelected}>\n    <StyledCard>\n      <CardHeader className=\"card_header\">\n        <Level>\n          <CardIcon\n            src={`${CATALOG_API_BASE}/portfolio_items/${props.id}/icon`}\n            sourceId={props.service_offering_source_ref}\n          />\n          {props.isSelectable && (\n            <CardCheckbox\n              handleCheck={() => props.onSelect(props.id)}\n              isChecked={props.isSelected}\n              id={props.id}\n            />\n          )}\n        </Level>\n      </CardHeader>\n      <ServiceOfferingCardBody {...props} />\n      <CardFooter></CardFooter>\n    </StyledCard>\n  </StyledGalleryItem>\n);\n\nPortfolioItem.propTypes = {\n  id: PropTypes.string,\n  platformId: PropTypes.string,\n  service_offering_source_ref: PropTypes.string,\n  isSelectable: PropTypes.bool,\n  isSelected: PropTypes.bool,\n  onSelect: PropTypes.func,\n  orderUrl: PropTypes.string,\n  removeInProgress: PropTypes.bool,\n  portfolio_id: PropTypes.string\n};\n\nexport default PortfolioItem;\n","import { toolbarComponentTypes } from '../toolbar-mapper';\nimport { createSingleItemGroup } from '../helpers';\n\nimport AsyncPagination from '../../smart-components/common/async-pagination';\n\nconst createPortfolioToolbarSchema = ({\n  meta,\n  fetchProducts,\n  isLoading,\n  filterProps: { searchValue, onFilterChange, placeholder }\n}) => ({\n  fields: [\n    {\n      component: toolbarComponentTypes.TOP_TOOLBAR,\n      key: 'products-top-toolbar',\n      fields: [\n        {\n          component: toolbarComponentTypes.TOP_TOOLBAR_TITLE,\n          key: 'products-toolbar-title',\n          title: 'Products',\n          description: 'All products collected from your portfolios',\n          noData: meta.noData\n        },\n        {\n          component: toolbarComponentTypes.LEVEL,\n          key: 'Products-actions',\n          fields: meta.noData\n            ? []\n            : [\n                {\n                  component: toolbarComponentTypes.TOOLBAR,\n                  key: 'main-portfolio-toolbar',\n                  fields: [\n                    createSingleItemGroup({\n                      groupName: 'filter-group',\n                      component: toolbarComponentTypes.FILTER_TOOLBAR_ITEM,\n                      key: 'filter-input',\n                      searchValue,\n                      onFilterChange,\n                      placeholder,\n                      isClearable: true\n                    })\n                  ]\n                },\n                {\n                  component: toolbarComponentTypes.LEVEL_ITEM,\n                  key: 'pagination-item',\n                  fields:\n                    meta.count > 0\n                      ? [\n                          {\n                            component: AsyncPagination,\n                            key: 'products-pagination',\n                            meta,\n                            apiProps: searchValue,\n                            apiRequest: fetchProducts,\n                            isDisabled: isLoading,\n                            isCompact: true\n                          }\n                        ]\n                      : []\n                }\n              ]\n        }\n      ]\n    }\n  ]\n});\n\nexport default createPortfolioToolbarSchema;\n","import React, { useContext, useEffect, useReducer } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { WrenchIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport { fetchPortfolioItems } from '../../redux/actions/portfolio-actions';\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport PortfolioItem from '../portfolio/portfolio-item';\nimport createProductsToolbarSchema from '../../toolbar/schemas/products-toolbar.schema';\nimport ToolbarRenderer from '../../toolbar/toolbar-renderer';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport ContentGallery from '../content-gallery/content-gallery';\nimport { fetchPlatforms } from '../../redux/actions/platform-actions';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport ContentGalleryEmptyState from '../../presentational-components/shared/content-gallery-empty-state';\nimport { Button } from '@patternfly/react-core';\nimport AppContext from '../../app-context';\nimport AsyncPagination from '../common/async-pagination';\nimport { PORTFOLIO_ITEM_ROUTE } from '../../constants/routes';\n\nconst debouncedFilter = asyncFormValidator(\n  (value, dispatch, filteringCallback) => {\n    filteringCallback(true);\n    dispatch(fetchPortfolioItems(value, defaultSettings)).then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst buildItemLink = ({ portfolio_id, id, service_offering_source_ref }) => {\n  if (portfolio_id && id && service_offering_source_ref) {\n    return {\n      pathname: portfolio_id && PORTFOLIO_ITEM_ROUTE,\n      searchParams: {\n        portfolio: portfolio_id,\n        'portfolio-item': id,\n        source: service_offering_source_ref\n      }\n    };\n  }\n\n  return {};\n};\n\nconst initialState = {\n  filterValue: '',\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false\n};\n\nconst productsState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return { ...state, filterValue: action.payload };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n  }\n\n  return state;\n};\n\nconst Products = () => {\n  const { release } = useContext(AppContext);\n  const [{ isFetching, filterValue, isFiltering }, stateDispatch] = useReducer(\n    productsState,\n    initialState\n  );\n  const dispatch = useDispatch();\n  const { data, meta } = useSelector(\n    ({ portfolioReducer: { portfolioItems } }) => portfolioItems\n  );\n\n  useEffect(() => {\n    Promise.all([\n      dispatch(fetchPortfolioItems(undefined, defaultSettings)),\n      dispatch(fetchPlatforms())\n    ]).then(() => stateDispatch({ type: 'setFetching', payload: false }));\n    scrollToTop();\n    insights.chrome.appNavClick({ id: 'products', secondaryNav: true });\n  }, []);\n\n  const handleFilterItems = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(value, dispatch, (isFiltering) =>\n      stateDispatch({ type: 'setFilteringFlag', payload: isFiltering })\n    );\n  };\n\n  const galleryItems = data.map((item) => (\n    <PortfolioItem\n      key={item.id}\n      pathname={item.portfolio_id && PORTFOLIO_ITEM_ROUTE}\n      {...buildItemLink(item)}\n      {...item}\n      toDisplay={[]}\n    />\n  ));\n\n  const SourcesAction = () => (\n    <a href={`${release}settings/sources/new`}>\n      <Button variant=\"primary\">Add source</Button>\n    </a>\n  );\n\n  const FilterAction = () => (\n    <Button variant=\"link\" onClick={() => handleFilterItems('')}>\n      Clear all filters\n    </Button>\n  );\n\n  const emptyStateProps = {\n    PrimaryAction: meta.noData ? SourcesAction : FilterAction,\n    title: meta.noData ? 'No products yet' : 'No results found',\n    description: meta.noData\n      ? 'Configure a source to add products into portfolios.'\n      : 'No results match the filter criteria. Remove all filters or clear all filters to show results.',\n    Icon: meta.noData ? WrenchIcon : SearchIcon\n  };\n\n  return (\n    <div>\n      <ToolbarRenderer\n        schema={createProductsToolbarSchema({\n          filterProps: {\n            searchValue: filterValue,\n            onFilterChange: handleFilterItems,\n            placeholder: 'Filter by product...'\n          },\n          title: 'Products',\n          isLoading: isFiltering || isFetching,\n          meta,\n          fetchProducts: (...args) => dispatch(fetchPortfolioItems(...args))\n        })}\n      />\n      <ContentGallery\n        isLoading={isFiltering || isFetching}\n        items={galleryItems}\n        renderEmptyState={() => (\n          <ContentGalleryEmptyState {...emptyStateProps} />\n        )}\n      />\n      {meta.count > 0 && (\n        <div className=\"pf-u-p-lg global-primary-background content-layout\">\n          <AsyncPagination\n            dropDirection=\"up\"\n            meta={meta}\n            apiRequest={(...args) => dispatch(fetchPortfolioItems(...args))}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Products;\n"],"sourceRoot":""}