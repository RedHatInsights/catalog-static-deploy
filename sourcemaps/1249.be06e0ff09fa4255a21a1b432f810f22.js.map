{"version":3,"file":"js/1249.1642533368488.6a81ec32a060c81c8b3c.js","mappings":"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","sources":["webpack:///./src/presentational-components/shared/conditional-link.tsx","webpack:///./src/presentational-components/shared/top-toolbar.tsx","webpack:///./src/helpers/platform/platform-helper-s.ts","webpack:///./src/redux/actions/platform-actions-s.ts","webpack:///./src/helpers/platform/platform-helper.ts","webpack:///./src/redux/actions/platform-actions.ts","webpack:///./src/smart-components/common/catalog-breadcrumbs.tsx","webpack:///./src/smart-components/common/catalog-link.tsx","webpack:///./src/utilities/use-enhanced-history.ts"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { Fragment } from 'react';\nimport CatalogLink, {\n  CatalogLinkProps\n} from '../../smart-components/common/catalog-link';\n\nexport interface ConditionalLinkProps\n  extends Omit<CatalogLinkProps, 'pathname'> {\n  pathname?: string;\n}\nconst ConditionalLink: React.ComponentType<ConditionalLinkProps> = ({\n  children,\n  pathname,\n  ...props\n}) => (\n  <Fragment>\n    {pathname ? (\n      <CatalogLink pathname={pathname} {...props}>\n        {children}\n      </CatalogLink>\n    ) : (\n      children\n    )}\n  </Fragment>\n);\n\nexport default ConditionalLink;\n","/* eslint-disable react/prop-types */\nimport React, { Fragment, ReactNode, useContext } from 'react';\nimport {\n  LevelItem,\n  Text,\n  TextContent,\n  TextVariants\n} from '@patternfly/react-core';\nimport clsx from 'clsx';\nimport { ToolbarTitlePlaceholder } from './loader-placeholders';\nimport CatalogBreadcrumbs from '../../smart-components/common/catalog-breadcrumbs';\nimport {\n  TopToolbarWrapper,\n  TopToolbarTitleContainer\n} from '../styled-components/toolbars';\nimport { BreadcrumbFragment } from '../../redux/reducers/breadcrumbs-reducer';\nimport { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport UserContext from '../../user-context';\n\nexport interface TopToolbarProps {\n  paddingBottom?: boolean;\n  breadcrumbs?: boolean;\n  breadcrumbfragments?: BreadcrumbFragment[];\n}\nconst TopToolbar: React.ComponentType<TopToolbarProps> = ({\n  children,\n  paddingBottom = true,\n  breadcrumbs = true,\n  breadcrumbfragments = [],\n  ...rest\n}) => {\n  const { standalone: standalone } = useContext(UserContext);\n  return (\n    <div className={clsx({ ['standalone-toolbar']: !!standalone })}>\n      <TopToolbarWrapper\n        className={`pf-u-pt-lg pf-u-pr-lg pf-u-pl-lg ${\n          paddingBottom ? 'pf-u-pb-lg' : ''\n        }`}\n        {...rest}\n      >\n        {breadcrumbs && (\n          <div className=\"pf-u-mb-md\">\n            {' '}\n            <CatalogBreadcrumbs breadcrumbfragments={breadcrumbfragments} />\n          </div>\n        )}\n        {children}\n      </TopToolbarWrapper>\n    </div>\n  );\n};\n\nexport default TopToolbar;\n\nexport interface TopToolbarTitleProps {\n  title?: React.ElementType;\n  description?: ReactNode;\n  noData?: boolean;\n}\nexport const TopToolbarTitle: React.ComponentType<TopToolbarTitleProps> = ({\n  title = <ToolbarTitlePlaceholder />,\n  description,\n  children,\n  noData,\n  ...rest\n}) => (\n  <Fragment>\n    <TopToolbarTitleContainer\n      className={clsx({ 'pf-u-mb-lg': !noData, 'flex-no-wrap': true })}\n      {...rest}\n    >\n      <LevelItem>\n        <TextContent>\n          <PageHeaderTitle title={title} className=\"pf-u-m-0 pf-u-mr-md\" />\n          {description && <Text component={TextVariants.p}>{description}</Text>}\n        </TextContent>\n      </LevelItem>\n      <LevelItem className=\"flex-item-no-wrap\">{children}</LevelItem>\n    </TopToolbarTitleContainer>\n  </Fragment>\n);\n","import { getAxiosInstance } from '../shared/user-login';\nimport {\n  CATALOG_API_BASE,\n  CATALOG_INVENTORY_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings, PaginationConfiguration } from '../shared/pagination';\nimport {\n  Source,\n  ServiceOffering,\n  ServiceInventory\n} from '@redhat-cloud-services/sources-client';\nimport { ApiCollectionResponse, SourceDetails } from '../../types/common-types';\nconst axiosInstance = getAxiosInstance();\n\nexport const getPlatforms = (): Promise<SourceDetails> =>\n  axiosInstance.get(`${CATALOG_API_BASE}/sources/`);\n\nexport const getPlatform = (platformId: string): Promise<Source> => {\n  return axiosInstance.get(`${CATALOG_API_BASE}/sources/${platformId}/`);\n};\n\nexport const refreshPlatform = (platformId: string): Promise<Source> => {\n  return axiosInstance.patch(\n    `${CATALOG_API_BASE}/sources/${platformId}/refresh/`\n  );\n};\n\nexport const getPlatformItems = (\n  platformId: string,\n  filter?: string,\n  options?: PaginationConfiguration\n): Promise<ApiCollectionResponse<ServiceOffering>> => {\n  if (platformId) {\n    const filterQuery = filter ? `?name=${filter}` : '';\n    const optionsQuery = options\n      ? `page_size=${options.limit}&page=${options.offset || 1}`\n      : '';\n    return axiosInstance.get(\n      `${CATALOG_API_BASE}/sources/${platformId}/service_offerings/${filterQuery}${\n        filter ? '&' : '?'\n      }${optionsQuery}`\n    );\n  } else {\n    return axiosInstance.get(`${CATALOG_API_BASE}/service_offerings/`);\n  }\n};\n\nexport const getPlatformInventories = (\n  platformId: string,\n  filter = '',\n  options = defaultSettings\n): Promise<ApiCollectionResponse<ServiceInventory>> => {\n  if (platformId) {\n    const filterQuery = filter ? `name=${filter}` : '';\n    return axiosInstance.get(\n      `${CATALOG_API_BASE}/sources/${platformId}/service_inventories/?${filterQuery}${\n        options ? `&page_size=${options.limit}&page=${options.offset || 1}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(\n      `${CATALOG_API_BASE}/service_inventories/?page_size=${\n        options.limit\n      }&page=${options.offset || 1}`\n    );\n  }\n};\n","import * as ActionTypes from '../action-types';\nimport * as PlatformHelper from '../../helpers/platform/platform-helper-s';\nimport { Dispatch } from 'redux';\nimport {\n  ServiceInventory,\n  ServiceOffering,\n  Source\n} from '@redhat-cloud-services/sources-client';\nimport { AsyncMiddlewareAction } from '../../types/redux';\nimport { ApiCollectionResponse, SourceDetails } from '../../types/common-types';\nimport { PaginationConfiguration } from '../../helpers/shared/pagination';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const fetchPlatforms = () => (\n  dispatch: Dispatch\n): Promise<{ type: string; payload: SourceDetails }> => {\n  dispatch({ type: `${ActionTypes.FETCH_PLATFORMS}_PENDING` });\n  return PlatformHelper.getPlatforms()\n    .then((results) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_FULFILLED`,\n        payload: results\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchPlatformItems = (\n  platformId: string,\n  filter: string,\n  options: PaginationConfiguration\n): AsyncMiddlewareAction<ApiCollectionResponse<ServiceOffering>> => ({\n  type: ActionTypes.FETCH_PLATFORM_ITEMS,\n  payload: PlatformHelper.getPlatformItems(platformId, filter, options),\n  meta: {\n    platformId,\n    filter,\n    ...options\n  }\n});\n\nexport const fetchMultiplePlatformItems = (\n  platformsId: string[]\n): {\n  type: string;\n  payload: Promise<\n    [] | { [x: string]: ApiCollectionResponse<ServiceOffering> }\n  >;\n} => {\n  const platformPromisses = platformsId.map((platformId) =>\n    PlatformHelper.getPlatformItems(platformId).then((results) => ({\n      [platformId]: results\n    }))\n  );\n  return {\n    type: ActionTypes.FETCH_MULTIPLE_PLATFORM_ITEMS,\n    payload: Promise.all(platformPromisses).then((results) =>\n      results.reduce(\n        (acc, curr) => ({\n          ...acc,\n          ...curr\n        }),\n        {}\n      )\n    )\n  };\n};\n\nexport const fetchSelectedPlatform = (\n  id: string\n): AsyncMiddlewareAction<Source> => ({\n  type: ActionTypes.FETCH_PLATFORM,\n  payload: PlatformHelper.getPlatform(id)\n});\n\nexport const fetchPlatformInventories = (\n  platformId: string,\n  filter: string,\n  options: PaginationConfiguration\n): AsyncMiddlewareAction<ApiCollectionResponse<ServiceInventory>> => ({\n  type: ActionTypes.FETCH_PLATFORM_INVENTORIES,\n  payload: PlatformHelper.getPlatformInventories(platformId, filter, options)\n});\n\nexport const refreshPlatform = (platformId: string) => (\n  dispatch: Dispatch\n): AsyncMiddlewareAction => {\n  return dispatch({\n    type: ActionTypes.REFRESH_PLATFORM,\n    payload: PlatformHelper.refreshPlatform(platformId)\n      .then(() =>\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: 'Success starting the platform refresh',\n            dismissable: true,\n            description: 'The platform refresh started successfully'\n          })\n        )\n      )\n      .catch((error) => {\n        if (error.status === 429) {\n          dispatch(\n            addNotification({\n              variant: 'info',\n              title: 'Platform refresh in progress',\n              dismissable: true,\n              description: 'Platform refresh already running.'\n            })\n          );\n        } else {\n          dispatch({\n            type: `${ActionTypes.REFRESH_PLATFORM}_REJECTED`,\n            payload: error\n          });\n        }\n      })\n  });\n};\n","import { getAxiosInstance, getGraphqlInstance } from '../shared/user-login';\nimport {\n  CATALOG_INVENTORY_API_BASE,\n  SOURCES_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings, PaginationConfiguration } from '../shared/pagination';\nimport {\n  Source,\n  ServiceOffering,\n  ServiceInventory\n} from '@redhat-cloud-services/sources-client';\nimport { ApiCollectionResponse, SourceDetails } from '../../types/common-types';\nconst axiosInstance = getAxiosInstance();\nconst { post } = getGraphqlInstance();\n\nconst sourcesQuery = `\nquery {\n  application_types (filter: { name: \"/insights/platform/catalog\" }) {\n    id\n    name\n    sources {\n      id\n      name\n      source_type_id\n    }\n  }\n}`;\n\nconst getSourcesDetails = (\n  sourceIds: string[]\n): Promise<ApiCollectionResponse<SourceDetails>> => {\n  return axiosInstance.get(\n    `${CATALOG_INVENTORY_API_BASE}/sources?limit=${sourceIds.length ||\n      defaultSettings.limit}${sourceIds.length ? '&' : ''}${sourceIds\n      .map((sourceId) => `filter[id][]=${sourceId}`)\n      .join('&')}`\n  );\n};\n\nexport const getPlatforms = (): Promise<SourceDetails> =>\n  post(`${SOURCES_API_BASE}/graphql`, { query: sourcesQuery })\n    .then(({ data: { application_types } }) => application_types)\n    .then(([{ sources }]) => {\n      return getSourcesDetails(sources.map((source: Source) => source.id)).then(\n        (sourceDetails) => {\n          return sources.map((source: Source) => ({\n            ...source,\n            ...sourceDetails.data.find(\n              (sourceDetail) => sourceDetail.id === source.id\n            )\n          }));\n        }\n      );\n    });\n\nexport const getPlatform = (platformId: string): Promise<Source> => {\n  return axiosInstance.get(\n    `${CATALOG_INVENTORY_API_BASE}/sources/${platformId}`\n  );\n};\n\nexport const refreshPlatform = (platformId: string): Promise<Source> => {\n  return axiosInstance.patch(\n    `${CATALOG_INVENTORY_API_BASE}/sources/${platformId}/refresh`\n  );\n};\n\nexport const getPlatformItems = (\n  platformId: string,\n  filter?: string,\n  options?: PaginationConfiguration\n): Promise<ApiCollectionResponse<ServiceOffering>> => {\n  const filterQuery = filter ? `&filter[name][contains_i]=${filter}` : '';\n  if (platformId) {\n    return axiosInstance.get(\n      `${CATALOG_INVENTORY_API_BASE}/sources/${platformId}/service_offerings?filter[archived_at][nil]${filterQuery}${\n        options ? `&limit=${options.limit}&offset=${options.offset}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(`${CATALOG_INVENTORY_API_BASE}/service_offerings`);\n  }\n};\n\nexport const getPlatformInventories = (\n  platformId: string,\n  filter = '',\n  options = defaultSettings\n): Promise<ApiCollectionResponse<ServiceInventory>> => {\n  if (platformId) {\n    return axiosInstance.get(\n      `${CATALOG_INVENTORY_API_BASE}/sources/${platformId}/service_inventories?filter[name][contains_i]=${filter}${\n        options ? `&limit=${options.limit}&offset=${options.offset}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(\n      `${CATALOG_INVENTORY_API_BASE}/service_inventories?limit=${options.limit}&offset=${options.offset}`\n    );\n  }\n};\n\nexport const getServiceOffering = (\n  serviceOfferingId: string,\n  sourceId: string\n): Promise<{ service: ServiceOffering; source: Source }> =>\n  Promise.all([\n    axiosInstance.get(\n      `${CATALOG_INVENTORY_API_BASE}/service_offerings/${serviceOfferingId}`\n    ),\n    axiosInstance\n      .get(`${SOURCES_API_BASE}/sources/${sourceId}`)\n      .then((source) => {\n        return axiosInstance\n          .get(`${SOURCES_API_BASE}/source_types/${source.source_type_id}`)\n          .then(({ icon_url }) => ({\n            ...source,\n            icon_url\n          }));\n      })\n  ]).then(([service, source]: [ServiceOffering, Source]) => ({\n    service,\n    source\n  }));\n","import * as ActionTypes from '../action-types';\nimport * as PlatformHelper from '../../helpers/platform/platform-helper';\nimport { Dispatch } from 'redux';\nimport {\n  ServiceInventory,\n  ServiceOffering,\n  Source\n} from '@redhat-cloud-services/sources-client';\nimport { AsyncMiddlewareAction } from '../../types/redux';\nimport { ApiCollectionResponse, SourceDetails } from '../../types/common-types';\nimport { PaginationConfiguration } from '../../helpers/shared/pagination';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const fetchPlatforms = () => (\n  dispatch: Dispatch\n): Promise<{ type: string; payload: SourceDetails }> => {\n  dispatch({ type: `${ActionTypes.FETCH_PLATFORMS}_PENDING` });\n  return PlatformHelper.getPlatforms()\n    .then((data) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_FULFILLED`,\n        payload: data\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchPlatformItems = (\n  platformId: string,\n  filter: string,\n  options: PaginationConfiguration\n): AsyncMiddlewareAction<ApiCollectionResponse<ServiceOffering>> => ({\n  type: ActionTypes.FETCH_PLATFORM_ITEMS,\n  payload: PlatformHelper.getPlatformItems(platformId, filter, options),\n  meta: {\n    platformId,\n    filter,\n    ...options\n  }\n});\n\nexport const fetchMultiplePlatformItems = (\n  platformsId: string[]\n): {\n  type: string;\n  payload: Promise<\n    [] | { [x: string]: ApiCollectionResponse<ServiceOffering> }\n  >;\n} => {\n  const platformPromisses = platformsId.map((platformId) =>\n    PlatformHelper.getPlatformItems(platformId).then((data) => ({\n      [platformId]: data\n    }))\n  );\n  return {\n    type: ActionTypes.FETCH_MULTIPLE_PLATFORM_ITEMS,\n    payload: Promise.all(platformPromisses).then((data) =>\n      data.reduce(\n        (acc, curr) => ({\n          ...acc,\n          ...curr\n        }),\n        {}\n      )\n    )\n  };\n};\n\nexport const fetchSelectedPlatform = (\n  id: string\n): AsyncMiddlewareAction<Source> => ({\n  type: ActionTypes.FETCH_PLATFORM,\n  payload: PlatformHelper.getPlatform(id)\n});\n\nexport const fetchPlatformInventories = (\n  platformId: string,\n  filter: string,\n  options: PaginationConfiguration\n): AsyncMiddlewareAction<ApiCollectionResponse<ServiceInventory>> => ({\n  type: ActionTypes.FETCH_PLATFORM_INVENTORIES,\n  payload: PlatformHelper.getPlatformInventories(platformId, filter, options)\n});\n\nexport const fetchServiceOffering = (\n  serviceOfferingId: string,\n  sourceId: string\n): AsyncMiddlewareAction<{ service: ServiceOffering; source: Source }> => ({\n  type: ActionTypes.FETCH_SERVICE_OFFERING,\n  payload: PlatformHelper.getServiceOffering(serviceOfferingId, sourceId)\n});\n\nexport const refreshPlatform = (platformId: string) => (\n  dispatch: Dispatch\n): AsyncMiddlewareAction => {\n  return dispatch({\n    type: ActionTypes.REFRESH_PLATFORM,\n    payload: PlatformHelper.refreshPlatform(platformId)\n      .then(() =>\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: 'Success starting the platform refresh',\n            dismissable: true,\n            description: 'The platform refresh started successfully'\n          })\n        )\n      )\n      .catch((error) => {\n        if (error.status === 429) {\n          dispatch(\n            addNotification({\n              variant: 'info',\n              title: 'Platform refresh in progress',\n              dismissable: true,\n              description: 'Platform refresh already running.'\n            })\n          );\n        } else {\n          dispatch({\n            type: `${ActionTypes.REFRESH_PLATFORM}_REJECTED`,\n            payload: error\n          });\n        }\n      })\n  });\n};\n","import React from 'react';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { useSelector } from 'react-redux';\nimport ConditionalLink from '../../presentational-components/shared/conditional-link';\nimport { BreadcrumbFragment } from '../../redux/reducers/breadcrumbs-reducer';\nimport { CatalogRootState } from '../../types/redux';\n\nexport interface CatalogBreadcrumbsProps {\n  breadcrumbfragments?: BreadcrumbFragment[];\n}\nconst CatalogBreadcrumbs: React.ComponentType<CatalogBreadcrumbsProps> = ({\n  breadcrumbfragments = []\n}) => {\n  let fragments = breadcrumbfragments;\n  if (breadcrumbfragments?.length < 1) {\n    fragments = useSelector<CatalogRootState, BreadcrumbFragment[]>(\n      ({ breadcrumbsReducer: { fragments } }) => fragments\n    );\n  }\n\n  if (fragments.length <= 1) {\n    return null;\n  }\n\n  return (\n    <Breadcrumb>\n      {fragments.map(({ title, pathname, searchParams }, index) => (\n        <ConditionalLink\n          pathname={!(fragments.length === index + 1) ? pathname : undefined}\n          searchParams={searchParams}\n          nav\n          exact\n          key={pathname}\n          className=\"pf-c-breadcrumb__item\"\n        >\n          <BreadcrumbItem\n            showDivider={index > 0}\n            isActive={fragments.length === index + 1}\n          >\n            {title}\n          </BreadcrumbItem>\n        </ConditionalLink>\n      ))}\n    </Breadcrumb>\n  );\n};\n\nexport default CatalogBreadcrumbs;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport {\n  Link,\n  NavLink,\n  useLocation,\n  LinkProps,\n  NavLinkProps\n} from 'react-router-dom';\nimport styled from 'styled-components';\nimport { StringObject } from '../../types/common-types';\n\nconst StyledLink = styled(({ isDisabled, ...props }) => <Link {...props} />)`\n  pointer-events: ${({ isDisabled }) => (isDisabled ? 'none' : 'initial')};\n`;\n\nconst StyledNavLink = styled(({ isDisabled, ...props }) => (\n  <NavLink {...props} />\n))`\n  pointer-events: ${({ isDisabled }) => (isDisabled ? 'none' : 'initial')};\n`;\n\nconst createSearchQuery = (\n  search: string,\n  searchParams: StringObject,\n  preserveSearch: boolean\n): string => {\n  const paramsQuery = Object.entries(searchParams)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&');\n  return preserveSearch\n    ? `${search}${paramsQuery.length > 0 ? `&${paramsQuery}` : ''}`\n    : paramsQuery.length > 0\n    ? `?${paramsQuery}`\n    : '';\n};\n\nexport type CatalogLinkTo =\n  | string\n  | { pathname: string; search?: string; hash?: string };\nexport interface CatalogLinkProps\n  extends Omit<LinkProps, 'to'>,\n    Omit<NavLinkProps, 'to'> {\n  pathname: string;\n  searchParams?: StringObject;\n  nav?: boolean;\n  preserveSearch?: boolean;\n  preserveHash?: boolean;\n  showDivider?: boolean;\n  to?: CatalogLinkTo;\n  isDisabled?: boolean;\n}\nconst CatalogLink: React.ComponentType<CatalogLinkProps> = ({\n  pathname,\n  searchParams = {},\n  nav = false,\n  preserveSearch = false,\n  preserveHash = false,\n  showDivider,\n  ...props\n}) => {\n  const { search, hash } = useLocation();\n  const Component = nav ? StyledNavLink : StyledLink;\n  const to = {\n    pathname,\n    search: createSearchQuery(search, searchParams, preserveSearch),\n    hash: preserveHash ? hash : undefined\n  };\n  return <Component {...props} to={to} />;\n};\n\nexport default CatalogLink;\n","import { useHistory } from 'react-router-dom';\nimport { History, Path } from 'history';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\n\nexport type EnhancedHistoryPushtarget =\n  | Path\n  | { pathname: string; hash?: string; search?: string; state?: AnyObject };\n\nconst removeSearchQuery = (target: EnhancedHistoryPushtarget) => {\n  if (typeof target === 'string') {\n    return target.split('?')[0];\n  }\n\n  if (typeof target === 'object') {\n    return {\n      ...target,\n      search: undefined\n    };\n  }\n\n  return target;\n};\n\n/**\n * Wrapper around useHistory hook which adds aditional settings to standard history methods\n * @param {Boolean} removeSearch if true, using history navigation methods will remove search string from path\n * @param {Boolean} keepHash if true, using history navigation methods will not remove hash from URL\n */\nconst useEnhancedHistory = ({\n  removeSearch,\n  keepHash\n}: {\n  removeSearch?: boolean;\n  keepHash?: boolean;\n} = {}): History<History.UnknownFacade> => {\n  const history = useHistory();\n  return {\n    ...history,\n    push: (target: EnhancedHistoryPushtarget) => {\n      let internalTarget = target;\n      if (keepHash && history.location.hash.length > 0) {\n        internalTarget =\n          typeof internalTarget === 'object'\n            ? { ...internalTarget, hash: history.location.hash }\n            : `${internalTarget}${history.location.hash}`;\n      }\n\n      if (removeSearch) {\n        return history.push(removeSearchQuery(internalTarget));\n      }\n\n      return history.push(internalTarget);\n    }\n  };\n};\n\nexport default useEnhancedHistory;\n"],"names":["children","pathname","props","Fragment","paddingBottom","breadcrumbs","breadcrumbfragments","rest","standalone","useContext","className","TopToolbarTitle","title","description","noData","LevelItem","TextContent","Text","component","TextVariants","axiosInstance","refreshPlatform","platformId","patch","getPlatformItems","filter","options","filterQuery","optionsQuery","limit","offset","get","getPlatformInventories","fetchPlatforms","dispatch","type","then","results","payload","catch","error","fetchPlatformItems","meta","fetchSelectedPlatform","id","fetchPlatformInventories","variant","dismissable","status","post","getServiceOffering","serviceOfferingId","sourceId","Promise","all","source","source_type_id","icon_url","service","query","sourceIds","sources","map","length","join","sourceDetails","data","find","sourceDetail","fetchServiceOffering","fragments","Breadcrumb","index","searchParams","undefined","nav","exact","key","BreadcrumbItem","showDivider","isActive","StyledLink","Link","StyledNavLink","NavLink","createSearchQuery","search","preserveSearch","paramsQuery","Object","entries","preserveHash","useLocation","hash","Component","to","removeSearch","keepHash","history","useHistory","push","target","internalTarget","location","split","removeSearchQuery"],"sourceRoot":""}