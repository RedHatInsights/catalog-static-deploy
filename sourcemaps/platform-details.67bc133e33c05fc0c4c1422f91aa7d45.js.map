{"version":3,"file":"js/platform-details.1643081188338.68f9a1a1ad738c84fff2.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/js/components/Card/Card.js","webpack:///./node_modules/@patternfly/react-core/dist/js/components/Card/CardBody.js","webpack:///./node_modules/@patternfly/react-core/dist/js/components/Text/TextList.js","webpack:///./node_modules/@patternfly/react-core/dist/js/components/Text/TextListItem.js","webpack:///./src/smart-components/platform/platform-details.js","webpack:///./src/messages/platforms.messages.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Card = exports.CardContext = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst card_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Card/card\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst helpers_1 = require(\"../../helpers\");\nexports.CardContext = React.createContext({\n    cardId: '',\n    isExpanded: false\n});\nconst Card = (_a) => {\n    var { children = null, id = '', className = '', component = 'article', isHoverable = false, isCompact = false, isSelectable = false, isSelectableRaised = false, isSelected = false, isDisabledRaised = false, isFlat = false, isExpanded = false, isRounded = false, isLarge = false, isFullHeight = false, isPlain = false, ouiaId, ouiaSafe = true } = _a, props = tslib_1.__rest(_a, [\"children\", \"id\", \"className\", \"component\", \"isHoverable\", \"isCompact\", \"isSelectable\", \"isSelectableRaised\", \"isSelected\", \"isDisabledRaised\", \"isFlat\", \"isExpanded\", \"isRounded\", \"isLarge\", \"isFullHeight\", \"isPlain\", \"ouiaId\", \"ouiaSafe\"]);\n    const Component = component;\n    const ouiaProps = helpers_1.useOUIAProps(exports.Card.displayName, ouiaId, ouiaSafe);\n    if (isCompact && isLarge) {\n        // eslint-disable-next-line no-console\n        console.warn('Card: Cannot use isCompact with isLarge. Defaulting to isCompact');\n        isLarge = false;\n    }\n    const getSelectableModifiers = () => {\n        if (isDisabledRaised) {\n            return react_styles_1.css(card_1.default.modifiers.nonSelectableRaised);\n        }\n        if (isSelectableRaised) {\n            return react_styles_1.css(card_1.default.modifiers.selectableRaised, isSelected && card_1.default.modifiers.selectedRaised);\n        }\n        if (isSelectable || isHoverable) {\n            return react_styles_1.css(card_1.default.modifiers.selectable, isSelected && card_1.default.modifiers.selected);\n        }\n        return '';\n    };\n    return (React.createElement(exports.CardContext.Provider, { value: {\n            cardId: id,\n            isExpanded\n        } },\n        React.createElement(Component, Object.assign({ id: id, className: react_styles_1.css(card_1.default.card, isCompact && card_1.default.modifiers.compact, isExpanded && card_1.default.modifiers.expanded, isFlat && card_1.default.modifiers.flat, isRounded && card_1.default.modifiers.rounded, isLarge && card_1.default.modifiers.displayLg, isFullHeight && card_1.default.modifiers.fullHeight, isPlain && card_1.default.modifiers.plain, getSelectableModifiers(), className), tabIndex: isSelectable || isSelectableRaised ? '0' : undefined }, props, ouiaProps), children)));\n};\nexports.Card = Card;\nexports.Card.displayName = 'Card';\n//# sourceMappingURL=Card.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CardBody = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst card_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Card/card\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst CardBody = (_a) => {\n    var { children = null, className = '', component = 'div', isFilled = true } = _a, props = tslib_1.__rest(_a, [\"children\", \"className\", \"component\", \"isFilled\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: react_styles_1.css(card_1.default.cardBody, !isFilled && card_1.default.modifiers.noFill, className) }, props), children));\n};\nexports.CardBody = CardBody;\nexports.CardBody.displayName = 'CardBody';\n//# sourceMappingURL=CardBody.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TextList = exports.TextListVariants = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nvar TextListVariants;\n(function (TextListVariants) {\n    TextListVariants[\"ul\"] = \"ul\";\n    TextListVariants[\"ol\"] = \"ol\";\n    TextListVariants[\"dl\"] = \"dl\";\n})(TextListVariants = exports.TextListVariants || (exports.TextListVariants = {}));\nconst TextList = (_a) => {\n    var { children = null, className = '', component = TextListVariants.ul } = _a, props = tslib_1.__rest(_a, [\"children\", \"className\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { \"data-pf-content\": true, className: react_styles_1.css(className) }), children));\n};\nexports.TextList = TextList;\nexports.TextList.displayName = 'TextList';\n//# sourceMappingURL=TextList.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TextListItem = exports.TextListItemVariants = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nvar TextListItemVariants;\n(function (TextListItemVariants) {\n    TextListItemVariants[\"li\"] = \"li\";\n    TextListItemVariants[\"dt\"] = \"dt\";\n    TextListItemVariants[\"dd\"] = \"dd\";\n})(TextListItemVariants = exports.TextListItemVariants || (exports.TextListItemVariants = {}));\nconst TextListItem = (_a) => {\n    var { children = null, className = '', component = TextListItemVariants.li } = _a, props = tslib_1.__rest(_a, [\"children\", \"className\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { \"data-pf-content\": true, className: react_styles_1.css(className) }), children));\n};\nexports.TextListItem = TextListItem;\nexports.TextListItem.displayName = 'TextListItem';\n//# sourceMappingURL=TextListItem.js.map","import React from 'react';\nimport { Section } from '@redhat-cloud-services/frontend-components/Section';\nimport platformsMessages from '../../messages/platforms.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport { useSelector } from 'react-redux';\nimport {\n  Card,\n  CardBody,\n  Grid,\n  GridItem,\n  Text,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n  TextVariants\n} from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\n\nconst PlatformDetails = () => {\n  const formatMessage = useFormatMessage();\n  const platform = useSelector(\n    ({ platformReducer: { selectedPlatform } }) => selectedPlatform\n  );\n  return (\n    <Section type=\"content\">\n      <Grid hasGutter>\n        <GridItem span={5} className=\"info-bar pf-u-p-0\">\n          <Card>\n            <CardBody>\n              <TextContent>\n                <Text className=\"pf-u-mb-md\" component={TextVariants.h2}>\n                  {formatMessage(platformsMessages.platformDetails)}\n                </Text>\n                <TextList component={TextListVariants.dl}>\n                  <TextListItem component={TextListItemVariants.dt}>\n                    {formatMessage(platformsMessages.platformVersion)}\n                  </TextListItem>\n                  <TextListItem component={TextListItemVariants.dd}>\n                    {platform?.info?.version}\n                  </TextListItem>\n                  <TextListItem component={TextListItemVariants.dt}>\n                    {formatMessage(platformsMessages.ansibleVersion)}\n                  </TextListItem>\n                  <TextListItem component={TextListItemVariants.dd}>\n                    {platform?.info?.ansible_version}\n                  </TextListItem>\n                  <TextListItem component={TextListItemVariants.dt}>\n                    {formatMessage(platformsMessages.dateAdded)}\n                  </TextListItem>\n                  <TextListItem component={TextListItemVariants.dd}>\n                    <DateFormat date={platform?.created_at} />\n                  </TextListItem>\n                  {!localStorage.getItem('catalog_standalone') && (\n                    <React.Fragment>\n                      <TextListItem component={TextListItemVariants.dt}>\n                        {formatMessage(platformsMessages.cloudConnectorId)}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dd}>\n                        {platform?.cloud_connector_id}\n                      </TextListItem>\n                    </React.Fragment>\n                  )}\n                </TextList>\n              </TextContent>\n            </CardBody>\n          </Card>{' '}\n        </GridItem>\n        <GridItem span={7} className=\"info-bar pf-u-p-0\">\n          <Card>\n            <CardBody>\n              <TextContent>\n                <Text className=\"pf-u-mb-md\" component={TextVariants.h2}>\n                  {formatMessage(platformsMessages.platformActivity)}\n                </Text>\n                <TextList component={TextListVariants.dl}>\n                  <TextListItem component={TextListItemVariants.dt}>\n                    {formatMessage(platformsMessages.refreshState)}\n                  </TextListItem>\n                  <TextListItem component={TextListItemVariants.dd}>\n                    {platform?.refresh_state}\n                  </TextListItem>\n                  <TextListItem component={TextListItemVariants.dt}>\n                    {formatMessage(platformsMessages.refreshStarted)}\n                  </TextListItem>\n                  <TextListItem component={TextListItemVariants.dd}>\n                    <DateFormat\n                      date={platform?.refresh_started_at}\n                      variant=\"relative\"\n                    />\n                  </TextListItem>\n                  <TextListItem component={TextListItemVariants.dt}>\n                    {formatMessage(platformsMessages.refreshFinished)}\n                  </TextListItem>\n                  <TextListItem component={TextListItemVariants.dd}>\n                    <DateFormat\n                      date={platform.refresh_finished_at}\n                      variant=\"relative\"\n                    />\n                  </TextListItem>\n                  <TextListItem component={TextListItemVariants.dt}>\n                    {formatMessage(platformsMessages.lastSuccessfulRefresh)}\n                  </TextListItem>\n                  <TextListItem component={TextListItemVariants.dd}>\n                    <DateFormat\n                      date={platform?.last_successful_refresh_at}\n                      variant=\"relative\"\n                    />\n                  </TextListItem>\n                  <TextListItem component={TextListItemVariants.dt}>\n                    {formatMessage(platformsMessages.lastRefreshMessage)}\n                  </TextListItem>\n                  {platform?.last_refresh_message\n                    ?.split(/\\n/g)\n                    .map((line, idx) => (\n                      <TextListItem\n                        key={`message-key-${idx}`}\n                        component={TextListItemVariants.dd}\n                      >\n                        {line}\n                      </TextListItem>\n                    ))}\n                  <TextListItem component={TextListItemVariants.dt}>\n                    {formatMessage(platformsMessages.availabilityMessage)}\n                  </TextListItem>\n                  {platform?.availability_message\n                    ?.split(/\\n/g)\n                    .map((line, idx) => (\n                      <TextListItem\n                        key={`availability-message-key-${idx}`}\n                        component={TextListItemVariants.dd}\n                      >\n                        {line}\n                      </TextListItem>\n                    ))}\n                  <TextListItem component={TextListItemVariants.dt}>\n                    {formatMessage(platformsMessages.lastChecked)}\n                  </TextListItem>\n                  <TextListItem component={TextListItemVariants.dd}>\n                    <DateFormat\n                      date={platform?.last_checked_at}\n                      variant=\"relative\"\n                    />\n                  </TextListItem>\n                  <TextListItem component={TextListItemVariants.dt}>\n                    {formatMessage(platformsMessages.lastAvailable)}\n                  </TextListItem>\n                  <TextListItem component={TextListItemVariants.dd}>\n                    <DateFormat\n                      date={platform?.last_available_at}\n                      variant=\"relative\"\n                    />\n                  </TextListItem>\n                </TextList>\n              </TextContent>\n            </CardBody>\n          </Card>{' '}\n        </GridItem>\n      </Grid>\n    </Section>\n  );\n};\n\nexport default PlatformDetails;\n","import { defineMessages } from 'react-intl';\n\nconst platformsMessages = defineMessages({\n  workflowColumn: {\n    id: 'platform.inventories.columns.workflow',\n    defaultMessage: 'Workflow'\n  },\n  noInventoriesDescription: {\n    id: 'platform.inventories.empty.no-inventories',\n    defaultMessage: 'No inventories found.'\n  },\n  noInventoriesFilterDescription: {\n    id: 'platform.inventories.empty.no-results',\n    defaultMessage: 'No inventories match your filter criteria.'\n  },\n  inventoriesFilter: {\n    id: 'platform.inventories.filter.placeholder',\n    defaultMessage: 'Filter by inventory'\n  },\n  templatesFilter: {\n    id: 'platform.templates.filter.placeholder',\n    defaultMessage: 'Filter by template'\n  },\n  noTemplatesTitle: {\n    id: 'platform.templates.no-templates',\n    defaultMessage: 'No templates'\n  },\n  noTemplatesDescription: {\n    id: 'platform.templates.empty.no-templates',\n    defaultMessage: 'This platform has no templates.'\n  },\n  platformsNoDataDescription: {\n    id: 'platforms.list.configure-source',\n    defaultMessage:\n      'Ansible Automation Services Catalog can be added by following the'\n  },\n  platformsDocTitle: {\n    id: 'platforms.doc.title',\n    defaultMessage: 'Ansible Automation Platform 2.0 BETA documentation'\n  },\n  connectSource: {\n    id: 'platforms.list.connect-source',\n    defaultMessage: 'Go to Sources'\n  },\n  contactAdmin: {\n    id: 'platforms.list.contact-admin',\n    defaultMessage:\n      'Contact your organization administrator to setup sources for Catalog.'\n  },\n  title: {\n    id: 'platforms.title',\n    defaultMessage: 'Platforms'\n  },\n  noPlatforms: {\n    id: 'platforms.list.empty.title',\n    defaultMessage: 'No platforms yet'\n  },\n  offeringTitle: {\n    id: 'platforms.offerings.detail.title',\n    defaultMessage: 'Service offering'\n  },\n  offeringParameters: {\n    id: 'platforms.offerings.detail.extra-params',\n    defaultMessage: 'Extra parameters'\n  },\n  platformVersion: {\n    id: 'platforms.version',\n    defaultMessage: 'Platform version'\n  },\n  ansibleVersion: {\n    id: 'platforms.ansible.version',\n    defaultMessage: 'Ansible version'\n  },\n  platformSummary: {\n    id: 'platforms.summary',\n    defaultMessage: 'Summary'\n  },\n  platformDetails: {\n    id: 'platforms.details',\n    defaultMessage: 'Details'\n  },\n  platformActivity: {\n    id: 'platforms.activity',\n    defaultMessage: 'Activity'\n  },\n  cloudConnectorId: {\n    id: 'platform.cloudConnectorId',\n    defaultMessage: 'RedHat Connect Client Id'\n  },\n  refreshState: {\n    id: 'platforms.refreshState',\n    defaultMessage: 'Refresh state'\n  },\n  refreshStarted: {\n    id: 'platforms.refreshStarted',\n    defaultMessage: 'Refresh started'\n  },\n  refreshFinished: {\n    id: 'platforms.refreshFinished',\n    defaultMessage: 'Refresh finished'\n  },\n  lastSuccessfulRefresh: {\n    id: 'platforms.lastSuccessfulRefresh',\n    defaultMessage: 'Last successful refresh'\n  },\n  lastChecked: {\n    id: 'platforms.lastChecked',\n    defaultMessage: 'Last checked'\n  },\n  lastAvailable: {\n    id: 'platforms.lastAvailable',\n    defaultMessage: 'Last available'\n  },\n  enabled: {\n    id: 'platforms.enabled',\n    defaultMessage: 'Enabled'\n  },\n  availabilityStatus: {\n    id: 'platforms.availabilityStatus',\n    defaultMessage: 'Availability status'\n  },\n  dateAdded: {\n    id: 'platforms.dateAdded',\n    defaultMessage: 'Date added'\n  },\n  refreshTooltip: {\n    id: 'platforms.refreshTooltip',\n    defaultMessage: 'Refresh platform'\n  },\n  lastRefreshMessage: {\n    id: 'platforms.lastRefreshMessage',\n    defaultMessage: 'Last refresh message'\n  },\n  availabilityMessage: {\n    id: 'platforms.availabilityMessage',\n    defaultMessage: 'Availability message'\n  }\n});\n\nexport default platformsMessages;\n"],"names":["Object","defineProperty","exports","value","Card","CardContext","tslib_1","React","__importStar","card_1","__importDefault","react_styles_1","helpers_1","createContext","cardId","isExpanded","_a","children","id","className","component","isHoverable","isCompact","isSelectable","isSelectableRaised","isSelected","isDisabledRaised","isFlat","isRounded","isLarge","isFullHeight","isPlain","ouiaId","ouiaSafe","props","__rest","Component","ouiaProps","useOUIAProps","displayName","console","warn","createElement","Provider","assign","css","default","card","modifiers","compact","expanded","flat","rounded","displayLg","fullHeight","plain","nonSelectableRaised","selectableRaised","selectedRaised","selectable","selected","tabIndex","undefined","isFilled","cardBody","noFill","TextListVariants","ul","TextListItemVariants","li","formatMessage","useFormatMessage","platform","useSelector","platformReducer","selectedPlatform","type","hasGutter","span","TextContent","Text","TextVariants","platformsMessages","info","version","ansible_version","date","created_at","localStorage","getItem","cloud_connector_id","refresh_state","refresh_started_at","variant","refresh_finished_at","last_successful_refresh_at","last_refresh_message","split","map","line","idx","key","availability_message","last_checked_at","last_available_at","workflowColumn","defaultMessage","noInventoriesDescription","noInventoriesFilterDescription","inventoriesFilter","templatesFilter","noTemplatesTitle","noTemplatesDescription","platformsNoDataDescription","platformsDocTitle","connectSource","contactAdmin","title","noPlatforms","offeringTitle","offeringParameters","platformVersion","ansibleVersion","platformSummary","platformDetails","platformActivity","cloudConnectorId","refreshState","refreshStarted","refreshFinished","lastSuccessfulRefresh","lastChecked","lastAvailable","enabled","availabilityStatus","dateAdded","refreshTooltip","lastRefreshMessage","availabilityMessage"],"sourceRoot":""}