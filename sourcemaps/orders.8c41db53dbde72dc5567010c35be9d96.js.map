{"version":3,"file":"js/orders.df3da59c8a137f112f85.js","mappings":"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","sources":["webpack:///./src/smart-components/order/orders-list.tsx","webpack:///./src/helpers/shared/orders.ts","webpack:///./src/smart-components/order/order-item.tsx","webpack:///./src/smart-components/order/orders.tsx","webpack:///./src/toolbar/schemas/orders-toolbar.schema.ts"],"sourcesContent":["import React, { useEffect, useReducer } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Grid,\n  GridItem,\n  Title,\n  Bullseye,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Flex,\n  EmptyStateSecondaryActions,\n  Button\n} from '@patternfly/react-core';\nimport { Section } from '@redhat-cloud-services/frontend-components/Section';\nimport {\n  Chip,\n  PrimaryToolbar\n} from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n  ISortBy,\n  OnSort,\n  ICell\n} from '@patternfly/react-table';\n\nimport { fetchOrders } from '../../redux/actions/order-actions';\nimport { fetchOrders as fetchOrdersS } from '../../redux/actions/order-actions-s';\nimport { fetchPlatforms } from '../../redux/actions/platform-actions';\nimport { fetchPlatforms as fetchPlatformsS } from '../../redux/actions/platform-actions-s';\nimport { ListLoader } from '../../presentational-components/shared/loader-placeholders';\nimport createOrderItem from './order-item';\nimport AsyncPagination from '../common/async-pagination';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport {\n  defaultSettings,\n  PaginationConfiguration\n} from '../../helpers/shared/pagination';\nimport useInitialUriHash from '../../routing/use-initial-uri-hash';\nimport statesMessages from '../../messages/states.messages';\nimport filteringMessages from '../../messages/filtering.messages';\nimport ordersMessages from '../../messages/orders.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport {\n  getOrderPlatformId,\n  getOrderPortfolioName\n} from '../../helpers/shared/orders';\nimport { CatalogRootState } from '../../types/redux';\nimport {\n  ApiCollectionResponse,\n  Full,\n  StringObject\n} from '../../types/common-types';\n\nimport { PortfolioItem } from '@redhat-cloud-services/catalog-client';\nimport { OrderDetail } from '../../redux/reducers/order-reducer';\n\nconst debouncedFilter = asyncFormValidator(\n  (filters, meta = defaultSettings, dispatch, filteringCallback) => {\n    filteringCallback(true);\n    dispatch(\n      window.catalog?.standalone\n        ? fetchOrdersS(filters, meta)\n        : fetchOrders(filters, meta)\n    ).then(() => filteringCallback(false));\n  },\n  1000\n);\n\nconst initialState = {\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false,\n  filterType: 'state',\n  filters: {\n    state: [],\n    owner: ''\n  },\n  sortBy: {\n    index: 0,\n    direction: SortByDirection.desc\n  }\n};\n\nconst changeFilters = (\n  value: string,\n  type: string,\n  filters: StringObject\n): StringObject => ({\n  ...filters,\n  [type]: value\n});\n\ninterface OrdersListState {\n  isFetching?: boolean;\n  filters: StringObject;\n  filterType: string;\n  isFiltering?: boolean;\n  sortBy: Full<ISortBy>;\n}\nconst ordersListState = (\n  state: OrdersListState,\n  action: { type: string; payload: any }\n): OrdersListState => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return {\n        ...state,\n        filters: changeFilters(action.payload, state.filterType, state.filters)\n      };\n    case 'replaceFilterChip':\n      return { ...state, filters: action.payload };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    case 'setFilterType':\n      return { ...state, filterType: action.payload };\n    case 'setSortBy':\n      return { ...state, sortBy: action.payload, isFetching: true };\n  }\n\n  return state;\n};\n\nconst sortIndexMapper = {\n  0: 'id',\n  3: 'owner',\n  4: 'created_at',\n  6: 'state'\n};\n\nconst OrdersList: React.ComponentType = () => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const viewState = useInitialUriHash();\n  const [\n    { isFetching, isFiltering, filterType, filters, sortBy },\n    stateDispatch\n  ] = useReducer(ordersListState, {\n    ...initialState,\n    filters: viewState?.orders?.filters || { state: [], owner: '' },\n    sortBy: {\n      direction: viewState?.orders?.sortDirection || SortByDirection.desc,\n      index: viewState?.orders?.sortIndex || 0\n    }\n  });\n  const orders = useSelector<\n    CatalogRootState,\n    ApiCollectionResponse<OrderDetail>\n  >(({ orderReducer }) => orderReducer.orders);\n\n  const data = window.catalog?.standalone ? orders.results : orders.data;\n  const meta = window.catalog?.standalone ? { count: 1 } : orders.meta;\n\n  const columns: ICell[] = [\n    { title: formatMessage(ordersMessages.orderID) },\n    formatMessage(labelMessages.product),\n    '', // need empty row column to correctly align product names after the icon column\n    {\n      title: formatMessage(ordersMessages.orderedByLabel)\n    },\n    { title: formatMessage(ordersMessages.orderDate) },\n    formatMessage(labelMessages.updated),\n    { title: formatMessage(labelMessages.status) }\n  ].map((column) =>\n    typeof column === 'object' &&\n    !isFetching &&\n    !isFiltering &&\n    data.length !== 0\n      ? { ...column, transforms: [sortable] }\n      : column\n  ) as ICell[];\n\n  const portfolioItems = useSelector<\n    CatalogRootState,\n    ApiCollectionResponse<PortfolioItem>\n  >(({ portfolioReducer }) => portfolioReducer.portfolioItems);\n\n  const onSort: OnSort = (_e, index, direction) => {\n    stateDispatch({\n      type: 'setSortBy',\n      payload: { index, direction }\n    });\n    return ((dispatch(\n      window.catalog?.standalone\n        ? fetchOrdersS(filters, {\n            ...meta,\n            sortBy: sortIndexMapper[index as keyof typeof sortIndexMapper],\n            sortDirection: direction,\n            sortIndex: index\n          })\n        : fetchOrders(filters, {\n            ...meta,\n            sortBy: sortIndexMapper[index as keyof typeof sortIndexMapper],\n            sortDirection: direction,\n            sortIndex: index\n          })\n    ) as unknown) as Promise<void>).then(() =>\n      stateDispatch({ type: 'setFetching', payload: false })\n    );\n  };\n\n  const items = window.catalog?.standalone\n    ? portfolioItems.results\n    : portfolioItems.data;\n  const rows = data.map((item) => {\n    const { orderPlatform, orderPortfolio } = getOrderPlatformId(item, items);\n    const orderName = getOrderPortfolioName(item, items);\n    return createOrderItem(\n      { ...item, orderName },\n      orderPlatform,\n      orderPortfolio,\n      formatMessage\n    );\n  });\n\n  useEffect(() => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    Promise.all([\n      dispatch(\n        window.catalog?.standalone\n          ? fetchOrdersS(filters, viewState?.orders)\n          : fetchOrders(filters, viewState?.orders)\n      ),\n      dispatch(\n        window.catalog?.standalone ? fetchPlatformsS() : fetchPlatforms()\n      )\n    ]).then(() => stateDispatch({ type: 'setFetching', payload: false }));\n  }, []);\n\n  const handlePagination = (\n    _apiProps: any,\n    pagination: PaginationConfiguration\n  ) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    return ((dispatch(\n      window.catalog?.standalone\n        ? fetchOrdersS(filters, {\n            ...pagination,\n            sortBy:\n              sortIndexMapper[sortBy.index as keyof typeof sortIndexMapper],\n            sortDirection: sortBy.direction as SortByDirection,\n            sortIndex: sortBy.index\n          })\n        : fetchOrders(filters, {\n            ...pagination,\n            sortBy:\n              sortIndexMapper[sortBy.index as keyof typeof sortIndexMapper],\n            sortDirection: sortBy.direction as SortByDirection,\n            sortIndex: sortBy.index\n          })\n    ) as unknown) as Promise<void>)\n      .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n      .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  const handleFilterItems = (value = '') => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      { ...filters, [filterType]: value },\n      {\n        ...meta,\n        sortBy: sortIndexMapper[sortBy.index as keyof typeof sortIndexMapper],\n        sortDirection: sortBy.direction,\n        sortIndex: sortBy.index,\n        offset: 0\n      },\n      dispatch,\n      (isFiltering: boolean) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering })\n    );\n  };\n\n  const handleClearAll = () => {\n    stateDispatch({\n      type: 'replaceFilterChip',\n      payload: initialState.filters\n    });\n    return debouncedFilter(\n      initialState.filters,\n      {\n        ...meta,\n        sortBy: sortIndexMapper[sortBy.index as keyof typeof sortIndexMapper],\n        sortDirection: sortBy.direction,\n        sortIndex: sortBy.index\n      },\n      dispatch,\n      (isFiltering: boolean) =>\n        stateDispatch({\n          type: 'setFilteringFlag',\n          payload: isFiltering\n        })\n    );\n  };\n\n  return (\n    <Grid hasGutter>\n      <GridItem>\n        <Section type=\"content\">\n          {!meta.noData && (\n            <PrimaryToolbar\n              activeFiltersConfig={{\n                filters: Object.entries(filters)\n                  .filter(([, value]) => value && value.length > 0)\n                  .map<{ category: string; type: string; chips: Chip[] }>(\n                    ([key, value]) => ({\n                      category: key,\n                      type: key,\n                      chips: Array.isArray(value)\n                        ? value.map<Chip>((name) => ({ name }))\n                        : ([{ name: value }] as Chip[])\n                    })\n                  ),\n                onDelete: (_e, [chip], clearAll) => {\n                  if (clearAll) {\n                    return handleClearAll();\n                  }\n\n                  const newFilters = { ...filters };\n                  if (chip.type === 'state') {\n                    newFilters[chip.type] = (((newFilters[\n                      chip.type\n                    ] as unknown) as string[]).filter(\n                      (value) => value !== chip?.chips?.[0].name\n                    ) as unknown) as string;\n                  } else {\n                    newFilters[chip.type!] = '';\n                  }\n\n                  stateDispatch({\n                    type: 'replaceFilterChip',\n                    payload: newFilters\n                  });\n                  debouncedFilter(\n                    newFilters,\n                    meta,\n                    dispatch,\n                    (isFiltering: boolean) =>\n                      stateDispatch({\n                        type: 'setFilteringFlag',\n                        payload: isFiltering\n                      })\n                  );\n                }\n              }}\n              filterConfig={{\n                onChange: (_e, value) =>\n                  stateDispatch({ type: 'setFilterType', payload: value }),\n                value: filterType,\n                items: [\n                  {\n                    filterValues: {\n                      items: [\n                        {\n                          value: 'Approval Pending',\n                          label: formatMessage(statesMessages.approvalPending)\n                        },\n                        {\n                          value: 'Canceled',\n                          label: formatMessage(statesMessages.canceled)\n                        },\n                        {\n                          value: 'Completed',\n                          label: formatMessage(statesMessages.completed)\n                        },\n                        {\n                          value: 'Created',\n                          label: formatMessage(labelMessages.created)\n                        },\n                        {\n                          value: 'Failed',\n                          label: formatMessage(statesMessages.failed)\n                        },\n                        {\n                          value: 'Ordered',\n                          label: formatMessage(statesMessages.ordered)\n                        }\n                      ],\n                      value: filters.state,\n                      onChange: (_e, value) => handleFilterItems(value)\n                    },\n                    label: 'State',\n                    value: 'state',\n                    type: 'checkbox'\n                  },\n                  {\n                    filterValues: {\n                      value: filters.owner,\n                      onChange: (_e, value) => handleFilterItems(value)\n                    },\n                    label: 'Owner',\n                    value: 'owner'\n                  }\n                ]\n              }}\n              pagination={\n                <AsyncPagination\n                  isDisabled={isFetching || isFiltering}\n                  apiRequest={handlePagination}\n                  meta={meta}\n                  isCompact\n                />\n              }\n            />\n          )}\n          <Table\n            aria-label=\"orders\"\n            {...(!(isFetching || isFiltering) && data.length === 0\n              ? {}\n              : { sortBy, onSort })}\n            cells={columns}\n            rows={isFetching || isFiltering ? [] : rows}\n            className=\"orders-table\"\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {!(isFetching || isFiltering) && data.length === 0 && (\n            <EmptyTable>\n              <Bullseye>\n                <EmptyState>\n                  <Bullseye>\n                    <EmptyStateIcon icon={SearchIcon} />\n                  </Bullseye>\n                  <Title headingLevel=\"h1\" size=\"lg\">\n                    {meta.noData\n                      ? formatMessage(ordersMessages.noOrdersTitle)\n                      : formatMessage(filteringMessages.noResults)}\n                  </Title>\n                  <EmptyStateBody>\n                    {meta.noData\n                      ? formatMessage(ordersMessages.noOrdersDescription)\n                      : formatMessage(filteringMessages.noResultsDescription)}\n                  </EmptyStateBody>\n                  {!meta.noData && (\n                    <EmptyStateSecondaryActions>\n                      <Button\n                        ouiaId={'clear-filter'}\n                        variant=\"link\"\n                        onClick={handleClearAll}\n                      >\n                        {formatMessage(filteringMessages.clearFilters)}\n                      </Button>\n                    </EmptyStateSecondaryActions>\n                  )}\n                </EmptyState>\n              </Bullseye>\n            </EmptyTable>\n          )}\n          {(isFetching || isFiltering) && <ListLoader />}\n          <TableToolbar className=\"pf-u-mr-0\">\n            <div className=\"bottom-pagination-container\">\n              <Flex justifyContent={{ default: 'justifyContentFlexEnd' }}>\n                {meta && meta.count! > 0 && (\n                  <AsyncPagination\n                    className=\"pf-u-mt-0\"\n                    isDisabled={isFetching || isFiltering}\n                    apiRequest={handlePagination}\n                    meta={meta}\n                  />\n                )}\n              </Flex>\n            </div>\n          </TableToolbar>\n        </Section>\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default OrdersList;\n","import { CATALOG_API_BASE } from '../../utilities/constants';\nimport { PortfolioItem } from '@redhat-cloud-services/catalog-client';\nimport { Full } from '../../types/common-types';\nimport { OrderDetail } from '../../redux/reducers/order-reducer';\n\nexport const getOrderIcon = ({ orderItems }: OrderDetail): string | undefined =>\n  orderItems[0] &&\n  `${CATALOG_API_BASE}/portfolio_items/${orderItems[0].portfolio_item_id}/icon`;\n\nexport const getOrderPortfolioName = (\n  { orderItems, id }: OrderDetail,\n  portfolioItems: PortfolioItem[]\n): string => {\n  const portfolioItem =\n    orderItems[0] &&\n    portfolioItems.find(({ id }) => orderItems[0].portfolio_item_id === id);\n  return portfolioItem ? portfolioItem.name : `Order ${id}`;\n};\n\nexport const getOrderPlatformId = (\n  { orderItems }: OrderDetail,\n  portfolioItems: PortfolioItem[]\n): {\n  orderPlatform?: string;\n  orderPortfolio?: string;\n} => {\n  const portfolioItem =\n    orderItems[0] &&\n    portfolioItems.find(({ id }) => orderItems[0].portfolio_item_id === id);\n  return portfolioItem\n    ? {\n        orderPlatform: portfolioItem.service_offering_source_ref,\n        orderPortfolio: portfolioItem.portfolio_id\n      }\n    : {};\n};\n","import React, { Fragment, ReactNode } from 'react';\nimport { Label, Text, TextVariants } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\n\nimport CardIcon from '../../presentational-components/shared/card-icon';\nimport { getOrderIcon } from '../../helpers/shared/orders';\nimport CatalogLink from '../common/catalog-link';\nimport { ORDER_ROUTE } from '../../constants/routes';\nimport statesMessages, {\n  getTranslatableState\n} from '../../messages/states.messages';\n\nimport { TableText } from '@patternfly/react-table';\nimport orderStatusMapper from './order-status-mapper';\nimport { OrderDetail } from '../../redux/reducers/order-reducer';\nimport { FormatMessage, StringObject } from '../../types/common-types';\n\nconst createOrderItem = (\n  item: OrderDetail,\n  orderPlatform: string | undefined,\n  orderPortfolio: string | undefined,\n  formatMessage: FormatMessage\n): { title: ReactNode }[] => {\n  const orderItem = (item.orderItems[0] && item.orderItems[0]) || {};\n  const searchParams: StringObject = {\n    order: item.id,\n    ...(orderItem.id ? { 'order-item': orderItem.id } : {}),\n    ...(orderItem.portfolio_item_id\n      ? { 'portfolio-item': orderItem.portfolio_item_id }\n      : {}),\n    ...(orderPlatform ? { platform: orderPlatform } : {}),\n    ...(orderPortfolio ? { portfolio: orderPortfolio } : {})\n  };\n  const translatableState = getTranslatableState(item.state);\n  return [\n    {\n      title: (\n        <TableText>\n          <CatalogLink pathname={ORDER_ROUTE} searchParams={searchParams}>\n            {item.id}\n          </CatalogLink>\n        </TableText>\n      )\n    },\n    {\n      title: (\n        <Fragment>\n          <CardIcon\n            height={60}\n            src={getOrderIcon(item)}\n            sourceId={orderPlatform}\n          />\n        </Fragment>\n      )\n    },\n    item.orderName,\n    item.owner,\n    {\n      title: (\n        <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n          <DateFormat date={item.created_at} variant=\"relative\" />\n        </Text>\n      )\n    },\n    {\n      title: (\n        <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n          <DateFormat\n            date={item.orderItems[0] && item.orderItems[0].updated_at}\n            variant=\"relative\"\n          />\n        </Text>\n      )\n    },\n    {\n      title: (\n        <TableText>\n          <Label\n            {...orderStatusMapper[item.state as keyof typeof orderStatusMapper]}\n            variant=\"outline\"\n          >\n            {formatMessage(statesMessages[translatableState])}\n          </Label>\n        </TableText>\n      )\n    }\n  ];\n};\n\nexport default createOrderItem;\n","import React, { useEffect } from 'react';\nimport { Stack } from '@patternfly/react-core';\n\nimport ToolbarRenderer from '../../toolbar/toolbar-renderer';\nimport createOrdersToolbarSchema from '../../toolbar/schemas/orders-toolbar.schema';\nimport OrdersList from './orders-list';\n\nconst Orders: React.ComponentType = () => {\n  return (\n    <Stack>\n      <ToolbarRenderer schema={createOrdersToolbarSchema()} />\n      <OrdersList />\n    </Stack>\n  );\n};\n\nexport default Orders;\n","import { toolbarComponentTypes } from '../toolbar-mapper';\nimport { ToolbarSchema } from '../toolbar-renderer';\n\nconst createOrdersToolbarSchema = (): ToolbarSchema => ({\n  fields: [\n    {\n      component: toolbarComponentTypes.TOP_TOOLBAR,\n      className: 'orders pf-u-p-lg',\n      key: 'orders-toolbar',\n      fields: [\n        {\n          component: toolbarComponentTypes.TOP_TOOLBAR_TITLE,\n          key: 'orders-toolbar-title',\n          title: 'Orders',\n          className: ''\n        }\n      ]\n    }\n  ]\n});\n\nexport default createOrdersToolbarSchema;\n"],"names":["debouncedFilter","filters","meta","dispatch","filteringCallback","window","catalog","standalone","then","initialState","isOpen","isFetching","isFiltering","filterType","state","owner","sortBy","index","direction","SortByDirection","ordersListState","action","type","payload","value","sortIndexMapper","formatMessage","viewState","useReducer","orders","sortDirection","sortIndex","stateDispatch","data","results","count","columns","title","map","column","length","transforms","sortable","portfolioItems","items","rows","item","orderItems","portfolioItem","find","id","portfolio_item_id","orderPlatform","service_offering_source_ref","orderPortfolio","portfolio_id","getOrderPlatformId","orderName","name","getOrderPortfolioName","orderItem","searchParams","order","platform","portfolio","translatableState","TableText","pathname","Fragment","height","src","sourceId","Text","className","component","TextVariants","DateFormat","date","created_at","variant","updated_at","Label","useEffect","Promise","all","handlePagination","_apiProps","pagination","catch","handleFilterItems","offset","handleClearAll","Grid","hasGutter","GridItem","Section","noData","PrimaryToolbar","activeFiltersConfig","Object","entries","filter","key","category","chips","Array","isArray","onDelete","_e","clearAll","chip","newFilters","filterConfig","onChange","filterValues","label","isDisabled","apiRequest","isCompact","Table","onSort","cells","TableHeader","TableBody","EmptyTable","Bullseye","EmptyState","EmptyStateIcon","icon","SearchIcon","Title","headingLevel","size","EmptyStateBody","EmptyStateSecondaryActions","Button","ouiaId","onClick","TableToolbar","Flex","justifyContent","default","Stack","schema","fields"],"sourceRoot":""}