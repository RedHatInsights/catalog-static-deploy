{"version":3,"sources":["webpack:///./src/utilities/use-enhanced-history.js","webpack:///./src/helpers/approval/approval-helper.js","webpack:///./src/utilities/extract-format-message.js","webpack:///./src/messages/approval.messages.js","webpack:///./src/smart-components/common/edit-approval-workflow.js","webpack:///./src/redux/actions/approval-actions.js"],"names":["removeSearchQuery","target","split","search","undefined","useEnhancedHistory","removeSearch","keepHash","history","useHistory","push","internalTarget","location","hash","length","loadWorkflowOptions","filterValue","initialLookup","initialLookupQuery","map","workflow","join","getAxiosInstance","get","APPROVAL_API_BASE","then","data","id","label","name","value","updateWorkflows","unlinkIds","linkIds","resourceObject","unlinkPromises","wf","getWorkflowApi","unlinkWorkflow","linkPromises","linkWorkflow","Promise","all","listWorkflowsForObject","pagination","limit","defaultSettings","offset","filter","objectQuery","appName","objectType","objectId","paginationQuery","filterQuery","extractFormatMessage","getState","i18nReducer","formatMessage","approvalMessages","defineMessages","require","unlinkNotification","defaultMessage","linkNotification","setWorkflow","currentWorkflows","EditApprovalWorkflow","querySelector","pushParam","objectName","onClose","useFormatMessage","modalTitle","useRef","defineMessage","current","dispatch","useDispatch","useQuery","query","close","title","onSubmit","toLink","toUnlink","toLinkIds","toUnlinkIds","object_type","app_name","APP_NAME","object_id","type","ASYNC_ACTIONS","UPDATE_WORKFLOWS","payload","ApprovalHelper","addNotification","variant","dismissable","description","count","getInitialTags","loadTags","subTitle","strong","Bold","existingTagsMessage","propTypes","PropTypes","oneOfType","string","shape","pathname","isRequired","func","bool","oneOf","defaultProps"],"mappings":"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","file":"js/edit-approval-workflow~91f4305a.9dd82c8f5f3f6296a2f7.js","sourcesContent":["import { useHistory } from 'react-router-dom';\n\nconst removeSearchQuery = (target) => {\n  if (typeof target === 'string') {\n    return target.split('?')[0];\n  }\n\n  if (typeof target === 'object') {\n    return {\n      ...target,\n      search: undefined\n    };\n  }\n\n  return target;\n};\n\n/**\n * Wrapper around useHistory hook which adds aditional settings to standard history methods\n * @param {Boolean} removeSearch if true, using history navigation methods will remove search string from path\n * @param {Boolean} keepHash if true, using history navigation methods will not remove hash from URL\n */\nconst useEnhancedHistory = ({ removeSearch, keepHash } = {}) => {\n  const history = useHistory();\n  return {\n    ...history,\n    push: (target) => {\n      let internalTarget = target;\n      if (keepHash && history.location.hash.length > 0) {\n        internalTarget =\n          typeof internalTarget === 'object'\n            ? { ...internalTarget, hash: history.location.hash }\n            : `${internalTarget}${history.location.hash}`;\n      }\n\n      if (removeSearch) {\n        return history.push(removeSearchQuery(internalTarget));\n      }\n\n      return history.push(internalTarget);\n    }\n  };\n};\n\nexport default useEnhancedHistory;\n","import { getWorkflowApi, getAxiosInstance } from '../shared/user-login';\nimport { APPROVAL_API_BASE } from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\n\nexport const getApprovalWorkflows = () => getWorkflowApi().listWorkflows();\n\nexport const loadWorkflowOptions = (filterValue = '', initialLookup = []) => {\n  const initialLookupQuery = initialLookup\n    .map((workflow) => `filter[id][]=${workflow}`)\n    .join('&');\n\n  return getAxiosInstance()\n    .get(\n      `${APPROVAL_API_BASE}/workflows?filter[name][contains]=${filterValue}&${initialLookupQuery ||\n        ''}`\n    )\n    .then(({ data }) =>\n      data.map(({ id, name }) => ({ label: name, value: id }))\n    );\n};\n\nexport const updateWorkflows = (unlinkIds, linkIds, resourceObject) => {\n  const unlinkPromises = unlinkIds\n    ? unlinkIds.map((wf) => getWorkflowApi().unlinkWorkflow(wf, resourceObject))\n    : [];\n  const linkPromises = linkIds\n    ? linkIds.map((wf) => getWorkflowApi().linkWorkflow(wf, resourceObject))\n    : [];\n  return Promise.all([...unlinkPromises, ...linkPromises]);\n};\n\nexport const listWorkflowsForObject = (\n  resourceObject,\n  pagination = { limit: defaultSettings.limit, offset: defaultSettings.offset },\n  filter = ''\n) => {\n  const objectQuery = `app_name=${resourceObject.appName}&object_type=${resourceObject.objectType}&object_id=${resourceObject.objectId}`;\n  const paginationQuery = `&limit=${pagination.limit}&offset=${pagination.offset}`;\n  const filterQuery = `&filter[name][contains]=${filter}`;\n  return getAxiosInstance().get(\n    `${APPROVAL_API_BASE}/workflows?${objectQuery}${filterQuery}${paginationQuery}`\n  );\n};\n","const extractFormatMessage = (getState) => getState().i18nReducer.formatMessage;\n\nexport default extractFormatMessage;\n","const { defineMessages } = require('react-intl');\n\nconst approvalMessages = defineMessages({\n  unlinkNotification: {\n    id: 'approval.notifications.unlink',\n    defaultMessage:\n      '{count, number} {count, plural, one {approval process was} other {approval processes were}} unlinked successfully.'\n  },\n  linkNotification: {\n    id: 'approval.notifications.link',\n    defaultMessage:\n      '{count, number} {count, plural, one {approval process was} other {approval processes were}} linked successfully.'\n  },\n  setWorkflow: {\n    id: 'approval.workflows.set',\n    defaultMessage:\n      'Select approval processes for <strong>{objectName}</strong>'\n  },\n  currentWorkflows: {\n    id: 'approval.workflows.current',\n    defaultMessage: 'Current approval processes'\n  }\n});\n\nexport default approvalMessages;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { updateWorkflows } from '../../redux/actions/approval-actions';\nimport { APP_NAME } from '../../utilities/constants';\nimport {\n  loadWorkflowOptions,\n  listWorkflowsForObject\n} from '../../helpers/approval/approval-helper';\nimport useQuery from '../../utilities/use-query';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\nimport { defineMessage } from 'react-intl';\nimport approvalMessages from '../../messages/approval.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport TaggingModal from './tagging-modal';\nimport { Bold } from '../../presentational-components/shared/intl-rich-text-components';\n\nconst EditApprovalWorkflow = ({\n  objectType,\n  removeSearch,\n  keepHash,\n  querySelector,\n  pushParam,\n  objectName = () => objectType,\n  onClose\n}) => {\n  const formatMessage = useFormatMessage();\n  const { current: modalTitle } = useRef(\n    formatMessage(\n      defineMessage({\n        id: 'workflows.modal.title',\n        defaultMessage: 'Set approval process'\n      })\n    )\n  );\n  const dispatch = useDispatch();\n  const history = useEnhancedHistory({ removeSearch, keepHash });\n  const [query] = useQuery([querySelector]);\n\n  const close = () => {\n    onClose && onClose();\n    history.push(pushParam);\n  };\n\n  const onSubmit = (toLink, toUnlink) => {\n    close();\n    dispatch(\n      updateWorkflows(toLink, toUnlink, {\n        object_type: objectType,\n        app_name: APP_NAME[objectType],\n        object_id: query[querySelector]\n      })\n    );\n  };\n\n  return (\n    <TaggingModal\n      title={modalTitle}\n      onClose={close}\n      onSubmit={onSubmit}\n      getInitialTags={() =>\n        listWorkflowsForObject({\n          objectType,\n          appName: APP_NAME[objectType],\n          objectId: query[querySelector]\n        }).then(({ data }) => data)\n      }\n      loadTags={loadWorkflowOptions}\n      subTitle={formatMessage(approvalMessages.setWorkflow, {\n        strong: Bold,\n        objectName: objectName(query[querySelector])\n      })}\n      existingTagsMessage={formatMessage(approvalMessages.currentWorkflows)}\n    />\n  );\n};\n\nEditApprovalWorkflow.propTypes = {\n  pushParam: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string\n    })\n  ]).isRequired,\n  objectType: PropTypes.string.isRequired,\n  objectName: PropTypes.func,\n  removeSearch: PropTypes.bool,\n  querySelector: PropTypes.oneOf([\n    'portfolio',\n    'platform',\n    'inventory',\n    'portfolio-item'\n  ]).isRequired,\n  keepHash: PropTypes.bool,\n  onClose: PropTypes.func\n};\n\nEditApprovalWorkflow.defaultProps = {\n  keepHash: false\n};\n\nexport default EditApprovalWorkflow;\n","import { ASYNC_ACTIONS } from '../action-types/approval-action-types';\nimport * as ApprovalHelper from '../../helpers/approval/approval-helper';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport extractFormatMessage from '../../utilities/extract-format-message';\nimport approvalMessages from '../../messages/approval.messages';\n\nexport const fetchWorkflows = () => ({\n  type: ASYNC_ACTIONS.FETCH_WORKFLOWS,\n  payload: ApprovalHelper.getApprovalWorkflows().then(({ data }) => [\n    ...data.map(({ id, name }) => ({ value: id, label: name }))\n  ])\n});\n\nexport const updateWorkflows = (toLinkIds, toUnlinkIds, resourceObject) => (\n  dispatch,\n  getState\n) => {\n  const formatMessage = extractFormatMessage(getState);\n  return dispatch({\n    type: ASYNC_ACTIONS.UPDATE_WORKFLOWS,\n    payload: ApprovalHelper.updateWorkflows(\n      toUnlinkIds,\n      toLinkIds,\n      resourceObject\n    ).then(() =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Success updating approval process',\n          dismissable: true,\n          description: `${\n            toUnlinkIds.length > 0\n              ? formatMessage(approvalMessages.unlinkNotification, {\n                  count: toUnlinkIds.length\n                })\n              : ''\n          }\n          ${\n            toLinkIds.length > 0\n              ? formatMessage(approvalMessages.linkNotification, {\n                  count: toLinkIds.length\n                })\n              : ''\n          }`\n        })\n      )\n    )\n  });\n};\n\nexport const listWorkflowsForObject = (\n  resourceObject,\n  meta = { limit: defaultSettings.limit, offset: defaultSettings.offset },\n  filter = ''\n) => ({\n  type: ASYNC_ACTIONS.RESOLVE_WORKFLOWS,\n  payload: ApprovalHelper.listWorkflowsForObject(resourceObject, meta, filter)\n});\n"],"sourceRoot":""}