{"version":3,"sources":["webpack:///./src/utilities/use-enhanced-history.ts","webpack:///./src/helpers/approval/approval-helper.ts","webpack:///./src/utilities/extract-format-message.ts","webpack:///./src/messages/approval.messages.ts","webpack:///./src/smart-components/common/edit-approval-workflow.tsx","webpack:///./src/redux/actions/approval-actions.ts"],"names":["removeSearch","keepHash","history","push","target","internalTarget","location","hash","length","split","search","undefined","removeSearchQuery","loadWorkflowOptions","filterValue","initialLookup","initialLookupQuery","map","workflow","join","get","then","id","label","value","updateWorkflows","unlinkIds","linkIds","resourceObject","unlinkPromises","wf","unlinkWorkflow","linkPromises","linkWorkflow","Promise","all","listWorkflowsForObject","pagination","filter","limit","offset","objectQuery","appName","objectType","objectId","paginationQuery","filterQuery","getState","i18nReducer","formatMessage","unlinkNotification","defaultMessage","linkNotification","setWorkflow","currentWorkflows","querySelector","pushParam","objectName","postMethod","onClose","modalTitle","dispatch","query","close","title","onSubmit","toLink","toUnlink","toLinkIds","toUnlinkIds","object_type","app_name","object_id","type","UPDATE_WORKFLOWS","payload","variant","dismissable","description","count","getInitialTags","loadTags","subTitle","strong","existingTagsMessage"],"mappings":"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","file":"js/edit-approval-workflow~91f4305a.308d199e5b07ee47b103.js","sourcesContent":["import { useHistory } from 'react-router-dom';\nimport { History, Path } from 'history';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\n\nexport type EnhancedHistoryPushtarget =\n  | Path\n  | { pathname: string; hash?: string; search?: string; state?: AnyObject };\n\nconst removeSearchQuery = (target: EnhancedHistoryPushtarget) => {\n  if (typeof target === 'string') {\n    return target.split('?')[0];\n  }\n\n  if (typeof target === 'object') {\n    return {\n      ...target,\n      search: undefined\n    };\n  }\n\n  return target;\n};\n\n/**\n * Wrapper around useHistory hook which adds aditional settings to standard history methods\n * @param {Boolean} removeSearch if true, using history navigation methods will remove search string from path\n * @param {Boolean} keepHash if true, using history navigation methods will not remove hash from URL\n */\nconst useEnhancedHistory = ({\n  removeSearch,\n  keepHash\n}: {\n  removeSearch?: boolean;\n  keepHash?: boolean;\n} = {}): History<History.UnknownFacade> => {\n  const history = useHistory();\n  return {\n    ...history,\n    push: (target: EnhancedHistoryPushtarget) => {\n      let internalTarget = target;\n      if (keepHash && history.location.hash.length > 0) {\n        internalTarget =\n          typeof internalTarget === 'object'\n            ? { ...internalTarget, hash: history.location.hash }\n            : `${internalTarget}${history.location.hash}`;\n      }\n\n      if (removeSearch) {\n        return history.push(removeSearchQuery(internalTarget));\n      }\n\n      return history.push(internalTarget);\n    }\n  };\n};\n\nexport default useEnhancedHistory;\n","import {\n  Workflow,\n  ResourceObject\n} from '@redhat-cloud-services/approval-client';\nimport { getWorkflowApi, getAxiosInstance } from '../shared/user-login';\nimport { APPROVAL_API_BASE } from '../../utilities/constants';\nimport { defaultSettings, PaginationConfiguration } from '../shared/pagination';\nimport {\n  ApiCollectionResponse,\n  SelectOptions,\n  InternalResourceObject\n} from '../../types/common-types';\n\nexport const getApprovalWorkflows = (): Promise<ApiCollectionResponse<\n  Workflow\n>> =>\n  (getWorkflowApi().listWorkflows() as unknown) as Promise<\n    ApiCollectionResponse<Workflow>\n  >;\n\nexport const loadWorkflowOptions = (\n  filterValue = '',\n  initialLookup: string[] = []\n): Promise<SelectOptions> => {\n  const initialLookupQuery = initialLookup\n    .map((workflow) => `filter[id][]=${workflow}`)\n    .join('&');\n\n  return getAxiosInstance()\n    .get(\n      `${APPROVAL_API_BASE}/workflows?filter[name][contains]=${filterValue}&${initialLookupQuery ||\n        ''}`\n    )\n    .then(({ data }) =>\n      data.map(({ id, name }: Workflow) => ({ label: name, value: id }))\n    );\n};\n\nexport const updateWorkflows = (\n  unlinkIds: string[],\n  linkIds: string[],\n  resourceObject: ResourceObject\n): Promise<void[]> => {\n  const unlinkPromises = unlinkIds\n    ? unlinkIds.map((wf) => getWorkflowApi().unlinkWorkflow(wf, resourceObject))\n    : [];\n  const linkPromises = linkIds\n    ? linkIds.map((wf) => getWorkflowApi().linkWorkflow(wf, resourceObject))\n    : [];\n  return (Promise.all([\n    ...unlinkPromises,\n    ...linkPromises\n  ]) as unknown) as Promise<void[]>;\n};\n\nexport const listWorkflowsForObject = (\n  resourceObject: InternalResourceObject,\n  pagination: PaginationConfiguration = {\n    limit: defaultSettings.limit,\n    offset: defaultSettings.offset\n  },\n  filter = ''\n): Promise<ApiCollectionResponse<Workflow>> => {\n  const objectQuery = `app_name=${resourceObject.appName}&object_type=${resourceObject.objectType}&object_id=${resourceObject.objectId}`;\n  const paginationQuery = `&limit=${pagination.limit}&offset=${pagination.offset}`;\n  const filterQuery = `&filter[name][contains]=${filter}`;\n  return getAxiosInstance().get(\n    `${APPROVAL_API_BASE}/workflows?${objectQuery}${filterQuery}${paginationQuery}`\n  );\n};\n","import { I18nFormatMessage } from '../redux/reducers/i18n-reducer';\nimport { GetReduxState } from '../types/redux';\n\nconst extractFormatMessage = (getState: GetReduxState): I18nFormatMessage =>\n  getState().i18nReducer.formatMessage!;\n\nexport default extractFormatMessage;\n","import { defineMessages } from 'react-intl';\n\nconst approvalMessages = defineMessages({\n  unlinkNotification: {\n    id: 'approval.notifications.unlink',\n    defaultMessage:\n      '{count, number} {count, plural, one {approval process was} other {approval processes were}} unlinked successfully.'\n  },\n  linkNotification: {\n    id: 'approval.notifications.link',\n    defaultMessage:\n      '{count, number} {count, plural, one {approval process was} other {approval processes were}} linked successfully.'\n  },\n  setWorkflow: {\n    id: 'approval.workflows.set',\n    defaultMessage:\n      'Select approval processes for <strong>{objectName}</strong>'\n  },\n  currentWorkflows: {\n    id: 'approval.workflows.current',\n    defaultMessage: 'Current approval processes'\n  }\n});\n\nexport default approvalMessages;\n","/* eslint-disable react/prop-types */\nimport React, { ReactNode, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateWorkflows } from '../../redux/actions/approval-actions';\nimport { APP_NAME } from '../../utilities/constants';\nimport {\n  loadWorkflowOptions,\n  listWorkflowsForObject\n} from '../../helpers/approval/approval-helper';\nimport useQuery from '../../utilities/use-query';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\nimport { defineMessage } from 'react-intl';\nimport approvalMessages from '../../messages/approval.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport TaggingModal, { Tag } from './tagging-modal';\nimport { Bold } from '../../presentational-components/shared/intl-rich-text-components';\nimport { CatalogLinkTo } from '../common/catalog-link';\n\nexport interface EditApprovalWorkflowProps {\n  pushParam: CatalogLinkTo;\n  objectType: keyof typeof APP_NAME;\n  objectName: (node: string) => ReactNode;\n  removeSearch?: boolean;\n  querySelector: 'portfolio' | 'platform' | 'inventory' | 'portfolio-item';\n  keepHash?: boolean;\n  postMethod?: () => any;\n  onClose?: () => any;\n}\nconst EditApprovalWorkflow: React.ComponentType<EditApprovalWorkflowProps> = ({\n  objectType,\n  removeSearch,\n  keepHash = false,\n  querySelector,\n  pushParam,\n  objectName = () => objectType,\n  postMethod,\n  onClose\n}) => {\n  const formatMessage = useFormatMessage();\n  const { current: modalTitle } = useRef(\n    formatMessage(\n      defineMessage({\n        id: 'workflows.modal.title',\n        defaultMessage: 'Set approval process'\n      })\n    )\n  );\n  const dispatch = useDispatch();\n  const history = useEnhancedHistory({ removeSearch, keepHash });\n  const [query] = useQuery([querySelector]);\n\n  const close = () => {\n    onClose && onClose();\n    history.push(pushParam);\n  };\n\n  const onSubmit = (toLink: string[], toUnlink: string[]) => {\n    close();\n    const t = dispatch(\n      updateWorkflows(toLink, toUnlink, {\n        object_type: objectType,\n        app_name: APP_NAME[objectType],\n        object_id: query[querySelector]\n      })\n    );\n    ((t as unknown) as Promise<any>).then(() => {\n      if (postMethod) {\n        dispatch(postMethod());\n      }\n    });\n  };\n\n  return (\n    <TaggingModal\n      title={modalTitle as string}\n      onClose={close}\n      onSubmit={onSubmit}\n      getInitialTags={() =>\n        listWorkflowsForObject({\n          objectType,\n          appName: APP_NAME[objectType],\n          objectId: query[querySelector]\n        }).then(({ data }) => data) as Promise<Tag[]>\n      }\n      loadTags={loadWorkflowOptions}\n      subTitle={formatMessage(approvalMessages.setWorkflow, {\n        strong: Bold,\n        objectName: objectName(query[querySelector])\n      })}\n      existingTagsMessage={formatMessage(approvalMessages.currentWorkflows)}\n    />\n  );\n};\n\nexport default EditApprovalWorkflow;\n","import { Dispatch } from 'redux';\nimport {\n  ApiCollectionResponse,\n  ApiMetadata,\n  InternalResourceObject\n} from '../../types/common-types';\nimport { ASYNC_ACTIONS } from '../action-types/approval-action-types';\nimport * as ApprovalHelper from '../../helpers/approval/approval-helper';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport extractFormatMessage from '../../utilities/extract-format-message';\nimport approvalMessages from '../../messages/approval.messages';\nimport { AsyncMiddlewareAction, GetReduxState } from '../../types/redux';\nimport {\n  ResourceObject,\n  Workflow\n} from '@redhat-cloud-services/approval-client';\n\nexport const fetchWorkflows = (): AsyncMiddlewareAction<{\n  value?: string;\n  label?: string;\n}[]> => ({\n  type: ASYNC_ACTIONS.FETCH_WORKFLOWS,\n  payload: ApprovalHelper.getApprovalWorkflows().then(({ data }) =>\n    data.map(({ id, name }) => ({ value: id, label: name }))\n  )\n});\n\nexport const updateWorkflows = (\n  toLinkIds: string[],\n  toUnlinkIds: string[],\n  resourceObject: ResourceObject\n) => (dispatch: Dispatch, getState: GetReduxState): AsyncMiddlewareAction => {\n  const formatMessage = extractFormatMessage(getState);\n  return dispatch({\n    type: ASYNC_ACTIONS.UPDATE_WORKFLOWS,\n    payload: ApprovalHelper.updateWorkflows(\n      toUnlinkIds,\n      toLinkIds,\n      resourceObject\n    ).then(() =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Success updating approval process',\n          dismissable: true,\n          description: `${\n            toUnlinkIds.length > 0\n              ? formatMessage &&\n                formatMessage(approvalMessages.unlinkNotification, {\n                  count: toUnlinkIds.length\n                })\n              : ''\n          }\n          ${\n            toLinkIds.length > 0\n              ? formatMessage(approvalMessages.linkNotification, {\n                  count: toLinkIds.length\n                })\n              : ''\n          }`\n        })\n      )\n    )\n  });\n};\n\nexport const listWorkflowsForObject = (\n  resourceObject: InternalResourceObject,\n  meta: ApiMetadata = {\n    limit: defaultSettings.limit,\n    offset: defaultSettings.offset\n  },\n  filter = ''\n): AsyncMiddlewareAction<ApiCollectionResponse<Workflow>> => ({\n  type: ASYNC_ACTIONS.RESOLVE_WORKFLOWS,\n  payload: ApprovalHelper.listWorkflowsForObject(resourceObject, meta, filter)\n});\n"],"sourceRoot":""}