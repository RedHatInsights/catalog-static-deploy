{"version":3,"sources":["webpack:///./src/utilities/use-enhanced-history.js","webpack:///./src/helpers/approval/approval-helper.ts","webpack:///./src/utilities/extract-format-message.js","webpack:///./src/messages/approval.messages.ts","webpack:///./src/smart-components/common/edit-approval-workflow.js","webpack:///./src/redux/actions/approval-actions.js"],"names":["removeSearchQuery","target","split","search","undefined","useEnhancedHistory","removeSearch","keepHash","history","useHistory","push","internalTarget","location","hash","length","loadWorkflowOptions","filterValue","initialLookup","initialLookupQuery","map","workflow","join","get","then","id","label","value","unlinkIds","linkIds","resourceObject","unlinkPromises","wf","unlinkWorkflow","linkPromises","linkWorkflow","Promise","all","pagination","filter","limit","offset","objectQuery","appName","objectType","objectId","paginationQuery","filterQuery","extractFormatMessage","getState","i18nReducer","formatMessage","unlinkNotification","defaultMessage","linkNotification","setWorkflow","currentWorkflows","EditApprovalWorkflow","querySelector","pushParam","objectName","onClose","useFormatMessage","modalTitle","useRef","defineMessage","current","dispatch","useDispatch","useQuery","query","close","title","onSubmit","toLink","toUnlink","toLinkIds","toUnlinkIds","object_type","app_name","APP_NAME","object_id","type","ASYNC_ACTIONS","UPDATE_WORKFLOWS","payload","ApprovalHelper","addNotification","variant","dismissable","description","approvalMessages","count","getInitialTags","listWorkflowsForObject","data","loadTags","subTitle","strong","Bold","existingTagsMessage","propTypes","PropTypes","oneOfType","string","shape","pathname","isRequired","func","bool","oneOf","defaultProps"],"mappings":"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","file":"js/edit-approval-workflow~91f4305a.a0088f6b436586177f36.js","sourcesContent":["import { useHistory } from 'react-router-dom';\n\nconst removeSearchQuery = (target) => {\n  if (typeof target === 'string') {\n    return target.split('?')[0];\n  }\n\n  if (typeof target === 'object') {\n    return {\n      ...target,\n      search: undefined\n    };\n  }\n\n  return target;\n};\n\n/**\n * Wrapper around useHistory hook which adds aditional settings to standard history methods\n * @param {Boolean} removeSearch if true, using history navigation methods will remove search string from path\n * @param {Boolean} keepHash if true, using history navigation methods will not remove hash from URL\n */\nconst useEnhancedHistory = ({ removeSearch, keepHash } = {}) => {\n  const history = useHistory();\n  return {\n    ...history,\n    push: (target) => {\n      let internalTarget = target;\n      if (keepHash && history.location.hash.length > 0) {\n        internalTarget =\n          typeof internalTarget === 'object'\n            ? { ...internalTarget, hash: history.location.hash }\n            : `${internalTarget}${history.location.hash}`;\n      }\n\n      if (removeSearch) {\n        return history.push(removeSearchQuery(internalTarget));\n      }\n\n      return history.push(internalTarget);\n    }\n  };\n};\n\nexport default useEnhancedHistory;\n","import {\n  Workflow,\n  ResourceObject\n} from '@redhat-cloud-services/approval-client';\nimport { getWorkflowApi, getAxiosInstance } from '../shared/user-login';\nimport { APPROVAL_API_BASE } from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\nimport {\n  ApiCollectionResponse,\n  SelectOptions,\n  InternalResourceObject\n} from '../../types/common-types';\n\nexport const getApprovalWorkflows = (): Promise<ApiCollectionResponse<\n  Workflow\n>> =>\n  (getWorkflowApi().listWorkflows() as unknown) as Promise<\n    ApiCollectionResponse<Workflow>\n  >;\n\nexport const loadWorkflowOptions = (\n  filterValue = '',\n  initialLookup: string[] = []\n): Promise<SelectOptions> => {\n  const initialLookupQuery = initialLookup\n    .map((workflow) => `filter[id][]=${workflow}`)\n    .join('&');\n\n  return getAxiosInstance()\n    .get(\n      `${APPROVAL_API_BASE}/workflows?filter[name][contains]=${filterValue}&${initialLookupQuery ||\n        ''}`\n    )\n    .then(({ data }) =>\n      data.map(({ id, name }: Workflow) => ({ label: name, value: id }))\n    );\n};\n\nexport const updateWorkflows = (\n  unlinkIds: string[],\n  linkIds: string[],\n  resourceObject: ResourceObject\n): Promise<void[]> => {\n  const unlinkPromises = unlinkIds\n    ? unlinkIds.map((wf) => getWorkflowApi().unlinkWorkflow(wf, resourceObject))\n    : [];\n  const linkPromises = linkIds\n    ? linkIds.map((wf) => getWorkflowApi().linkWorkflow(wf, resourceObject))\n    : [];\n  return (Promise.all([\n    ...unlinkPromises,\n    ...linkPromises\n  ]) as unknown) as Promise<void[]>;\n};\n\nexport const listWorkflowsForObject = (\n  resourceObject: InternalResourceObject,\n  pagination: PaginationConfiguration = {\n    limit: defaultSettings.limit,\n    offset: defaultSettings.offset\n  },\n  filter = ''\n): Promise<ApiCollectionResponse<Workflow>> => {\n  const objectQuery = `app_name=${resourceObject.appName}&object_type=${resourceObject.objectType}&object_id=${resourceObject.objectId}`;\n  const paginationQuery = `&limit=${pagination.limit}&offset=${pagination.offset}`;\n  const filterQuery = `&filter[name][contains]=${filter}`;\n  return getAxiosInstance().get(\n    `${APPROVAL_API_BASE}/workflows?${objectQuery}${filterQuery}${paginationQuery}`\n  );\n};\n","const extractFormatMessage = (getState) => getState().i18nReducer.formatMessage;\n\nexport default extractFormatMessage;\n","import { defineMessages } from 'react-intl';\n\nconst approvalMessages = defineMessages({\n  unlinkNotification: {\n    id: 'approval.notifications.unlink',\n    defaultMessage:\n      '{count, number} {count, plural, one {approval process was} other {approval processes were}} unlinked successfully.'\n  },\n  linkNotification: {\n    id: 'approval.notifications.link',\n    defaultMessage:\n      '{count, number} {count, plural, one {approval process was} other {approval processes were}} linked successfully.'\n  },\n  setWorkflow: {\n    id: 'approval.workflows.set',\n    defaultMessage:\n      'Select approval processes for <strong>{objectName}</strong>'\n  },\n  currentWorkflows: {\n    id: 'approval.workflows.current',\n    defaultMessage: 'Current approval processes'\n  }\n});\n\nexport default approvalMessages;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { updateWorkflows } from '../../redux/actions/approval-actions';\nimport { APP_NAME } from '../../utilities/constants';\nimport {\n  loadWorkflowOptions,\n  listWorkflowsForObject\n} from '../../helpers/approval/approval-helper';\nimport useQuery from '../../utilities/use-query';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\nimport { defineMessage } from 'react-intl';\nimport approvalMessages from '../../messages/approval.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport TaggingModal from './tagging-modal';\nimport { Bold } from '../../presentational-components/shared/intl-rich-text-components';\n\nconst EditApprovalWorkflow = ({\n  objectType,\n  removeSearch,\n  keepHash,\n  querySelector,\n  pushParam,\n  objectName = () => objectType,\n  onClose\n}) => {\n  const formatMessage = useFormatMessage();\n  const { current: modalTitle } = useRef(\n    formatMessage(\n      defineMessage({\n        id: 'workflows.modal.title',\n        defaultMessage: 'Set approval process'\n      })\n    )\n  );\n  const dispatch = useDispatch();\n  const history = useEnhancedHistory({ removeSearch, keepHash });\n  const [query] = useQuery([querySelector]);\n\n  const close = () => {\n    onClose && onClose();\n    history.push(pushParam);\n  };\n\n  const onSubmit = (toLink, toUnlink) => {\n    close();\n    dispatch(\n      updateWorkflows(toLink, toUnlink, {\n        object_type: objectType,\n        app_name: APP_NAME[objectType],\n        object_id: query[querySelector]\n      })\n    );\n  };\n\n  return (\n    <TaggingModal\n      title={modalTitle}\n      onClose={close}\n      onSubmit={onSubmit}\n      getInitialTags={() =>\n        listWorkflowsForObject({\n          objectType,\n          appName: APP_NAME[objectType],\n          objectId: query[querySelector]\n        }).then(({ data }) => data)\n      }\n      loadTags={loadWorkflowOptions}\n      subTitle={formatMessage(approvalMessages.setWorkflow, {\n        strong: Bold,\n        objectName: objectName(query[querySelector])\n      })}\n      existingTagsMessage={formatMessage(approvalMessages.currentWorkflows)}\n    />\n  );\n};\n\nEditApprovalWorkflow.propTypes = {\n  pushParam: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string\n    })\n  ]).isRequired,\n  objectType: PropTypes.string.isRequired,\n  objectName: PropTypes.func,\n  removeSearch: PropTypes.bool,\n  querySelector: PropTypes.oneOf([\n    'portfolio',\n    'platform',\n    'inventory',\n    'portfolio-item'\n  ]).isRequired,\n  keepHash: PropTypes.bool,\n  onClose: PropTypes.func\n};\n\nEditApprovalWorkflow.defaultProps = {\n  keepHash: false\n};\n\nexport default EditApprovalWorkflow;\n","import { ASYNC_ACTIONS } from '../action-types/approval-action-types';\nimport * as ApprovalHelper from '../../helpers/approval/approval-helper';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport extractFormatMessage from '../../utilities/extract-format-message';\nimport approvalMessages from '../../messages/approval.messages';\n\nexport const fetchWorkflows = () => ({\n  type: ASYNC_ACTIONS.FETCH_WORKFLOWS,\n  payload: ApprovalHelper.getApprovalWorkflows().then(({ data }) => [\n    ...data.map(({ id, name }) => ({ value: id, label: name }))\n  ])\n});\n\nexport const updateWorkflows = (toLinkIds, toUnlinkIds, resourceObject) => (\n  dispatch,\n  getState\n) => {\n  const formatMessage = extractFormatMessage(getState);\n  return dispatch({\n    type: ASYNC_ACTIONS.UPDATE_WORKFLOWS,\n    payload: ApprovalHelper.updateWorkflows(\n      toUnlinkIds,\n      toLinkIds,\n      resourceObject\n    ).then(() =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Success updating approval process',\n          dismissable: true,\n          description: `${\n            toUnlinkIds.length > 0\n              ? formatMessage(approvalMessages.unlinkNotification, {\n                  count: toUnlinkIds.length\n                })\n              : ''\n          }\n          ${\n            toLinkIds.length > 0\n              ? formatMessage(approvalMessages.linkNotification, {\n                  count: toLinkIds.length\n                })\n              : ''\n          }`\n        })\n      )\n    )\n  });\n};\n\nexport const listWorkflowsForObject = (\n  resourceObject,\n  meta = { limit: defaultSettings.limit, offset: defaultSettings.offset },\n  filter = ''\n) => ({\n  type: ASYNC_ACTIONS.RESOLVE_WORKFLOWS,\n  payload: ApprovalHelper.listWorkflowsForObject(resourceObject, meta, filter)\n});\n"],"sourceRoot":""}