{"version":3,"file":"js/add-products-to-portfolio.91c8e0c32f7e4ed17581.js","mappings":"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","sources":["webpack:///./src/smart-components/portfolio/add-products-to-portfolio/add-products-gallery.js","webpack:///./src/presentational-components/shared/filter-select.tsx","webpack:///./src/toolbar/schemas/add-products-toolbar.schema.js","webpack:///./src/smart-components/portfolio/add-products-to-portfolio/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SearchIcon, FilterIcon } from '@patternfly/react-icons';\n\nimport ContentGallery from '../../content-gallery/content-gallery';\nimport ContentGalleryEmptyState from '../../../presentational-components/shared/content-gallery-empty-state';\nimport filteringMessages from '../../../messages/filtering.messages';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\n\nconst EmptyState = ({ platform }) => {\n  const formatMessage = useFormatMessage();\n  return (\n    <ContentGalleryEmptyState\n      Icon={platform ? SearchIcon : FilterIcon}\n      title={\n        platform\n          ? formatMessage(portfolioMessages.addProducstFilterTitle)\n          : formatMessage(portfolioMessages.addProducstPlatformTitle)\n      }\n      description={\n        platform\n          ? formatMessage(filteringMessages.noResultsDescription)\n          : formatMessage(portfolioMessages.addProducstPlatformDescription)\n      }\n    />\n  );\n};\n\nEmptyState.propTypes = {\n  platform: PropTypes.any\n};\n\nconst AddProductsGallery = ({ platform, ...props }) => (\n  <ContentGallery\n    editMode={true}\n    {...props}\n    renderEmptyState={() => <EmptyState platform={platform} />}\n  />\n);\n\nAddProductsGallery.propTypes = {\n  checkedItems: PropTypes.arrayOf(PropTypes.string),\n  platform: PropTypes.any\n};\n\nAddProductsGallery.defaultProps = {\n  checkedItems: []\n};\n\nexport default AddProductsGallery;\n","/* eslint-disable react/prop-types */\nimport React, { useState, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  InternalSelect,\n  InternalSelectProps\n} from '@data-driven-forms/pf4-component-mapper/select';\nimport isEqual from 'lodash/isEqual';\n\nconst FilterSelect: React.ComponentType<InternalSelectProps> = ({\n  onChange,\n  ...props\n}) => {\n  const [stateValue, setValue] = useState(undefined);\n  return (\n    <div key=\"filter-select\" id=\"filter-select\" className=\"filter-select\">\n      <InternalSelect\n        isDisabled={!props.options || props.options.length === 0}\n        name=\"filter-select\"\n        simpleValue={false}\n        onChange={(value) => {\n          onChange && onChange(value || stateValue);\n          setValue(value || stateValue);\n        }}\n        value={stateValue}\n        {...props}\n      />\n    </div>\n  );\n};\n\nFilterSelect.propTypes = {\n  options: PropTypes.array,\n  onChange: PropTypes.func.isRequired\n};\n\nexport default memo(FilterSelect, (prevProps, nextProps) =>\n  isEqual(prevProps.options, nextProps.options)\n);\n","import { toolbarComponentTypes } from '../toolbar-mapper';\nimport { createLinkButton } from '../helpers';\nimport FilterSelect from '../../presentational-components/shared/filter-select';\nimport ButtonWithSpinner from '../../presentational-components/shared/button-with-spinner';\nimport AsyncPagination from '../../smart-components/common/async-pagination';\n\nconst createAddProductsSchema = ({\n  options,\n  isFetching,\n  searchValue,\n  portfolioName,\n  itemsSelected,\n  onOptionSelect,\n  onFilterChange,\n  portfolioRoute,\n  onClickAddToPortfolio,\n  meta,\n  platformId,\n  fetchPlatformItems\n}) => ({\n  fields: [\n    {\n      component: toolbarComponentTypes.TOP_TOOLBAR,\n      key: 'add-products-toolbar',\n      fields: [\n        {\n          component: toolbarComponentTypes.TOP_TOOLBAR_TITLE,\n          title: `Add products: ${portfolioName}`,\n          key: 'add-products-title'\n        },\n        {\n          component: toolbarComponentTypes.LEVEL,\n          key: 'add-products-actions',\n          fields: [\n            {\n              component: toolbarComponentTypes.TOOLBAR,\n              key: 'add-products-actions-toolbar',\n              fields: [\n                {\n                  component: toolbarComponentTypes.TOOLBAR_GROUP,\n                  key: 'products-filter-group',\n                  fields: [\n                    {\n                      component: FilterSelect,\n                      key: 'select-platforms',\n                      id: 'products-platform-select',\n                      isMulti: false,\n                      isSearchable: true,\n                      placeholder: 'Filter by Platform',\n                      options,\n                      onChange: onOptionSelect\n                    },\n                    {\n                      component: toolbarComponentTypes.FILTER_TOOLBAR_ITEM,\n                      key: 'filter-products-input',\n                      onFilterChange,\n                      searchValue,\n                      isDisabled: !platformId,\n                      placeholder: 'Filter products'\n                    }\n                  ]\n                },\n                {\n                  groupName: 'cancel-group-item',\n                  ...createLinkButton({\n                    key: 'add-products-cancel-button',\n                    pathname: portfolioRoute,\n                    variant: 'link',\n                    'aria-label': 'Cancel Add products to Portfolio',\n                    preserveSearch: true,\n                    title: 'Cancel'\n                  })\n                },\n                {\n                  component: toolbarComponentTypes.TOOLBAR_ITEM,\n                  key: 'add-group-item',\n                  fields: [\n                    {\n                      key: 'portfolio-items-add-group',\n                      component: ButtonWithSpinner,\n                      variant: 'primary',\n                      'aria-label': 'Add products to Portfolio',\n                      title: 'Add',\n                      type: 'button',\n                      onClick: onClickAddToPortfolio,\n                      isDisabled: !itemsSelected || isFetching,\n                      showSpinner: isFetching,\n                      children: 'Add',\n                      id: 'add-products-to-portfolio'\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              component: toolbarComponentTypes.LEVEL_ITEM,\n              key: 'pagination-item',\n              fields: meta\n                ? [\n                    {\n                      component: AsyncPagination,\n                      key: 'add-products-pagination',\n                      meta,\n                      apiProps: platformId,\n                      apiRequest: fetchPlatformItems,\n                      isCompact: true\n                    }\n                  ]\n                : []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n});\n\nexport default createAddProductsSchema;\n","import React, { useState, useEffect, useReducer, Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport AddProductsGallery from './add-products-gallery';\nimport ToolbarRenderer from '../../../toolbar/toolbar-renderer';\nimport { defaultSettings } from '../../../helpers/shared/pagination';\nimport PlatformItem from '../../../presentational-components/platform/platform-item';\nimport createAddProductsSchema from '../../../toolbar/schemas/add-products-toolbar.schema';\nimport {\n  fetchPlatformItems,\n  fetchPlatforms\n} from '../../../redux/actions/platform-actions';\nimport {\n  addToPortfolio,\n  fetchPortfolioItemsWithPortfolio\n} from '../../../redux/actions/portfolio-actions';\nimport AsyncPagination from '../../common/async-pagination';\nimport useEnhancedHistory from '../../../utilities/use-enhanced-history';\nimport { useDispatch, useSelector } from 'react-redux';\nimport BottomPaginationContainer from '../../../presentational-components/shared/bottom-pagination-container';\nimport asyncFormValidator from '../../../utilities/async-form-validator';\n\nconst renderGalleryItems = (items = [], checkItem, checkedItems) =>\n  items.map((item) => (\n    <PlatformItem\n      key={item.id}\n      {...item}\n      editMode\n      onToggleItemSelect={() => checkItem(item.id)}\n      checked={checkedItems.includes(item.id)}\n    />\n  ));\n\nconst initialState = {\n  filterValue: '',\n  isFetching: false,\n  isFiltering: false\n};\n\nconst addProductsState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return { ...state, filterValue: action.payload };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n  }\n\n  return state;\n};\n\nconst debouncedFilter = asyncFormValidator(\n  (id, filter, dispatch, filteringCallback, meta = defaultSettings) => {\n    filteringCallback(true);\n    dispatch(fetchPlatformItems(id, filter, { ...meta, filter })).then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst AddProductsToPortfolio = ({ portfolioRoute }) => {\n  const [selectedPlatform, setSelectedPlatform] = useState(undefined);\n  const [checkedItems, setCheckedItems] = useState([]);\n  const [{ filterValue, isFetching }, stateDispatch] = useReducer(\n    addProductsState,\n    initialState\n  );\n  const { push } = useEnhancedHistory();\n  const dispatch = useDispatch();\n  const { portfolio, platforms, platformItems, isLoading } = useSelector(\n    ({\n      portfolioReducer: { selectedPortfolio },\n      platformReducer: { platforms, platformItems, isPlatformDataLoading }\n    }) => ({\n      platforms,\n      platformItems,\n      isLoading: isPlatformDataLoading,\n      portfolio: selectedPortfolio\n    })\n  );\n\n  useEffect(() => {\n    dispatch(fetchPlatforms());\n  }, []);\n\n  const checkItem = (itemId) => {\n    const index = checkedItems.indexOf(itemId);\n    return index > -1\n      ? [...checkedItems.slice(0, index), ...checkedItems.slice(index + 1)]\n      : [...checkedItems, itemId];\n  };\n\n  const items =\n    selectedPlatform && platformItems[selectedPlatform.id]\n      ? platformItems[selectedPlatform.id].data\n      : [];\n  const meta =\n    selectedPlatform &&\n    platformItems[selectedPlatform.id] &&\n    platformItems[selectedPlatform.id].meta;\n\n  const handleFilterItems = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      selectedPlatform.id,\n      value,\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering }),\n      {\n        ...meta,\n        offset: 0\n      }\n    );\n  };\n\n  const handleAddToPortfolio = () => {\n    dispatch({ type: 'setFetching', payload: true });\n    return dispatch(addToPortfolio(portfolio.id, checkedItems))\n      .then(() => dispatch({ type: 'setFetching', payload: false }))\n      .then(() =>\n        push({ pathname: portfolioRoute, search: `?portfolio=${portfolio.id}` })\n      )\n      .then(() => dispatch(fetchPortfolioItemsWithPortfolio(portfolio.id)))\n      .catch(() => dispatch({ type: 'setFetching', payload: false }));\n  };\n\n  const onPlatformSelect = (platform) => {\n    setSelectedPlatform(platform);\n    dispatch(fetchPlatformItems(platform.id, filterValue, defaultSettings));\n  };\n\n  return (\n    <Fragment>\n      <ToolbarRenderer\n        schema={createAddProductsSchema({\n          options: platforms.map((platform) => ({\n            value: platform.id,\n            label: platform.name,\n            id: platform.id\n          })),\n          isFetching,\n          portfolioName: (portfolio && portfolio.name) || '',\n          itemsSelected: checkedItems.length > 0,\n          onOptionSelect: onPlatformSelect,\n          onFilterChange: (value) => handleFilterItems(value),\n          portfolioRoute,\n          onClickAddToPortfolio: handleAddToPortfolio,\n          meta,\n          platformId: selectedPlatform && selectedPlatform.id,\n          searchValue: filterValue,\n          fetchPlatformItems: (id, options) =>\n            dispatch(fetchPlatformItems(id, filterValue, options))\n        })}\n      />\n      <AddProductsGallery\n        platform={!!selectedPlatform}\n        checkedItems={checkedItems}\n        isLoading={isLoading}\n        items={renderGalleryItems(\n          items,\n          (itemId) => setCheckedItems(checkItem(itemId)),\n          checkedItems\n        )}\n      />\n      {meta && meta.count > 0 && (\n        <BottomPaginationContainer>\n          <AsyncPagination\n            meta={meta}\n            apiProps={selectedPlatform && selectedPlatform.id}\n            apiRequest={(id, options) =>\n              fetchPlatformItems(id, filterValue, options)\n            }\n            dropDirection=\"up\"\n          />\n        </BottomPaginationContainer>\n      )}\n    </Fragment>\n  );\n};\n\nAddProductsToPortfolio.propTypes = {\n  portfolioRoute: PropTypes.string.isRequired\n};\n\nexport default AddProductsToPortfolio;\n"],"names":["EmptyState","platform","formatMessage","useFormatMessage","Icon","SearchIcon","FilterIcon","title","portfolioMessages","description","filteringMessages","propTypes","PropTypes","AddProductsGallery","props","editMode","renderEmptyState","checkedItems","defaultProps","FilterSelect","onChange","useState","undefined","stateValue","setValue","key","id","className","isDisabled","options","length","name","simpleValue","value","memo","prevProps","nextProps","isFetching","searchValue","portfolioName","itemsSelected","onOptionSelect","onFilterChange","portfolioRoute","onClickAddToPortfolio","meta","platformId","fetchPlatformItems","fields","component","toolbarComponentTypes","isMulti","isSearchable","placeholder","groupName","createLinkButton","pathname","variant","preserveSearch","ButtonWithSpinner","type","onClick","showSpinner","children","AsyncPagination","apiProps","apiRequest","isCompact","renderGalleryItems","items","checkItem","map","item","onToggleItemSelect","checked","includes","initialState","filterValue","isFiltering","addProductsState","state","action","payload","debouncedFilter","asyncFormValidator","filter","dispatch","filteringCallback","defaultSettings","then","AddProductsToPortfolio","selectedPlatform","setSelectedPlatform","setCheckedItems","useReducer","stateDispatch","push","useEnhancedHistory","useDispatch","useSelector","selectedPortfolio","portfolioReducer","platformReducer","platforms","platformItems","isLoading","isPlatformDataLoading","portfolio","useEffect","fetchPlatforms","data","Fragment","schema","createAddProductsSchema","label","offset","handleFilterItems","addToPortfolio","search","fetchPortfolioItemsWithPortfolio","itemId","index","indexOf","slice","count","dropDirection"],"sourceRoot":""}