{"version":3,"sources":["webpack:///./node_modules/@redhat-cloud-services/catalog-client/dist/api.js"],"names":["extendStatics","__extends","this","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","defineProperty","exports","value","globalImportUrl","axios_1","base_1","ApprovalRequestStateEnum","OrderStateEnum","OrderItemStateEnum","OrderProcessAssociationsToRemoveAssociationsToRemoveEnum","ProgressMessageLevelEnum","ShareInfoPermissionsEnum","SharePolicyPermissionsEnum","UnsharePolicyPermissionsEnum","DefaultApiAxiosParamCreator","configuration","getDocumentation","options","baseOptions","localVarUrlObj","parse","localVarRequestOptions","method","username","password","query","search","headersFromBaseOptions","headers","url","format","postGraphQL","graphQLRequest","RequiredError","localVarHeaderParameter","needsSerialization","data","JSON","stringify","undefined","DefaultApiFp","localVarAxiosArgs","axios","basePath","default","BASE_PATH","axiosRequestArgs","request","DefaultApiFactory","DefaultApi","_super","BaseAPI","IconApiAxiosParamCreator","createIcon","content","portfolioId","portfolioItemId","localVarFormParams","FormData","append","destroyIcon","id","localVarPath","replace","encodeURIComponent","String","IconApiFp","IconApiFactory","IconApi","OrderApiAxiosParamCreator","addToOrder","orderId","orderItem","cancelOrder","createOrder","destroyOrder","listOrderItemsFromOrder","limit","offset","filter","sortBy","localVarQueryParameter","listOrders","restoreOrder","restoreKey","showOrder","showOrderItemFromOrder","submitOrder","OrderApiFp","OrderApiFactory","OrderApi","OrderItemApiAxiosParamCreator","destroyOrderItem","listApprovalRequests","orderItemId","listOrderItems","listProgressMessages","restoreOrderItem","showOrderItem","OrderItemApiFp","OrderItemApiFactory","OrderItemApi","OrderProcessApiAxiosParamCreator","addOrderProcessAfterItem","orderProcessPortfolioItemId","addOrderProcessBeforeItem","addOrderProcessTag","tag","createOrderProcess","orderProcess","destroyOrderProcess","linkTagToOrderProcess","resourceObject","listOrderProcessTags","listOrderProcesses","appName","objectId","objectType","removeOrderProcessAssociation","orderProcessAssociationsToRemove","removeOrderProcessTags","showOrderProcess","unlinkTagFromOrderProcess","updateOrderProcess","OrderProcessApiFp","OrderProcessApiFactory","OrderProcessApi","PortfolioApiAxiosParamCreator","addPortfolioTag","createPortfolio","portfolio","destroyPortfolio","fetchPortfolioItemsWithPortfolio","listPortfolioTags","listPortfolios","postCopyPortfolio","removePortfolioTags","shareInfo","sharePortfolio","sharePolicy","showPortfolio","showPortfolioIcon","unDeletePortfolio","unsharePortfolio","unsharePolicy","updatePortfolio","PortfolioApiFp","PortfolioApiFactory","PortfolioApi","PortfolioItemApiAxiosParamCreator","addPortfolioItemTag","createPortfolioItem","destroyPortfolioItem","getPortfolioItemNextName","destinationPortfolioId","listPortfolioItemTags","listPortfolioItems","listProviderControlParameters","listServicePlans","postCopyPortfolioItem","copyPortfolioItem","removePortfolioItemTags","showPortfolioItem","showPortfolioItemIcon","unDeletePortfolioItem","updatePortfolioItem","portfolioItem","PortfolioItemApiFp","PortfolioItemApiFactory","PortfolioItemApi","ServicePlansApiAxiosParamCreator","createServicePlan","importServicePlan","patchServicePlanModified","patchModifiedServicePlan","resetServicePlanModified","showServicePlan","showServicePlanBase","showServicePlanModified","ServicePlansApiFp","ServicePlansApiFactory","ServicePlansApi","SettingsApiAxiosParamCreator","createSetting","setting","destroySetting","name","listSettings","showSetting","updateSetting","SettingsApiFp","SettingsApiFactory","SettingsApi","TagsApiAxiosParamCreator","listTags","TagsApiFp","TagsApiFactory","TagsApi","TenantApiAxiosParamCreator","listTenants","showTenant","tenantId","tenantSeed","TenantApiFp","TenantApiFactory","TenantApi"],"mappings":"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","file":"js/lib~App~47974c6d.80c008e83557f2c173ac.js","sourcesContent":["\"use strict\";\n// tslint:disable\n/**\n * Catalog API\n * This API gets and orders catalog items from different cloud sources.\n *\n * The version of the OpenAPI document: 1.2.0\n * Contact: support@redhat.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar globalImportUrl = require(\"url\");\nvar axios_1 = require(\"axios\");\n// Some imports not used depending on template conditions\n// @ts-ignore\nvar base_1 = require(\"./base\");\n/**\n    * @export\n    * @enum {string}\n    */\nvar ApprovalRequestStateEnum;\n(function (ApprovalRequestStateEnum) {\n    ApprovalRequestStateEnum[\"Undecided\"] = \"undecided\";\n    ApprovalRequestStateEnum[\"Approved\"] = \"approved\";\n    ApprovalRequestStateEnum[\"Denied\"] = \"denied\";\n    ApprovalRequestStateEnum[\"Canceled\"] = \"canceled\";\n    ApprovalRequestStateEnum[\"Error\"] = \"error\";\n})(ApprovalRequestStateEnum = exports.ApprovalRequestStateEnum || (exports.ApprovalRequestStateEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar OrderStateEnum;\n(function (OrderStateEnum) {\n    OrderStateEnum[\"Created\"] = \"Created\";\n    OrderStateEnum[\"ApprovalPending\"] = \"Approval Pending\";\n    OrderStateEnum[\"Ordered\"] = \"Ordered\";\n    OrderStateEnum[\"Failed\"] = \"Failed\";\n    OrderStateEnum[\"Completed\"] = \"Completed\";\n    OrderStateEnum[\"Canceled\"] = \"Canceled\";\n})(OrderStateEnum = exports.OrderStateEnum || (exports.OrderStateEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar OrderItemStateEnum;\n(function (OrderItemStateEnum) {\n    OrderItemStateEnum[\"Created\"] = \"Created\";\n    OrderItemStateEnum[\"ApprovalPending\"] = \"Approval Pending\";\n    OrderItemStateEnum[\"Ordered\"] = \"Ordered\";\n    OrderItemStateEnum[\"Failed\"] = \"Failed\";\n    OrderItemStateEnum[\"Completed\"] = \"Completed\";\n    OrderItemStateEnum[\"Approved\"] = \"Approved\";\n    OrderItemStateEnum[\"Denied\"] = \"Denied\";\n    OrderItemStateEnum[\"Canceled\"] = \"Canceled\";\n})(OrderItemStateEnum = exports.OrderItemStateEnum || (exports.OrderItemStateEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar OrderProcessAssociationsToRemoveAssociationsToRemoveEnum;\n(function (OrderProcessAssociationsToRemoveAssociationsToRemoveEnum) {\n    OrderProcessAssociationsToRemoveAssociationsToRemoveEnum[\"Before\"] = \"before\";\n    OrderProcessAssociationsToRemoveAssociationsToRemoveEnum[\"After\"] = \"after\";\n})(OrderProcessAssociationsToRemoveAssociationsToRemoveEnum = exports.OrderProcessAssociationsToRemoveAssociationsToRemoveEnum || (exports.OrderProcessAssociationsToRemoveAssociationsToRemoveEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar ProgressMessageLevelEnum;\n(function (ProgressMessageLevelEnum) {\n    ProgressMessageLevelEnum[\"Info\"] = \"info\";\n    ProgressMessageLevelEnum[\"Error\"] = \"error\";\n    ProgressMessageLevelEnum[\"Warning\"] = \"warning\";\n    ProgressMessageLevelEnum[\"Debug\"] = \"debug\";\n})(ProgressMessageLevelEnum = exports.ProgressMessageLevelEnum || (exports.ProgressMessageLevelEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar ShareInfoPermissionsEnum;\n(function (ShareInfoPermissionsEnum) {\n    ShareInfoPermissionsEnum[\"Read\"] = \"read\";\n    ShareInfoPermissionsEnum[\"Update\"] = \"update\";\n    ShareInfoPermissionsEnum[\"Delete\"] = \"delete\";\n    ShareInfoPermissionsEnum[\"Order\"] = \"order\";\n})(ShareInfoPermissionsEnum = exports.ShareInfoPermissionsEnum || (exports.ShareInfoPermissionsEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar SharePolicyPermissionsEnum;\n(function (SharePolicyPermissionsEnum) {\n    SharePolicyPermissionsEnum[\"Read\"] = \"read\";\n    SharePolicyPermissionsEnum[\"Update\"] = \"update\";\n    SharePolicyPermissionsEnum[\"Delete\"] = \"delete\";\n    SharePolicyPermissionsEnum[\"Order\"] = \"order\";\n})(SharePolicyPermissionsEnum = exports.SharePolicyPermissionsEnum || (exports.SharePolicyPermissionsEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar UnsharePolicyPermissionsEnum;\n(function (UnsharePolicyPermissionsEnum) {\n    UnsharePolicyPermissionsEnum[\"Read\"] = \"read\";\n    UnsharePolicyPermissionsEnum[\"Update\"] = \"update\";\n    UnsharePolicyPermissionsEnum[\"Delete\"] = \"delete\";\n    UnsharePolicyPermissionsEnum[\"Order\"] = \"order\";\n})(UnsharePolicyPermissionsEnum = exports.UnsharePolicyPermissionsEnum || (exports.UnsharePolicyPermissionsEnum = {}));\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexports.DefaultApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Return this API document in JSON format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDocumentation: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/openapi.json\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Performs a GraphQL Query\n         * @summary Perform a GraphQL Query\n         * @param {GraphQLRequest} graphQLRequest GraphQL Query Request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postGraphQL: function (graphQLRequest, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'graphQLRequest' is not null or undefined\n            if (graphQLRequest === null || graphQLRequest === undefined) {\n                throw new base_1.RequiredError('graphQLRequest', 'Required parameter graphQLRequest was null or undefined when calling postGraphQL.');\n            }\n            var localVarPath = \"/graphql\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof graphQLRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(graphQLRequest !== undefined ? graphQLRequest : {}) : (graphQLRequest || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexports.DefaultApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Return this API document in JSON format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDocumentation: function (options) {\n            var localVarAxiosArgs = exports.DefaultApiAxiosParamCreator(configuration).getDocumentation(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Performs a GraphQL Query\n         * @summary Perform a GraphQL Query\n         * @param {GraphQLRequest} graphQLRequest GraphQL Query Request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postGraphQL: function (graphQLRequest, options) {\n            var localVarAxiosArgs = exports.DefaultApiAxiosParamCreator(configuration).postGraphQL(graphQLRequest, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * DefaultApi - factory interface\n * @export\n */\nexports.DefaultApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Return this API document in JSON format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDocumentation: function (options) {\n            return exports.DefaultApiFp(configuration).getDocumentation(options)(axios, basePath);\n        },\n        /**\n         * Performs a GraphQL Query\n         * @summary Perform a GraphQL Query\n         * @param {GraphQLRequest} graphQLRequest GraphQL Query Request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postGraphQL: function (graphQLRequest, options) {\n            return exports.DefaultApiFp(configuration).postGraphQL(graphQLRequest, options)(axios, basePath);\n        },\n    };\n};\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nvar DefaultApi = /** @class */ (function (_super) {\n    __extends(DefaultApi, _super);\n    function DefaultApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Return this API document in JSON format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    DefaultApi.prototype.getDocumentation = function (options) {\n        return exports.DefaultApiFp(this.configuration).getDocumentation(options)(this.axios, this.basePath);\n    };\n    /**\n     * Performs a GraphQL Query\n     * @summary Perform a GraphQL Query\n     * @param {GraphQLRequest} graphQLRequest GraphQL Query Request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    DefaultApi.prototype.postGraphQL = function (graphQLRequest, options) {\n        return exports.DefaultApiFp(this.configuration).postGraphQL(graphQLRequest, options)(this.axios, this.basePath);\n    };\n    return DefaultApi;\n}(base_1.BaseAPI));\nexports.DefaultApi = DefaultApi;\n/**\n * IconApi - axios parameter creator\n * @export\n */\nexports.IconApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Creates an Icon from the specified parameters\n         * @summary Create an Icon\n         * @param {any} [content] The binary image contents, maximum size is 250KB\n         * @param {string} [portfolioId] The Portfolio this Icon belongs to\n         * @param {string} [portfolioItemId] The Portfolio Item this Icon belongs to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createIcon: function (content, portfolioId, portfolioItemId, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/icons\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            var localVarFormParams = new FormData();\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (content !== undefined) {\n                localVarFormParams.append('content', content);\n            }\n            if (portfolioId !== undefined) {\n                localVarFormParams.append('portfolio_id', portfolioId);\n            }\n            if (portfolioItemId !== undefined) {\n                localVarFormParams.append('portfolio_item_id', portfolioItemId);\n            }\n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = localVarFormParams;\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deletes the icon based on the icon ID passed\n         * @summary Delete an existing Icon\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyIcon: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling destroyIcon.');\n            }\n            var localVarPath = \"/icons/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * IconApi - functional programming interface\n * @export\n */\nexports.IconApiFp = function (configuration) {\n    return {\n        /**\n         * Creates an Icon from the specified parameters\n         * @summary Create an Icon\n         * @param {any} [content] The binary image contents, maximum size is 250KB\n         * @param {string} [portfolioId] The Portfolio this Icon belongs to\n         * @param {string} [portfolioItemId] The Portfolio Item this Icon belongs to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createIcon: function (content, portfolioId, portfolioItemId, options) {\n            var localVarAxiosArgs = exports.IconApiAxiosParamCreator(configuration).createIcon(content, portfolioId, portfolioItemId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Deletes the icon based on the icon ID passed\n         * @summary Delete an existing Icon\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyIcon: function (id, options) {\n            var localVarAxiosArgs = exports.IconApiAxiosParamCreator(configuration).destroyIcon(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * IconApi - factory interface\n * @export\n */\nexports.IconApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Creates an Icon from the specified parameters\n         * @summary Create an Icon\n         * @param {any} [content] The binary image contents, maximum size is 250KB\n         * @param {string} [portfolioId] The Portfolio this Icon belongs to\n         * @param {string} [portfolioItemId] The Portfolio Item this Icon belongs to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createIcon: function (content, portfolioId, portfolioItemId, options) {\n            return exports.IconApiFp(configuration).createIcon(content, portfolioId, portfolioItemId, options)(axios, basePath);\n        },\n        /**\n         * Deletes the icon based on the icon ID passed\n         * @summary Delete an existing Icon\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyIcon: function (id, options) {\n            return exports.IconApiFp(configuration).destroyIcon(id, options)(axios, basePath);\n        },\n    };\n};\n/**\n * IconApi - object-oriented interface\n * @export\n * @class IconApi\n * @extends {BaseAPI}\n */\nvar IconApi = /** @class */ (function (_super) {\n    __extends(IconApi, _super);\n    function IconApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Creates an Icon from the specified parameters\n     * @summary Create an Icon\n     * @param {any} [content] The binary image contents, maximum size is 250KB\n     * @param {string} [portfolioId] The Portfolio this Icon belongs to\n     * @param {string} [portfolioItemId] The Portfolio Item this Icon belongs to\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IconApi\n     */\n    IconApi.prototype.createIcon = function (content, portfolioId, portfolioItemId, options) {\n        return exports.IconApiFp(this.configuration).createIcon(content, portfolioId, portfolioItemId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Deletes the icon based on the icon ID passed\n     * @summary Delete an existing Icon\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IconApi\n     */\n    IconApi.prototype.destroyIcon = function (id, options) {\n        return exports.IconApiFp(this.configuration).destroyIcon(id, options)(this.axios, this.basePath);\n    };\n    return IconApi;\n}(base_1.BaseAPI));\nexports.IconApi = IconApi;\n/**\n * OrderApi - axios parameter creator\n * @export\n */\nexports.OrderApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Adds an order item to an order in pending state\n         * @summary Add an order item to an order in pending state\n         * @param {string} orderId The Order ID\n         * @param {OrderItem} orderItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addToOrder: function (orderId, orderItem, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling addToOrder.');\n            }\n            // verify required parameter 'orderItem' is not null or undefined\n            if (orderItem === null || orderItem === undefined) {\n                throw new base_1.RequiredError('orderItem', 'Required parameter orderItem was null or undefined when calling addToOrder.');\n            }\n            var localVarPath = \"/orders/{order_id}/order_items\"\n                .replace(\"{\" + \"order_id\" + \"}\", encodeURIComponent(String(orderId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof orderItem !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderItem !== undefined ? orderItem : {}) : (orderItem || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an updated order.\n         * @summary Cancels a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancelOrder: function (orderId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling cancelOrder.');\n            }\n            var localVarPath = \"/orders/{order_id}/cancel\"\n                .replace(\"{\" + \"order_id\" + \"}\", encodeURIComponent(String(orderId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new order.\n         * @summary Create a new order\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createOrder: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/orders\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deletes the Order based on order ID passed\n         * @summary Delete an existing Order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrder: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling destroyOrder.');\n            }\n            var localVarPath = \"/orders/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of items associated with an order.\n         * @summary Gets a list of items in a given order\n         * @param {string} orderId The Order ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItemsFromOrder: function (orderId, limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling listOrderItemsFromOrder.');\n            }\n            var localVarPath = \"/orders/{order_id}/order_items\"\n                .replace(\"{\" + \"order_id\" + \"}\", encodeURIComponent(String(orderId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of orders associated with the logged in user.\n         * @summary Get a list of orders\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrders: function (limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/orders\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Restores the order specified by the order ID.\n         * @summary Restore specific Order\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrder: function (id, restoreKey, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling restoreOrder.');\n            }\n            // verify required parameter 'restoreKey' is not null or undefined\n            if (restoreKey === null || restoreKey === undefined) {\n                throw new base_1.RequiredError('restoreKey', 'Required parameter restoreKey was null or undefined when calling restoreOrder.');\n            }\n            var localVarPath = \"/orders/{id}/restore\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof restoreKey !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(restoreKey !== undefined ? restoreKey : {}) : (restoreKey || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a specific order based on the order ID\n         * @summary Get a specific order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrder: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showOrder.');\n            }\n            var localVarPath = \"/orders/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets an order item associated with an order.\n         * @summary Gets an individual order item from a given order\n         * @param {string} orderId The Order ID\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItemFromOrder: function (orderId, id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling showOrderItemFromOrder.');\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showOrderItemFromOrder.');\n            }\n            var localVarPath = \"/orders/{order_id}/order_items/{id}\"\n                .replace(\"{\" + \"order_id\" + \"}\", encodeURIComponent(String(orderId)))\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an updated order.\n         * @summary Submit a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitOrder: function (orderId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling submitOrder.');\n            }\n            var localVarPath = \"/orders/{order_id}/submit_order\"\n                .replace(\"{\" + \"order_id\" + \"}\", encodeURIComponent(String(orderId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * OrderApi - functional programming interface\n * @export\n */\nexports.OrderApiFp = function (configuration) {\n    return {\n        /**\n         * Adds an order item to an order in pending state\n         * @summary Add an order item to an order in pending state\n         * @param {string} orderId The Order ID\n         * @param {OrderItem} orderItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addToOrder: function (orderId, orderItem, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).addToOrder(orderId, orderItem, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns an updated order.\n         * @summary Cancels a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancelOrder: function (orderId, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).cancelOrder(orderId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Creates a new order.\n         * @summary Create a new order\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createOrder: function (options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).createOrder(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Deletes the Order based on order ID passed\n         * @summary Delete an existing Order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrder: function (id, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).destroyOrder(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of items associated with an order.\n         * @summary Gets a list of items in a given order\n         * @param {string} orderId The Order ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItemsFromOrder: function (orderId, limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).listOrderItemsFromOrder(orderId, limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of orders associated with the logged in user.\n         * @summary Get a list of orders\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrders: function (limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).listOrders(limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Restores the order specified by the order ID.\n         * @summary Restore specific Order\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrder: function (id, restoreKey, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).restoreOrder(id, restoreKey, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get a specific order based on the order ID\n         * @summary Get a specific order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrder: function (id, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).showOrder(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets an order item associated with an order.\n         * @summary Gets an individual order item from a given order\n         * @param {string} orderId The Order ID\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItemFromOrder: function (orderId, id, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).showOrderItemFromOrder(orderId, id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns an updated order.\n         * @summary Submit a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitOrder: function (orderId, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).submitOrder(orderId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * OrderApi - factory interface\n * @export\n */\nexports.OrderApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Adds an order item to an order in pending state\n         * @summary Add an order item to an order in pending state\n         * @param {string} orderId The Order ID\n         * @param {OrderItem} orderItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addToOrder: function (orderId, orderItem, options) {\n            return exports.OrderApiFp(configuration).addToOrder(orderId, orderItem, options)(axios, basePath);\n        },\n        /**\n         * Returns an updated order.\n         * @summary Cancels a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancelOrder: function (orderId, options) {\n            return exports.OrderApiFp(configuration).cancelOrder(orderId, options)(axios, basePath);\n        },\n        /**\n         * Creates a new order.\n         * @summary Create a new order\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createOrder: function (options) {\n            return exports.OrderApiFp(configuration).createOrder(options)(axios, basePath);\n        },\n        /**\n         * Deletes the Order based on order ID passed\n         * @summary Delete an existing Order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrder: function (id, options) {\n            return exports.OrderApiFp(configuration).destroyOrder(id, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of items associated with an order.\n         * @summary Gets a list of items in a given order\n         * @param {string} orderId The Order ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItemsFromOrder: function (orderId, limit, offset, filter, sortBy, options) {\n            return exports.OrderApiFp(configuration).listOrderItemsFromOrder(orderId, limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of orders associated with the logged in user.\n         * @summary Get a list of orders\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrders: function (limit, offset, filter, sortBy, options) {\n            return exports.OrderApiFp(configuration).listOrders(limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Restores the order specified by the order ID.\n         * @summary Restore specific Order\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrder: function (id, restoreKey, options) {\n            return exports.OrderApiFp(configuration).restoreOrder(id, restoreKey, options)(axios, basePath);\n        },\n        /**\n         * Get a specific order based on the order ID\n         * @summary Get a specific order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrder: function (id, options) {\n            return exports.OrderApiFp(configuration).showOrder(id, options)(axios, basePath);\n        },\n        /**\n         * Gets an order item associated with an order.\n         * @summary Gets an individual order item from a given order\n         * @param {string} orderId The Order ID\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItemFromOrder: function (orderId, id, options) {\n            return exports.OrderApiFp(configuration).showOrderItemFromOrder(orderId, id, options)(axios, basePath);\n        },\n        /**\n         * Returns an updated order.\n         * @summary Submit a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitOrder: function (orderId, options) {\n            return exports.OrderApiFp(configuration).submitOrder(orderId, options)(axios, basePath);\n        },\n    };\n};\n/**\n * OrderApi - object-oriented interface\n * @export\n * @class OrderApi\n * @extends {BaseAPI}\n */\nvar OrderApi = /** @class */ (function (_super) {\n    __extends(OrderApi, _super);\n    function OrderApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Adds an order item to an order in pending state\n     * @summary Add an order item to an order in pending state\n     * @param {string} orderId The Order ID\n     * @param {OrderItem} orderItem\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.addToOrder = function (orderId, orderItem, options) {\n        return exports.OrderApiFp(this.configuration).addToOrder(orderId, orderItem, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns an updated order.\n     * @summary Cancels a given order\n     * @param {string} orderId The Order ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.cancelOrder = function (orderId, options) {\n        return exports.OrderApiFp(this.configuration).cancelOrder(orderId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Creates a new order.\n     * @summary Create a new order\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.createOrder = function (options) {\n        return exports.OrderApiFp(this.configuration).createOrder(options)(this.axios, this.basePath);\n    };\n    /**\n     * Deletes the Order based on order ID passed\n     * @summary Delete an existing Order\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.destroyOrder = function (id, options) {\n        return exports.OrderApiFp(this.configuration).destroyOrder(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of items associated with an order.\n     * @summary Gets a list of items in a given order\n     * @param {string} orderId The Order ID\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.listOrderItemsFromOrder = function (orderId, limit, offset, filter, sortBy, options) {\n        return exports.OrderApiFp(this.configuration).listOrderItemsFromOrder(orderId, limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of orders associated with the logged in user.\n     * @summary Get a list of orders\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.listOrders = function (limit, offset, filter, sortBy, options) {\n        return exports.OrderApiFp(this.configuration).listOrders(limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Restores the order specified by the order ID.\n     * @summary Restore specific Order\n     * @param {string} id ID of the resource\n     * @param {RestoreKey} restoreKey\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.restoreOrder = function (id, restoreKey, options) {\n        return exports.OrderApiFp(this.configuration).restoreOrder(id, restoreKey, options)(this.axios, this.basePath);\n    };\n    /**\n     * Get a specific order based on the order ID\n     * @summary Get a specific order\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.showOrder = function (id, options) {\n        return exports.OrderApiFp(this.configuration).showOrder(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets an order item associated with an order.\n     * @summary Gets an individual order item from a given order\n     * @param {string} orderId The Order ID\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.showOrderItemFromOrder = function (orderId, id, options) {\n        return exports.OrderApiFp(this.configuration).showOrderItemFromOrder(orderId, id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns an updated order.\n     * @summary Submit a given order\n     * @param {string} orderId The Order ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.submitOrder = function (orderId, options) {\n        return exports.OrderApiFp(this.configuration).submitOrder(orderId, options)(this.axios, this.basePath);\n    };\n    return OrderApi;\n}(base_1.BaseAPI));\nexports.OrderApi = OrderApi;\n/**\n * OrderItemApi - axios parameter creator\n * @export\n */\nexports.OrderItemApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Deletes the order item  based on order item ID passed\n         * @summary Delete an existing OrderItem\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrderItem: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling destroyOrderItem.');\n            }\n            var localVarPath = \"/order_items/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of approval request associated with an order item. As the item is being approved one can check the status of the approvals.\n         * @summary Gets a list of approval requests for an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listApprovalRequests: function (orderItemId, limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderItemId' is not null or undefined\n            if (orderItemId === null || orderItemId === undefined) {\n                throw new base_1.RequiredError('orderItemId', 'Required parameter orderItemId was null or undefined when calling listApprovalRequests.');\n            }\n            var localVarPath = \"/order_items/{order_item_id}/approval_requests\"\n                .replace(\"{\" + \"order_item_id\" + \"}\", encodeURIComponent(String(orderItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of order items.\n         * @summary List Order Items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItems: function (limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/order_items\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of progress messages associated with an order item. As the item is being processed the provider can update the progress messages.\n         * @summary Gets a list of progress messages in an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProgressMessages: function (orderItemId, limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderItemId' is not null or undefined\n            if (orderItemId === null || orderItemId === undefined) {\n                throw new base_1.RequiredError('orderItemId', 'Required parameter orderItemId was null or undefined when calling listProgressMessages.');\n            }\n            var localVarPath = \"/order_items/{order_item_id}/progress_messages\"\n                .replace(\"{\" + \"order_item_id\" + \"}\", encodeURIComponent(String(orderItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Restores the order item specified by the order item ID.\n         * @summary Restore specific Order item\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrderItem: function (id, restoreKey, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling restoreOrderItem.');\n            }\n            // verify required parameter 'restoreKey' is not null or undefined\n            if (restoreKey === null || restoreKey === undefined) {\n                throw new base_1.RequiredError('restoreKey', 'Required parameter restoreKey was null or undefined when calling restoreOrderItem.');\n            }\n            var localVarPath = \"/order_items/{id}/restore\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof restoreKey !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(restoreKey !== undefined ? restoreKey : {}) : (restoreKey || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a specific order item based on the order item ID passed\n         * @summary Gets a specific order item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItem: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showOrderItem.');\n            }\n            var localVarPath = \"/order_items/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * OrderItemApi - functional programming interface\n * @export\n */\nexports.OrderItemApiFp = function (configuration) {\n    return {\n        /**\n         * Deletes the order item  based on order item ID passed\n         * @summary Delete an existing OrderItem\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrderItem: function (id, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).destroyOrderItem(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of approval request associated with an order item. As the item is being approved one can check the status of the approvals.\n         * @summary Gets a list of approval requests for an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listApprovalRequests: function (orderItemId, limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).listApprovalRequests(orderItemId, limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of order items.\n         * @summary List Order Items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItems: function (limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).listOrderItems(limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of progress messages associated with an order item. As the item is being processed the provider can update the progress messages.\n         * @summary Gets a list of progress messages in an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProgressMessages: function (orderItemId, limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).listProgressMessages(orderItemId, limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Restores the order item specified by the order item ID.\n         * @summary Restore specific Order item\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrderItem: function (id, restoreKey, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).restoreOrderItem(id, restoreKey, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a specific order item based on the order item ID passed\n         * @summary Gets a specific order item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItem: function (id, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).showOrderItem(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * OrderItemApi - factory interface\n * @export\n */\nexports.OrderItemApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Deletes the order item  based on order item ID passed\n         * @summary Delete an existing OrderItem\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrderItem: function (id, options) {\n            return exports.OrderItemApiFp(configuration).destroyOrderItem(id, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of approval request associated with an order item. As the item is being approved one can check the status of the approvals.\n         * @summary Gets a list of approval requests for an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listApprovalRequests: function (orderItemId, limit, offset, filter, sortBy, options) {\n            return exports.OrderItemApiFp(configuration).listApprovalRequests(orderItemId, limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of order items.\n         * @summary List Order Items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItems: function (limit, offset, filter, sortBy, options) {\n            return exports.OrderItemApiFp(configuration).listOrderItems(limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of progress messages associated with an order item. As the item is being processed the provider can update the progress messages.\n         * @summary Gets a list of progress messages in an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProgressMessages: function (orderItemId, limit, offset, filter, sortBy, options) {\n            return exports.OrderItemApiFp(configuration).listProgressMessages(orderItemId, limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Restores the order item specified by the order item ID.\n         * @summary Restore specific Order item\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrderItem: function (id, restoreKey, options) {\n            return exports.OrderItemApiFp(configuration).restoreOrderItem(id, restoreKey, options)(axios, basePath);\n        },\n        /**\n         * Gets a specific order item based on the order item ID passed\n         * @summary Gets a specific order item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItem: function (id, options) {\n            return exports.OrderItemApiFp(configuration).showOrderItem(id, options)(axios, basePath);\n        },\n    };\n};\n/**\n * OrderItemApi - object-oriented interface\n * @export\n * @class OrderItemApi\n * @extends {BaseAPI}\n */\nvar OrderItemApi = /** @class */ (function (_super) {\n    __extends(OrderItemApi, _super);\n    function OrderItemApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Deletes the order item  based on order item ID passed\n     * @summary Delete an existing OrderItem\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.destroyOrderItem = function (id, options) {\n        return exports.OrderItemApiFp(this.configuration).destroyOrderItem(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of approval request associated with an order item. As the item is being approved one can check the status of the approvals.\n     * @summary Gets a list of approval requests for an item\n     * @param {string} orderItemId The Order Item ID\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.listApprovalRequests = function (orderItemId, limit, offset, filter, sortBy, options) {\n        return exports.OrderItemApiFp(this.configuration).listApprovalRequests(orderItemId, limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of order items.\n     * @summary List Order Items\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.listOrderItems = function (limit, offset, filter, sortBy, options) {\n        return exports.OrderItemApiFp(this.configuration).listOrderItems(limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of progress messages associated with an order item. As the item is being processed the provider can update the progress messages.\n     * @summary Gets a list of progress messages in an item\n     * @param {string} orderItemId The Order Item ID\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.listProgressMessages = function (orderItemId, limit, offset, filter, sortBy, options) {\n        return exports.OrderItemApiFp(this.configuration).listProgressMessages(orderItemId, limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Restores the order item specified by the order item ID.\n     * @summary Restore specific Order item\n     * @param {string} id ID of the resource\n     * @param {RestoreKey} restoreKey\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.restoreOrderItem = function (id, restoreKey, options) {\n        return exports.OrderItemApiFp(this.configuration).restoreOrderItem(id, restoreKey, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a specific order item based on the order item ID passed\n     * @summary Gets a specific order item\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.showOrderItem = function (id, options) {\n        return exports.OrderItemApiFp(this.configuration).showOrderItem(id, options)(this.axios, this.basePath);\n    };\n    return OrderItemApi;\n}(base_1.BaseAPI));\nexports.OrderItemApi = OrderItemApi;\n/**\n * OrderProcessApi - axios parameter creator\n * @export\n */\nexports.OrderProcessApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Defines the product that will be executed after ordering when using this Order Process\n         * @summary Adds an \\'after\\' product for an Order Process\n         * @param {string} id ID of the resource\n         * @param {OrderProcessPortfolioItemId} orderProcessPortfolioItemId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addOrderProcessAfterItem: function (id, orderProcessPortfolioItemId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling addOrderProcessAfterItem.');\n            }\n            // verify required parameter 'orderProcessPortfolioItemId' is not null or undefined\n            if (orderProcessPortfolioItemId === null || orderProcessPortfolioItemId === undefined) {\n                throw new base_1.RequiredError('orderProcessPortfolioItemId', 'Required parameter orderProcessPortfolioItemId was null or undefined when calling addOrderProcessAfterItem.');\n            }\n            var localVarPath = \"/order_processes/{id}/after_portfolio_item\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof orderProcessPortfolioItemId !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderProcessPortfolioItemId !== undefined ? orderProcessPortfolioItemId : {}) : (orderProcessPortfolioItemId || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Defines the product that will be executed before ordering when using this Order Process\n         * @summary Adds a \\'before\\' product for an Order Process\n         * @param {string} id ID of the resource\n         * @param {OrderProcessPortfolioItemId} orderProcessPortfolioItemId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addOrderProcessBeforeItem: function (id, orderProcessPortfolioItemId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling addOrderProcessBeforeItem.');\n            }\n            // verify required parameter 'orderProcessPortfolioItemId' is not null or undefined\n            if (orderProcessPortfolioItemId === null || orderProcessPortfolioItemId === undefined) {\n                throw new base_1.RequiredError('orderProcessPortfolioItemId', 'Required parameter orderProcessPortfolioItemId was null or undefined when calling addOrderProcessBeforeItem.');\n            }\n            var localVarPath = \"/order_processes/{id}/before_portfolio_item\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof orderProcessPortfolioItemId !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderProcessPortfolioItemId !== undefined ? orderProcessPortfolioItemId : {}) : (orderProcessPortfolioItemId || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Adds a single tag to a Order Process object\n         * @summary Add Tag for Order Process\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addOrderProcessTag: function (id, tag, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling addOrderProcessTag.');\n            }\n            // verify required parameter 'tag' is not null or undefined\n            if (tag === null || tag === undefined) {\n                throw new base_1.RequiredError('tag', 'Required parameter tag was null or undefined when calling addOrderProcessTag.');\n            }\n            var localVarPath = \"/order_processes/{id}/tag\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof tag !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(tag !== undefined ? tag : {}) : (tag || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Adds an order process.\n         * @summary Add a new order process\n         * @param {OrderProcess} orderProcess Parameters needed to add an OrderProcess\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createOrderProcess: function (orderProcess, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderProcess' is not null or undefined\n            if (orderProcess === null || orderProcess === undefined) {\n                throw new base_1.RequiredError('orderProcess', 'Required parameter orderProcess was null or undefined when calling createOrderProcess.');\n            }\n            var localVarPath = \"/order_processes\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof orderProcess !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderProcess !== undefined ? orderProcess : {}) : (orderProcess || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deletes the order process specified by the ID.\n         * @summary Delete an existing order process\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrderProcess: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling destroyOrderProcess.');\n            }\n            var localVarPath = \"/order_processes/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Links a tag to an order process\n         * @summary Links a tag to an order process\n         * @param {string} id ID of the resource\n         * @param {ResourceObject} resourceObject\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        linkTagToOrderProcess: function (id, resourceObject, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling linkTagToOrderProcess.');\n            }\n            // verify required parameter 'resourceObject' is not null or undefined\n            if (resourceObject === null || resourceObject === undefined) {\n                throw new base_1.RequiredError('resourceObject', 'Required parameter resourceObject was null or undefined when calling linkTagToOrderProcess.');\n            }\n            var localVarPath = \"/order_processes/{id}/link\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof resourceObject !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(resourceObject !== undefined ? resourceObject : {}) : (resourceObject || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for OrderProcess\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderProcessTags: function (id, limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling listOrderProcessTags.');\n            }\n            var localVarPath = \"/order_processes/{id}/tags\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of order processes. Optionally select order processes linked to a resource object whose app_name, object_type and object_id are specified by query parameters.\n         * @summary List OrderProcesses\n         * @param {string} [appName] Name of the application.\n         * @param {string} [objectId] Id of the resource object.\n         * @param {string} [objectType] Type of the resource object.\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderProcesses: function (appName, objectId, objectType, limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/order_processes\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (appName !== undefined) {\n                localVarQueryParameter['app_name'] = appName;\n            }\n            if (objectId !== undefined) {\n                localVarQueryParameter['object_id'] = objectId;\n            }\n            if (objectType !== undefined) {\n                localVarQueryParameter['object_type'] = objectType;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Removes the association to the product(s) defined in the \\'before\\' and/or \\'after\\' that would be executed when using this Order Process\n         * @summary Removes the \\'before\\' and/or \\'after\\' product(s) for an Order Process\n         * @param {string} id ID of the resource\n         * @param {OrderProcessAssociationsToRemove} orderProcessAssociationsToRemove\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeOrderProcessAssociation: function (id, orderProcessAssociationsToRemove, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling removeOrderProcessAssociation.');\n            }\n            // verify required parameter 'orderProcessAssociationsToRemove' is not null or undefined\n            if (orderProcessAssociationsToRemove === null || orderProcessAssociationsToRemove === undefined) {\n                throw new base_1.RequiredError('orderProcessAssociationsToRemove', 'Required parameter orderProcessAssociationsToRemove was null or undefined when calling removeOrderProcessAssociation.');\n            }\n            var localVarPath = \"/order_processes/{id}/remove_association\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof orderProcessAssociationsToRemove !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderProcessAssociationsToRemove !== undefined ? orderProcessAssociationsToRemove : {}) : (orderProcessAssociationsToRemove || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Remove Tags from Order Process\n         * @summary Remove Tags from Order Process\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeOrderProcessTags: function (id, tag, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling removeOrderProcessTags.');\n            }\n            // verify required parameter 'tag' is not null or undefined\n            if (tag === null || tag === undefined) {\n                throw new base_1.RequiredError('tag', 'Required parameter tag was null or undefined when calling removeOrderProcessTags.');\n            }\n            var localVarPath = \"/order_processes/{id}/untag\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof tag !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(tag !== undefined ? tag : {}) : (tag || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets the order process specified by the order process ID.\n         * @summary Get a specific order process\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderProcess: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showOrderProcess.');\n            }\n            var localVarPath = \"/order_processes/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Unlinks a tag from an order process\n         * @summary Unlinks a tag from an order process\n         * @param {string} id ID of the resource\n         * @param {ResourceObject} resourceObject\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unlinkTagFromOrderProcess: function (id, resourceObject, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling unlinkTagFromOrderProcess.');\n            }\n            // verify required parameter 'resourceObject' is not null or undefined\n            if (resourceObject === null || resourceObject === undefined) {\n                throw new base_1.RequiredError('resourceObject', 'Required parameter resourceObject was null or undefined when calling unlinkTagFromOrderProcess.');\n            }\n            var localVarPath = \"/order_processes/{id}/unlink\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof resourceObject !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(resourceObject !== undefined ? resourceObject : {}) : (resourceObject || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the edited order process.\n         * @summary Edit an existing order process\n         * @param {string} id ID of the resource\n         * @param {OrderProcess} orderProcess Parameters needed to update a OrderProcess\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateOrderProcess: function (id, orderProcess, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling updateOrderProcess.');\n            }\n            // verify required parameter 'orderProcess' is not null or undefined\n            if (orderProcess === null || orderProcess === undefined) {\n                throw new base_1.RequiredError('orderProcess', 'Required parameter orderProcess was null or undefined when calling updateOrderProcess.');\n            }\n            var localVarPath = \"/order_processes/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof orderProcess !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderProcess !== undefined ? orderProcess : {}) : (orderProcess || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * OrderProcessApi - functional programming interface\n * @export\n */\nexports.OrderProcessApiFp = function (configuration) {\n    return {\n        /**\n         * Defines the product that will be executed after ordering when using this Order Process\n         * @summary Adds an \\'after\\' product for an Order Process\n         * @param {string} id ID of the resource\n         * @param {OrderProcessPortfolioItemId} orderProcessPortfolioItemId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addOrderProcessAfterItem: function (id, orderProcessPortfolioItemId, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).addOrderProcessAfterItem(id, orderProcessPortfolioItemId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Defines the product that will be executed before ordering when using this Order Process\n         * @summary Adds a \\'before\\' product for an Order Process\n         * @param {string} id ID of the resource\n         * @param {OrderProcessPortfolioItemId} orderProcessPortfolioItemId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addOrderProcessBeforeItem: function (id, orderProcessPortfolioItemId, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).addOrderProcessBeforeItem(id, orderProcessPortfolioItemId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Adds a single tag to a Order Process object\n         * @summary Add Tag for Order Process\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addOrderProcessTag: function (id, tag, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).addOrderProcessTag(id, tag, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Adds an order process.\n         * @summary Add a new order process\n         * @param {OrderProcess} orderProcess Parameters needed to add an OrderProcess\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createOrderProcess: function (orderProcess, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).createOrderProcess(orderProcess, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Deletes the order process specified by the ID.\n         * @summary Delete an existing order process\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrderProcess: function (id, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).destroyOrderProcess(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Links a tag to an order process\n         * @summary Links a tag to an order process\n         * @param {string} id ID of the resource\n         * @param {ResourceObject} resourceObject\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        linkTagToOrderProcess: function (id, resourceObject, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).linkTagToOrderProcess(id, resourceObject, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for OrderProcess\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderProcessTags: function (id, limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).listOrderProcessTags(id, limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of order processes. Optionally select order processes linked to a resource object whose app_name, object_type and object_id are specified by query parameters.\n         * @summary List OrderProcesses\n         * @param {string} [appName] Name of the application.\n         * @param {string} [objectId] Id of the resource object.\n         * @param {string} [objectType] Type of the resource object.\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderProcesses: function (appName, objectId, objectType, limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).listOrderProcesses(appName, objectId, objectType, limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Removes the association to the product(s) defined in the \\'before\\' and/or \\'after\\' that would be executed when using this Order Process\n         * @summary Removes the \\'before\\' and/or \\'after\\' product(s) for an Order Process\n         * @param {string} id ID of the resource\n         * @param {OrderProcessAssociationsToRemove} orderProcessAssociationsToRemove\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeOrderProcessAssociation: function (id, orderProcessAssociationsToRemove, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).removeOrderProcessAssociation(id, orderProcessAssociationsToRemove, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Remove Tags from Order Process\n         * @summary Remove Tags from Order Process\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeOrderProcessTags: function (id, tag, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).removeOrderProcessTags(id, tag, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets the order process specified by the order process ID.\n         * @summary Get a specific order process\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderProcess: function (id, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).showOrderProcess(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Unlinks a tag from an order process\n         * @summary Unlinks a tag from an order process\n         * @param {string} id ID of the resource\n         * @param {ResourceObject} resourceObject\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unlinkTagFromOrderProcess: function (id, resourceObject, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).unlinkTagFromOrderProcess(id, resourceObject, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns the edited order process.\n         * @summary Edit an existing order process\n         * @param {string} id ID of the resource\n         * @param {OrderProcess} orderProcess Parameters needed to update a OrderProcess\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateOrderProcess: function (id, orderProcess, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).updateOrderProcess(id, orderProcess, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * OrderProcessApi - factory interface\n * @export\n */\nexports.OrderProcessApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Defines the product that will be executed after ordering when using this Order Process\n         * @summary Adds an \\'after\\' product for an Order Process\n         * @param {string} id ID of the resource\n         * @param {OrderProcessPortfolioItemId} orderProcessPortfolioItemId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addOrderProcessAfterItem: function (id, orderProcessPortfolioItemId, options) {\n            return exports.OrderProcessApiFp(configuration).addOrderProcessAfterItem(id, orderProcessPortfolioItemId, options)(axios, basePath);\n        },\n        /**\n         * Defines the product that will be executed before ordering when using this Order Process\n         * @summary Adds a \\'before\\' product for an Order Process\n         * @param {string} id ID of the resource\n         * @param {OrderProcessPortfolioItemId} orderProcessPortfolioItemId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addOrderProcessBeforeItem: function (id, orderProcessPortfolioItemId, options) {\n            return exports.OrderProcessApiFp(configuration).addOrderProcessBeforeItem(id, orderProcessPortfolioItemId, options)(axios, basePath);\n        },\n        /**\n         * Adds a single tag to a Order Process object\n         * @summary Add Tag for Order Process\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addOrderProcessTag: function (id, tag, options) {\n            return exports.OrderProcessApiFp(configuration).addOrderProcessTag(id, tag, options)(axios, basePath);\n        },\n        /**\n         * Adds an order process.\n         * @summary Add a new order process\n         * @param {OrderProcess} orderProcess Parameters needed to add an OrderProcess\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createOrderProcess: function (orderProcess, options) {\n            return exports.OrderProcessApiFp(configuration).createOrderProcess(orderProcess, options)(axios, basePath);\n        },\n        /**\n         * Deletes the order process specified by the ID.\n         * @summary Delete an existing order process\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrderProcess: function (id, options) {\n            return exports.OrderProcessApiFp(configuration).destroyOrderProcess(id, options)(axios, basePath);\n        },\n        /**\n         * Links a tag to an order process\n         * @summary Links a tag to an order process\n         * @param {string} id ID of the resource\n         * @param {ResourceObject} resourceObject\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        linkTagToOrderProcess: function (id, resourceObject, options) {\n            return exports.OrderProcessApiFp(configuration).linkTagToOrderProcess(id, resourceObject, options)(axios, basePath);\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for OrderProcess\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderProcessTags: function (id, limit, offset, filter, sortBy, options) {\n            return exports.OrderProcessApiFp(configuration).listOrderProcessTags(id, limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of order processes. Optionally select order processes linked to a resource object whose app_name, object_type and object_id are specified by query parameters.\n         * @summary List OrderProcesses\n         * @param {string} [appName] Name of the application.\n         * @param {string} [objectId] Id of the resource object.\n         * @param {string} [objectType] Type of the resource object.\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderProcesses: function (appName, objectId, objectType, limit, offset, filter, sortBy, options) {\n            return exports.OrderProcessApiFp(configuration).listOrderProcesses(appName, objectId, objectType, limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Removes the association to the product(s) defined in the \\'before\\' and/or \\'after\\' that would be executed when using this Order Process\n         * @summary Removes the \\'before\\' and/or \\'after\\' product(s) for an Order Process\n         * @param {string} id ID of the resource\n         * @param {OrderProcessAssociationsToRemove} orderProcessAssociationsToRemove\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeOrderProcessAssociation: function (id, orderProcessAssociationsToRemove, options) {\n            return exports.OrderProcessApiFp(configuration).removeOrderProcessAssociation(id, orderProcessAssociationsToRemove, options)(axios, basePath);\n        },\n        /**\n         * Remove Tags from Order Process\n         * @summary Remove Tags from Order Process\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeOrderProcessTags: function (id, tag, options) {\n            return exports.OrderProcessApiFp(configuration).removeOrderProcessTags(id, tag, options)(axios, basePath);\n        },\n        /**\n         * Gets the order process specified by the order process ID.\n         * @summary Get a specific order process\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderProcess: function (id, options) {\n            return exports.OrderProcessApiFp(configuration).showOrderProcess(id, options)(axios, basePath);\n        },\n        /**\n         * Unlinks a tag from an order process\n         * @summary Unlinks a tag from an order process\n         * @param {string} id ID of the resource\n         * @param {ResourceObject} resourceObject\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unlinkTagFromOrderProcess: function (id, resourceObject, options) {\n            return exports.OrderProcessApiFp(configuration).unlinkTagFromOrderProcess(id, resourceObject, options)(axios, basePath);\n        },\n        /**\n         * Returns the edited order process.\n         * @summary Edit an existing order process\n         * @param {string} id ID of the resource\n         * @param {OrderProcess} orderProcess Parameters needed to update a OrderProcess\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateOrderProcess: function (id, orderProcess, options) {\n            return exports.OrderProcessApiFp(configuration).updateOrderProcess(id, orderProcess, options)(axios, basePath);\n        },\n    };\n};\n/**\n * OrderProcessApi - object-oriented interface\n * @export\n * @class OrderProcessApi\n * @extends {BaseAPI}\n */\nvar OrderProcessApi = /** @class */ (function (_super) {\n    __extends(OrderProcessApi, _super);\n    function OrderProcessApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Defines the product that will be executed after ordering when using this Order Process\n     * @summary Adds an \\'after\\' product for an Order Process\n     * @param {string} id ID of the resource\n     * @param {OrderProcessPortfolioItemId} orderProcessPortfolioItemId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.addOrderProcessAfterItem = function (id, orderProcessPortfolioItemId, options) {\n        return exports.OrderProcessApiFp(this.configuration).addOrderProcessAfterItem(id, orderProcessPortfolioItemId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Defines the product that will be executed before ordering when using this Order Process\n     * @summary Adds a \\'before\\' product for an Order Process\n     * @param {string} id ID of the resource\n     * @param {OrderProcessPortfolioItemId} orderProcessPortfolioItemId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.addOrderProcessBeforeItem = function (id, orderProcessPortfolioItemId, options) {\n        return exports.OrderProcessApiFp(this.configuration).addOrderProcessBeforeItem(id, orderProcessPortfolioItemId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Adds a single tag to a Order Process object\n     * @summary Add Tag for Order Process\n     * @param {string} id ID of the resource\n     * @param {Array<Tag>} tag\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.addOrderProcessTag = function (id, tag, options) {\n        return exports.OrderProcessApiFp(this.configuration).addOrderProcessTag(id, tag, options)(this.axios, this.basePath);\n    };\n    /**\n     * Adds an order process.\n     * @summary Add a new order process\n     * @param {OrderProcess} orderProcess Parameters needed to add an OrderProcess\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.createOrderProcess = function (orderProcess, options) {\n        return exports.OrderProcessApiFp(this.configuration).createOrderProcess(orderProcess, options)(this.axios, this.basePath);\n    };\n    /**\n     * Deletes the order process specified by the ID.\n     * @summary Delete an existing order process\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.destroyOrderProcess = function (id, options) {\n        return exports.OrderProcessApiFp(this.configuration).destroyOrderProcess(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Links a tag to an order process\n     * @summary Links a tag to an order process\n     * @param {string} id ID of the resource\n     * @param {ResourceObject} resourceObject\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.linkTagToOrderProcess = function (id, resourceObject, options) {\n        return exports.OrderProcessApiFp(this.configuration).linkTagToOrderProcess(id, resourceObject, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns an array of Tag objects\n     * @summary List Tags for OrderProcess\n     * @param {string} id ID of the resource\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.listOrderProcessTags = function (id, limit, offset, filter, sortBy, options) {\n        return exports.OrderProcessApiFp(this.configuration).listOrderProcessTags(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of order processes. Optionally select order processes linked to a resource object whose app_name, object_type and object_id are specified by query parameters.\n     * @summary List OrderProcesses\n     * @param {string} [appName] Name of the application.\n     * @param {string} [objectId] Id of the resource object.\n     * @param {string} [objectType] Type of the resource object.\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.listOrderProcesses = function (appName, objectId, objectType, limit, offset, filter, sortBy, options) {\n        return exports.OrderProcessApiFp(this.configuration).listOrderProcesses(appName, objectId, objectType, limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Removes the association to the product(s) defined in the \\'before\\' and/or \\'after\\' that would be executed when using this Order Process\n     * @summary Removes the \\'before\\' and/or \\'after\\' product(s) for an Order Process\n     * @param {string} id ID of the resource\n     * @param {OrderProcessAssociationsToRemove} orderProcessAssociationsToRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.removeOrderProcessAssociation = function (id, orderProcessAssociationsToRemove, options) {\n        return exports.OrderProcessApiFp(this.configuration).removeOrderProcessAssociation(id, orderProcessAssociationsToRemove, options)(this.axios, this.basePath);\n    };\n    /**\n     * Remove Tags from Order Process\n     * @summary Remove Tags from Order Process\n     * @param {string} id ID of the resource\n     * @param {Array<Tag>} tag\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.removeOrderProcessTags = function (id, tag, options) {\n        return exports.OrderProcessApiFp(this.configuration).removeOrderProcessTags(id, tag, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets the order process specified by the order process ID.\n     * @summary Get a specific order process\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.showOrderProcess = function (id, options) {\n        return exports.OrderProcessApiFp(this.configuration).showOrderProcess(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Unlinks a tag from an order process\n     * @summary Unlinks a tag from an order process\n     * @param {string} id ID of the resource\n     * @param {ResourceObject} resourceObject\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.unlinkTagFromOrderProcess = function (id, resourceObject, options) {\n        return exports.OrderProcessApiFp(this.configuration).unlinkTagFromOrderProcess(id, resourceObject, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns the edited order process.\n     * @summary Edit an existing order process\n     * @param {string} id ID of the resource\n     * @param {OrderProcess} orderProcess Parameters needed to update a OrderProcess\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.updateOrderProcess = function (id, orderProcess, options) {\n        return exports.OrderProcessApiFp(this.configuration).updateOrderProcess(id, orderProcess, options)(this.axios, this.basePath);\n    };\n    return OrderProcessApi;\n}(base_1.BaseAPI));\nexports.OrderProcessApi = OrderProcessApi;\n/**\n * PortfolioApi - axios parameter creator\n * @export\n */\nexports.PortfolioApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Adds a single tag to Portfolio object\n         * @summary Add Tag for Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioTag: function (id, tag, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling addPortfolioTag.');\n            }\n            // verify required parameter 'tag' is not null or undefined\n            if (tag === null || tag === undefined) {\n                throw new base_1.RequiredError('tag', 'Required parameter tag was null or undefined when calling addPortfolioTag.');\n            }\n            var localVarPath = \"/portfolios/{id}/tag\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof tag !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(tag !== undefined ? tag : {}) : (tag || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Adds a portfolio.\n         * @summary Add a new portfolio\n         * @param {Portfolio} portfolio Parameters needed to add a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolio: function (portfolio, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolio' is not null or undefined\n            if (portfolio === null || portfolio === undefined) {\n                throw new base_1.RequiredError('portfolio', 'Required parameter portfolio was null or undefined when calling createPortfolio.');\n            }\n            var localVarPath = \"/portfolios\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof portfolio !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(portfolio !== undefined ? portfolio : {}) : (portfolio || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deletes the portfolio specified by the ID.\n         * @summary Delete an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolio: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling destroyPortfolio.');\n            }\n            var localVarPath = \"/portfolios/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets all portfilio items in the portfolio specified by the given ID.\n         * @summary Get all portfolio items from a specific portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchPortfolioItemsWithPortfolio: function (portfolioId, limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new base_1.RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling fetchPortfolioItemsWithPortfolio.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/portfolio_items\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioTags: function (id, limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling listPortfolioTags.');\n            }\n            var localVarPath = \"/portfolios/{id}/tags\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of portfolios.\n         * @summary List portfolios\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolios: function (limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/portfolios\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Make a copy of the Portfolio.\n         * @summary Make a copy of the Portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolio: function (portfolioId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new base_1.RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling postCopyPortfolio.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/copy\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Remove Tags from Portfolio\n         * @summary Remove Tags from Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioTags: function (id, tag, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling removePortfolioTags.');\n            }\n            // verify required parameter 'tag' is not null or undefined\n            if (tag === null || tag === undefined) {\n                throw new base_1.RequiredError('tag', 'Required parameter tag was null or undefined when calling removePortfolioTags.');\n            }\n            var localVarPath = \"/portfolios/{id}/untag\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof tag !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(tag !== undefined ? tag : {}) : (tag || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch share information about a portfolio\n         * @summary Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        shareInfo: function (portfolioId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new base_1.RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling shareInfo.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/share_info\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Share a Portfolio with one or more groups with specific permissions\n         * @summary Share a portfolio with one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {SharePolicy} sharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sharePortfolio: function (portfolioId, sharePolicy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new base_1.RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling sharePortfolio.');\n            }\n            // verify required parameter 'sharePolicy' is not null or undefined\n            if (sharePolicy === null || sharePolicy === undefined) {\n                throw new base_1.RequiredError('sharePolicy', 'Required parameter sharePolicy was null or undefined when calling sharePortfolio.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/share\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof sharePolicy !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(sharePolicy !== undefined ? sharePolicy : {}) : (sharePolicy || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets the portfolio specified by the portfolio ID.\n         * @summary Get a specific portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolio: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showPortfolio.');\n            }\n            var localVarPath = \"/portfolios/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch the specified portfolio\\'s icon image.\n         * @summary Fetches the specified portfolio\\'s icon image\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioIcon: function (portfolioId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new base_1.RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling showPortfolioIcon.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/icon\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Undeletes the portfolio specified by the portfolio ID.\n         * @summary Undelete specific portfolio\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolio: function (id, restoreKey, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling unDeletePortfolio.');\n            }\n            // verify required parameter 'restoreKey' is not null or undefined\n            if (restoreKey === null || restoreKey === undefined) {\n                throw new base_1.RequiredError('restoreKey', 'Required parameter restoreKey was null or undefined when calling unDeletePortfolio.');\n            }\n            var localVarPath = \"/portfolios/{id}/undelete\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof restoreKey !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(restoreKey !== undefined ? restoreKey : {}) : (restoreKey || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Unshare a Portfolio with one or more groups with specific permissions\n         * @summary Unshare a portfolio from one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {UnsharePolicy} unsharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unsharePortfolio: function (portfolioId, unsharePolicy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new base_1.RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling unsharePortfolio.');\n            }\n            // verify required parameter 'unsharePolicy' is not null or undefined\n            if (unsharePolicy === null || unsharePolicy === undefined) {\n                throw new base_1.RequiredError('unsharePolicy', 'Required parameter unsharePolicy was null or undefined when calling unsharePortfolio.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/unshare\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof unsharePolicy !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(unsharePolicy !== undefined ? unsharePolicy : {}) : (unsharePolicy || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the edited portfolio.\n         * @summary Edit an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {Portfolio} portfolio Parameters needed to update a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolio: function (id, portfolio, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling updatePortfolio.');\n            }\n            // verify required parameter 'portfolio' is not null or undefined\n            if (portfolio === null || portfolio === undefined) {\n                throw new base_1.RequiredError('portfolio', 'Required parameter portfolio was null or undefined when calling updatePortfolio.');\n            }\n            var localVarPath = \"/portfolios/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof portfolio !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(portfolio !== undefined ? portfolio : {}) : (portfolio || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * PortfolioApi - functional programming interface\n * @export\n */\nexports.PortfolioApiFp = function (configuration) {\n    return {\n        /**\n         * Adds a single tag to Portfolio object\n         * @summary Add Tag for Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioTag: function (id, tag, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).addPortfolioTag(id, tag, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Adds a portfolio.\n         * @summary Add a new portfolio\n         * @param {Portfolio} portfolio Parameters needed to add a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolio: function (portfolio, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).createPortfolio(portfolio, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Deletes the portfolio specified by the ID.\n         * @summary Delete an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolio: function (id, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).destroyPortfolio(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets all portfilio items in the portfolio specified by the given ID.\n         * @summary Get all portfolio items from a specific portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchPortfolioItemsWithPortfolio: function (portfolioId, limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).fetchPortfolioItemsWithPortfolio(portfolioId, limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioTags: function (id, limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).listPortfolioTags(id, limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of portfolios.\n         * @summary List portfolios\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolios: function (limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).listPortfolios(limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Make a copy of the Portfolio.\n         * @summary Make a copy of the Portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolio: function (portfolioId, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).postCopyPortfolio(portfolioId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Remove Tags from Portfolio\n         * @summary Remove Tags from Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioTags: function (id, tag, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).removePortfolioTags(id, tag, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Fetch share information about a portfolio\n         * @summary Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        shareInfo: function (portfolioId, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).shareInfo(portfolioId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Share a Portfolio with one or more groups with specific permissions\n         * @summary Share a portfolio with one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {SharePolicy} sharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sharePortfolio: function (portfolioId, sharePolicy, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).sharePortfolio(portfolioId, sharePolicy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets the portfolio specified by the portfolio ID.\n         * @summary Get a specific portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolio: function (id, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).showPortfolio(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Fetch the specified portfolio\\'s icon image.\n         * @summary Fetches the specified portfolio\\'s icon image\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioIcon: function (portfolioId, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).showPortfolioIcon(portfolioId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Undeletes the portfolio specified by the portfolio ID.\n         * @summary Undelete specific portfolio\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolio: function (id, restoreKey, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).unDeletePortfolio(id, restoreKey, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Unshare a Portfolio with one or more groups with specific permissions\n         * @summary Unshare a portfolio from one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {UnsharePolicy} unsharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unsharePortfolio: function (portfolioId, unsharePolicy, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).unsharePortfolio(portfolioId, unsharePolicy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns the edited portfolio.\n         * @summary Edit an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {Portfolio} portfolio Parameters needed to update a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolio: function (id, portfolio, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).updatePortfolio(id, portfolio, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * PortfolioApi - factory interface\n * @export\n */\nexports.PortfolioApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Adds a single tag to Portfolio object\n         * @summary Add Tag for Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioTag: function (id, tag, options) {\n            return exports.PortfolioApiFp(configuration).addPortfolioTag(id, tag, options)(axios, basePath);\n        },\n        /**\n         * Adds a portfolio.\n         * @summary Add a new portfolio\n         * @param {Portfolio} portfolio Parameters needed to add a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolio: function (portfolio, options) {\n            return exports.PortfolioApiFp(configuration).createPortfolio(portfolio, options)(axios, basePath);\n        },\n        /**\n         * Deletes the portfolio specified by the ID.\n         * @summary Delete an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolio: function (id, options) {\n            return exports.PortfolioApiFp(configuration).destroyPortfolio(id, options)(axios, basePath);\n        },\n        /**\n         * Gets all portfilio items in the portfolio specified by the given ID.\n         * @summary Get all portfolio items from a specific portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchPortfolioItemsWithPortfolio: function (portfolioId, limit, offset, filter, sortBy, options) {\n            return exports.PortfolioApiFp(configuration).fetchPortfolioItemsWithPortfolio(portfolioId, limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioTags: function (id, limit, offset, filter, sortBy, options) {\n            return exports.PortfolioApiFp(configuration).listPortfolioTags(id, limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of portfolios.\n         * @summary List portfolios\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolios: function (limit, offset, filter, sortBy, options) {\n            return exports.PortfolioApiFp(configuration).listPortfolios(limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Make a copy of the Portfolio.\n         * @summary Make a copy of the Portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolio: function (portfolioId, options) {\n            return exports.PortfolioApiFp(configuration).postCopyPortfolio(portfolioId, options)(axios, basePath);\n        },\n        /**\n         * Remove Tags from Portfolio\n         * @summary Remove Tags from Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioTags: function (id, tag, options) {\n            return exports.PortfolioApiFp(configuration).removePortfolioTags(id, tag, options)(axios, basePath);\n        },\n        /**\n         * Fetch share information about a portfolio\n         * @summary Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        shareInfo: function (portfolioId, options) {\n            return exports.PortfolioApiFp(configuration).shareInfo(portfolioId, options)(axios, basePath);\n        },\n        /**\n         * Share a Portfolio with one or more groups with specific permissions\n         * @summary Share a portfolio with one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {SharePolicy} sharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sharePortfolio: function (portfolioId, sharePolicy, options) {\n            return exports.PortfolioApiFp(configuration).sharePortfolio(portfolioId, sharePolicy, options)(axios, basePath);\n        },\n        /**\n         * Gets the portfolio specified by the portfolio ID.\n         * @summary Get a specific portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolio: function (id, options) {\n            return exports.PortfolioApiFp(configuration).showPortfolio(id, options)(axios, basePath);\n        },\n        /**\n         * Fetch the specified portfolio\\'s icon image.\n         * @summary Fetches the specified portfolio\\'s icon image\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioIcon: function (portfolioId, options) {\n            return exports.PortfolioApiFp(configuration).showPortfolioIcon(portfolioId, options)(axios, basePath);\n        },\n        /**\n         * Undeletes the portfolio specified by the portfolio ID.\n         * @summary Undelete specific portfolio\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolio: function (id, restoreKey, options) {\n            return exports.PortfolioApiFp(configuration).unDeletePortfolio(id, restoreKey, options)(axios, basePath);\n        },\n        /**\n         * Unshare a Portfolio with one or more groups with specific permissions\n         * @summary Unshare a portfolio from one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {UnsharePolicy} unsharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unsharePortfolio: function (portfolioId, unsharePolicy, options) {\n            return exports.PortfolioApiFp(configuration).unsharePortfolio(portfolioId, unsharePolicy, options)(axios, basePath);\n        },\n        /**\n         * Returns the edited portfolio.\n         * @summary Edit an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {Portfolio} portfolio Parameters needed to update a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolio: function (id, portfolio, options) {\n            return exports.PortfolioApiFp(configuration).updatePortfolio(id, portfolio, options)(axios, basePath);\n        },\n    };\n};\n/**\n * PortfolioApi - object-oriented interface\n * @export\n * @class PortfolioApi\n * @extends {BaseAPI}\n */\nvar PortfolioApi = /** @class */ (function (_super) {\n    __extends(PortfolioApi, _super);\n    function PortfolioApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Adds a single tag to Portfolio object\n     * @summary Add Tag for Portfolio\n     * @param {string} id ID of the resource\n     * @param {Array<Tag>} tag\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.addPortfolioTag = function (id, tag, options) {\n        return exports.PortfolioApiFp(this.configuration).addPortfolioTag(id, tag, options)(this.axios, this.basePath);\n    };\n    /**\n     * Adds a portfolio.\n     * @summary Add a new portfolio\n     * @param {Portfolio} portfolio Parameters needed to add a Portfolio\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.createPortfolio = function (portfolio, options) {\n        return exports.PortfolioApiFp(this.configuration).createPortfolio(portfolio, options)(this.axios, this.basePath);\n    };\n    /**\n     * Deletes the portfolio specified by the ID.\n     * @summary Delete an existing portfolio\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.destroyPortfolio = function (id, options) {\n        return exports.PortfolioApiFp(this.configuration).destroyPortfolio(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets all portfilio items in the portfolio specified by the given ID.\n     * @summary Get all portfolio items from a specific portfolio\n     * @param {string} portfolioId The Portfolio ID\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.fetchPortfolioItemsWithPortfolio = function (portfolioId, limit, offset, filter, sortBy, options) {\n        return exports.PortfolioApiFp(this.configuration).fetchPortfolioItemsWithPortfolio(portfolioId, limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns an array of Tag objects\n     * @summary List Tags for Portfolio\n     * @param {string} id ID of the resource\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.listPortfolioTags = function (id, limit, offset, filter, sortBy, options) {\n        return exports.PortfolioApiFp(this.configuration).listPortfolioTags(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of portfolios.\n     * @summary List portfolios\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.listPortfolios = function (limit, offset, filter, sortBy, options) {\n        return exports.PortfolioApiFp(this.configuration).listPortfolios(limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Make a copy of the Portfolio.\n     * @summary Make a copy of the Portfolio\n     * @param {string} portfolioId The Portfolio ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.postCopyPortfolio = function (portfolioId, options) {\n        return exports.PortfolioApiFp(this.configuration).postCopyPortfolio(portfolioId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Remove Tags from Portfolio\n     * @summary Remove Tags from Portfolio\n     * @param {string} id ID of the resource\n     * @param {Array<Tag>} tag\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.removePortfolioTags = function (id, tag, options) {\n        return exports.PortfolioApiFp(this.configuration).removePortfolioTags(id, tag, options)(this.axios, this.basePath);\n    };\n    /**\n     * Fetch share information about a portfolio\n     * @summary Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group\n     * @param {string} portfolioId The Portfolio ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.shareInfo = function (portfolioId, options) {\n        return exports.PortfolioApiFp(this.configuration).shareInfo(portfolioId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Share a Portfolio with one or more groups with specific permissions\n     * @summary Share a portfolio with one or more groups with specific permission\n     * @param {string} portfolioId The Portfolio ID\n     * @param {SharePolicy} sharePolicy\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.sharePortfolio = function (portfolioId, sharePolicy, options) {\n        return exports.PortfolioApiFp(this.configuration).sharePortfolio(portfolioId, sharePolicy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets the portfolio specified by the portfolio ID.\n     * @summary Get a specific portfolio\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.showPortfolio = function (id, options) {\n        return exports.PortfolioApiFp(this.configuration).showPortfolio(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Fetch the specified portfolio\\'s icon image.\n     * @summary Fetches the specified portfolio\\'s icon image\n     * @param {string} portfolioId The Portfolio ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.showPortfolioIcon = function (portfolioId, options) {\n        return exports.PortfolioApiFp(this.configuration).showPortfolioIcon(portfolioId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Undeletes the portfolio specified by the portfolio ID.\n     * @summary Undelete specific portfolio\n     * @param {string} id ID of the resource\n     * @param {RestoreKey} restoreKey\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.unDeletePortfolio = function (id, restoreKey, options) {\n        return exports.PortfolioApiFp(this.configuration).unDeletePortfolio(id, restoreKey, options)(this.axios, this.basePath);\n    };\n    /**\n     * Unshare a Portfolio with one or more groups with specific permissions\n     * @summary Unshare a portfolio from one or more groups with specific permission\n     * @param {string} portfolioId The Portfolio ID\n     * @param {UnsharePolicy} unsharePolicy\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.unsharePortfolio = function (portfolioId, unsharePolicy, options) {\n        return exports.PortfolioApiFp(this.configuration).unsharePortfolio(portfolioId, unsharePolicy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns the edited portfolio.\n     * @summary Edit an existing portfolio\n     * @param {string} id ID of the resource\n     * @param {Portfolio} portfolio Parameters needed to update a Portfolio\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.updatePortfolio = function (id, portfolio, options) {\n        return exports.PortfolioApiFp(this.configuration).updatePortfolio(id, portfolio, options)(this.axios, this.basePath);\n    };\n    return PortfolioApi;\n}(base_1.BaseAPI));\nexports.PortfolioApi = PortfolioApi;\n/**\n * PortfolioItemApi - axios parameter creator\n * @export\n */\nexports.PortfolioItemApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Adds a single tag to a Portfolio Item object\n         * @summary Add Tag for Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioItemTag: function (id, tag, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling addPortfolioItemTag.');\n            }\n            // verify required parameter 'tag' is not null or undefined\n            if (tag === null || tag === undefined) {\n                throw new base_1.RequiredError('tag', 'Required parameter tag was null or undefined when calling addPortfolioItemTag.');\n            }\n            var localVarPath = \"/portfolio_items/{id}/tag\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof tag !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(tag !== undefined ? tag : {}) : (tag || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Adds a name and description for a portfolio item and returns the newly created portfolio item.\n         * @summary Add a new portfolio item\n         * @param {CreatePortfolioItem} createPortfolioItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolioItem: function (createPortfolioItem, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'createPortfolioItem' is not null or undefined\n            if (createPortfolioItem === null || createPortfolioItem === undefined) {\n                throw new base_1.RequiredError('createPortfolioItem', 'Required parameter createPortfolioItem was null or undefined when calling createPortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof createPortfolioItem !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(createPortfolioItem !== undefined ? createPortfolioItem : {}) : (createPortfolioItem || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deletes the portfolio item based on portfolio item ID passed\n         * @summary Delete an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolioItem: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling destroyPortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the next name for a the Portfolio Item prior to a copy operation\n         * @summary Get the next name for a the Portfolio Item prior to a copy operation\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {string} [destinationPortfolioId] The destination portfolio to compare names against\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPortfolioItemNextName: function (portfolioItemId, destinationPortfolioId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new base_1.RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling getPortfolioItemNextName.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/next_name\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (destinationPortfolioId !== undefined) {\n                localVarQueryParameter['destination_portfolio_id'] = destinationPortfolioId;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio Items\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItemTags: function (id, limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling listPortfolioItemTags.');\n            }\n            var localVarPath = \"/portfolio_items/{id}/tags\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of portfolio items.\n         * @summary List all portfolio items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItems: function (limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/portfolio_items\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets the provider control parameters for a portfolio item.\n         * @summary Gets the provider control parameters for this portfolio item; requires control paramaters provided when provisioning the portfolio item.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProviderControlParameters: function (portfolioItemId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new base_1.RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling listProviderControlParameters.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/provider_control_parameters\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets all service plans for a portfolio item.\n         * @summary Gets all service plans for a specific portfolio item; requires a connection to the topology service.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServicePlans: function (portfolioItemId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new base_1.RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling listServicePlans.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/service_plans\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Make a copy of the Portfolio Item.\n         * @summary Make a copy of the Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {CopyPortfolioItem} [copyPortfolioItem]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolioItem: function (portfolioItemId, copyPortfolioItem, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new base_1.RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling postCopyPortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/copy\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof copyPortfolioItem !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(copyPortfolioItem !== undefined ? copyPortfolioItem : {}) : (copyPortfolioItem || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Remove Tags from Portfolio Item\n         * @summary Remove Tags from Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioItemTags: function (id, tag, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling removePortfolioItemTags.');\n            }\n            // verify required parameter 'tag' is not null or undefined\n            if (tag === null || tag === undefined) {\n                throw new base_1.RequiredError('tag', 'Required parameter tag was null or undefined when calling removePortfolioItemTags.');\n            }\n            var localVarPath = \"/portfolio_items/{id}/untag\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof tag !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(tag !== undefined ? tag : {}) : (tag || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a specific portfolio item based on the portfolio item ID passed\n         * @summary Gets a specific portfolio item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItem: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showPortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch the specified portfolio item\\'s icon image.\n         * @summary Fetches the specified portfolio item\\'s icon image\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItemIcon: function (portfolioItemId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new base_1.RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling showPortfolioItemIcon.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/icon\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * If a record has been discarded, this operation will undelete it so it can be requested normally.\n         * @summary Undelete a specified Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolioItem: function (portfolioItemId, restoreKey, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new base_1.RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling unDeletePortfolioItem.');\n            }\n            // verify required parameter 'restoreKey' is not null or undefined\n            if (restoreKey === null || restoreKey === undefined) {\n                throw new base_1.RequiredError('restoreKey', 'Required parameter restoreKey was null or undefined when calling unDeletePortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/undelete\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof restoreKey !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(restoreKey !== undefined ? restoreKey : {}) : (restoreKey || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Edits portfolio item specified by the given ID.\n         * @summary Edit an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {PortfolioItem} portfolioItem Parameters needed to update a Portfolio Item\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolioItem: function (id, portfolioItem, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling updatePortfolioItem.');\n            }\n            // verify required parameter 'portfolioItem' is not null or undefined\n            if (portfolioItem === null || portfolioItem === undefined) {\n                throw new base_1.RequiredError('portfolioItem', 'Required parameter portfolioItem was null or undefined when calling updatePortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof portfolioItem !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(portfolioItem !== undefined ? portfolioItem : {}) : (portfolioItem || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * PortfolioItemApi - functional programming interface\n * @export\n */\nexports.PortfolioItemApiFp = function (configuration) {\n    return {\n        /**\n         * Adds a single tag to a Portfolio Item object\n         * @summary Add Tag for Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioItemTag: function (id, tag, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).addPortfolioItemTag(id, tag, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Adds a name and description for a portfolio item and returns the newly created portfolio item.\n         * @summary Add a new portfolio item\n         * @param {CreatePortfolioItem} createPortfolioItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolioItem: function (createPortfolioItem, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).createPortfolioItem(createPortfolioItem, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Deletes the portfolio item based on portfolio item ID passed\n         * @summary Delete an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolioItem: function (id, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).destroyPortfolioItem(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get the next name for a the Portfolio Item prior to a copy operation\n         * @summary Get the next name for a the Portfolio Item prior to a copy operation\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {string} [destinationPortfolioId] The destination portfolio to compare names against\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPortfolioItemNextName: function (portfolioItemId, destinationPortfolioId, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).getPortfolioItemNextName(portfolioItemId, destinationPortfolioId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio Items\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItemTags: function (id, limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).listPortfolioItemTags(id, limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of portfolio items.\n         * @summary List all portfolio items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItems: function (limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).listPortfolioItems(limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets the provider control parameters for a portfolio item.\n         * @summary Gets the provider control parameters for this portfolio item; requires control paramaters provided when provisioning the portfolio item.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProviderControlParameters: function (portfolioItemId, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).listProviderControlParameters(portfolioItemId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets all service plans for a portfolio item.\n         * @summary Gets all service plans for a specific portfolio item; requires a connection to the topology service.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServicePlans: function (portfolioItemId, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).listServicePlans(portfolioItemId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Make a copy of the Portfolio Item.\n         * @summary Make a copy of the Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {CopyPortfolioItem} [copyPortfolioItem]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolioItem: function (portfolioItemId, copyPortfolioItem, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).postCopyPortfolioItem(portfolioItemId, copyPortfolioItem, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Remove Tags from Portfolio Item\n         * @summary Remove Tags from Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioItemTags: function (id, tag, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).removePortfolioItemTags(id, tag, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a specific portfolio item based on the portfolio item ID passed\n         * @summary Gets a specific portfolio item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItem: function (id, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).showPortfolioItem(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Fetch the specified portfolio item\\'s icon image.\n         * @summary Fetches the specified portfolio item\\'s icon image\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItemIcon: function (portfolioItemId, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).showPortfolioItemIcon(portfolioItemId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * If a record has been discarded, this operation will undelete it so it can be requested normally.\n         * @summary Undelete a specified Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolioItem: function (portfolioItemId, restoreKey, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).unDeletePortfolioItem(portfolioItemId, restoreKey, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Edits portfolio item specified by the given ID.\n         * @summary Edit an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {PortfolioItem} portfolioItem Parameters needed to update a Portfolio Item\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolioItem: function (id, portfolioItem, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).updatePortfolioItem(id, portfolioItem, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * PortfolioItemApi - factory interface\n * @export\n */\nexports.PortfolioItemApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Adds a single tag to a Portfolio Item object\n         * @summary Add Tag for Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioItemTag: function (id, tag, options) {\n            return exports.PortfolioItemApiFp(configuration).addPortfolioItemTag(id, tag, options)(axios, basePath);\n        },\n        /**\n         * Adds a name and description for a portfolio item and returns the newly created portfolio item.\n         * @summary Add a new portfolio item\n         * @param {CreatePortfolioItem} createPortfolioItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolioItem: function (createPortfolioItem, options) {\n            return exports.PortfolioItemApiFp(configuration).createPortfolioItem(createPortfolioItem, options)(axios, basePath);\n        },\n        /**\n         * Deletes the portfolio item based on portfolio item ID passed\n         * @summary Delete an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolioItem: function (id, options) {\n            return exports.PortfolioItemApiFp(configuration).destroyPortfolioItem(id, options)(axios, basePath);\n        },\n        /**\n         * Get the next name for a the Portfolio Item prior to a copy operation\n         * @summary Get the next name for a the Portfolio Item prior to a copy operation\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {string} [destinationPortfolioId] The destination portfolio to compare names against\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPortfolioItemNextName: function (portfolioItemId, destinationPortfolioId, options) {\n            return exports.PortfolioItemApiFp(configuration).getPortfolioItemNextName(portfolioItemId, destinationPortfolioId, options)(axios, basePath);\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio Items\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItemTags: function (id, limit, offset, filter, sortBy, options) {\n            return exports.PortfolioItemApiFp(configuration).listPortfolioItemTags(id, limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of portfolio items.\n         * @summary List all portfolio items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItems: function (limit, offset, filter, sortBy, options) {\n            return exports.PortfolioItemApiFp(configuration).listPortfolioItems(limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Gets the provider control parameters for a portfolio item.\n         * @summary Gets the provider control parameters for this portfolio item; requires control paramaters provided when provisioning the portfolio item.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProviderControlParameters: function (portfolioItemId, options) {\n            return exports.PortfolioItemApiFp(configuration).listProviderControlParameters(portfolioItemId, options)(axios, basePath);\n        },\n        /**\n         * Gets all service plans for a portfolio item.\n         * @summary Gets all service plans for a specific portfolio item; requires a connection to the topology service.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServicePlans: function (portfolioItemId, options) {\n            return exports.PortfolioItemApiFp(configuration).listServicePlans(portfolioItemId, options)(axios, basePath);\n        },\n        /**\n         * Make a copy of the Portfolio Item.\n         * @summary Make a copy of the Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {CopyPortfolioItem} [copyPortfolioItem]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolioItem: function (portfolioItemId, copyPortfolioItem, options) {\n            return exports.PortfolioItemApiFp(configuration).postCopyPortfolioItem(portfolioItemId, copyPortfolioItem, options)(axios, basePath);\n        },\n        /**\n         * Remove Tags from Portfolio Item\n         * @summary Remove Tags from Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioItemTags: function (id, tag, options) {\n            return exports.PortfolioItemApiFp(configuration).removePortfolioItemTags(id, tag, options)(axios, basePath);\n        },\n        /**\n         * Gets a specific portfolio item based on the portfolio item ID passed\n         * @summary Gets a specific portfolio item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItem: function (id, options) {\n            return exports.PortfolioItemApiFp(configuration).showPortfolioItem(id, options)(axios, basePath);\n        },\n        /**\n         * Fetch the specified portfolio item\\'s icon image.\n         * @summary Fetches the specified portfolio item\\'s icon image\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItemIcon: function (portfolioItemId, options) {\n            return exports.PortfolioItemApiFp(configuration).showPortfolioItemIcon(portfolioItemId, options)(axios, basePath);\n        },\n        /**\n         * If a record has been discarded, this operation will undelete it so it can be requested normally.\n         * @summary Undelete a specified Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolioItem: function (portfolioItemId, restoreKey, options) {\n            return exports.PortfolioItemApiFp(configuration).unDeletePortfolioItem(portfolioItemId, restoreKey, options)(axios, basePath);\n        },\n        /**\n         * Edits portfolio item specified by the given ID.\n         * @summary Edit an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {PortfolioItem} portfolioItem Parameters needed to update a Portfolio Item\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolioItem: function (id, portfolioItem, options) {\n            return exports.PortfolioItemApiFp(configuration).updatePortfolioItem(id, portfolioItem, options)(axios, basePath);\n        },\n    };\n};\n/**\n * PortfolioItemApi - object-oriented interface\n * @export\n * @class PortfolioItemApi\n * @extends {BaseAPI}\n */\nvar PortfolioItemApi = /** @class */ (function (_super) {\n    __extends(PortfolioItemApi, _super);\n    function PortfolioItemApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Adds a single tag to a Portfolio Item object\n     * @summary Add Tag for Portfolio Item\n     * @param {string} id ID of the resource\n     * @param {Array<Tag>} tag\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.addPortfolioItemTag = function (id, tag, options) {\n        return exports.PortfolioItemApiFp(this.configuration).addPortfolioItemTag(id, tag, options)(this.axios, this.basePath);\n    };\n    /**\n     * Adds a name and description for a portfolio item and returns the newly created portfolio item.\n     * @summary Add a new portfolio item\n     * @param {CreatePortfolioItem} createPortfolioItem\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.createPortfolioItem = function (createPortfolioItem, options) {\n        return exports.PortfolioItemApiFp(this.configuration).createPortfolioItem(createPortfolioItem, options)(this.axios, this.basePath);\n    };\n    /**\n     * Deletes the portfolio item based on portfolio item ID passed\n     * @summary Delete an existing portfolio item\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.destroyPortfolioItem = function (id, options) {\n        return exports.PortfolioItemApiFp(this.configuration).destroyPortfolioItem(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Get the next name for a the Portfolio Item prior to a copy operation\n     * @summary Get the next name for a the Portfolio Item prior to a copy operation\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {string} [destinationPortfolioId] The destination portfolio to compare names against\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.getPortfolioItemNextName = function (portfolioItemId, destinationPortfolioId, options) {\n        return exports.PortfolioItemApiFp(this.configuration).getPortfolioItemNextName(portfolioItemId, destinationPortfolioId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns an array of Tag objects\n     * @summary List Tags for Portfolio Items\n     * @param {string} id ID of the resource\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.listPortfolioItemTags = function (id, limit, offset, filter, sortBy, options) {\n        return exports.PortfolioItemApiFp(this.configuration).listPortfolioItemTags(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of portfolio items.\n     * @summary List all portfolio items\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.listPortfolioItems = function (limit, offset, filter, sortBy, options) {\n        return exports.PortfolioItemApiFp(this.configuration).listPortfolioItems(limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets the provider control parameters for a portfolio item.\n     * @summary Gets the provider control parameters for this portfolio item; requires control paramaters provided when provisioning the portfolio item.\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.listProviderControlParameters = function (portfolioItemId, options) {\n        return exports.PortfolioItemApiFp(this.configuration).listProviderControlParameters(portfolioItemId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets all service plans for a portfolio item.\n     * @summary Gets all service plans for a specific portfolio item; requires a connection to the topology service.\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.listServicePlans = function (portfolioItemId, options) {\n        return exports.PortfolioItemApiFp(this.configuration).listServicePlans(portfolioItemId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Make a copy of the Portfolio Item.\n     * @summary Make a copy of the Portfolio Item\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {CopyPortfolioItem} [copyPortfolioItem]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.postCopyPortfolioItem = function (portfolioItemId, copyPortfolioItem, options) {\n        return exports.PortfolioItemApiFp(this.configuration).postCopyPortfolioItem(portfolioItemId, copyPortfolioItem, options)(this.axios, this.basePath);\n    };\n    /**\n     * Remove Tags from Portfolio Item\n     * @summary Remove Tags from Portfolio Item\n     * @param {string} id ID of the resource\n     * @param {Array<Tag>} tag\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.removePortfolioItemTags = function (id, tag, options) {\n        return exports.PortfolioItemApiFp(this.configuration).removePortfolioItemTags(id, tag, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a specific portfolio item based on the portfolio item ID passed\n     * @summary Gets a specific portfolio item\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.showPortfolioItem = function (id, options) {\n        return exports.PortfolioItemApiFp(this.configuration).showPortfolioItem(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Fetch the specified portfolio item\\'s icon image.\n     * @summary Fetches the specified portfolio item\\'s icon image\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.showPortfolioItemIcon = function (portfolioItemId, options) {\n        return exports.PortfolioItemApiFp(this.configuration).showPortfolioItemIcon(portfolioItemId, options)(this.axios, this.basePath);\n    };\n    /**\n     * If a record has been discarded, this operation will undelete it so it can be requested normally.\n     * @summary Undelete a specified Portfolio Item\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {RestoreKey} restoreKey\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.unDeletePortfolioItem = function (portfolioItemId, restoreKey, options) {\n        return exports.PortfolioItemApiFp(this.configuration).unDeletePortfolioItem(portfolioItemId, restoreKey, options)(this.axios, this.basePath);\n    };\n    /**\n     * Edits portfolio item specified by the given ID.\n     * @summary Edit an existing portfolio item\n     * @param {string} id ID of the resource\n     * @param {PortfolioItem} portfolioItem Parameters needed to update a Portfolio Item\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.updatePortfolioItem = function (id, portfolioItem, options) {\n        return exports.PortfolioItemApiFp(this.configuration).updatePortfolioItem(id, portfolioItem, options)(this.axios, this.basePath);\n    };\n    return PortfolioItemApi;\n}(base_1.BaseAPI));\nexports.PortfolioItemApi = PortfolioItemApi;\n/**\n * ServicePlansApi - axios parameter creator\n * @export\n */\nexports.ServicePlansApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Returns the new Service Plan\n         * @summary Create Service Plan\n         * @param {ImportServicePlan} [importServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServicePlan: function (importServicePlan, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/service_plans\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof importServicePlan !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(importServicePlan !== undefined ? importServicePlan : {}) : (importServicePlan || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Patch Service Plan Modified Schema\n         * @param {string} id ID of the resource\n         * @param {PatchModifiedServicePlan} [patchModifiedServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchServicePlanModified: function (id, patchModifiedServicePlan, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling patchServicePlanModified.');\n            }\n            var localVarPath = \"/service_plans/{id}/modified\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof patchModifiedServicePlan !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchModifiedServicePlan !== undefined ? patchModifiedServicePlan : {}) : (patchModifiedServicePlan || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Resets the Service Plan\\'s Modified schema and returns the new one if it has been reset\n         * @summary Reset Service Plan Modified schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServicePlanModified: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling resetServicePlanModified.');\n            }\n            var localVarPath = \"/service_plans/{id}/reset\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the specified Service Plan\n         * @summary Show Service Plan\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlan: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showServicePlan.');\n            }\n            var localVarPath = \"/service_plans/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the specified Service Plan\\'s base schema\n         * @summary Show Service Plan Base Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanBase: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showServicePlanBase.');\n            }\n            var localVarPath = \"/service_plans/{id}/base\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the specified Service Plan\\'s modified schema\n         * @summary Show Service Plan modified Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanModified: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showServicePlanModified.');\n            }\n            var localVarPath = \"/service_plans/{id}/modified\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * ServicePlansApi - functional programming interface\n * @export\n */\nexports.ServicePlansApiFp = function (configuration) {\n    return {\n        /**\n         * Returns the new Service Plan\n         * @summary Create Service Plan\n         * @param {ImportServicePlan} [importServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServicePlan: function (importServicePlan, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).createServicePlan(importServicePlan, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Patch Service Plan Modified Schema\n         * @param {string} id ID of the resource\n         * @param {PatchModifiedServicePlan} [patchModifiedServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchServicePlanModified: function (id, patchModifiedServicePlan, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).patchServicePlanModified(id, patchModifiedServicePlan, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Resets the Service Plan\\'s Modified schema and returns the new one if it has been reset\n         * @summary Reset Service Plan Modified schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServicePlanModified: function (id, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).resetServicePlanModified(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns the specified Service Plan\n         * @summary Show Service Plan\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlan: function (id, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).showServicePlan(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns the specified Service Plan\\'s base schema\n         * @summary Show Service Plan Base Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanBase: function (id, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).showServicePlanBase(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns the specified Service Plan\\'s modified schema\n         * @summary Show Service Plan modified Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanModified: function (id, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).showServicePlanModified(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * ServicePlansApi - factory interface\n * @export\n */\nexports.ServicePlansApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Returns the new Service Plan\n         * @summary Create Service Plan\n         * @param {ImportServicePlan} [importServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServicePlan: function (importServicePlan, options) {\n            return exports.ServicePlansApiFp(configuration).createServicePlan(importServicePlan, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Patch Service Plan Modified Schema\n         * @param {string} id ID of the resource\n         * @param {PatchModifiedServicePlan} [patchModifiedServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchServicePlanModified: function (id, patchModifiedServicePlan, options) {\n            return exports.ServicePlansApiFp(configuration).patchServicePlanModified(id, patchModifiedServicePlan, options)(axios, basePath);\n        },\n        /**\n         * Resets the Service Plan\\'s Modified schema and returns the new one if it has been reset\n         * @summary Reset Service Plan Modified schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServicePlanModified: function (id, options) {\n            return exports.ServicePlansApiFp(configuration).resetServicePlanModified(id, options)(axios, basePath);\n        },\n        /**\n         * Returns the specified Service Plan\n         * @summary Show Service Plan\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlan: function (id, options) {\n            return exports.ServicePlansApiFp(configuration).showServicePlan(id, options)(axios, basePath);\n        },\n        /**\n         * Returns the specified Service Plan\\'s base schema\n         * @summary Show Service Plan Base Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanBase: function (id, options) {\n            return exports.ServicePlansApiFp(configuration).showServicePlanBase(id, options)(axios, basePath);\n        },\n        /**\n         * Returns the specified Service Plan\\'s modified schema\n         * @summary Show Service Plan modified Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanModified: function (id, options) {\n            return exports.ServicePlansApiFp(configuration).showServicePlanModified(id, options)(axios, basePath);\n        },\n    };\n};\n/**\n * ServicePlansApi - object-oriented interface\n * @export\n * @class ServicePlansApi\n * @extends {BaseAPI}\n */\nvar ServicePlansApi = /** @class */ (function (_super) {\n    __extends(ServicePlansApi, _super);\n    function ServicePlansApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Returns the new Service Plan\n     * @summary Create Service Plan\n     * @param {ImportServicePlan} [importServicePlan]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.createServicePlan = function (importServicePlan, options) {\n        return exports.ServicePlansApiFp(this.configuration).createServicePlan(importServicePlan, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Patch Service Plan Modified Schema\n     * @param {string} id ID of the resource\n     * @param {PatchModifiedServicePlan} [patchModifiedServicePlan]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.patchServicePlanModified = function (id, patchModifiedServicePlan, options) {\n        return exports.ServicePlansApiFp(this.configuration).patchServicePlanModified(id, patchModifiedServicePlan, options)(this.axios, this.basePath);\n    };\n    /**\n     * Resets the Service Plan\\'s Modified schema and returns the new one if it has been reset\n     * @summary Reset Service Plan Modified schema\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.resetServicePlanModified = function (id, options) {\n        return exports.ServicePlansApiFp(this.configuration).resetServicePlanModified(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns the specified Service Plan\n     * @summary Show Service Plan\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.showServicePlan = function (id, options) {\n        return exports.ServicePlansApiFp(this.configuration).showServicePlan(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns the specified Service Plan\\'s base schema\n     * @summary Show Service Plan Base Schema\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.showServicePlanBase = function (id, options) {\n        return exports.ServicePlansApiFp(this.configuration).showServicePlanBase(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns the specified Service Plan\\'s modified schema\n     * @summary Show Service Plan modified Schema\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.showServicePlanModified = function (id, options) {\n        return exports.ServicePlansApiFp(this.configuration).showServicePlanModified(id, options)(this.axios, this.basePath);\n    };\n    return ServicePlansApi;\n}(base_1.BaseAPI));\nexports.ServicePlansApi = ServicePlansApi;\n/**\n * SettingsApi - axios parameter creator\n * @export\n */\nexports.SettingsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Create Tenant Setting\n         * @summary Create Tenant Setting\n         * @param {Setting} setting Json encoded key/value pair to create a new setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSetting: function (setting, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'setting' is not null or undefined\n            if (setting === null || setting === undefined) {\n                throw new base_1.RequiredError('setting', 'Required parameter setting was null or undefined when calling createSetting.');\n            }\n            var localVarPath = \"/settings\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof setting !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(setting !== undefined ? setting : {}) : (setting || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a Tenant Setting\n         * @summary Delete a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroySetting: function (name, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new base_1.RequiredError('name', 'Required parameter name was null or undefined when calling destroySetting.');\n            }\n            var localVarPath = \"/settings/{name}\"\n                .replace(\"{\" + \"name\" + \"}\", encodeURIComponent(String(name)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List Tenant Settings\n         * @summary List Tenant Settings\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSettings: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/settings\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a specific Tenant Setting\n         * @summary Get a specific Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showSetting: function (name, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new base_1.RequiredError('name', 'Required parameter name was null or undefined when calling showSetting.');\n            }\n            var localVarPath = \"/settings/{name}\"\n                .replace(\"{\" + \"name\" + \"}\", encodeURIComponent(String(name)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a Tenant Setting\n         * @summary Update a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSetting: function (name, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new base_1.RequiredError('name', 'Required parameter name was null or undefined when calling updateSetting.');\n            }\n            var localVarPath = \"/settings/{name}\"\n                .replace(\"{\" + \"name\" + \"}\", encodeURIComponent(String(name)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * SettingsApi - functional programming interface\n * @export\n */\nexports.SettingsApiFp = function (configuration) {\n    return {\n        /**\n         * Create Tenant Setting\n         * @summary Create Tenant Setting\n         * @param {Setting} setting Json encoded key/value pair to create a new setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSetting: function (setting, options) {\n            var localVarAxiosArgs = exports.SettingsApiAxiosParamCreator(configuration).createSetting(setting, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Delete a Tenant Setting\n         * @summary Delete a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroySetting: function (name, options) {\n            var localVarAxiosArgs = exports.SettingsApiAxiosParamCreator(configuration).destroySetting(name, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * List Tenant Settings\n         * @summary List Tenant Settings\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSettings: function (options) {\n            var localVarAxiosArgs = exports.SettingsApiAxiosParamCreator(configuration).listSettings(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get a specific Tenant Setting\n         * @summary Get a specific Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showSetting: function (name, options) {\n            var localVarAxiosArgs = exports.SettingsApiAxiosParamCreator(configuration).showSetting(name, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Update a Tenant Setting\n         * @summary Update a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSetting: function (name, options) {\n            var localVarAxiosArgs = exports.SettingsApiAxiosParamCreator(configuration).updateSetting(name, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * SettingsApi - factory interface\n * @export\n */\nexports.SettingsApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Create Tenant Setting\n         * @summary Create Tenant Setting\n         * @param {Setting} setting Json encoded key/value pair to create a new setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSetting: function (setting, options) {\n            return exports.SettingsApiFp(configuration).createSetting(setting, options)(axios, basePath);\n        },\n        /**\n         * Delete a Tenant Setting\n         * @summary Delete a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroySetting: function (name, options) {\n            return exports.SettingsApiFp(configuration).destroySetting(name, options)(axios, basePath);\n        },\n        /**\n         * List Tenant Settings\n         * @summary List Tenant Settings\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSettings: function (options) {\n            return exports.SettingsApiFp(configuration).listSettings(options)(axios, basePath);\n        },\n        /**\n         * Get a specific Tenant Setting\n         * @summary Get a specific Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showSetting: function (name, options) {\n            return exports.SettingsApiFp(configuration).showSetting(name, options)(axios, basePath);\n        },\n        /**\n         * Update a Tenant Setting\n         * @summary Update a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSetting: function (name, options) {\n            return exports.SettingsApiFp(configuration).updateSetting(name, options)(axios, basePath);\n        },\n    };\n};\n/**\n * SettingsApi - object-oriented interface\n * @export\n * @class SettingsApi\n * @extends {BaseAPI}\n */\nvar SettingsApi = /** @class */ (function (_super) {\n    __extends(SettingsApi, _super);\n    function SettingsApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Create Tenant Setting\n     * @summary Create Tenant Setting\n     * @param {Setting} setting Json encoded key/value pair to create a new setting\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    SettingsApi.prototype.createSetting = function (setting, options) {\n        return exports.SettingsApiFp(this.configuration).createSetting(setting, options)(this.axios, this.basePath);\n    };\n    /**\n     * Delete a Tenant Setting\n     * @summary Delete a Tenant Setting\n     * @param {string} name name of the setting\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    SettingsApi.prototype.destroySetting = function (name, options) {\n        return exports.SettingsApiFp(this.configuration).destroySetting(name, options)(this.axios, this.basePath);\n    };\n    /**\n     * List Tenant Settings\n     * @summary List Tenant Settings\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    SettingsApi.prototype.listSettings = function (options) {\n        return exports.SettingsApiFp(this.configuration).listSettings(options)(this.axios, this.basePath);\n    };\n    /**\n     * Get a specific Tenant Setting\n     * @summary Get a specific Tenant Setting\n     * @param {string} name name of the setting\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    SettingsApi.prototype.showSetting = function (name, options) {\n        return exports.SettingsApiFp(this.configuration).showSetting(name, options)(this.axios, this.basePath);\n    };\n    /**\n     * Update a Tenant Setting\n     * @summary Update a Tenant Setting\n     * @param {string} name name of the setting\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    SettingsApi.prototype.updateSetting = function (name, options) {\n        return exports.SettingsApiFp(this.configuration).updateSetting(name, options)(this.axios, this.basePath);\n    };\n    return SettingsApi;\n}(base_1.BaseAPI));\nexports.SettingsApi = SettingsApi;\n/**\n * TagsApi - axios parameter creator\n * @export\n */\nexports.TagsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * List Tags\n         * @summary List Tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTags: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/tags\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * TagsApi - functional programming interface\n * @export\n */\nexports.TagsApiFp = function (configuration) {\n    return {\n        /**\n         * List Tags\n         * @summary List Tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTags: function (options) {\n            var localVarAxiosArgs = exports.TagsApiAxiosParamCreator(configuration).listTags(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * TagsApi - factory interface\n * @export\n */\nexports.TagsApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * List Tags\n         * @summary List Tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTags: function (options) {\n            return exports.TagsApiFp(configuration).listTags(options)(axios, basePath);\n        },\n    };\n};\n/**\n * TagsApi - object-oriented interface\n * @export\n * @class TagsApi\n * @extends {BaseAPI}\n */\nvar TagsApi = /** @class */ (function (_super) {\n    __extends(TagsApi, _super);\n    function TagsApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * List Tags\n     * @summary List Tags\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TagsApi\n     */\n    TagsApi.prototype.listTags = function (options) {\n        return exports.TagsApiFp(this.configuration).listTags(options)(this.axios, this.basePath);\n    };\n    return TagsApi;\n}(base_1.BaseAPI));\nexports.TagsApi = TagsApi;\n/**\n * TenantApi - axios parameter creator\n * @export\n */\nexports.TenantApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Get a list of tenants.\n         * @summary List Tenants\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTenants: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/tenants\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets the tenant specified by the tenant id.\n         * @summary Get a specific Tenant\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showTenant: function (tenantId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'tenantId' is not null or undefined\n            if (tenantId === null || tenantId === undefined) {\n                throw new base_1.RequiredError('tenantId', 'Required parameter tenantId was null or undefined when calling showTenant.');\n            }\n            var localVarPath = \"/tenants/{tenant_id}\"\n                .replace(\"{\" + \"tenant_id\" + \"}\", encodeURIComponent(String(tenantId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Run a task to seed the Tenant Groups required for an org admin to onboard additional users.\n         * @summary Seed Tenant Groups\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tenantSeed: function (tenantId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'tenantId' is not null or undefined\n            if (tenantId === null || tenantId === undefined) {\n                throw new base_1.RequiredError('tenantId', 'Required parameter tenantId was null or undefined when calling tenantSeed.');\n            }\n            var localVarPath = \"/tenants/{tenant_id}/seed\"\n                .replace(\"{\" + \"tenant_id\" + \"}\", encodeURIComponent(String(tenantId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * TenantApi - functional programming interface\n * @export\n */\nexports.TenantApiFp = function (configuration) {\n    return {\n        /**\n         * Get a list of tenants.\n         * @summary List Tenants\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTenants: function (options) {\n            var localVarAxiosArgs = exports.TenantApiAxiosParamCreator(configuration).listTenants(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets the tenant specified by the tenant id.\n         * @summary Get a specific Tenant\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showTenant: function (tenantId, options) {\n            var localVarAxiosArgs = exports.TenantApiAxiosParamCreator(configuration).showTenant(tenantId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Run a task to seed the Tenant Groups required for an org admin to onboard additional users.\n         * @summary Seed Tenant Groups\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tenantSeed: function (tenantId, options) {\n            var localVarAxiosArgs = exports.TenantApiAxiosParamCreator(configuration).tenantSeed(tenantId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * TenantApi - factory interface\n * @export\n */\nexports.TenantApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Get a list of tenants.\n         * @summary List Tenants\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTenants: function (options) {\n            return exports.TenantApiFp(configuration).listTenants(options)(axios, basePath);\n        },\n        /**\n         * Gets the tenant specified by the tenant id.\n         * @summary Get a specific Tenant\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showTenant: function (tenantId, options) {\n            return exports.TenantApiFp(configuration).showTenant(tenantId, options)(axios, basePath);\n        },\n        /**\n         * Run a task to seed the Tenant Groups required for an org admin to onboard additional users.\n         * @summary Seed Tenant Groups\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tenantSeed: function (tenantId, options) {\n            return exports.TenantApiFp(configuration).tenantSeed(tenantId, options)(axios, basePath);\n        },\n    };\n};\n/**\n * TenantApi - object-oriented interface\n * @export\n * @class TenantApi\n * @extends {BaseAPI}\n */\nvar TenantApi = /** @class */ (function (_super) {\n    __extends(TenantApi, _super);\n    function TenantApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Get a list of tenants.\n     * @summary List Tenants\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TenantApi\n     */\n    TenantApi.prototype.listTenants = function (options) {\n        return exports.TenantApiFp(this.configuration).listTenants(options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets the tenant specified by the tenant id.\n     * @summary Get a specific Tenant\n     * @param {string} tenantId ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TenantApi\n     */\n    TenantApi.prototype.showTenant = function (tenantId, options) {\n        return exports.TenantApiFp(this.configuration).showTenant(tenantId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Run a task to seed the Tenant Groups required for an org admin to onboard additional users.\n     * @summary Seed Tenant Groups\n     * @param {string} tenantId ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TenantApi\n     */\n    TenantApi.prototype.tenantSeed = function (tenantId, options) {\n        return exports.TenantApiFp(this.configuration).tenantSeed(tenantId, options)(this.axios, this.basePath);\n    };\n    return TenantApi;\n}(base_1.BaseAPI));\nexports.TenantApi = TenantApi;\n"],"sourceRoot":""}