{"version":3,"sources":["webpack:///./node_modules/@redhat-cloud-services/catalog-client/dist/api.js"],"names":["extendStatics","__extends","this","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","defineProperty","exports","value","globalImportUrl","axios_1","base_1","ApprovalRequestStateEnum","OrderStateEnum","OrderItemStateEnum","OrderProcessAssociationsToRemoveAssociationsToRemoveEnum","ProgressMessageLevelEnum","ShareInfoPermissionsEnum","SharePolicyPermissionsEnum","UnsharePolicyPermissionsEnum","DefaultApiAxiosParamCreator","configuration","getDocumentation","options","baseOptions","localVarUrlObj","parse","localVarRequestOptions","method","username","password","query","search","headersFromBaseOptions","headers","url","format","postGraphQL","graphQLRequest","RequiredError","localVarHeaderParameter","needsSerialization","data","JSON","stringify","undefined","DefaultApiFp","localVarAxiosArgs","axios","basePath","default","BASE_PATH","axiosRequestArgs","request","DefaultApiFactory","DefaultApi","_super","BaseAPI","IconApiAxiosParamCreator","createIcon","content","portfolioId","portfolioItemId","localVarFormParams","FormData","append","destroyIcon","id","localVarPath","replace","encodeURIComponent","String","IconApiFp","IconApiFactory","IconApi","OrderApiAxiosParamCreator","addToOrder","orderId","orderItem","cancelOrder","createOrder","destroyOrder","listOrderItemsFromOrder","limit","offset","filter","sortBy","localVarQueryParameter","listOrders","restoreOrder","restoreKey","showOrder","showOrderItemFromOrder","submitOrder","OrderApiFp","OrderApiFactory","OrderApi","OrderItemApiAxiosParamCreator","destroyOrderItem","listApprovalRequests","orderItemId","listOrderItems","listProgressMessages","restoreOrderItem","showOrderItem","OrderItemApiFp","OrderItemApiFactory","OrderItemApi","OrderProcessApiAxiosParamCreator","addOrderProcessAfterItem","orderProcessPortfolioItemId","addOrderProcessBeforeItem","createOrderProcess","orderProcess","destroyOrderProcess","linkTagToOrderProcess","resourceObject","listOrderProcesses","appName","objectId","objectType","removeOrderProcessAssociation","orderProcessAssociationsToRemove","showOrderProcess","unlinkTagFromOrderProcess","updateOrderProcess","OrderProcessApiFp","OrderProcessApiFactory","OrderProcessApi","PortfolioApiAxiosParamCreator","addPortfolioTag","tag","createPortfolio","portfolio","destroyPortfolio","fetchPortfolioItemsWithPortfolio","listPortfolioTags","listPortfolios","postCopyPortfolio","removePortfolioTags","shareInfo","sharePortfolio","sharePolicy","showPortfolio","showPortfolioIcon","cacheId","unDeletePortfolio","unsharePortfolio","unsharePolicy","updatePortfolio","PortfolioApiFp","PortfolioApiFactory","PortfolioApi","PortfolioItemApiAxiosParamCreator","addPortfolioItemTag","createPortfolioItem","destroyPortfolioItem","getPortfolioItemNextName","destinationPortfolioId","listPortfolioItemTags","listPortfolioItems","listProviderControlParameters","listServicePlans","postCopyPortfolioItem","copyPortfolioItem","removePortfolioItemTags","showPortfolioItem","showDiscarded","showPortfolioItemIcon","unDeletePortfolioItem","updatePortfolioItem","portfolioItem","PortfolioItemApiFp","PortfolioItemApiFactory","PortfolioItemApi","ServicePlansApiAxiosParamCreator","createServicePlan","importServicePlan","patchServicePlanModified","patchModifiedServicePlan","resetServicePlanModified","showServicePlan","showServicePlanBase","showServicePlanModified","ServicePlansApiFp","ServicePlansApiFactory","ServicePlansApi","SettingsApiAxiosParamCreator","createSetting","setting","destroySetting","name","listSettings","showSetting","updateSetting","SettingsApiFp","SettingsApiFactory","SettingsApi","TagsApiAxiosParamCreator","listTags","TagsApiFp","TagsApiFactory","TagsApi","TenantApiAxiosParamCreator","listTenants","showTenant","tenantId","tenantSeed","TenantApiFp","TenantApiFactory","TenantApi"],"mappings":"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","file":"js/lib~App~47974c6d.7d0cc1dcfc3cee2c8d4d.js","sourcesContent":["\"use strict\";\n// tslint:disable\n/**\n * Catalog API\n * This API gets and orders catalog items from different cloud sources.\n *\n * The version of the OpenAPI document: 1.2.0\n * Contact: support@redhat.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar globalImportUrl = require(\"url\");\nvar axios_1 = require(\"axios\");\n// Some imports not used depending on template conditions\n// @ts-ignore\nvar base_1 = require(\"./base\");\n/**\n    * @export\n    * @enum {string}\n    */\nvar ApprovalRequestStateEnum;\n(function (ApprovalRequestStateEnum) {\n    ApprovalRequestStateEnum[\"Undecided\"] = \"undecided\";\n    ApprovalRequestStateEnum[\"Approved\"] = \"approved\";\n    ApprovalRequestStateEnum[\"Denied\"] = \"denied\";\n    ApprovalRequestStateEnum[\"Canceled\"] = \"canceled\";\n    ApprovalRequestStateEnum[\"Error\"] = \"error\";\n})(ApprovalRequestStateEnum = exports.ApprovalRequestStateEnum || (exports.ApprovalRequestStateEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar OrderStateEnum;\n(function (OrderStateEnum) {\n    OrderStateEnum[\"Created\"] = \"Created\";\n    OrderStateEnum[\"ApprovalPending\"] = \"Approval Pending\";\n    OrderStateEnum[\"Ordered\"] = \"Ordered\";\n    OrderStateEnum[\"Failed\"] = \"Failed\";\n    OrderStateEnum[\"Completed\"] = \"Completed\";\n    OrderStateEnum[\"Canceled\"] = \"Canceled\";\n})(OrderStateEnum = exports.OrderStateEnum || (exports.OrderStateEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar OrderItemStateEnum;\n(function (OrderItemStateEnum) {\n    OrderItemStateEnum[\"Created\"] = \"Created\";\n    OrderItemStateEnum[\"ApprovalPending\"] = \"Approval Pending\";\n    OrderItemStateEnum[\"Ordered\"] = \"Ordered\";\n    OrderItemStateEnum[\"Failed\"] = \"Failed\";\n    OrderItemStateEnum[\"Completed\"] = \"Completed\";\n    OrderItemStateEnum[\"Approved\"] = \"Approved\";\n    OrderItemStateEnum[\"Denied\"] = \"Denied\";\n    OrderItemStateEnum[\"Canceled\"] = \"Canceled\";\n})(OrderItemStateEnum = exports.OrderItemStateEnum || (exports.OrderItemStateEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar OrderProcessAssociationsToRemoveAssociationsToRemoveEnum;\n(function (OrderProcessAssociationsToRemoveAssociationsToRemoveEnum) {\n    OrderProcessAssociationsToRemoveAssociationsToRemoveEnum[\"Before\"] = \"before\";\n    OrderProcessAssociationsToRemoveAssociationsToRemoveEnum[\"After\"] = \"after\";\n})(OrderProcessAssociationsToRemoveAssociationsToRemoveEnum = exports.OrderProcessAssociationsToRemoveAssociationsToRemoveEnum || (exports.OrderProcessAssociationsToRemoveAssociationsToRemoveEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar ProgressMessageLevelEnum;\n(function (ProgressMessageLevelEnum) {\n    ProgressMessageLevelEnum[\"Info\"] = \"info\";\n    ProgressMessageLevelEnum[\"Error\"] = \"error\";\n    ProgressMessageLevelEnum[\"Warning\"] = \"warning\";\n    ProgressMessageLevelEnum[\"Debug\"] = \"debug\";\n})(ProgressMessageLevelEnum = exports.ProgressMessageLevelEnum || (exports.ProgressMessageLevelEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar ShareInfoPermissionsEnum;\n(function (ShareInfoPermissionsEnum) {\n    ShareInfoPermissionsEnum[\"Read\"] = \"read\";\n    ShareInfoPermissionsEnum[\"Update\"] = \"update\";\n    ShareInfoPermissionsEnum[\"Delete\"] = \"delete\";\n    ShareInfoPermissionsEnum[\"Order\"] = \"order\";\n})(ShareInfoPermissionsEnum = exports.ShareInfoPermissionsEnum || (exports.ShareInfoPermissionsEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar SharePolicyPermissionsEnum;\n(function (SharePolicyPermissionsEnum) {\n    SharePolicyPermissionsEnum[\"Read\"] = \"read\";\n    SharePolicyPermissionsEnum[\"Update\"] = \"update\";\n    SharePolicyPermissionsEnum[\"Delete\"] = \"delete\";\n    SharePolicyPermissionsEnum[\"Order\"] = \"order\";\n})(SharePolicyPermissionsEnum = exports.SharePolicyPermissionsEnum || (exports.SharePolicyPermissionsEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar UnsharePolicyPermissionsEnum;\n(function (UnsharePolicyPermissionsEnum) {\n    UnsharePolicyPermissionsEnum[\"Read\"] = \"read\";\n    UnsharePolicyPermissionsEnum[\"Update\"] = \"update\";\n    UnsharePolicyPermissionsEnum[\"Delete\"] = \"delete\";\n    UnsharePolicyPermissionsEnum[\"Order\"] = \"order\";\n})(UnsharePolicyPermissionsEnum = exports.UnsharePolicyPermissionsEnum || (exports.UnsharePolicyPermissionsEnum = {}));\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexports.DefaultApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Return this API document in JSON format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDocumentation: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/openapi.json\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Performs a GraphQL Query\n         * @summary Perform a GraphQL Query\n         * @param {GraphQLRequest} graphQLRequest GraphQL Query Request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postGraphQL: function (graphQLRequest, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'graphQLRequest' is not null or undefined\n            if (graphQLRequest === null || graphQLRequest === undefined) {\n                throw new base_1.RequiredError('graphQLRequest', 'Required parameter graphQLRequest was null or undefined when calling postGraphQL.');\n            }\n            var localVarPath = \"/graphql\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof graphQLRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(graphQLRequest !== undefined ? graphQLRequest : {}) : (graphQLRequest || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexports.DefaultApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Return this API document in JSON format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDocumentation: function (options) {\n            var localVarAxiosArgs = exports.DefaultApiAxiosParamCreator(configuration).getDocumentation(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Performs a GraphQL Query\n         * @summary Perform a GraphQL Query\n         * @param {GraphQLRequest} graphQLRequest GraphQL Query Request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postGraphQL: function (graphQLRequest, options) {\n            var localVarAxiosArgs = exports.DefaultApiAxiosParamCreator(configuration).postGraphQL(graphQLRequest, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * DefaultApi - factory interface\n * @export\n */\nexports.DefaultApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Return this API document in JSON format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDocumentation: function (options) {\n            return exports.DefaultApiFp(configuration).getDocumentation(options)(axios, basePath);\n        },\n        /**\n         * Performs a GraphQL Query\n         * @summary Perform a GraphQL Query\n         * @param {GraphQLRequest} graphQLRequest GraphQL Query Request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postGraphQL: function (graphQLRequest, options) {\n            return exports.DefaultApiFp(configuration).postGraphQL(graphQLRequest, options)(axios, basePath);\n        },\n    };\n};\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nvar DefaultApi = /** @class */ (function (_super) {\n    __extends(DefaultApi, _super);\n    function DefaultApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Return this API document in JSON format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    DefaultApi.prototype.getDocumentation = function (options) {\n        return exports.DefaultApiFp(this.configuration).getDocumentation(options)(this.axios, this.basePath);\n    };\n    /**\n     * Performs a GraphQL Query\n     * @summary Perform a GraphQL Query\n     * @param {GraphQLRequest} graphQLRequest GraphQL Query Request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    DefaultApi.prototype.postGraphQL = function (graphQLRequest, options) {\n        return exports.DefaultApiFp(this.configuration).postGraphQL(graphQLRequest, options)(this.axios, this.basePath);\n    };\n    return DefaultApi;\n}(base_1.BaseAPI));\nexports.DefaultApi = DefaultApi;\n/**\n * IconApi - axios parameter creator\n * @export\n */\nexports.IconApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Creates an Icon from the specified parameters\n         * @summary Create an Icon\n         * @param {any} [content] The binary image contents, maximum size is 250KB\n         * @param {string} [portfolioId] The Portfolio this Icon belongs to\n         * @param {string} [portfolioItemId] The Portfolio Item this Icon belongs to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createIcon: function (content, portfolioId, portfolioItemId, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/icons\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            var localVarFormParams = new FormData();\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (content !== undefined) {\n                localVarFormParams.append('content', content);\n            }\n            if (portfolioId !== undefined) {\n                localVarFormParams.append('portfolio_id', portfolioId);\n            }\n            if (portfolioItemId !== undefined) {\n                localVarFormParams.append('portfolio_item_id', portfolioItemId);\n            }\n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = localVarFormParams;\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deletes the icon based on the icon ID passed\n         * @summary Delete an existing Icon\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyIcon: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling destroyIcon.');\n            }\n            var localVarPath = \"/icons/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * IconApi - functional programming interface\n * @export\n */\nexports.IconApiFp = function (configuration) {\n    return {\n        /**\n         * Creates an Icon from the specified parameters\n         * @summary Create an Icon\n         * @param {any} [content] The binary image contents, maximum size is 250KB\n         * @param {string} [portfolioId] The Portfolio this Icon belongs to\n         * @param {string} [portfolioItemId] The Portfolio Item this Icon belongs to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createIcon: function (content, portfolioId, portfolioItemId, options) {\n            var localVarAxiosArgs = exports.IconApiAxiosParamCreator(configuration).createIcon(content, portfolioId, portfolioItemId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Deletes the icon based on the icon ID passed\n         * @summary Delete an existing Icon\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyIcon: function (id, options) {\n            var localVarAxiosArgs = exports.IconApiAxiosParamCreator(configuration).destroyIcon(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * IconApi - factory interface\n * @export\n */\nexports.IconApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Creates an Icon from the specified parameters\n         * @summary Create an Icon\n         * @param {any} [content] The binary image contents, maximum size is 250KB\n         * @param {string} [portfolioId] The Portfolio this Icon belongs to\n         * @param {string} [portfolioItemId] The Portfolio Item this Icon belongs to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createIcon: function (content, portfolioId, portfolioItemId, options) {\n            return exports.IconApiFp(configuration).createIcon(content, portfolioId, portfolioItemId, options)(axios, basePath);\n        },\n        /**\n         * Deletes the icon based on the icon ID passed\n         * @summary Delete an existing Icon\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyIcon: function (id, options) {\n            return exports.IconApiFp(configuration).destroyIcon(id, options)(axios, basePath);\n        },\n    };\n};\n/**\n * IconApi - object-oriented interface\n * @export\n * @class IconApi\n * @extends {BaseAPI}\n */\nvar IconApi = /** @class */ (function (_super) {\n    __extends(IconApi, _super);\n    function IconApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Creates an Icon from the specified parameters\n     * @summary Create an Icon\n     * @param {any} [content] The binary image contents, maximum size is 250KB\n     * @param {string} [portfolioId] The Portfolio this Icon belongs to\n     * @param {string} [portfolioItemId] The Portfolio Item this Icon belongs to\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IconApi\n     */\n    IconApi.prototype.createIcon = function (content, portfolioId, portfolioItemId, options) {\n        return exports.IconApiFp(this.configuration).createIcon(content, portfolioId, portfolioItemId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Deletes the icon based on the icon ID passed\n     * @summary Delete an existing Icon\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IconApi\n     */\n    IconApi.prototype.destroyIcon = function (id, options) {\n        return exports.IconApiFp(this.configuration).destroyIcon(id, options)(this.axios, this.basePath);\n    };\n    return IconApi;\n}(base_1.BaseAPI));\nexports.IconApi = IconApi;\n/**\n * OrderApi - axios parameter creator\n * @export\n */\nexports.OrderApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Adds an order item to an order in pending state\n         * @summary Add an order item to an order in pending state\n         * @param {string} orderId The Order ID\n         * @param {OrderItem} orderItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addToOrder: function (orderId, orderItem, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling addToOrder.');\n            }\n            // verify required parameter 'orderItem' is not null or undefined\n            if (orderItem === null || orderItem === undefined) {\n                throw new base_1.RequiredError('orderItem', 'Required parameter orderItem was null or undefined when calling addToOrder.');\n            }\n            var localVarPath = \"/orders/{order_id}/order_items\"\n                .replace(\"{\" + \"order_id\" + \"}\", encodeURIComponent(String(orderId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof orderItem !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderItem !== undefined ? orderItem : {}) : (orderItem || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an updated order.\n         * @summary Cancels a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancelOrder: function (orderId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling cancelOrder.');\n            }\n            var localVarPath = \"/orders/{order_id}/cancel\"\n                .replace(\"{\" + \"order_id\" + \"}\", encodeURIComponent(String(orderId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new order.\n         * @summary Create a new order\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createOrder: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/orders\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deletes the Order based on order ID passed\n         * @summary Delete an existing Order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrder: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling destroyOrder.');\n            }\n            var localVarPath = \"/orders/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of items associated with an order.\n         * @summary Gets a list of items in a given order\n         * @param {string} orderId The Order ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItemsFromOrder: function (orderId, limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling listOrderItemsFromOrder.');\n            }\n            var localVarPath = \"/orders/{order_id}/order_items\"\n                .replace(\"{\" + \"order_id\" + \"}\", encodeURIComponent(String(orderId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of orders associated with the logged in user.\n         * @summary Get a list of orders\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrders: function (limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/orders\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Restores the order specified by the order ID.\n         * @summary Restore specific Order\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrder: function (id, restoreKey, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling restoreOrder.');\n            }\n            // verify required parameter 'restoreKey' is not null or undefined\n            if (restoreKey === null || restoreKey === undefined) {\n                throw new base_1.RequiredError('restoreKey', 'Required parameter restoreKey was null or undefined when calling restoreOrder.');\n            }\n            var localVarPath = \"/orders/{id}/restore\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof restoreKey !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(restoreKey !== undefined ? restoreKey : {}) : (restoreKey || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a specific order based on the order ID\n         * @summary Get a specific order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrder: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showOrder.');\n            }\n            var localVarPath = \"/orders/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets an order item associated with an order.\n         * @summary Gets an individual order item from a given order\n         * @param {string} orderId The Order ID\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItemFromOrder: function (orderId, id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling showOrderItemFromOrder.');\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showOrderItemFromOrder.');\n            }\n            var localVarPath = \"/orders/{order_id}/order_items/{id}\"\n                .replace(\"{\" + \"order_id\" + \"}\", encodeURIComponent(String(orderId)))\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an updated order.\n         * @summary Submit a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitOrder: function (orderId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling submitOrder.');\n            }\n            var localVarPath = \"/orders/{order_id}/submit_order\"\n                .replace(\"{\" + \"order_id\" + \"}\", encodeURIComponent(String(orderId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * OrderApi - functional programming interface\n * @export\n */\nexports.OrderApiFp = function (configuration) {\n    return {\n        /**\n         * Adds an order item to an order in pending state\n         * @summary Add an order item to an order in pending state\n         * @param {string} orderId The Order ID\n         * @param {OrderItem} orderItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addToOrder: function (orderId, orderItem, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).addToOrder(orderId, orderItem, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns an updated order.\n         * @summary Cancels a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancelOrder: function (orderId, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).cancelOrder(orderId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Creates a new order.\n         * @summary Create a new order\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createOrder: function (options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).createOrder(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Deletes the Order based on order ID passed\n         * @summary Delete an existing Order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrder: function (id, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).destroyOrder(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of items associated with an order.\n         * @summary Gets a list of items in a given order\n         * @param {string} orderId The Order ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItemsFromOrder: function (orderId, limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).listOrderItemsFromOrder(orderId, limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of orders associated with the logged in user.\n         * @summary Get a list of orders\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrders: function (limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).listOrders(limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Restores the order specified by the order ID.\n         * @summary Restore specific Order\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrder: function (id, restoreKey, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).restoreOrder(id, restoreKey, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get a specific order based on the order ID\n         * @summary Get a specific order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrder: function (id, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).showOrder(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets an order item associated with an order.\n         * @summary Gets an individual order item from a given order\n         * @param {string} orderId The Order ID\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItemFromOrder: function (orderId, id, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).showOrderItemFromOrder(orderId, id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns an updated order.\n         * @summary Submit a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitOrder: function (orderId, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).submitOrder(orderId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * OrderApi - factory interface\n * @export\n */\nexports.OrderApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Adds an order item to an order in pending state\n         * @summary Add an order item to an order in pending state\n         * @param {string} orderId The Order ID\n         * @param {OrderItem} orderItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addToOrder: function (orderId, orderItem, options) {\n            return exports.OrderApiFp(configuration).addToOrder(orderId, orderItem, options)(axios, basePath);\n        },\n        /**\n         * Returns an updated order.\n         * @summary Cancels a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancelOrder: function (orderId, options) {\n            return exports.OrderApiFp(configuration).cancelOrder(orderId, options)(axios, basePath);\n        },\n        /**\n         * Creates a new order.\n         * @summary Create a new order\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createOrder: function (options) {\n            return exports.OrderApiFp(configuration).createOrder(options)(axios, basePath);\n        },\n        /**\n         * Deletes the Order based on order ID passed\n         * @summary Delete an existing Order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrder: function (id, options) {\n            return exports.OrderApiFp(configuration).destroyOrder(id, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of items associated with an order.\n         * @summary Gets a list of items in a given order\n         * @param {string} orderId The Order ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItemsFromOrder: function (orderId, limit, offset, filter, sortBy, options) {\n            return exports.OrderApiFp(configuration).listOrderItemsFromOrder(orderId, limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of orders associated with the logged in user.\n         * @summary Get a list of orders\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrders: function (limit, offset, filter, sortBy, options) {\n            return exports.OrderApiFp(configuration).listOrders(limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Restores the order specified by the order ID.\n         * @summary Restore specific Order\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrder: function (id, restoreKey, options) {\n            return exports.OrderApiFp(configuration).restoreOrder(id, restoreKey, options)(axios, basePath);\n        },\n        /**\n         * Get a specific order based on the order ID\n         * @summary Get a specific order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrder: function (id, options) {\n            return exports.OrderApiFp(configuration).showOrder(id, options)(axios, basePath);\n        },\n        /**\n         * Gets an order item associated with an order.\n         * @summary Gets an individual order item from a given order\n         * @param {string} orderId The Order ID\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItemFromOrder: function (orderId, id, options) {\n            return exports.OrderApiFp(configuration).showOrderItemFromOrder(orderId, id, options)(axios, basePath);\n        },\n        /**\n         * Returns an updated order.\n         * @summary Submit a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitOrder: function (orderId, options) {\n            return exports.OrderApiFp(configuration).submitOrder(orderId, options)(axios, basePath);\n        },\n    };\n};\n/**\n * OrderApi - object-oriented interface\n * @export\n * @class OrderApi\n * @extends {BaseAPI}\n */\nvar OrderApi = /** @class */ (function (_super) {\n    __extends(OrderApi, _super);\n    function OrderApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Adds an order item to an order in pending state\n     * @summary Add an order item to an order in pending state\n     * @param {string} orderId The Order ID\n     * @param {OrderItem} orderItem\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.addToOrder = function (orderId, orderItem, options) {\n        return exports.OrderApiFp(this.configuration).addToOrder(orderId, orderItem, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns an updated order.\n     * @summary Cancels a given order\n     * @param {string} orderId The Order ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.cancelOrder = function (orderId, options) {\n        return exports.OrderApiFp(this.configuration).cancelOrder(orderId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Creates a new order.\n     * @summary Create a new order\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.createOrder = function (options) {\n        return exports.OrderApiFp(this.configuration).createOrder(options)(this.axios, this.basePath);\n    };\n    /**\n     * Deletes the Order based on order ID passed\n     * @summary Delete an existing Order\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.destroyOrder = function (id, options) {\n        return exports.OrderApiFp(this.configuration).destroyOrder(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of items associated with an order.\n     * @summary Gets a list of items in a given order\n     * @param {string} orderId The Order ID\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.listOrderItemsFromOrder = function (orderId, limit, offset, filter, sortBy, options) {\n        return exports.OrderApiFp(this.configuration).listOrderItemsFromOrder(orderId, limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of orders associated with the logged in user.\n     * @summary Get a list of orders\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.listOrders = function (limit, offset, filter, sortBy, options) {\n        return exports.OrderApiFp(this.configuration).listOrders(limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Restores the order specified by the order ID.\n     * @summary Restore specific Order\n     * @param {string} id ID of the resource\n     * @param {RestoreKey} restoreKey\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.restoreOrder = function (id, restoreKey, options) {\n        return exports.OrderApiFp(this.configuration).restoreOrder(id, restoreKey, options)(this.axios, this.basePath);\n    };\n    /**\n     * Get a specific order based on the order ID\n     * @summary Get a specific order\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.showOrder = function (id, options) {\n        return exports.OrderApiFp(this.configuration).showOrder(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets an order item associated with an order.\n     * @summary Gets an individual order item from a given order\n     * @param {string} orderId The Order ID\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.showOrderItemFromOrder = function (orderId, id, options) {\n        return exports.OrderApiFp(this.configuration).showOrderItemFromOrder(orderId, id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns an updated order.\n     * @summary Submit a given order\n     * @param {string} orderId The Order ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.submitOrder = function (orderId, options) {\n        return exports.OrderApiFp(this.configuration).submitOrder(orderId, options)(this.axios, this.basePath);\n    };\n    return OrderApi;\n}(base_1.BaseAPI));\nexports.OrderApi = OrderApi;\n/**\n * OrderItemApi - axios parameter creator\n * @export\n */\nexports.OrderItemApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Deletes the order item  based on order item ID passed\n         * @summary Delete an existing OrderItem\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrderItem: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling destroyOrderItem.');\n            }\n            var localVarPath = \"/order_items/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of approval request associated with an order item. As the item is being approved one can check the status of the approvals.\n         * @summary Gets a list of approval requests for an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listApprovalRequests: function (orderItemId, limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderItemId' is not null or undefined\n            if (orderItemId === null || orderItemId === undefined) {\n                throw new base_1.RequiredError('orderItemId', 'Required parameter orderItemId was null or undefined when calling listApprovalRequests.');\n            }\n            var localVarPath = \"/order_items/{order_item_id}/approval_requests\"\n                .replace(\"{\" + \"order_item_id\" + \"}\", encodeURIComponent(String(orderItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of order items.\n         * @summary List Order Items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItems: function (limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/order_items\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of progress messages associated with an order item. As the item is being processed the provider can update the progress messages.\n         * @summary Gets a list of progress messages in an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProgressMessages: function (orderItemId, limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderItemId' is not null or undefined\n            if (orderItemId === null || orderItemId === undefined) {\n                throw new base_1.RequiredError('orderItemId', 'Required parameter orderItemId was null or undefined when calling listProgressMessages.');\n            }\n            var localVarPath = \"/order_items/{order_item_id}/progress_messages\"\n                .replace(\"{\" + \"order_item_id\" + \"}\", encodeURIComponent(String(orderItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Restores the order item specified by the order item ID.\n         * @summary Restore specific Order item\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrderItem: function (id, restoreKey, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling restoreOrderItem.');\n            }\n            // verify required parameter 'restoreKey' is not null or undefined\n            if (restoreKey === null || restoreKey === undefined) {\n                throw new base_1.RequiredError('restoreKey', 'Required parameter restoreKey was null or undefined when calling restoreOrderItem.');\n            }\n            var localVarPath = \"/order_items/{id}/restore\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof restoreKey !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(restoreKey !== undefined ? restoreKey : {}) : (restoreKey || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a specific order item based on the order item ID passed\n         * @summary Gets a specific order item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItem: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showOrderItem.');\n            }\n            var localVarPath = \"/order_items/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * OrderItemApi - functional programming interface\n * @export\n */\nexports.OrderItemApiFp = function (configuration) {\n    return {\n        /**\n         * Deletes the order item  based on order item ID passed\n         * @summary Delete an existing OrderItem\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrderItem: function (id, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).destroyOrderItem(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of approval request associated with an order item. As the item is being approved one can check the status of the approvals.\n         * @summary Gets a list of approval requests for an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listApprovalRequests: function (orderItemId, limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).listApprovalRequests(orderItemId, limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of order items.\n         * @summary List Order Items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItems: function (limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).listOrderItems(limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of progress messages associated with an order item. As the item is being processed the provider can update the progress messages.\n         * @summary Gets a list of progress messages in an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProgressMessages: function (orderItemId, limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).listProgressMessages(orderItemId, limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Restores the order item specified by the order item ID.\n         * @summary Restore specific Order item\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrderItem: function (id, restoreKey, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).restoreOrderItem(id, restoreKey, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a specific order item based on the order item ID passed\n         * @summary Gets a specific order item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItem: function (id, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).showOrderItem(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * OrderItemApi - factory interface\n * @export\n */\nexports.OrderItemApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Deletes the order item  based on order item ID passed\n         * @summary Delete an existing OrderItem\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrderItem: function (id, options) {\n            return exports.OrderItemApiFp(configuration).destroyOrderItem(id, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of approval request associated with an order item. As the item is being approved one can check the status of the approvals.\n         * @summary Gets a list of approval requests for an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listApprovalRequests: function (orderItemId, limit, offset, filter, sortBy, options) {\n            return exports.OrderItemApiFp(configuration).listApprovalRequests(orderItemId, limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of order items.\n         * @summary List Order Items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItems: function (limit, offset, filter, sortBy, options) {\n            return exports.OrderItemApiFp(configuration).listOrderItems(limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of progress messages associated with an order item. As the item is being processed the provider can update the progress messages.\n         * @summary Gets a list of progress messages in an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProgressMessages: function (orderItemId, limit, offset, filter, sortBy, options) {\n            return exports.OrderItemApiFp(configuration).listProgressMessages(orderItemId, limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Restores the order item specified by the order item ID.\n         * @summary Restore specific Order item\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrderItem: function (id, restoreKey, options) {\n            return exports.OrderItemApiFp(configuration).restoreOrderItem(id, restoreKey, options)(axios, basePath);\n        },\n        /**\n         * Gets a specific order item based on the order item ID passed\n         * @summary Gets a specific order item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItem: function (id, options) {\n            return exports.OrderItemApiFp(configuration).showOrderItem(id, options)(axios, basePath);\n        },\n    };\n};\n/**\n * OrderItemApi - object-oriented interface\n * @export\n * @class OrderItemApi\n * @extends {BaseAPI}\n */\nvar OrderItemApi = /** @class */ (function (_super) {\n    __extends(OrderItemApi, _super);\n    function OrderItemApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Deletes the order item  based on order item ID passed\n     * @summary Delete an existing OrderItem\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.destroyOrderItem = function (id, options) {\n        return exports.OrderItemApiFp(this.configuration).destroyOrderItem(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of approval request associated with an order item. As the item is being approved one can check the status of the approvals.\n     * @summary Gets a list of approval requests for an item\n     * @param {string} orderItemId The Order Item ID\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.listApprovalRequests = function (orderItemId, limit, offset, filter, sortBy, options) {\n        return exports.OrderItemApiFp(this.configuration).listApprovalRequests(orderItemId, limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of order items.\n     * @summary List Order Items\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.listOrderItems = function (limit, offset, filter, sortBy, options) {\n        return exports.OrderItemApiFp(this.configuration).listOrderItems(limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of progress messages associated with an order item. As the item is being processed the provider can update the progress messages.\n     * @summary Gets a list of progress messages in an item\n     * @param {string} orderItemId The Order Item ID\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.listProgressMessages = function (orderItemId, limit, offset, filter, sortBy, options) {\n        return exports.OrderItemApiFp(this.configuration).listProgressMessages(orderItemId, limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Restores the order item specified by the order item ID.\n     * @summary Restore specific Order item\n     * @param {string} id ID of the resource\n     * @param {RestoreKey} restoreKey\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.restoreOrderItem = function (id, restoreKey, options) {\n        return exports.OrderItemApiFp(this.configuration).restoreOrderItem(id, restoreKey, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a specific order item based on the order item ID passed\n     * @summary Gets a specific order item\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.showOrderItem = function (id, options) {\n        return exports.OrderItemApiFp(this.configuration).showOrderItem(id, options)(this.axios, this.basePath);\n    };\n    return OrderItemApi;\n}(base_1.BaseAPI));\nexports.OrderItemApi = OrderItemApi;\n/**\n * OrderProcessApi - axios parameter creator\n * @export\n */\nexports.OrderProcessApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Defines the product that will be executed after ordering when using this Order Process\n         * @summary Adds an \\'after\\' product for an Order Process\n         * @param {string} id ID of the resource\n         * @param {OrderProcessPortfolioItemId} orderProcessPortfolioItemId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addOrderProcessAfterItem: function (id, orderProcessPortfolioItemId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling addOrderProcessAfterItem.');\n            }\n            // verify required parameter 'orderProcessPortfolioItemId' is not null or undefined\n            if (orderProcessPortfolioItemId === null || orderProcessPortfolioItemId === undefined) {\n                throw new base_1.RequiredError('orderProcessPortfolioItemId', 'Required parameter orderProcessPortfolioItemId was null or undefined when calling addOrderProcessAfterItem.');\n            }\n            var localVarPath = \"/order_processes/{id}/after_portfolio_item\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof orderProcessPortfolioItemId !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderProcessPortfolioItemId !== undefined ? orderProcessPortfolioItemId : {}) : (orderProcessPortfolioItemId || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Defines the product that will be executed before ordering when using this Order Process\n         * @summary Adds a \\'before\\' product for an Order Process\n         * @param {string} id ID of the resource\n         * @param {OrderProcessPortfolioItemId} orderProcessPortfolioItemId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addOrderProcessBeforeItem: function (id, orderProcessPortfolioItemId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling addOrderProcessBeforeItem.');\n            }\n            // verify required parameter 'orderProcessPortfolioItemId' is not null or undefined\n            if (orderProcessPortfolioItemId === null || orderProcessPortfolioItemId === undefined) {\n                throw new base_1.RequiredError('orderProcessPortfolioItemId', 'Required parameter orderProcessPortfolioItemId was null or undefined when calling addOrderProcessBeforeItem.');\n            }\n            var localVarPath = \"/order_processes/{id}/before_portfolio_item\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof orderProcessPortfolioItemId !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderProcessPortfolioItemId !== undefined ? orderProcessPortfolioItemId : {}) : (orderProcessPortfolioItemId || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Adds an order process.\n         * @summary Add a new order process\n         * @param {OrderProcess} orderProcess Parameters needed to add an OrderProcess\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createOrderProcess: function (orderProcess, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderProcess' is not null or undefined\n            if (orderProcess === null || orderProcess === undefined) {\n                throw new base_1.RequiredError('orderProcess', 'Required parameter orderProcess was null or undefined when calling createOrderProcess.');\n            }\n            var localVarPath = \"/order_processes\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof orderProcess !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderProcess !== undefined ? orderProcess : {}) : (orderProcess || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deletes the order process specified by the ID.\n         * @summary Delete an existing order process\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrderProcess: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling destroyOrderProcess.');\n            }\n            var localVarPath = \"/order_processes/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Links a tag to an order process\n         * @summary Links a tag to an order process\n         * @param {string} id ID of the resource\n         * @param {ResourceObject} resourceObject\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        linkTagToOrderProcess: function (id, resourceObject, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling linkTagToOrderProcess.');\n            }\n            // verify required parameter 'resourceObject' is not null or undefined\n            if (resourceObject === null || resourceObject === undefined) {\n                throw new base_1.RequiredError('resourceObject', 'Required parameter resourceObject was null or undefined when calling linkTagToOrderProcess.');\n            }\n            var localVarPath = \"/order_processes/{id}/link\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof resourceObject !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(resourceObject !== undefined ? resourceObject : {}) : (resourceObject || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of order processes. Optionally select order processes linked to a resource object whose app_name, object_type and object_id are specified by query parameters.\n         * @summary List OrderProcesses\n         * @param {string} [appName] Name of the application.\n         * @param {string} [objectId] Id of the resource object.\n         * @param {string} [objectType] Type of the resource object.\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderProcesses: function (appName, objectId, objectType, limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/order_processes\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (appName !== undefined) {\n                localVarQueryParameter['app_name'] = appName;\n            }\n            if (objectId !== undefined) {\n                localVarQueryParameter['object_id'] = objectId;\n            }\n            if (objectType !== undefined) {\n                localVarQueryParameter['object_type'] = objectType;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Removes the association to the product(s) defined in the \\'before\\' and/or \\'after\\' that would be executed when using this Order Process\n         * @summary Removes the \\'before\\' and/or \\'after\\' product(s) for an Order Process\n         * @param {string} id ID of the resource\n         * @param {OrderProcessAssociationsToRemove} orderProcessAssociationsToRemove\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeOrderProcessAssociation: function (id, orderProcessAssociationsToRemove, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling removeOrderProcessAssociation.');\n            }\n            // verify required parameter 'orderProcessAssociationsToRemove' is not null or undefined\n            if (orderProcessAssociationsToRemove === null || orderProcessAssociationsToRemove === undefined) {\n                throw new base_1.RequiredError('orderProcessAssociationsToRemove', 'Required parameter orderProcessAssociationsToRemove was null or undefined when calling removeOrderProcessAssociation.');\n            }\n            var localVarPath = \"/order_processes/{id}/remove_association\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof orderProcessAssociationsToRemove !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderProcessAssociationsToRemove !== undefined ? orderProcessAssociationsToRemove : {}) : (orderProcessAssociationsToRemove || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets the order process specified by the order process ID.\n         * @summary Get a specific order process\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderProcess: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showOrderProcess.');\n            }\n            var localVarPath = \"/order_processes/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Unlinks a tag from an order process\n         * @summary Unlinks a tag from an order process\n         * @param {string} id ID of the resource\n         * @param {ResourceObject} resourceObject\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unlinkTagFromOrderProcess: function (id, resourceObject, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling unlinkTagFromOrderProcess.');\n            }\n            // verify required parameter 'resourceObject' is not null or undefined\n            if (resourceObject === null || resourceObject === undefined) {\n                throw new base_1.RequiredError('resourceObject', 'Required parameter resourceObject was null or undefined when calling unlinkTagFromOrderProcess.');\n            }\n            var localVarPath = \"/order_processes/{id}/unlink\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof resourceObject !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(resourceObject !== undefined ? resourceObject : {}) : (resourceObject || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the edited order process.\n         * @summary Edit an existing order process\n         * @param {string} id ID of the resource\n         * @param {OrderProcess} orderProcess Parameters needed to update a OrderProcess\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateOrderProcess: function (id, orderProcess, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling updateOrderProcess.');\n            }\n            // verify required parameter 'orderProcess' is not null or undefined\n            if (orderProcess === null || orderProcess === undefined) {\n                throw new base_1.RequiredError('orderProcess', 'Required parameter orderProcess was null or undefined when calling updateOrderProcess.');\n            }\n            var localVarPath = \"/order_processes/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof orderProcess !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderProcess !== undefined ? orderProcess : {}) : (orderProcess || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * OrderProcessApi - functional programming interface\n * @export\n */\nexports.OrderProcessApiFp = function (configuration) {\n    return {\n        /**\n         * Defines the product that will be executed after ordering when using this Order Process\n         * @summary Adds an \\'after\\' product for an Order Process\n         * @param {string} id ID of the resource\n         * @param {OrderProcessPortfolioItemId} orderProcessPortfolioItemId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addOrderProcessAfterItem: function (id, orderProcessPortfolioItemId, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).addOrderProcessAfterItem(id, orderProcessPortfolioItemId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Defines the product that will be executed before ordering when using this Order Process\n         * @summary Adds a \\'before\\' product for an Order Process\n         * @param {string} id ID of the resource\n         * @param {OrderProcessPortfolioItemId} orderProcessPortfolioItemId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addOrderProcessBeforeItem: function (id, orderProcessPortfolioItemId, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).addOrderProcessBeforeItem(id, orderProcessPortfolioItemId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Adds an order process.\n         * @summary Add a new order process\n         * @param {OrderProcess} orderProcess Parameters needed to add an OrderProcess\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createOrderProcess: function (orderProcess, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).createOrderProcess(orderProcess, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Deletes the order process specified by the ID.\n         * @summary Delete an existing order process\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrderProcess: function (id, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).destroyOrderProcess(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Links a tag to an order process\n         * @summary Links a tag to an order process\n         * @param {string} id ID of the resource\n         * @param {ResourceObject} resourceObject\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        linkTagToOrderProcess: function (id, resourceObject, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).linkTagToOrderProcess(id, resourceObject, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of order processes. Optionally select order processes linked to a resource object whose app_name, object_type and object_id are specified by query parameters.\n         * @summary List OrderProcesses\n         * @param {string} [appName] Name of the application.\n         * @param {string} [objectId] Id of the resource object.\n         * @param {string} [objectType] Type of the resource object.\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderProcesses: function (appName, objectId, objectType, limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).listOrderProcesses(appName, objectId, objectType, limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Removes the association to the product(s) defined in the \\'before\\' and/or \\'after\\' that would be executed when using this Order Process\n         * @summary Removes the \\'before\\' and/or \\'after\\' product(s) for an Order Process\n         * @param {string} id ID of the resource\n         * @param {OrderProcessAssociationsToRemove} orderProcessAssociationsToRemove\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeOrderProcessAssociation: function (id, orderProcessAssociationsToRemove, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).removeOrderProcessAssociation(id, orderProcessAssociationsToRemove, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets the order process specified by the order process ID.\n         * @summary Get a specific order process\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderProcess: function (id, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).showOrderProcess(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Unlinks a tag from an order process\n         * @summary Unlinks a tag from an order process\n         * @param {string} id ID of the resource\n         * @param {ResourceObject} resourceObject\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unlinkTagFromOrderProcess: function (id, resourceObject, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).unlinkTagFromOrderProcess(id, resourceObject, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns the edited order process.\n         * @summary Edit an existing order process\n         * @param {string} id ID of the resource\n         * @param {OrderProcess} orderProcess Parameters needed to update a OrderProcess\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateOrderProcess: function (id, orderProcess, options) {\n            var localVarAxiosArgs = exports.OrderProcessApiAxiosParamCreator(configuration).updateOrderProcess(id, orderProcess, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * OrderProcessApi - factory interface\n * @export\n */\nexports.OrderProcessApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Defines the product that will be executed after ordering when using this Order Process\n         * @summary Adds an \\'after\\' product for an Order Process\n         * @param {string} id ID of the resource\n         * @param {OrderProcessPortfolioItemId} orderProcessPortfolioItemId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addOrderProcessAfterItem: function (id, orderProcessPortfolioItemId, options) {\n            return exports.OrderProcessApiFp(configuration).addOrderProcessAfterItem(id, orderProcessPortfolioItemId, options)(axios, basePath);\n        },\n        /**\n         * Defines the product that will be executed before ordering when using this Order Process\n         * @summary Adds a \\'before\\' product for an Order Process\n         * @param {string} id ID of the resource\n         * @param {OrderProcessPortfolioItemId} orderProcessPortfolioItemId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addOrderProcessBeforeItem: function (id, orderProcessPortfolioItemId, options) {\n            return exports.OrderProcessApiFp(configuration).addOrderProcessBeforeItem(id, orderProcessPortfolioItemId, options)(axios, basePath);\n        },\n        /**\n         * Adds an order process.\n         * @summary Add a new order process\n         * @param {OrderProcess} orderProcess Parameters needed to add an OrderProcess\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createOrderProcess: function (orderProcess, options) {\n            return exports.OrderProcessApiFp(configuration).createOrderProcess(orderProcess, options)(axios, basePath);\n        },\n        /**\n         * Deletes the order process specified by the ID.\n         * @summary Delete an existing order process\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrderProcess: function (id, options) {\n            return exports.OrderProcessApiFp(configuration).destroyOrderProcess(id, options)(axios, basePath);\n        },\n        /**\n         * Links a tag to an order process\n         * @summary Links a tag to an order process\n         * @param {string} id ID of the resource\n         * @param {ResourceObject} resourceObject\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        linkTagToOrderProcess: function (id, resourceObject, options) {\n            return exports.OrderProcessApiFp(configuration).linkTagToOrderProcess(id, resourceObject, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of order processes. Optionally select order processes linked to a resource object whose app_name, object_type and object_id are specified by query parameters.\n         * @summary List OrderProcesses\n         * @param {string} [appName] Name of the application.\n         * @param {string} [objectId] Id of the resource object.\n         * @param {string} [objectType] Type of the resource object.\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderProcesses: function (appName, objectId, objectType, limit, offset, filter, sortBy, options) {\n            return exports.OrderProcessApiFp(configuration).listOrderProcesses(appName, objectId, objectType, limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Removes the association to the product(s) defined in the \\'before\\' and/or \\'after\\' that would be executed when using this Order Process\n         * @summary Removes the \\'before\\' and/or \\'after\\' product(s) for an Order Process\n         * @param {string} id ID of the resource\n         * @param {OrderProcessAssociationsToRemove} orderProcessAssociationsToRemove\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeOrderProcessAssociation: function (id, orderProcessAssociationsToRemove, options) {\n            return exports.OrderProcessApiFp(configuration).removeOrderProcessAssociation(id, orderProcessAssociationsToRemove, options)(axios, basePath);\n        },\n        /**\n         * Gets the order process specified by the order process ID.\n         * @summary Get a specific order process\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderProcess: function (id, options) {\n            return exports.OrderProcessApiFp(configuration).showOrderProcess(id, options)(axios, basePath);\n        },\n        /**\n         * Unlinks a tag from an order process\n         * @summary Unlinks a tag from an order process\n         * @param {string} id ID of the resource\n         * @param {ResourceObject} resourceObject\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unlinkTagFromOrderProcess: function (id, resourceObject, options) {\n            return exports.OrderProcessApiFp(configuration).unlinkTagFromOrderProcess(id, resourceObject, options)(axios, basePath);\n        },\n        /**\n         * Returns the edited order process.\n         * @summary Edit an existing order process\n         * @param {string} id ID of the resource\n         * @param {OrderProcess} orderProcess Parameters needed to update a OrderProcess\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateOrderProcess: function (id, orderProcess, options) {\n            return exports.OrderProcessApiFp(configuration).updateOrderProcess(id, orderProcess, options)(axios, basePath);\n        },\n    };\n};\n/**\n * OrderProcessApi - object-oriented interface\n * @export\n * @class OrderProcessApi\n * @extends {BaseAPI}\n */\nvar OrderProcessApi = /** @class */ (function (_super) {\n    __extends(OrderProcessApi, _super);\n    function OrderProcessApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Defines the product that will be executed after ordering when using this Order Process\n     * @summary Adds an \\'after\\' product for an Order Process\n     * @param {string} id ID of the resource\n     * @param {OrderProcessPortfolioItemId} orderProcessPortfolioItemId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.addOrderProcessAfterItem = function (id, orderProcessPortfolioItemId, options) {\n        return exports.OrderProcessApiFp(this.configuration).addOrderProcessAfterItem(id, orderProcessPortfolioItemId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Defines the product that will be executed before ordering when using this Order Process\n     * @summary Adds a \\'before\\' product for an Order Process\n     * @param {string} id ID of the resource\n     * @param {OrderProcessPortfolioItemId} orderProcessPortfolioItemId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.addOrderProcessBeforeItem = function (id, orderProcessPortfolioItemId, options) {\n        return exports.OrderProcessApiFp(this.configuration).addOrderProcessBeforeItem(id, orderProcessPortfolioItemId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Adds an order process.\n     * @summary Add a new order process\n     * @param {OrderProcess} orderProcess Parameters needed to add an OrderProcess\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.createOrderProcess = function (orderProcess, options) {\n        return exports.OrderProcessApiFp(this.configuration).createOrderProcess(orderProcess, options)(this.axios, this.basePath);\n    };\n    /**\n     * Deletes the order process specified by the ID.\n     * @summary Delete an existing order process\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.destroyOrderProcess = function (id, options) {\n        return exports.OrderProcessApiFp(this.configuration).destroyOrderProcess(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Links a tag to an order process\n     * @summary Links a tag to an order process\n     * @param {string} id ID of the resource\n     * @param {ResourceObject} resourceObject\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.linkTagToOrderProcess = function (id, resourceObject, options) {\n        return exports.OrderProcessApiFp(this.configuration).linkTagToOrderProcess(id, resourceObject, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of order processes. Optionally select order processes linked to a resource object whose app_name, object_type and object_id are specified by query parameters.\n     * @summary List OrderProcesses\n     * @param {string} [appName] Name of the application.\n     * @param {string} [objectId] Id of the resource object.\n     * @param {string} [objectType] Type of the resource object.\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.listOrderProcesses = function (appName, objectId, objectType, limit, offset, filter, sortBy, options) {\n        return exports.OrderProcessApiFp(this.configuration).listOrderProcesses(appName, objectId, objectType, limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Removes the association to the product(s) defined in the \\'before\\' and/or \\'after\\' that would be executed when using this Order Process\n     * @summary Removes the \\'before\\' and/or \\'after\\' product(s) for an Order Process\n     * @param {string} id ID of the resource\n     * @param {OrderProcessAssociationsToRemove} orderProcessAssociationsToRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.removeOrderProcessAssociation = function (id, orderProcessAssociationsToRemove, options) {\n        return exports.OrderProcessApiFp(this.configuration).removeOrderProcessAssociation(id, orderProcessAssociationsToRemove, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets the order process specified by the order process ID.\n     * @summary Get a specific order process\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.showOrderProcess = function (id, options) {\n        return exports.OrderProcessApiFp(this.configuration).showOrderProcess(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Unlinks a tag from an order process\n     * @summary Unlinks a tag from an order process\n     * @param {string} id ID of the resource\n     * @param {ResourceObject} resourceObject\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.unlinkTagFromOrderProcess = function (id, resourceObject, options) {\n        return exports.OrderProcessApiFp(this.configuration).unlinkTagFromOrderProcess(id, resourceObject, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns the edited order process.\n     * @summary Edit an existing order process\n     * @param {string} id ID of the resource\n     * @param {OrderProcess} orderProcess Parameters needed to update a OrderProcess\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderProcessApi\n     */\n    OrderProcessApi.prototype.updateOrderProcess = function (id, orderProcess, options) {\n        return exports.OrderProcessApiFp(this.configuration).updateOrderProcess(id, orderProcess, options)(this.axios, this.basePath);\n    };\n    return OrderProcessApi;\n}(base_1.BaseAPI));\nexports.OrderProcessApi = OrderProcessApi;\n/**\n * PortfolioApi - axios parameter creator\n * @export\n */\nexports.PortfolioApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Adds a single tag to Portfolio object\n         * @summary Add Tag for Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioTag: function (id, tag, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling addPortfolioTag.');\n            }\n            // verify required parameter 'tag' is not null or undefined\n            if (tag === null || tag === undefined) {\n                throw new base_1.RequiredError('tag', 'Required parameter tag was null or undefined when calling addPortfolioTag.');\n            }\n            var localVarPath = \"/portfolios/{id}/tag\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof tag !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(tag !== undefined ? tag : {}) : (tag || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Adds a portfolio.\n         * @summary Add a new portfolio\n         * @param {Portfolio} portfolio Parameters needed to add a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolio: function (portfolio, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolio' is not null or undefined\n            if (portfolio === null || portfolio === undefined) {\n                throw new base_1.RequiredError('portfolio', 'Required parameter portfolio was null or undefined when calling createPortfolio.');\n            }\n            var localVarPath = \"/portfolios\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof portfolio !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(portfolio !== undefined ? portfolio : {}) : (portfolio || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deletes the portfolio specified by the ID.\n         * @summary Delete an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolio: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling destroyPortfolio.');\n            }\n            var localVarPath = \"/portfolios/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets all portfilio items in the portfolio specified by the given ID.\n         * @summary Get all portfolio items from a specific portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchPortfolioItemsWithPortfolio: function (portfolioId, limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new base_1.RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling fetchPortfolioItemsWithPortfolio.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/portfolio_items\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioTags: function (id, limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling listPortfolioTags.');\n            }\n            var localVarPath = \"/portfolios/{id}/tags\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of portfolios.\n         * @summary List portfolios\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolios: function (limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/portfolios\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Make a copy of the Portfolio.\n         * @summary Make a copy of the Portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolio: function (portfolioId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new base_1.RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling postCopyPortfolio.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/copy\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Remove Tags from Portfolio\n         * @summary Remove Tags from Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioTags: function (id, tag, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling removePortfolioTags.');\n            }\n            // verify required parameter 'tag' is not null or undefined\n            if (tag === null || tag === undefined) {\n                throw new base_1.RequiredError('tag', 'Required parameter tag was null or undefined when calling removePortfolioTags.');\n            }\n            var localVarPath = \"/portfolios/{id}/untag\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof tag !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(tag !== undefined ? tag : {}) : (tag || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch share information about a portfolio\n         * @summary Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        shareInfo: function (portfolioId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new base_1.RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling shareInfo.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/share_info\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Share a Portfolio with one or more groups with specific permissions\n         * @summary Share a portfolio with one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {SharePolicy} sharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sharePortfolio: function (portfolioId, sharePolicy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new base_1.RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling sharePortfolio.');\n            }\n            // verify required parameter 'sharePolicy' is not null or undefined\n            if (sharePolicy === null || sharePolicy === undefined) {\n                throw new base_1.RequiredError('sharePolicy', 'Required parameter sharePolicy was null or undefined when calling sharePortfolio.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/share\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof sharePolicy !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(sharePolicy !== undefined ? sharePolicy : {}) : (sharePolicy || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets the portfolio specified by the portfolio ID.\n         * @summary Get a specific portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolio: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showPortfolio.');\n            }\n            var localVarPath = \"/portfolios/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch the specified portfolio\\'s icon image.\n         * @summary Fetches the specified portfolio\\'s icon image\n         * @param {string} portfolioId The Portfolio ID\n         * @param {string} [cacheId] Artificial string to help avoid falsey browser cache. This can occur after changing static resources like images. The browser will return an outdated cached response. Appending different query will result in a new async call, instead of retrieving the resource from the browser cache.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioIcon: function (portfolioId, cacheId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new base_1.RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling showPortfolioIcon.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/icon\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (cacheId !== undefined) {\n                localVarQueryParameter['cache_id'] = cacheId;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Undeletes the portfolio specified by the portfolio ID.\n         * @summary Undelete specific portfolio\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolio: function (id, restoreKey, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling unDeletePortfolio.');\n            }\n            // verify required parameter 'restoreKey' is not null or undefined\n            if (restoreKey === null || restoreKey === undefined) {\n                throw new base_1.RequiredError('restoreKey', 'Required parameter restoreKey was null or undefined when calling unDeletePortfolio.');\n            }\n            var localVarPath = \"/portfolios/{id}/undelete\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof restoreKey !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(restoreKey !== undefined ? restoreKey : {}) : (restoreKey || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Unshare a Portfolio with one or more groups with specific permissions\n         * @summary Unshare a portfolio from one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {UnsharePolicy} unsharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unsharePortfolio: function (portfolioId, unsharePolicy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new base_1.RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling unsharePortfolio.');\n            }\n            // verify required parameter 'unsharePolicy' is not null or undefined\n            if (unsharePolicy === null || unsharePolicy === undefined) {\n                throw new base_1.RequiredError('unsharePolicy', 'Required parameter unsharePolicy was null or undefined when calling unsharePortfolio.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/unshare\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof unsharePolicy !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(unsharePolicy !== undefined ? unsharePolicy : {}) : (unsharePolicy || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the edited portfolio.\n         * @summary Edit an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {Portfolio} portfolio Parameters needed to update a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolio: function (id, portfolio, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling updatePortfolio.');\n            }\n            // verify required parameter 'portfolio' is not null or undefined\n            if (portfolio === null || portfolio === undefined) {\n                throw new base_1.RequiredError('portfolio', 'Required parameter portfolio was null or undefined when calling updatePortfolio.');\n            }\n            var localVarPath = \"/portfolios/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof portfolio !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(portfolio !== undefined ? portfolio : {}) : (portfolio || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * PortfolioApi - functional programming interface\n * @export\n */\nexports.PortfolioApiFp = function (configuration) {\n    return {\n        /**\n         * Adds a single tag to Portfolio object\n         * @summary Add Tag for Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioTag: function (id, tag, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).addPortfolioTag(id, tag, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Adds a portfolio.\n         * @summary Add a new portfolio\n         * @param {Portfolio} portfolio Parameters needed to add a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolio: function (portfolio, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).createPortfolio(portfolio, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Deletes the portfolio specified by the ID.\n         * @summary Delete an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolio: function (id, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).destroyPortfolio(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets all portfilio items in the portfolio specified by the given ID.\n         * @summary Get all portfolio items from a specific portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchPortfolioItemsWithPortfolio: function (portfolioId, limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).fetchPortfolioItemsWithPortfolio(portfolioId, limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioTags: function (id, limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).listPortfolioTags(id, limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of portfolios.\n         * @summary List portfolios\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolios: function (limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).listPortfolios(limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Make a copy of the Portfolio.\n         * @summary Make a copy of the Portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolio: function (portfolioId, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).postCopyPortfolio(portfolioId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Remove Tags from Portfolio\n         * @summary Remove Tags from Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioTags: function (id, tag, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).removePortfolioTags(id, tag, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Fetch share information about a portfolio\n         * @summary Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        shareInfo: function (portfolioId, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).shareInfo(portfolioId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Share a Portfolio with one or more groups with specific permissions\n         * @summary Share a portfolio with one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {SharePolicy} sharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sharePortfolio: function (portfolioId, sharePolicy, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).sharePortfolio(portfolioId, sharePolicy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets the portfolio specified by the portfolio ID.\n         * @summary Get a specific portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolio: function (id, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).showPortfolio(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Fetch the specified portfolio\\'s icon image.\n         * @summary Fetches the specified portfolio\\'s icon image\n         * @param {string} portfolioId The Portfolio ID\n         * @param {string} [cacheId] Artificial string to help avoid falsey browser cache. This can occur after changing static resources like images. The browser will return an outdated cached response. Appending different query will result in a new async call, instead of retrieving the resource from the browser cache.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioIcon: function (portfolioId, cacheId, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).showPortfolioIcon(portfolioId, cacheId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Undeletes the portfolio specified by the portfolio ID.\n         * @summary Undelete specific portfolio\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolio: function (id, restoreKey, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).unDeletePortfolio(id, restoreKey, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Unshare a Portfolio with one or more groups with specific permissions\n         * @summary Unshare a portfolio from one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {UnsharePolicy} unsharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unsharePortfolio: function (portfolioId, unsharePolicy, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).unsharePortfolio(portfolioId, unsharePolicy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns the edited portfolio.\n         * @summary Edit an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {Portfolio} portfolio Parameters needed to update a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolio: function (id, portfolio, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).updatePortfolio(id, portfolio, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * PortfolioApi - factory interface\n * @export\n */\nexports.PortfolioApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Adds a single tag to Portfolio object\n         * @summary Add Tag for Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioTag: function (id, tag, options) {\n            return exports.PortfolioApiFp(configuration).addPortfolioTag(id, tag, options)(axios, basePath);\n        },\n        /**\n         * Adds a portfolio.\n         * @summary Add a new portfolio\n         * @param {Portfolio} portfolio Parameters needed to add a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolio: function (portfolio, options) {\n            return exports.PortfolioApiFp(configuration).createPortfolio(portfolio, options)(axios, basePath);\n        },\n        /**\n         * Deletes the portfolio specified by the ID.\n         * @summary Delete an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolio: function (id, options) {\n            return exports.PortfolioApiFp(configuration).destroyPortfolio(id, options)(axios, basePath);\n        },\n        /**\n         * Gets all portfilio items in the portfolio specified by the given ID.\n         * @summary Get all portfolio items from a specific portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchPortfolioItemsWithPortfolio: function (portfolioId, limit, offset, filter, sortBy, options) {\n            return exports.PortfolioApiFp(configuration).fetchPortfolioItemsWithPortfolio(portfolioId, limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioTags: function (id, limit, offset, filter, sortBy, options) {\n            return exports.PortfolioApiFp(configuration).listPortfolioTags(id, limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of portfolios.\n         * @summary List portfolios\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolios: function (limit, offset, filter, sortBy, options) {\n            return exports.PortfolioApiFp(configuration).listPortfolios(limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Make a copy of the Portfolio.\n         * @summary Make a copy of the Portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolio: function (portfolioId, options) {\n            return exports.PortfolioApiFp(configuration).postCopyPortfolio(portfolioId, options)(axios, basePath);\n        },\n        /**\n         * Remove Tags from Portfolio\n         * @summary Remove Tags from Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioTags: function (id, tag, options) {\n            return exports.PortfolioApiFp(configuration).removePortfolioTags(id, tag, options)(axios, basePath);\n        },\n        /**\n         * Fetch share information about a portfolio\n         * @summary Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        shareInfo: function (portfolioId, options) {\n            return exports.PortfolioApiFp(configuration).shareInfo(portfolioId, options)(axios, basePath);\n        },\n        /**\n         * Share a Portfolio with one or more groups with specific permissions\n         * @summary Share a portfolio with one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {SharePolicy} sharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sharePortfolio: function (portfolioId, sharePolicy, options) {\n            return exports.PortfolioApiFp(configuration).sharePortfolio(portfolioId, sharePolicy, options)(axios, basePath);\n        },\n        /**\n         * Gets the portfolio specified by the portfolio ID.\n         * @summary Get a specific portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolio: function (id, options) {\n            return exports.PortfolioApiFp(configuration).showPortfolio(id, options)(axios, basePath);\n        },\n        /**\n         * Fetch the specified portfolio\\'s icon image.\n         * @summary Fetches the specified portfolio\\'s icon image\n         * @param {string} portfolioId The Portfolio ID\n         * @param {string} [cacheId] Artificial string to help avoid falsey browser cache. This can occur after changing static resources like images. The browser will return an outdated cached response. Appending different query will result in a new async call, instead of retrieving the resource from the browser cache.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioIcon: function (portfolioId, cacheId, options) {\n            return exports.PortfolioApiFp(configuration).showPortfolioIcon(portfolioId, cacheId, options)(axios, basePath);\n        },\n        /**\n         * Undeletes the portfolio specified by the portfolio ID.\n         * @summary Undelete specific portfolio\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolio: function (id, restoreKey, options) {\n            return exports.PortfolioApiFp(configuration).unDeletePortfolio(id, restoreKey, options)(axios, basePath);\n        },\n        /**\n         * Unshare a Portfolio with one or more groups with specific permissions\n         * @summary Unshare a portfolio from one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {UnsharePolicy} unsharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unsharePortfolio: function (portfolioId, unsharePolicy, options) {\n            return exports.PortfolioApiFp(configuration).unsharePortfolio(portfolioId, unsharePolicy, options)(axios, basePath);\n        },\n        /**\n         * Returns the edited portfolio.\n         * @summary Edit an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {Portfolio} portfolio Parameters needed to update a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolio: function (id, portfolio, options) {\n            return exports.PortfolioApiFp(configuration).updatePortfolio(id, portfolio, options)(axios, basePath);\n        },\n    };\n};\n/**\n * PortfolioApi - object-oriented interface\n * @export\n * @class PortfolioApi\n * @extends {BaseAPI}\n */\nvar PortfolioApi = /** @class */ (function (_super) {\n    __extends(PortfolioApi, _super);\n    function PortfolioApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Adds a single tag to Portfolio object\n     * @summary Add Tag for Portfolio\n     * @param {string} id ID of the resource\n     * @param {Array<Tag>} tag\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.addPortfolioTag = function (id, tag, options) {\n        return exports.PortfolioApiFp(this.configuration).addPortfolioTag(id, tag, options)(this.axios, this.basePath);\n    };\n    /**\n     * Adds a portfolio.\n     * @summary Add a new portfolio\n     * @param {Portfolio} portfolio Parameters needed to add a Portfolio\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.createPortfolio = function (portfolio, options) {\n        return exports.PortfolioApiFp(this.configuration).createPortfolio(portfolio, options)(this.axios, this.basePath);\n    };\n    /**\n     * Deletes the portfolio specified by the ID.\n     * @summary Delete an existing portfolio\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.destroyPortfolio = function (id, options) {\n        return exports.PortfolioApiFp(this.configuration).destroyPortfolio(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets all portfilio items in the portfolio specified by the given ID.\n     * @summary Get all portfolio items from a specific portfolio\n     * @param {string} portfolioId The Portfolio ID\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.fetchPortfolioItemsWithPortfolio = function (portfolioId, limit, offset, filter, sortBy, options) {\n        return exports.PortfolioApiFp(this.configuration).fetchPortfolioItemsWithPortfolio(portfolioId, limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns an array of Tag objects\n     * @summary List Tags for Portfolio\n     * @param {string} id ID of the resource\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.listPortfolioTags = function (id, limit, offset, filter, sortBy, options) {\n        return exports.PortfolioApiFp(this.configuration).listPortfolioTags(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of portfolios.\n     * @summary List portfolios\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.listPortfolios = function (limit, offset, filter, sortBy, options) {\n        return exports.PortfolioApiFp(this.configuration).listPortfolios(limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Make a copy of the Portfolio.\n     * @summary Make a copy of the Portfolio\n     * @param {string} portfolioId The Portfolio ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.postCopyPortfolio = function (portfolioId, options) {\n        return exports.PortfolioApiFp(this.configuration).postCopyPortfolio(portfolioId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Remove Tags from Portfolio\n     * @summary Remove Tags from Portfolio\n     * @param {string} id ID of the resource\n     * @param {Array<Tag>} tag\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.removePortfolioTags = function (id, tag, options) {\n        return exports.PortfolioApiFp(this.configuration).removePortfolioTags(id, tag, options)(this.axios, this.basePath);\n    };\n    /**\n     * Fetch share information about a portfolio\n     * @summary Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group\n     * @param {string} portfolioId The Portfolio ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.shareInfo = function (portfolioId, options) {\n        return exports.PortfolioApiFp(this.configuration).shareInfo(portfolioId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Share a Portfolio with one or more groups with specific permissions\n     * @summary Share a portfolio with one or more groups with specific permission\n     * @param {string} portfolioId The Portfolio ID\n     * @param {SharePolicy} sharePolicy\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.sharePortfolio = function (portfolioId, sharePolicy, options) {\n        return exports.PortfolioApiFp(this.configuration).sharePortfolio(portfolioId, sharePolicy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets the portfolio specified by the portfolio ID.\n     * @summary Get a specific portfolio\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.showPortfolio = function (id, options) {\n        return exports.PortfolioApiFp(this.configuration).showPortfolio(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Fetch the specified portfolio\\'s icon image.\n     * @summary Fetches the specified portfolio\\'s icon image\n     * @param {string} portfolioId The Portfolio ID\n     * @param {string} [cacheId] Artificial string to help avoid falsey browser cache. This can occur after changing static resources like images. The browser will return an outdated cached response. Appending different query will result in a new async call, instead of retrieving the resource from the browser cache.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.showPortfolioIcon = function (portfolioId, cacheId, options) {\n        return exports.PortfolioApiFp(this.configuration).showPortfolioIcon(portfolioId, cacheId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Undeletes the portfolio specified by the portfolio ID.\n     * @summary Undelete specific portfolio\n     * @param {string} id ID of the resource\n     * @param {RestoreKey} restoreKey\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.unDeletePortfolio = function (id, restoreKey, options) {\n        return exports.PortfolioApiFp(this.configuration).unDeletePortfolio(id, restoreKey, options)(this.axios, this.basePath);\n    };\n    /**\n     * Unshare a Portfolio with one or more groups with specific permissions\n     * @summary Unshare a portfolio from one or more groups with specific permission\n     * @param {string} portfolioId The Portfolio ID\n     * @param {UnsharePolicy} unsharePolicy\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.unsharePortfolio = function (portfolioId, unsharePolicy, options) {\n        return exports.PortfolioApiFp(this.configuration).unsharePortfolio(portfolioId, unsharePolicy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns the edited portfolio.\n     * @summary Edit an existing portfolio\n     * @param {string} id ID of the resource\n     * @param {Portfolio} portfolio Parameters needed to update a Portfolio\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.updatePortfolio = function (id, portfolio, options) {\n        return exports.PortfolioApiFp(this.configuration).updatePortfolio(id, portfolio, options)(this.axios, this.basePath);\n    };\n    return PortfolioApi;\n}(base_1.BaseAPI));\nexports.PortfolioApi = PortfolioApi;\n/**\n * PortfolioItemApi - axios parameter creator\n * @export\n */\nexports.PortfolioItemApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Adds a single tag to a Portfolio Item object\n         * @summary Add Tag for Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioItemTag: function (id, tag, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling addPortfolioItemTag.');\n            }\n            // verify required parameter 'tag' is not null or undefined\n            if (tag === null || tag === undefined) {\n                throw new base_1.RequiredError('tag', 'Required parameter tag was null or undefined when calling addPortfolioItemTag.');\n            }\n            var localVarPath = \"/portfolio_items/{id}/tag\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof tag !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(tag !== undefined ? tag : {}) : (tag || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Adds a name and description for a portfolio item and returns the newly created portfolio item.\n         * @summary Add a new portfolio item\n         * @param {CreatePortfolioItem} createPortfolioItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolioItem: function (createPortfolioItem, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'createPortfolioItem' is not null or undefined\n            if (createPortfolioItem === null || createPortfolioItem === undefined) {\n                throw new base_1.RequiredError('createPortfolioItem', 'Required parameter createPortfolioItem was null or undefined when calling createPortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof createPortfolioItem !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(createPortfolioItem !== undefined ? createPortfolioItem : {}) : (createPortfolioItem || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deletes the portfolio item based on portfolio item ID passed\n         * @summary Delete an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolioItem: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling destroyPortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the next name for a the Portfolio Item prior to a copy operation\n         * @summary Get the next name for a the Portfolio Item prior to a copy operation\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {string} [destinationPortfolioId] The destination portfolio to compare names against\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPortfolioItemNextName: function (portfolioItemId, destinationPortfolioId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new base_1.RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling getPortfolioItemNextName.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/next_name\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (destinationPortfolioId !== undefined) {\n                localVarQueryParameter['destination_portfolio_id'] = destinationPortfolioId;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio Items\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItemTags: function (id, limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling listPortfolioItemTags.');\n            }\n            var localVarPath = \"/portfolio_items/{id}/tags\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of portfolio items.\n         * @summary List all portfolio items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItems: function (limit, offset, filter, sortBy, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/portfolio_items\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sort_by'] = sortBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets the provider control parameters for a portfolio item.\n         * @summary Gets the provider control parameters for this portfolio item; requires control paramaters provided when provisioning the portfolio item.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProviderControlParameters: function (portfolioItemId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new base_1.RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling listProviderControlParameters.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/provider_control_parameters\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets all service plans for a portfolio item.\n         * @summary Gets all service plans for a specific portfolio item; requires a connection to the topology service.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServicePlans: function (portfolioItemId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new base_1.RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling listServicePlans.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/service_plans\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Make a copy of the Portfolio Item.\n         * @summary Make a copy of the Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {CopyPortfolioItem} [copyPortfolioItem]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolioItem: function (portfolioItemId, copyPortfolioItem, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new base_1.RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling postCopyPortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/copy\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof copyPortfolioItem !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(copyPortfolioItem !== undefined ? copyPortfolioItem : {}) : (copyPortfolioItem || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Remove Tags from Portfolio Item\n         * @summary Remove Tags from Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioItemTags: function (id, tag, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling removePortfolioItemTags.');\n            }\n            // verify required parameter 'tag' is not null or undefined\n            if (tag === null || tag === undefined) {\n                throw new base_1.RequiredError('tag', 'Required parameter tag was null or undefined when calling removePortfolioItemTags.');\n            }\n            var localVarPath = \"/portfolio_items/{id}/untag\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof tag !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(tag !== undefined ? tag : {}) : (tag || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a specific portfolio item based on the portfolio item ID passed\n         * @summary Gets a specific portfolio item\n         * @param {string} id ID of the resource\n         * @param {boolean} [showDiscarded] Whether or not to display the discarded result.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItem: function (id, showDiscarded, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showPortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (showDiscarded !== undefined) {\n                localVarQueryParameter['show_discarded'] = showDiscarded;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch the specified portfolio item\\'s icon image.\n         * @summary Fetches the specified portfolio item\\'s icon image\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItemIcon: function (portfolioItemId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new base_1.RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling showPortfolioItemIcon.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/icon\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * If a record has been discarded, this operation will undelete it so it can be requested normally.\n         * @summary Undelete a specified Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolioItem: function (portfolioItemId, restoreKey, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new base_1.RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling unDeletePortfolioItem.');\n            }\n            // verify required parameter 'restoreKey' is not null or undefined\n            if (restoreKey === null || restoreKey === undefined) {\n                throw new base_1.RequiredError('restoreKey', 'Required parameter restoreKey was null or undefined when calling unDeletePortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/undelete\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof restoreKey !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(restoreKey !== undefined ? restoreKey : {}) : (restoreKey || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Edits portfolio item specified by the given ID.\n         * @summary Edit an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {PortfolioItem} portfolioItem Parameters needed to update a Portfolio Item\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolioItem: function (id, portfolioItem, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling updatePortfolioItem.');\n            }\n            // verify required parameter 'portfolioItem' is not null or undefined\n            if (portfolioItem === null || portfolioItem === undefined) {\n                throw new base_1.RequiredError('portfolioItem', 'Required parameter portfolioItem was null or undefined when calling updatePortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof portfolioItem !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(portfolioItem !== undefined ? portfolioItem : {}) : (portfolioItem || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * PortfolioItemApi - functional programming interface\n * @export\n */\nexports.PortfolioItemApiFp = function (configuration) {\n    return {\n        /**\n         * Adds a single tag to a Portfolio Item object\n         * @summary Add Tag for Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioItemTag: function (id, tag, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).addPortfolioItemTag(id, tag, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Adds a name and description for a portfolio item and returns the newly created portfolio item.\n         * @summary Add a new portfolio item\n         * @param {CreatePortfolioItem} createPortfolioItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolioItem: function (createPortfolioItem, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).createPortfolioItem(createPortfolioItem, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Deletes the portfolio item based on portfolio item ID passed\n         * @summary Delete an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolioItem: function (id, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).destroyPortfolioItem(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get the next name for a the Portfolio Item prior to a copy operation\n         * @summary Get the next name for a the Portfolio Item prior to a copy operation\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {string} [destinationPortfolioId] The destination portfolio to compare names against\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPortfolioItemNextName: function (portfolioItemId, destinationPortfolioId, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).getPortfolioItemNextName(portfolioItemId, destinationPortfolioId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio Items\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItemTags: function (id, limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).listPortfolioItemTags(id, limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of portfolio items.\n         * @summary List all portfolio items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItems: function (limit, offset, filter, sortBy, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).listPortfolioItems(limit, offset, filter, sortBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets the provider control parameters for a portfolio item.\n         * @summary Gets the provider control parameters for this portfolio item; requires control paramaters provided when provisioning the portfolio item.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProviderControlParameters: function (portfolioItemId, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).listProviderControlParameters(portfolioItemId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets all service plans for a portfolio item.\n         * @summary Gets all service plans for a specific portfolio item; requires a connection to the topology service.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServicePlans: function (portfolioItemId, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).listServicePlans(portfolioItemId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Make a copy of the Portfolio Item.\n         * @summary Make a copy of the Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {CopyPortfolioItem} [copyPortfolioItem]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolioItem: function (portfolioItemId, copyPortfolioItem, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).postCopyPortfolioItem(portfolioItemId, copyPortfolioItem, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Remove Tags from Portfolio Item\n         * @summary Remove Tags from Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioItemTags: function (id, tag, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).removePortfolioItemTags(id, tag, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a specific portfolio item based on the portfolio item ID passed\n         * @summary Gets a specific portfolio item\n         * @param {string} id ID of the resource\n         * @param {boolean} [showDiscarded] Whether or not to display the discarded result.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItem: function (id, showDiscarded, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).showPortfolioItem(id, showDiscarded, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Fetch the specified portfolio item\\'s icon image.\n         * @summary Fetches the specified portfolio item\\'s icon image\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItemIcon: function (portfolioItemId, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).showPortfolioItemIcon(portfolioItemId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * If a record has been discarded, this operation will undelete it so it can be requested normally.\n         * @summary Undelete a specified Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolioItem: function (portfolioItemId, restoreKey, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).unDeletePortfolioItem(portfolioItemId, restoreKey, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Edits portfolio item specified by the given ID.\n         * @summary Edit an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {PortfolioItem} portfolioItem Parameters needed to update a Portfolio Item\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolioItem: function (id, portfolioItem, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).updatePortfolioItem(id, portfolioItem, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * PortfolioItemApi - factory interface\n * @export\n */\nexports.PortfolioItemApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Adds a single tag to a Portfolio Item object\n         * @summary Add Tag for Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioItemTag: function (id, tag, options) {\n            return exports.PortfolioItemApiFp(configuration).addPortfolioItemTag(id, tag, options)(axios, basePath);\n        },\n        /**\n         * Adds a name and description for a portfolio item and returns the newly created portfolio item.\n         * @summary Add a new portfolio item\n         * @param {CreatePortfolioItem} createPortfolioItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolioItem: function (createPortfolioItem, options) {\n            return exports.PortfolioItemApiFp(configuration).createPortfolioItem(createPortfolioItem, options)(axios, basePath);\n        },\n        /**\n         * Deletes the portfolio item based on portfolio item ID passed\n         * @summary Delete an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolioItem: function (id, options) {\n            return exports.PortfolioItemApiFp(configuration).destroyPortfolioItem(id, options)(axios, basePath);\n        },\n        /**\n         * Get the next name for a the Portfolio Item prior to a copy operation\n         * @summary Get the next name for a the Portfolio Item prior to a copy operation\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {string} [destinationPortfolioId] The destination portfolio to compare names against\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPortfolioItemNextName: function (portfolioItemId, destinationPortfolioId, options) {\n            return exports.PortfolioItemApiFp(configuration).getPortfolioItemNextName(portfolioItemId, destinationPortfolioId, options)(axios, basePath);\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio Items\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItemTags: function (id, limit, offset, filter, sortBy, options) {\n            return exports.PortfolioItemApiFp(configuration).listPortfolioItemTags(id, limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of portfolio items.\n         * @summary List all portfolio items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {string} [sortBy] Field to sort collection by.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItems: function (limit, offset, filter, sortBy, options) {\n            return exports.PortfolioItemApiFp(configuration).listPortfolioItems(limit, offset, filter, sortBy, options)(axios, basePath);\n        },\n        /**\n         * Gets the provider control parameters for a portfolio item.\n         * @summary Gets the provider control parameters for this portfolio item; requires control paramaters provided when provisioning the portfolio item.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProviderControlParameters: function (portfolioItemId, options) {\n            return exports.PortfolioItemApiFp(configuration).listProviderControlParameters(portfolioItemId, options)(axios, basePath);\n        },\n        /**\n         * Gets all service plans for a portfolio item.\n         * @summary Gets all service plans for a specific portfolio item; requires a connection to the topology service.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServicePlans: function (portfolioItemId, options) {\n            return exports.PortfolioItemApiFp(configuration).listServicePlans(portfolioItemId, options)(axios, basePath);\n        },\n        /**\n         * Make a copy of the Portfolio Item.\n         * @summary Make a copy of the Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {CopyPortfolioItem} [copyPortfolioItem]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolioItem: function (portfolioItemId, copyPortfolioItem, options) {\n            return exports.PortfolioItemApiFp(configuration).postCopyPortfolioItem(portfolioItemId, copyPortfolioItem, options)(axios, basePath);\n        },\n        /**\n         * Remove Tags from Portfolio Item\n         * @summary Remove Tags from Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioItemTags: function (id, tag, options) {\n            return exports.PortfolioItemApiFp(configuration).removePortfolioItemTags(id, tag, options)(axios, basePath);\n        },\n        /**\n         * Gets a specific portfolio item based on the portfolio item ID passed\n         * @summary Gets a specific portfolio item\n         * @param {string} id ID of the resource\n         * @param {boolean} [showDiscarded] Whether or not to display the discarded result.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItem: function (id, showDiscarded, options) {\n            return exports.PortfolioItemApiFp(configuration).showPortfolioItem(id, showDiscarded, options)(axios, basePath);\n        },\n        /**\n         * Fetch the specified portfolio item\\'s icon image.\n         * @summary Fetches the specified portfolio item\\'s icon image\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItemIcon: function (portfolioItemId, options) {\n            return exports.PortfolioItemApiFp(configuration).showPortfolioItemIcon(portfolioItemId, options)(axios, basePath);\n        },\n        /**\n         * If a record has been discarded, this operation will undelete it so it can be requested normally.\n         * @summary Undelete a specified Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolioItem: function (portfolioItemId, restoreKey, options) {\n            return exports.PortfolioItemApiFp(configuration).unDeletePortfolioItem(portfolioItemId, restoreKey, options)(axios, basePath);\n        },\n        /**\n         * Edits portfolio item specified by the given ID.\n         * @summary Edit an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {PortfolioItem} portfolioItem Parameters needed to update a Portfolio Item\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolioItem: function (id, portfolioItem, options) {\n            return exports.PortfolioItemApiFp(configuration).updatePortfolioItem(id, portfolioItem, options)(axios, basePath);\n        },\n    };\n};\n/**\n * PortfolioItemApi - object-oriented interface\n * @export\n * @class PortfolioItemApi\n * @extends {BaseAPI}\n */\nvar PortfolioItemApi = /** @class */ (function (_super) {\n    __extends(PortfolioItemApi, _super);\n    function PortfolioItemApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Adds a single tag to a Portfolio Item object\n     * @summary Add Tag for Portfolio Item\n     * @param {string} id ID of the resource\n     * @param {Array<Tag>} tag\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.addPortfolioItemTag = function (id, tag, options) {\n        return exports.PortfolioItemApiFp(this.configuration).addPortfolioItemTag(id, tag, options)(this.axios, this.basePath);\n    };\n    /**\n     * Adds a name and description for a portfolio item and returns the newly created portfolio item.\n     * @summary Add a new portfolio item\n     * @param {CreatePortfolioItem} createPortfolioItem\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.createPortfolioItem = function (createPortfolioItem, options) {\n        return exports.PortfolioItemApiFp(this.configuration).createPortfolioItem(createPortfolioItem, options)(this.axios, this.basePath);\n    };\n    /**\n     * Deletes the portfolio item based on portfolio item ID passed\n     * @summary Delete an existing portfolio item\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.destroyPortfolioItem = function (id, options) {\n        return exports.PortfolioItemApiFp(this.configuration).destroyPortfolioItem(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Get the next name for a the Portfolio Item prior to a copy operation\n     * @summary Get the next name for a the Portfolio Item prior to a copy operation\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {string} [destinationPortfolioId] The destination portfolio to compare names against\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.getPortfolioItemNextName = function (portfolioItemId, destinationPortfolioId, options) {\n        return exports.PortfolioItemApiFp(this.configuration).getPortfolioItemNextName(portfolioItemId, destinationPortfolioId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns an array of Tag objects\n     * @summary List Tags for Portfolio Items\n     * @param {string} id ID of the resource\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.listPortfolioItemTags = function (id, limit, offset, filter, sortBy, options) {\n        return exports.PortfolioItemApiFp(this.configuration).listPortfolioItemTags(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of portfolio items.\n     * @summary List all portfolio items\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {string} [sortBy] Field to sort collection by.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.listPortfolioItems = function (limit, offset, filter, sortBy, options) {\n        return exports.PortfolioItemApiFp(this.configuration).listPortfolioItems(limit, offset, filter, sortBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets the provider control parameters for a portfolio item.\n     * @summary Gets the provider control parameters for this portfolio item; requires control paramaters provided when provisioning the portfolio item.\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.listProviderControlParameters = function (portfolioItemId, options) {\n        return exports.PortfolioItemApiFp(this.configuration).listProviderControlParameters(portfolioItemId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets all service plans for a portfolio item.\n     * @summary Gets all service plans for a specific portfolio item; requires a connection to the topology service.\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.listServicePlans = function (portfolioItemId, options) {\n        return exports.PortfolioItemApiFp(this.configuration).listServicePlans(portfolioItemId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Make a copy of the Portfolio Item.\n     * @summary Make a copy of the Portfolio Item\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {CopyPortfolioItem} [copyPortfolioItem]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.postCopyPortfolioItem = function (portfolioItemId, copyPortfolioItem, options) {\n        return exports.PortfolioItemApiFp(this.configuration).postCopyPortfolioItem(portfolioItemId, copyPortfolioItem, options)(this.axios, this.basePath);\n    };\n    /**\n     * Remove Tags from Portfolio Item\n     * @summary Remove Tags from Portfolio Item\n     * @param {string} id ID of the resource\n     * @param {Array<Tag>} tag\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.removePortfolioItemTags = function (id, tag, options) {\n        return exports.PortfolioItemApiFp(this.configuration).removePortfolioItemTags(id, tag, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a specific portfolio item based on the portfolio item ID passed\n     * @summary Gets a specific portfolio item\n     * @param {string} id ID of the resource\n     * @param {boolean} [showDiscarded] Whether or not to display the discarded result.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.showPortfolioItem = function (id, showDiscarded, options) {\n        return exports.PortfolioItemApiFp(this.configuration).showPortfolioItem(id, showDiscarded, options)(this.axios, this.basePath);\n    };\n    /**\n     * Fetch the specified portfolio item\\'s icon image.\n     * @summary Fetches the specified portfolio item\\'s icon image\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.showPortfolioItemIcon = function (portfolioItemId, options) {\n        return exports.PortfolioItemApiFp(this.configuration).showPortfolioItemIcon(portfolioItemId, options)(this.axios, this.basePath);\n    };\n    /**\n     * If a record has been discarded, this operation will undelete it so it can be requested normally.\n     * @summary Undelete a specified Portfolio Item\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {RestoreKey} restoreKey\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.unDeletePortfolioItem = function (portfolioItemId, restoreKey, options) {\n        return exports.PortfolioItemApiFp(this.configuration).unDeletePortfolioItem(portfolioItemId, restoreKey, options)(this.axios, this.basePath);\n    };\n    /**\n     * Edits portfolio item specified by the given ID.\n     * @summary Edit an existing portfolio item\n     * @param {string} id ID of the resource\n     * @param {PortfolioItem} portfolioItem Parameters needed to update a Portfolio Item\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.updatePortfolioItem = function (id, portfolioItem, options) {\n        return exports.PortfolioItemApiFp(this.configuration).updatePortfolioItem(id, portfolioItem, options)(this.axios, this.basePath);\n    };\n    return PortfolioItemApi;\n}(base_1.BaseAPI));\nexports.PortfolioItemApi = PortfolioItemApi;\n/**\n * ServicePlansApi - axios parameter creator\n * @export\n */\nexports.ServicePlansApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Returns the new Service Plan\n         * @summary Create Service Plan\n         * @param {ImportServicePlan} [importServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServicePlan: function (importServicePlan, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/service_plans\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof importServicePlan !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(importServicePlan !== undefined ? importServicePlan : {}) : (importServicePlan || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Patch Service Plan Modified Schema\n         * @param {string} id ID of the resource\n         * @param {PatchModifiedServicePlan} [patchModifiedServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchServicePlanModified: function (id, patchModifiedServicePlan, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling patchServicePlanModified.');\n            }\n            var localVarPath = \"/service_plans/{id}/modified\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof patchModifiedServicePlan !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchModifiedServicePlan !== undefined ? patchModifiedServicePlan : {}) : (patchModifiedServicePlan || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Resets the Service Plan\\'s Modified schema and returns the new one if it has been reset\n         * @summary Reset Service Plan Modified schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServicePlanModified: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling resetServicePlanModified.');\n            }\n            var localVarPath = \"/service_plans/{id}/reset\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the specified Service Plan\n         * @summary Show Service Plan\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlan: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showServicePlan.');\n            }\n            var localVarPath = \"/service_plans/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the specified Service Plan\\'s base schema\n         * @summary Show Service Plan Base Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanBase: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showServicePlanBase.');\n            }\n            var localVarPath = \"/service_plans/{id}/base\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the specified Service Plan\\'s modified schema\n         * @summary Show Service Plan modified Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanModified: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showServicePlanModified.');\n            }\n            var localVarPath = \"/service_plans/{id}/modified\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * ServicePlansApi - functional programming interface\n * @export\n */\nexports.ServicePlansApiFp = function (configuration) {\n    return {\n        /**\n         * Returns the new Service Plan\n         * @summary Create Service Plan\n         * @param {ImportServicePlan} [importServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServicePlan: function (importServicePlan, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).createServicePlan(importServicePlan, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Patch Service Plan Modified Schema\n         * @param {string} id ID of the resource\n         * @param {PatchModifiedServicePlan} [patchModifiedServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchServicePlanModified: function (id, patchModifiedServicePlan, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).patchServicePlanModified(id, patchModifiedServicePlan, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Resets the Service Plan\\'s Modified schema and returns the new one if it has been reset\n         * @summary Reset Service Plan Modified schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServicePlanModified: function (id, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).resetServicePlanModified(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns the specified Service Plan\n         * @summary Show Service Plan\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlan: function (id, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).showServicePlan(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns the specified Service Plan\\'s base schema\n         * @summary Show Service Plan Base Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanBase: function (id, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).showServicePlanBase(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns the specified Service Plan\\'s modified schema\n         * @summary Show Service Plan modified Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanModified: function (id, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).showServicePlanModified(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * ServicePlansApi - factory interface\n * @export\n */\nexports.ServicePlansApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Returns the new Service Plan\n         * @summary Create Service Plan\n         * @param {ImportServicePlan} [importServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServicePlan: function (importServicePlan, options) {\n            return exports.ServicePlansApiFp(configuration).createServicePlan(importServicePlan, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Patch Service Plan Modified Schema\n         * @param {string} id ID of the resource\n         * @param {PatchModifiedServicePlan} [patchModifiedServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchServicePlanModified: function (id, patchModifiedServicePlan, options) {\n            return exports.ServicePlansApiFp(configuration).patchServicePlanModified(id, patchModifiedServicePlan, options)(axios, basePath);\n        },\n        /**\n         * Resets the Service Plan\\'s Modified schema and returns the new one if it has been reset\n         * @summary Reset Service Plan Modified schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServicePlanModified: function (id, options) {\n            return exports.ServicePlansApiFp(configuration).resetServicePlanModified(id, options)(axios, basePath);\n        },\n        /**\n         * Returns the specified Service Plan\n         * @summary Show Service Plan\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlan: function (id, options) {\n            return exports.ServicePlansApiFp(configuration).showServicePlan(id, options)(axios, basePath);\n        },\n        /**\n         * Returns the specified Service Plan\\'s base schema\n         * @summary Show Service Plan Base Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanBase: function (id, options) {\n            return exports.ServicePlansApiFp(configuration).showServicePlanBase(id, options)(axios, basePath);\n        },\n        /**\n         * Returns the specified Service Plan\\'s modified schema\n         * @summary Show Service Plan modified Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanModified: function (id, options) {\n            return exports.ServicePlansApiFp(configuration).showServicePlanModified(id, options)(axios, basePath);\n        },\n    };\n};\n/**\n * ServicePlansApi - object-oriented interface\n * @export\n * @class ServicePlansApi\n * @extends {BaseAPI}\n */\nvar ServicePlansApi = /** @class */ (function (_super) {\n    __extends(ServicePlansApi, _super);\n    function ServicePlansApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Returns the new Service Plan\n     * @summary Create Service Plan\n     * @param {ImportServicePlan} [importServicePlan]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.createServicePlan = function (importServicePlan, options) {\n        return exports.ServicePlansApiFp(this.configuration).createServicePlan(importServicePlan, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Patch Service Plan Modified Schema\n     * @param {string} id ID of the resource\n     * @param {PatchModifiedServicePlan} [patchModifiedServicePlan]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.patchServicePlanModified = function (id, patchModifiedServicePlan, options) {\n        return exports.ServicePlansApiFp(this.configuration).patchServicePlanModified(id, patchModifiedServicePlan, options)(this.axios, this.basePath);\n    };\n    /**\n     * Resets the Service Plan\\'s Modified schema and returns the new one if it has been reset\n     * @summary Reset Service Plan Modified schema\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.resetServicePlanModified = function (id, options) {\n        return exports.ServicePlansApiFp(this.configuration).resetServicePlanModified(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns the specified Service Plan\n     * @summary Show Service Plan\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.showServicePlan = function (id, options) {\n        return exports.ServicePlansApiFp(this.configuration).showServicePlan(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns the specified Service Plan\\'s base schema\n     * @summary Show Service Plan Base Schema\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.showServicePlanBase = function (id, options) {\n        return exports.ServicePlansApiFp(this.configuration).showServicePlanBase(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns the specified Service Plan\\'s modified schema\n     * @summary Show Service Plan modified Schema\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.showServicePlanModified = function (id, options) {\n        return exports.ServicePlansApiFp(this.configuration).showServicePlanModified(id, options)(this.axios, this.basePath);\n    };\n    return ServicePlansApi;\n}(base_1.BaseAPI));\nexports.ServicePlansApi = ServicePlansApi;\n/**\n * SettingsApi - axios parameter creator\n * @export\n */\nexports.SettingsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Create Tenant Setting\n         * @summary Create Tenant Setting\n         * @param {Setting} setting Json encoded key/value pair to create a new setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSetting: function (setting, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'setting' is not null or undefined\n            if (setting === null || setting === undefined) {\n                throw new base_1.RequiredError('setting', 'Required parameter setting was null or undefined when calling createSetting.');\n            }\n            var localVarPath = \"/settings\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof setting !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(setting !== undefined ? setting : {}) : (setting || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a Tenant Setting\n         * @summary Delete a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroySetting: function (name, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new base_1.RequiredError('name', 'Required parameter name was null or undefined when calling destroySetting.');\n            }\n            var localVarPath = \"/settings/{name}\"\n                .replace(\"{\" + \"name\" + \"}\", encodeURIComponent(String(name)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List Tenant Settings\n         * @summary List Tenant Settings\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSettings: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/settings\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a specific Tenant Setting\n         * @summary Get a specific Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showSetting: function (name, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new base_1.RequiredError('name', 'Required parameter name was null or undefined when calling showSetting.');\n            }\n            var localVarPath = \"/settings/{name}\"\n                .replace(\"{\" + \"name\" + \"}\", encodeURIComponent(String(name)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a Tenant Setting\n         * @summary Update a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSetting: function (name, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new base_1.RequiredError('name', 'Required parameter name was null or undefined when calling updateSetting.');\n            }\n            var localVarPath = \"/settings/{name}\"\n                .replace(\"{\" + \"name\" + \"}\", encodeURIComponent(String(name)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * SettingsApi - functional programming interface\n * @export\n */\nexports.SettingsApiFp = function (configuration) {\n    return {\n        /**\n         * Create Tenant Setting\n         * @summary Create Tenant Setting\n         * @param {Setting} setting Json encoded key/value pair to create a new setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSetting: function (setting, options) {\n            var localVarAxiosArgs = exports.SettingsApiAxiosParamCreator(configuration).createSetting(setting, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Delete a Tenant Setting\n         * @summary Delete a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroySetting: function (name, options) {\n            var localVarAxiosArgs = exports.SettingsApiAxiosParamCreator(configuration).destroySetting(name, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * List Tenant Settings\n         * @summary List Tenant Settings\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSettings: function (options) {\n            var localVarAxiosArgs = exports.SettingsApiAxiosParamCreator(configuration).listSettings(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get a specific Tenant Setting\n         * @summary Get a specific Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showSetting: function (name, options) {\n            var localVarAxiosArgs = exports.SettingsApiAxiosParamCreator(configuration).showSetting(name, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Update a Tenant Setting\n         * @summary Update a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSetting: function (name, options) {\n            var localVarAxiosArgs = exports.SettingsApiAxiosParamCreator(configuration).updateSetting(name, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * SettingsApi - factory interface\n * @export\n */\nexports.SettingsApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Create Tenant Setting\n         * @summary Create Tenant Setting\n         * @param {Setting} setting Json encoded key/value pair to create a new setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSetting: function (setting, options) {\n            return exports.SettingsApiFp(configuration).createSetting(setting, options)(axios, basePath);\n        },\n        /**\n         * Delete a Tenant Setting\n         * @summary Delete a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroySetting: function (name, options) {\n            return exports.SettingsApiFp(configuration).destroySetting(name, options)(axios, basePath);\n        },\n        /**\n         * List Tenant Settings\n         * @summary List Tenant Settings\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSettings: function (options) {\n            return exports.SettingsApiFp(configuration).listSettings(options)(axios, basePath);\n        },\n        /**\n         * Get a specific Tenant Setting\n         * @summary Get a specific Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showSetting: function (name, options) {\n            return exports.SettingsApiFp(configuration).showSetting(name, options)(axios, basePath);\n        },\n        /**\n         * Update a Tenant Setting\n         * @summary Update a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSetting: function (name, options) {\n            return exports.SettingsApiFp(configuration).updateSetting(name, options)(axios, basePath);\n        },\n    };\n};\n/**\n * SettingsApi - object-oriented interface\n * @export\n * @class SettingsApi\n * @extends {BaseAPI}\n */\nvar SettingsApi = /** @class */ (function (_super) {\n    __extends(SettingsApi, _super);\n    function SettingsApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Create Tenant Setting\n     * @summary Create Tenant Setting\n     * @param {Setting} setting Json encoded key/value pair to create a new setting\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    SettingsApi.prototype.createSetting = function (setting, options) {\n        return exports.SettingsApiFp(this.configuration).createSetting(setting, options)(this.axios, this.basePath);\n    };\n    /**\n     * Delete a Tenant Setting\n     * @summary Delete a Tenant Setting\n     * @param {string} name name of the setting\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    SettingsApi.prototype.destroySetting = function (name, options) {\n        return exports.SettingsApiFp(this.configuration).destroySetting(name, options)(this.axios, this.basePath);\n    };\n    /**\n     * List Tenant Settings\n     * @summary List Tenant Settings\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    SettingsApi.prototype.listSettings = function (options) {\n        return exports.SettingsApiFp(this.configuration).listSettings(options)(this.axios, this.basePath);\n    };\n    /**\n     * Get a specific Tenant Setting\n     * @summary Get a specific Tenant Setting\n     * @param {string} name name of the setting\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    SettingsApi.prototype.showSetting = function (name, options) {\n        return exports.SettingsApiFp(this.configuration).showSetting(name, options)(this.axios, this.basePath);\n    };\n    /**\n     * Update a Tenant Setting\n     * @summary Update a Tenant Setting\n     * @param {string} name name of the setting\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    SettingsApi.prototype.updateSetting = function (name, options) {\n        return exports.SettingsApiFp(this.configuration).updateSetting(name, options)(this.axios, this.basePath);\n    };\n    return SettingsApi;\n}(base_1.BaseAPI));\nexports.SettingsApi = SettingsApi;\n/**\n * TagsApi - axios parameter creator\n * @export\n */\nexports.TagsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * List Tags\n         * @summary List Tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTags: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/tags\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * TagsApi - functional programming interface\n * @export\n */\nexports.TagsApiFp = function (configuration) {\n    return {\n        /**\n         * List Tags\n         * @summary List Tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTags: function (options) {\n            var localVarAxiosArgs = exports.TagsApiAxiosParamCreator(configuration).listTags(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * TagsApi - factory interface\n * @export\n */\nexports.TagsApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * List Tags\n         * @summary List Tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTags: function (options) {\n            return exports.TagsApiFp(configuration).listTags(options)(axios, basePath);\n        },\n    };\n};\n/**\n * TagsApi - object-oriented interface\n * @export\n * @class TagsApi\n * @extends {BaseAPI}\n */\nvar TagsApi = /** @class */ (function (_super) {\n    __extends(TagsApi, _super);\n    function TagsApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * List Tags\n     * @summary List Tags\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TagsApi\n     */\n    TagsApi.prototype.listTags = function (options) {\n        return exports.TagsApiFp(this.configuration).listTags(options)(this.axios, this.basePath);\n    };\n    return TagsApi;\n}(base_1.BaseAPI));\nexports.TagsApi = TagsApi;\n/**\n * TenantApi - axios parameter creator\n * @export\n */\nexports.TenantApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Get a list of tenants.\n         * @summary List Tenants\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTenants: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/tenants\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets the tenant specified by the tenant id.\n         * @summary Get a specific Tenant\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showTenant: function (tenantId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'tenantId' is not null or undefined\n            if (tenantId === null || tenantId === undefined) {\n                throw new base_1.RequiredError('tenantId', 'Required parameter tenantId was null or undefined when calling showTenant.');\n            }\n            var localVarPath = \"/tenants/{tenant_id}\"\n                .replace(\"{\" + \"tenant_id\" + \"}\", encodeURIComponent(String(tenantId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Run a task to seed the Tenant Groups required for an org admin to onboard additional users.\n         * @summary Seed Tenant Groups\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tenantSeed: function (tenantId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'tenantId' is not null or undefined\n            if (tenantId === null || tenantId === undefined) {\n                throw new base_1.RequiredError('tenantId', 'Required parameter tenantId was null or undefined when calling tenantSeed.');\n            }\n            var localVarPath = \"/tenants/{tenant_id}/seed\"\n                .replace(\"{\" + \"tenant_id\" + \"}\", encodeURIComponent(String(tenantId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * TenantApi - functional programming interface\n * @export\n */\nexports.TenantApiFp = function (configuration) {\n    return {\n        /**\n         * Get a list of tenants.\n         * @summary List Tenants\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTenants: function (options) {\n            var localVarAxiosArgs = exports.TenantApiAxiosParamCreator(configuration).listTenants(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets the tenant specified by the tenant id.\n         * @summary Get a specific Tenant\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showTenant: function (tenantId, options) {\n            var localVarAxiosArgs = exports.TenantApiAxiosParamCreator(configuration).showTenant(tenantId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Run a task to seed the Tenant Groups required for an org admin to onboard additional users.\n         * @summary Seed Tenant Groups\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tenantSeed: function (tenantId, options) {\n            var localVarAxiosArgs = exports.TenantApiAxiosParamCreator(configuration).tenantSeed(tenantId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * TenantApi - factory interface\n * @export\n */\nexports.TenantApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Get a list of tenants.\n         * @summary List Tenants\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTenants: function (options) {\n            return exports.TenantApiFp(configuration).listTenants(options)(axios, basePath);\n        },\n        /**\n         * Gets the tenant specified by the tenant id.\n         * @summary Get a specific Tenant\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showTenant: function (tenantId, options) {\n            return exports.TenantApiFp(configuration).showTenant(tenantId, options)(axios, basePath);\n        },\n        /**\n         * Run a task to seed the Tenant Groups required for an org admin to onboard additional users.\n         * @summary Seed Tenant Groups\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tenantSeed: function (tenantId, options) {\n            return exports.TenantApiFp(configuration).tenantSeed(tenantId, options)(axios, basePath);\n        },\n    };\n};\n/**\n * TenantApi - object-oriented interface\n * @export\n * @class TenantApi\n * @extends {BaseAPI}\n */\nvar TenantApi = /** @class */ (function (_super) {\n    __extends(TenantApi, _super);\n    function TenantApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Get a list of tenants.\n     * @summary List Tenants\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TenantApi\n     */\n    TenantApi.prototype.listTenants = function (options) {\n        return exports.TenantApiFp(this.configuration).listTenants(options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets the tenant specified by the tenant id.\n     * @summary Get a specific Tenant\n     * @param {string} tenantId ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TenantApi\n     */\n    TenantApi.prototype.showTenant = function (tenantId, options) {\n        return exports.TenantApiFp(this.configuration).showTenant(tenantId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Run a task to seed the Tenant Groups required for an org admin to onboard additional users.\n     * @summary Seed Tenant Groups\n     * @param {string} tenantId ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TenantApi\n     */\n    TenantApi.prototype.tenantSeed = function (tenantId, options) {\n        return exports.TenantApiFp(this.configuration).tenantSeed(tenantId, options)(this.axios, this.basePath);\n    };\n    return TenantApi;\n}(base_1.BaseAPI));\nexports.TenantApi = TenantApi;\n"],"sourceRoot":""}