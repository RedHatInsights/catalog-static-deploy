{"version":3,"sources":["webpack:///./node_modules/@redhat-cloud-services/catalog-client/dist/api.js"],"names":["extendStatics","__extends","this","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","defineProperty","exports","value","globalImportUrl","axios_1","base_1","ApprovalRequestStateEnum","OrderStateEnum","OrderItemStateEnum","ProgressMessageLevelEnum","ShareInfoPermissionsEnum","SharePolicyPermissionsEnum","UnsharePolicyPermissionsEnum","DefaultApiAxiosParamCreator","configuration","getDocumentation","options","baseOptions","localVarUrlObj","parse","localVarRequestOptions","method","username","password","query","search","headersFromBaseOptions","headers","url","format","postGraphQL","graphQLRequest","RequiredError","localVarHeaderParameter","needsSerialization","data","JSON","stringify","undefined","DefaultApiFp","localVarAxiosArgs","axios","basePath","default","BASE_PATH","axiosRequestArgs","request","DefaultApiFactory","DefaultApi","_super","BaseAPI","IconApiAxiosParamCreator","createIcon","content","portfolioId","portfolioItemId","localVarFormParams","FormData","append","destroyIcon","id","localVarPath","replace","encodeURIComponent","String","getIcon","showIconData","updateIcon","icon","IconApiFp","IconApiFactory","IconApi","OrderApiAxiosParamCreator","addToOrder","orderId","orderItem","cancelOrder","createOrder","destroyOrder","listOrderItemsFromOrder","limit","offset","filter","localVarQueryParameter","listOrders","restoreOrder","restoreKey","showOrder","showOrderItemFromOrder","submitOrder","OrderApiFp","OrderApiFactory","OrderApi","OrderItemApiAxiosParamCreator","destroyOrderItem","listApprovalRequests","orderItemId","listOrderItems","listProgressMessages","restoreOrderItem","showOrderItem","OrderItemApiFp","OrderItemApiFactory","OrderItemApi","PortfolioApiAxiosParamCreator","addPortfolioTag","tag","createPortfolio","portfolio","destroyPortfolio","fetchPortfolioItemsWithPortfolio","listPortfolioTags","listPortfolios","postCopyPortfolio","removePortfolioTags","shareInfo","sharePortfolio","sharePolicy","showPortfolio","showPortfolioIcon","unDeletePortfolio","unsharePortfolio","unsharePolicy","updatePortfolio","PortfolioApiFp","PortfolioApiFactory","PortfolioApi","PortfolioItemApiAxiosParamCreator","addPortfolioItemTag","createPortfolioItem","destroyPortfolioItem","getPortfolioItemNextName","destinationPortfolioId","listPortfolioItemTags","listPortfolioItems","listProviderControlParameters","listServicePlans","postCopyPortfolioItem","copyPortfolioItem","removePortfolioItemTags","showPortfolioItem","showPortfolioItemIcon","unDeletePortfolioItem","updatePortfolioItem","portfolioItem","PortfolioItemApiFp","PortfolioItemApiFactory","PortfolioItemApi","ServicePlansApiAxiosParamCreator","createServicePlan","importServicePlan","patchServicePlanModified","patchModifiedServicePlan","resetServicePlanModified","showServicePlan","showServicePlanBase","showServicePlanModified","ServicePlansApiFp","ServicePlansApiFactory","ServicePlansApi","SettingsApiAxiosParamCreator","createSetting","setting","destroySetting","name","listSettings","showSetting","updateSetting","SettingsApiFp","SettingsApiFactory","SettingsApi","TagsApiAxiosParamCreator","listTags","TagsApiFp","TagsApiFactory","TagsApi","TenantApiAxiosParamCreator","listTenants","showTenant","tenantId","tenantSeed","TenantApiFp","TenantApiFactory","TenantApi"],"mappings":"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","file":"js/lib~App~47974c6d.abb2faf21bd9b961c69b.js","sourcesContent":["\"use strict\";\n// tslint:disable\n/**\n * Catalog API\n * This API gets and orders catalog items from different cloud sources.\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: support@redhat.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar globalImportUrl = require(\"url\");\nvar axios_1 = require(\"axios\");\n// Some imports not used depending on template conditions\n// @ts-ignore\nvar base_1 = require(\"./base\");\n/**\n    * @export\n    * @enum {string}\n    */\nvar ApprovalRequestStateEnum;\n(function (ApprovalRequestStateEnum) {\n    ApprovalRequestStateEnum[\"Undecided\"] = \"undecided\";\n    ApprovalRequestStateEnum[\"Approved\"] = \"approved\";\n    ApprovalRequestStateEnum[\"Denied\"] = \"denied\";\n    ApprovalRequestStateEnum[\"Canceled\"] = \"canceled\";\n})(ApprovalRequestStateEnum = exports.ApprovalRequestStateEnum || (exports.ApprovalRequestStateEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar OrderStateEnum;\n(function (OrderStateEnum) {\n    OrderStateEnum[\"Created\"] = \"Created\";\n    OrderStateEnum[\"ApprovalPending\"] = \"Approval Pending\";\n    OrderStateEnum[\"Ordered\"] = \"Ordered\";\n    OrderStateEnum[\"Failed\"] = \"Failed\";\n    OrderStateEnum[\"Completed\"] = \"Completed\";\n    OrderStateEnum[\"Canceled\"] = \"Canceled\";\n})(OrderStateEnum = exports.OrderStateEnum || (exports.OrderStateEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar OrderItemStateEnum;\n(function (OrderItemStateEnum) {\n    OrderItemStateEnum[\"Created\"] = \"Created\";\n    OrderItemStateEnum[\"ApprovalPending\"] = \"Approval Pending\";\n    OrderItemStateEnum[\"Ordered\"] = \"Ordered\";\n    OrderItemStateEnum[\"Failed\"] = \"Failed\";\n    OrderItemStateEnum[\"Completed\"] = \"Completed\";\n    OrderItemStateEnum[\"Approved\"] = \"Approved\";\n    OrderItemStateEnum[\"Denied\"] = \"Denied\";\n})(OrderItemStateEnum = exports.OrderItemStateEnum || (exports.OrderItemStateEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar ProgressMessageLevelEnum;\n(function (ProgressMessageLevelEnum) {\n    ProgressMessageLevelEnum[\"Info\"] = \"info\";\n    ProgressMessageLevelEnum[\"Error\"] = \"error\";\n    ProgressMessageLevelEnum[\"Warning\"] = \"warning\";\n    ProgressMessageLevelEnum[\"Debug\"] = \"debug\";\n})(ProgressMessageLevelEnum = exports.ProgressMessageLevelEnum || (exports.ProgressMessageLevelEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar ShareInfoPermissionsEnum;\n(function (ShareInfoPermissionsEnum) {\n    ShareInfoPermissionsEnum[\"Read\"] = \"read\";\n    ShareInfoPermissionsEnum[\"Update\"] = \"update\";\n    ShareInfoPermissionsEnum[\"Delete\"] = \"delete\";\n    ShareInfoPermissionsEnum[\"Order\"] = \"order\";\n})(ShareInfoPermissionsEnum = exports.ShareInfoPermissionsEnum || (exports.ShareInfoPermissionsEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar SharePolicyPermissionsEnum;\n(function (SharePolicyPermissionsEnum) {\n    SharePolicyPermissionsEnum[\"Read\"] = \"read\";\n    SharePolicyPermissionsEnum[\"Update\"] = \"update\";\n    SharePolicyPermissionsEnum[\"Delete\"] = \"delete\";\n    SharePolicyPermissionsEnum[\"Order\"] = \"order\";\n})(SharePolicyPermissionsEnum = exports.SharePolicyPermissionsEnum || (exports.SharePolicyPermissionsEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar UnsharePolicyPermissionsEnum;\n(function (UnsharePolicyPermissionsEnum) {\n    UnsharePolicyPermissionsEnum[\"Read\"] = \"read\";\n    UnsharePolicyPermissionsEnum[\"Update\"] = \"update\";\n    UnsharePolicyPermissionsEnum[\"Delete\"] = \"delete\";\n    UnsharePolicyPermissionsEnum[\"Order\"] = \"order\";\n})(UnsharePolicyPermissionsEnum = exports.UnsharePolicyPermissionsEnum || (exports.UnsharePolicyPermissionsEnum = {}));\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexports.DefaultApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Return this API document in JSON format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDocumentation: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/openapi.json\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Performs a GraphQL Query\n         * @summary Perform a GraphQL Query\n         * @param {GraphQLRequest} graphQLRequest GraphQL Query Request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postGraphQL: function (graphQLRequest, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'graphQLRequest' is not null or undefined\n            if (graphQLRequest === null || graphQLRequest === undefined) {\n                throw new base_1.RequiredError('graphQLRequest', 'Required parameter graphQLRequest was null or undefined when calling postGraphQL.');\n            }\n            var localVarPath = \"/graphql\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof graphQLRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(graphQLRequest !== undefined ? graphQLRequest : {}) : (graphQLRequest || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexports.DefaultApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Return this API document in JSON format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDocumentation: function (options) {\n            var localVarAxiosArgs = exports.DefaultApiAxiosParamCreator(configuration).getDocumentation(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Performs a GraphQL Query\n         * @summary Perform a GraphQL Query\n         * @param {GraphQLRequest} graphQLRequest GraphQL Query Request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postGraphQL: function (graphQLRequest, options) {\n            var localVarAxiosArgs = exports.DefaultApiAxiosParamCreator(configuration).postGraphQL(graphQLRequest, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * DefaultApi - factory interface\n * @export\n */\nexports.DefaultApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Return this API document in JSON format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDocumentation: function (options) {\n            return exports.DefaultApiFp(configuration).getDocumentation(options)(axios, basePath);\n        },\n        /**\n         * Performs a GraphQL Query\n         * @summary Perform a GraphQL Query\n         * @param {GraphQLRequest} graphQLRequest GraphQL Query Request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postGraphQL: function (graphQLRequest, options) {\n            return exports.DefaultApiFp(configuration).postGraphQL(graphQLRequest, options)(axios, basePath);\n        },\n    };\n};\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nvar DefaultApi = /** @class */ (function (_super) {\n    __extends(DefaultApi, _super);\n    function DefaultApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Return this API document in JSON format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    DefaultApi.prototype.getDocumentation = function (options) {\n        return exports.DefaultApiFp(this.configuration).getDocumentation(options)(this.axios, this.basePath);\n    };\n    /**\n     * Performs a GraphQL Query\n     * @summary Perform a GraphQL Query\n     * @param {GraphQLRequest} graphQLRequest GraphQL Query Request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    DefaultApi.prototype.postGraphQL = function (graphQLRequest, options) {\n        return exports.DefaultApiFp(this.configuration).postGraphQL(graphQLRequest, options)(this.axios, this.basePath);\n    };\n    return DefaultApi;\n}(base_1.BaseAPI));\nexports.DefaultApi = DefaultApi;\n/**\n * IconApi - axios parameter creator\n * @export\n */\nexports.IconApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Creates an Icon from the specified parameters\n         * @summary Create an Icon\n         * @param {any} [content] The binary image contents, maximum size is 250KB\n         * @param {string} [portfolioId] The Portfolio this Icon belongs to\n         * @param {string} [portfolioItemId] The Portfolio Item this Icon belongs to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createIcon: function (content, portfolioId, portfolioItemId, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/icons\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            var localVarFormParams = new FormData();\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (content !== undefined) {\n                localVarFormParams.append('content', content);\n            }\n            if (portfolioId !== undefined) {\n                localVarFormParams.append('portfolio_id', portfolioId);\n            }\n            if (portfolioItemId !== undefined) {\n                localVarFormParams.append('portfolio_item_id', portfolioItemId);\n            }\n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = localVarFormParams;\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deletes the icon based on the icon ID passed\n         * @summary Delete an existing Icon\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyIcon: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling destroyIcon.');\n            }\n            var localVarPath = \"/icons/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch an Icon by ID\n         * @summary Fetch an Icon by ID\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIcon: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getIcon.');\n            }\n            var localVarPath = \"/icons/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch the specified portfolio item\\'s icon image.\n         * @summary Fetches the specified icon\\'s image\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showIconData: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showIconData.');\n            }\n            var localVarPath = \"/icons/{id}/icon_data\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Edits Icon specified by the given ID.\n         * @summary Edit an existing Icon\n         * @param {string} id ID of the resource\n         * @param {Icon} icon Parameters needed to update an Icon\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateIcon: function (id, icon, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling updateIcon.');\n            }\n            // verify required parameter 'icon' is not null or undefined\n            if (icon === null || icon === undefined) {\n                throw new base_1.RequiredError('icon', 'Required parameter icon was null or undefined when calling updateIcon.');\n            }\n            var localVarPath = \"/icons/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof icon !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(icon !== undefined ? icon : {}) : (icon || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * IconApi - functional programming interface\n * @export\n */\nexports.IconApiFp = function (configuration) {\n    return {\n        /**\n         * Creates an Icon from the specified parameters\n         * @summary Create an Icon\n         * @param {any} [content] The binary image contents, maximum size is 250KB\n         * @param {string} [portfolioId] The Portfolio this Icon belongs to\n         * @param {string} [portfolioItemId] The Portfolio Item this Icon belongs to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createIcon: function (content, portfolioId, portfolioItemId, options) {\n            var localVarAxiosArgs = exports.IconApiAxiosParamCreator(configuration).createIcon(content, portfolioId, portfolioItemId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Deletes the icon based on the icon ID passed\n         * @summary Delete an existing Icon\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyIcon: function (id, options) {\n            var localVarAxiosArgs = exports.IconApiAxiosParamCreator(configuration).destroyIcon(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Fetch an Icon by ID\n         * @summary Fetch an Icon by ID\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIcon: function (id, options) {\n            var localVarAxiosArgs = exports.IconApiAxiosParamCreator(configuration).getIcon(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Fetch the specified portfolio item\\'s icon image.\n         * @summary Fetches the specified icon\\'s image\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showIconData: function (id, options) {\n            var localVarAxiosArgs = exports.IconApiAxiosParamCreator(configuration).showIconData(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Edits Icon specified by the given ID.\n         * @summary Edit an existing Icon\n         * @param {string} id ID of the resource\n         * @param {Icon} icon Parameters needed to update an Icon\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateIcon: function (id, icon, options) {\n            var localVarAxiosArgs = exports.IconApiAxiosParamCreator(configuration).updateIcon(id, icon, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * IconApi - factory interface\n * @export\n */\nexports.IconApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Creates an Icon from the specified parameters\n         * @summary Create an Icon\n         * @param {any} [content] The binary image contents, maximum size is 250KB\n         * @param {string} [portfolioId] The Portfolio this Icon belongs to\n         * @param {string} [portfolioItemId] The Portfolio Item this Icon belongs to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createIcon: function (content, portfolioId, portfolioItemId, options) {\n            return exports.IconApiFp(configuration).createIcon(content, portfolioId, portfolioItemId, options)(axios, basePath);\n        },\n        /**\n         * Deletes the icon based on the icon ID passed\n         * @summary Delete an existing Icon\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyIcon: function (id, options) {\n            return exports.IconApiFp(configuration).destroyIcon(id, options)(axios, basePath);\n        },\n        /**\n         * Fetch an Icon by ID\n         * @summary Fetch an Icon by ID\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIcon: function (id, options) {\n            return exports.IconApiFp(configuration).getIcon(id, options)(axios, basePath);\n        },\n        /**\n         * Fetch the specified portfolio item\\'s icon image.\n         * @summary Fetches the specified icon\\'s image\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showIconData: function (id, options) {\n            return exports.IconApiFp(configuration).showIconData(id, options)(axios, basePath);\n        },\n        /**\n         * Edits Icon specified by the given ID.\n         * @summary Edit an existing Icon\n         * @param {string} id ID of the resource\n         * @param {Icon} icon Parameters needed to update an Icon\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateIcon: function (id, icon, options) {\n            return exports.IconApiFp(configuration).updateIcon(id, icon, options)(axios, basePath);\n        },\n    };\n};\n/**\n * IconApi - object-oriented interface\n * @export\n * @class IconApi\n * @extends {BaseAPI}\n */\nvar IconApi = /** @class */ (function (_super) {\n    __extends(IconApi, _super);\n    function IconApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Creates an Icon from the specified parameters\n     * @summary Create an Icon\n     * @param {any} [content] The binary image contents, maximum size is 250KB\n     * @param {string} [portfolioId] The Portfolio this Icon belongs to\n     * @param {string} [portfolioItemId] The Portfolio Item this Icon belongs to\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IconApi\n     */\n    IconApi.prototype.createIcon = function (content, portfolioId, portfolioItemId, options) {\n        return exports.IconApiFp(this.configuration).createIcon(content, portfolioId, portfolioItemId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Deletes the icon based on the icon ID passed\n     * @summary Delete an existing Icon\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IconApi\n     */\n    IconApi.prototype.destroyIcon = function (id, options) {\n        return exports.IconApiFp(this.configuration).destroyIcon(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Fetch an Icon by ID\n     * @summary Fetch an Icon by ID\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IconApi\n     */\n    IconApi.prototype.getIcon = function (id, options) {\n        return exports.IconApiFp(this.configuration).getIcon(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Fetch the specified portfolio item\\'s icon image.\n     * @summary Fetches the specified icon\\'s image\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IconApi\n     */\n    IconApi.prototype.showIconData = function (id, options) {\n        return exports.IconApiFp(this.configuration).showIconData(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Edits Icon specified by the given ID.\n     * @summary Edit an existing Icon\n     * @param {string} id ID of the resource\n     * @param {Icon} icon Parameters needed to update an Icon\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IconApi\n     */\n    IconApi.prototype.updateIcon = function (id, icon, options) {\n        return exports.IconApiFp(this.configuration).updateIcon(id, icon, options)(this.axios, this.basePath);\n    };\n    return IconApi;\n}(base_1.BaseAPI));\nexports.IconApi = IconApi;\n/**\n * OrderApi - axios parameter creator\n * @export\n */\nexports.OrderApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Adds an order item to an order in pending state\n         * @summary Add an order item to an order in pending state\n         * @param {string} orderId The Order ID\n         * @param {OrderItem} orderItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addToOrder: function (orderId, orderItem, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling addToOrder.');\n            }\n            // verify required parameter 'orderItem' is not null or undefined\n            if (orderItem === null || orderItem === undefined) {\n                throw new base_1.RequiredError('orderItem', 'Required parameter orderItem was null or undefined when calling addToOrder.');\n            }\n            var localVarPath = \"/orders/{order_id}/order_items\"\n                .replace(\"{\" + \"order_id\" + \"}\", encodeURIComponent(String(orderId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof orderItem !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderItem !== undefined ? orderItem : {}) : (orderItem || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an updated order.\n         * @summary Cancels a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancelOrder: function (orderId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling cancelOrder.');\n            }\n            var localVarPath = \"/orders/{order_id}/cancel\"\n                .replace(\"{\" + \"order_id\" + \"}\", encodeURIComponent(String(orderId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new order.\n         * @summary Create a new order\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createOrder: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/orders\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deletes the Order based on order ID passed\n         * @summary Delete an existing Order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrder: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling destroyOrder.');\n            }\n            var localVarPath = \"/orders/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of items associated with an order.\n         * @summary Gets a list of items in a given order\n         * @param {string} orderId The Order ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItemsFromOrder: function (orderId, limit, offset, filter, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling listOrderItemsFromOrder.');\n            }\n            var localVarPath = \"/orders/{order_id}/order_items\"\n                .replace(\"{\" + \"order_id\" + \"}\", encodeURIComponent(String(orderId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of orders associated with the logged in user.\n         * @summary Get a list of orders\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrders: function (limit, offset, filter, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/orders\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Restores the order specified by the order ID.\n         * @summary Restore specific Order\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrder: function (id, restoreKey, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling restoreOrder.');\n            }\n            // verify required parameter 'restoreKey' is not null or undefined\n            if (restoreKey === null || restoreKey === undefined) {\n                throw new base_1.RequiredError('restoreKey', 'Required parameter restoreKey was null or undefined when calling restoreOrder.');\n            }\n            var localVarPath = \"/orders/{id}/restore\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof restoreKey !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(restoreKey !== undefined ? restoreKey : {}) : (restoreKey || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a specific order based on the order ID\n         * @summary Get a specific order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrder: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showOrder.');\n            }\n            var localVarPath = \"/orders/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets an order item associated with an order.\n         * @summary Gets an individual order item from a given order\n         * @param {string} orderId The Order ID\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItemFromOrder: function (orderId, id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling showOrderItemFromOrder.');\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showOrderItemFromOrder.');\n            }\n            var localVarPath = \"/orders/{order_id}/order_items/{id}\"\n                .replace(\"{\" + \"order_id\" + \"}\", encodeURIComponent(String(orderId)))\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an updated order.\n         * @summary Submit a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitOrder: function (orderId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling submitOrder.');\n            }\n            var localVarPath = \"/orders/{order_id}/submit_order\"\n                .replace(\"{\" + \"order_id\" + \"}\", encodeURIComponent(String(orderId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * OrderApi - functional programming interface\n * @export\n */\nexports.OrderApiFp = function (configuration) {\n    return {\n        /**\n         * Adds an order item to an order in pending state\n         * @summary Add an order item to an order in pending state\n         * @param {string} orderId The Order ID\n         * @param {OrderItem} orderItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addToOrder: function (orderId, orderItem, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).addToOrder(orderId, orderItem, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns an updated order.\n         * @summary Cancels a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancelOrder: function (orderId, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).cancelOrder(orderId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Creates a new order.\n         * @summary Create a new order\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createOrder: function (options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).createOrder(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Deletes the Order based on order ID passed\n         * @summary Delete an existing Order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrder: function (id, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).destroyOrder(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of items associated with an order.\n         * @summary Gets a list of items in a given order\n         * @param {string} orderId The Order ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItemsFromOrder: function (orderId, limit, offset, filter, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).listOrderItemsFromOrder(orderId, limit, offset, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of orders associated with the logged in user.\n         * @summary Get a list of orders\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrders: function (limit, offset, filter, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).listOrders(limit, offset, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Restores the order specified by the order ID.\n         * @summary Restore specific Order\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrder: function (id, restoreKey, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).restoreOrder(id, restoreKey, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get a specific order based on the order ID\n         * @summary Get a specific order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrder: function (id, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).showOrder(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets an order item associated with an order.\n         * @summary Gets an individual order item from a given order\n         * @param {string} orderId The Order ID\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItemFromOrder: function (orderId, id, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).showOrderItemFromOrder(orderId, id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns an updated order.\n         * @summary Submit a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitOrder: function (orderId, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).submitOrder(orderId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * OrderApi - factory interface\n * @export\n */\nexports.OrderApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Adds an order item to an order in pending state\n         * @summary Add an order item to an order in pending state\n         * @param {string} orderId The Order ID\n         * @param {OrderItem} orderItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addToOrder: function (orderId, orderItem, options) {\n            return exports.OrderApiFp(configuration).addToOrder(orderId, orderItem, options)(axios, basePath);\n        },\n        /**\n         * Returns an updated order.\n         * @summary Cancels a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancelOrder: function (orderId, options) {\n            return exports.OrderApiFp(configuration).cancelOrder(orderId, options)(axios, basePath);\n        },\n        /**\n         * Creates a new order.\n         * @summary Create a new order\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createOrder: function (options) {\n            return exports.OrderApiFp(configuration).createOrder(options)(axios, basePath);\n        },\n        /**\n         * Deletes the Order based on order ID passed\n         * @summary Delete an existing Order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrder: function (id, options) {\n            return exports.OrderApiFp(configuration).destroyOrder(id, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of items associated with an order.\n         * @summary Gets a list of items in a given order\n         * @param {string} orderId The Order ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItemsFromOrder: function (orderId, limit, offset, filter, options) {\n            return exports.OrderApiFp(configuration).listOrderItemsFromOrder(orderId, limit, offset, filter, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of orders associated with the logged in user.\n         * @summary Get a list of orders\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrders: function (limit, offset, filter, options) {\n            return exports.OrderApiFp(configuration).listOrders(limit, offset, filter, options)(axios, basePath);\n        },\n        /**\n         * Restores the order specified by the order ID.\n         * @summary Restore specific Order\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrder: function (id, restoreKey, options) {\n            return exports.OrderApiFp(configuration).restoreOrder(id, restoreKey, options)(axios, basePath);\n        },\n        /**\n         * Get a specific order based on the order ID\n         * @summary Get a specific order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrder: function (id, options) {\n            return exports.OrderApiFp(configuration).showOrder(id, options)(axios, basePath);\n        },\n        /**\n         * Gets an order item associated with an order.\n         * @summary Gets an individual order item from a given order\n         * @param {string} orderId The Order ID\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItemFromOrder: function (orderId, id, options) {\n            return exports.OrderApiFp(configuration).showOrderItemFromOrder(orderId, id, options)(axios, basePath);\n        },\n        /**\n         * Returns an updated order.\n         * @summary Submit a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitOrder: function (orderId, options) {\n            return exports.OrderApiFp(configuration).submitOrder(orderId, options)(axios, basePath);\n        },\n    };\n};\n/**\n * OrderApi - object-oriented interface\n * @export\n * @class OrderApi\n * @extends {BaseAPI}\n */\nvar OrderApi = /** @class */ (function (_super) {\n    __extends(OrderApi, _super);\n    function OrderApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Adds an order item to an order in pending state\n     * @summary Add an order item to an order in pending state\n     * @param {string} orderId The Order ID\n     * @param {OrderItem} orderItem\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.addToOrder = function (orderId, orderItem, options) {\n        return exports.OrderApiFp(this.configuration).addToOrder(orderId, orderItem, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns an updated order.\n     * @summary Cancels a given order\n     * @param {string} orderId The Order ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.cancelOrder = function (orderId, options) {\n        return exports.OrderApiFp(this.configuration).cancelOrder(orderId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Creates a new order.\n     * @summary Create a new order\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.createOrder = function (options) {\n        return exports.OrderApiFp(this.configuration).createOrder(options)(this.axios, this.basePath);\n    };\n    /**\n     * Deletes the Order based on order ID passed\n     * @summary Delete an existing Order\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.destroyOrder = function (id, options) {\n        return exports.OrderApiFp(this.configuration).destroyOrder(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of items associated with an order.\n     * @summary Gets a list of items in a given order\n     * @param {string} orderId The Order ID\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.listOrderItemsFromOrder = function (orderId, limit, offset, filter, options) {\n        return exports.OrderApiFp(this.configuration).listOrderItemsFromOrder(orderId, limit, offset, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of orders associated with the logged in user.\n     * @summary Get a list of orders\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.listOrders = function (limit, offset, filter, options) {\n        return exports.OrderApiFp(this.configuration).listOrders(limit, offset, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Restores the order specified by the order ID.\n     * @summary Restore specific Order\n     * @param {string} id ID of the resource\n     * @param {RestoreKey} restoreKey\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.restoreOrder = function (id, restoreKey, options) {\n        return exports.OrderApiFp(this.configuration).restoreOrder(id, restoreKey, options)(this.axios, this.basePath);\n    };\n    /**\n     * Get a specific order based on the order ID\n     * @summary Get a specific order\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.showOrder = function (id, options) {\n        return exports.OrderApiFp(this.configuration).showOrder(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets an order item associated with an order.\n     * @summary Gets an individual order item from a given order\n     * @param {string} orderId The Order ID\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.showOrderItemFromOrder = function (orderId, id, options) {\n        return exports.OrderApiFp(this.configuration).showOrderItemFromOrder(orderId, id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns an updated order.\n     * @summary Submit a given order\n     * @param {string} orderId The Order ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.submitOrder = function (orderId, options) {\n        return exports.OrderApiFp(this.configuration).submitOrder(orderId, options)(this.axios, this.basePath);\n    };\n    return OrderApi;\n}(base_1.BaseAPI));\nexports.OrderApi = OrderApi;\n/**\n * OrderItemApi - axios parameter creator\n * @export\n */\nexports.OrderItemApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Deletes the order item  based on order item ID passed\n         * @summary Delete an existing OrderItem\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrderItem: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling destroyOrderItem.');\n            }\n            var localVarPath = \"/order_items/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of approval request associated with an order item. As the item is being approved one can check the status of the approvals.\n         * @summary Gets a list of approval requests for an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listApprovalRequests: function (orderItemId, limit, offset, filter, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderItemId' is not null or undefined\n            if (orderItemId === null || orderItemId === undefined) {\n                throw new base_1.RequiredError('orderItemId', 'Required parameter orderItemId was null or undefined when calling listApprovalRequests.');\n            }\n            var localVarPath = \"/order_items/{order_item_id}/approval_requests\"\n                .replace(\"{\" + \"order_item_id\" + \"}\", encodeURIComponent(String(orderItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of order items.\n         * @summary List Order Items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItems: function (limit, offset, filter, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/order_items\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of progress messages associated with an order item. As the item is being processed the provider can update the progress messages.\n         * @summary Gets a list of progress messages in an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProgressMessages: function (orderItemId, limit, offset, filter, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderItemId' is not null or undefined\n            if (orderItemId === null || orderItemId === undefined) {\n                throw new base_1.RequiredError('orderItemId', 'Required parameter orderItemId was null or undefined when calling listProgressMessages.');\n            }\n            var localVarPath = \"/order_items/{order_item_id}/progress_messages\"\n                .replace(\"{\" + \"order_item_id\" + \"}\", encodeURIComponent(String(orderItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Restores the order item specified by the order item ID.\n         * @summary Restore specific Order item\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrderItem: function (id, restoreKey, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling restoreOrderItem.');\n            }\n            // verify required parameter 'restoreKey' is not null or undefined\n            if (restoreKey === null || restoreKey === undefined) {\n                throw new base_1.RequiredError('restoreKey', 'Required parameter restoreKey was null or undefined when calling restoreOrderItem.');\n            }\n            var localVarPath = \"/order_items/{id}/restore\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof restoreKey !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(restoreKey !== undefined ? restoreKey : {}) : (restoreKey || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a specific order item based on the order item ID passed\n         * @summary Gets a specific order item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItem: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showOrderItem.');\n            }\n            var localVarPath = \"/order_items/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * OrderItemApi - functional programming interface\n * @export\n */\nexports.OrderItemApiFp = function (configuration) {\n    return {\n        /**\n         * Deletes the order item  based on order item ID passed\n         * @summary Delete an existing OrderItem\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrderItem: function (id, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).destroyOrderItem(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of approval request associated with an order item. As the item is being approved one can check the status of the approvals.\n         * @summary Gets a list of approval requests for an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listApprovalRequests: function (orderItemId, limit, offset, filter, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).listApprovalRequests(orderItemId, limit, offset, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of order items.\n         * @summary List Order Items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItems: function (limit, offset, filter, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).listOrderItems(limit, offset, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of progress messages associated with an order item. As the item is being processed the provider can update the progress messages.\n         * @summary Gets a list of progress messages in an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProgressMessages: function (orderItemId, limit, offset, filter, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).listProgressMessages(orderItemId, limit, offset, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Restores the order item specified by the order item ID.\n         * @summary Restore specific Order item\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrderItem: function (id, restoreKey, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).restoreOrderItem(id, restoreKey, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a specific order item based on the order item ID passed\n         * @summary Gets a specific order item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItem: function (id, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).showOrderItem(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * OrderItemApi - factory interface\n * @export\n */\nexports.OrderItemApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Deletes the order item  based on order item ID passed\n         * @summary Delete an existing OrderItem\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrderItem: function (id, options) {\n            return exports.OrderItemApiFp(configuration).destroyOrderItem(id, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of approval request associated with an order item. As the item is being approved one can check the status of the approvals.\n         * @summary Gets a list of approval requests for an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listApprovalRequests: function (orderItemId, limit, offset, filter, options) {\n            return exports.OrderItemApiFp(configuration).listApprovalRequests(orderItemId, limit, offset, filter, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of order items.\n         * @summary List Order Items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItems: function (limit, offset, filter, options) {\n            return exports.OrderItemApiFp(configuration).listOrderItems(limit, offset, filter, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of progress messages associated with an order item. As the item is being processed the provider can update the progress messages.\n         * @summary Gets a list of progress messages in an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProgressMessages: function (orderItemId, limit, offset, filter, options) {\n            return exports.OrderItemApiFp(configuration).listProgressMessages(orderItemId, limit, offset, filter, options)(axios, basePath);\n        },\n        /**\n         * Restores the order item specified by the order item ID.\n         * @summary Restore specific Order item\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrderItem: function (id, restoreKey, options) {\n            return exports.OrderItemApiFp(configuration).restoreOrderItem(id, restoreKey, options)(axios, basePath);\n        },\n        /**\n         * Gets a specific order item based on the order item ID passed\n         * @summary Gets a specific order item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItem: function (id, options) {\n            return exports.OrderItemApiFp(configuration).showOrderItem(id, options)(axios, basePath);\n        },\n    };\n};\n/**\n * OrderItemApi - object-oriented interface\n * @export\n * @class OrderItemApi\n * @extends {BaseAPI}\n */\nvar OrderItemApi = /** @class */ (function (_super) {\n    __extends(OrderItemApi, _super);\n    function OrderItemApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Deletes the order item  based on order item ID passed\n     * @summary Delete an existing OrderItem\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.destroyOrderItem = function (id, options) {\n        return exports.OrderItemApiFp(this.configuration).destroyOrderItem(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of approval request associated with an order item. As the item is being approved one can check the status of the approvals.\n     * @summary Gets a list of approval requests for an item\n     * @param {string} orderItemId The Order Item ID\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.listApprovalRequests = function (orderItemId, limit, offset, filter, options) {\n        return exports.OrderItemApiFp(this.configuration).listApprovalRequests(orderItemId, limit, offset, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of order items.\n     * @summary List Order Items\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.listOrderItems = function (limit, offset, filter, options) {\n        return exports.OrderItemApiFp(this.configuration).listOrderItems(limit, offset, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of progress messages associated with an order item. As the item is being processed the provider can update the progress messages.\n     * @summary Gets a list of progress messages in an item\n     * @param {string} orderItemId The Order Item ID\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.listProgressMessages = function (orderItemId, limit, offset, filter, options) {\n        return exports.OrderItemApiFp(this.configuration).listProgressMessages(orderItemId, limit, offset, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Restores the order item specified by the order item ID.\n     * @summary Restore specific Order item\n     * @param {string} id ID of the resource\n     * @param {RestoreKey} restoreKey\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.restoreOrderItem = function (id, restoreKey, options) {\n        return exports.OrderItemApiFp(this.configuration).restoreOrderItem(id, restoreKey, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a specific order item based on the order item ID passed\n     * @summary Gets a specific order item\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.showOrderItem = function (id, options) {\n        return exports.OrderItemApiFp(this.configuration).showOrderItem(id, options)(this.axios, this.basePath);\n    };\n    return OrderItemApi;\n}(base_1.BaseAPI));\nexports.OrderItemApi = OrderItemApi;\n/**\n * PortfolioApi - axios parameter creator\n * @export\n */\nexports.PortfolioApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Adds a single tag to Portfolio object\n         * @summary Add Tag for Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioTag: function (id, tag, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling addPortfolioTag.');\n            }\n            // verify required parameter 'tag' is not null or undefined\n            if (tag === null || tag === undefined) {\n                throw new base_1.RequiredError('tag', 'Required parameter tag was null or undefined when calling addPortfolioTag.');\n            }\n            var localVarPath = \"/portfolios/{id}/tag\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof tag !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(tag !== undefined ? tag : {}) : (tag || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Adds a portfolio.\n         * @summary Add a new portfolio\n         * @param {Portfolio} portfolio Parameters needed to add a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolio: function (portfolio, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolio' is not null or undefined\n            if (portfolio === null || portfolio === undefined) {\n                throw new base_1.RequiredError('portfolio', 'Required parameter portfolio was null or undefined when calling createPortfolio.');\n            }\n            var localVarPath = \"/portfolios\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof portfolio !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(portfolio !== undefined ? portfolio : {}) : (portfolio || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deletes the portfolio specified by the ID.\n         * @summary Delete an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolio: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling destroyPortfolio.');\n            }\n            var localVarPath = \"/portfolios/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets all portfilio items in the portfolio specified by the given ID.\n         * @summary Get all portfolio items from a specific portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchPortfolioItemsWithPortfolio: function (portfolioId, limit, offset, filter, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new base_1.RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling fetchPortfolioItemsWithPortfolio.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/portfolio_items\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioTags: function (id, limit, offset, filter, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling listPortfolioTags.');\n            }\n            var localVarPath = \"/portfolios/{id}/tags\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of portfolios.\n         * @summary List portfolios\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolios: function (limit, offset, filter, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/portfolios\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Make a copy of the Portfolio.\n         * @summary Make a copy of the Portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolio: function (portfolioId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new base_1.RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling postCopyPortfolio.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/copy\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Remove Tags from Portfolio\n         * @summary Remove Tags from Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioTags: function (id, tag, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling removePortfolioTags.');\n            }\n            // verify required parameter 'tag' is not null or undefined\n            if (tag === null || tag === undefined) {\n                throw new base_1.RequiredError('tag', 'Required parameter tag was null or undefined when calling removePortfolioTags.');\n            }\n            var localVarPath = \"/portfolios/{id}/untag\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof tag !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(tag !== undefined ? tag : {}) : (tag || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch share information about a portfolio\n         * @summary Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        shareInfo: function (portfolioId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new base_1.RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling shareInfo.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/share_info\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Share a Portfolio with one or more groups with specific permissions\n         * @summary Share a portfolio with one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {SharePolicy} sharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sharePortfolio: function (portfolioId, sharePolicy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new base_1.RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling sharePortfolio.');\n            }\n            // verify required parameter 'sharePolicy' is not null or undefined\n            if (sharePolicy === null || sharePolicy === undefined) {\n                throw new base_1.RequiredError('sharePolicy', 'Required parameter sharePolicy was null or undefined when calling sharePortfolio.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/share\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof sharePolicy !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(sharePolicy !== undefined ? sharePolicy : {}) : (sharePolicy || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets the portfolio specified by the portfolio ID.\n         * @summary Get a specific portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolio: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showPortfolio.');\n            }\n            var localVarPath = \"/portfolios/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch the specified portfolio\\'s icon image.\n         * @summary Fetches the specified portfolio\\'s icon image\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioIcon: function (portfolioId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new base_1.RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling showPortfolioIcon.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/icon\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Undeletes the portfolio specified by the portfolio ID.\n         * @summary Undelete specific portfolio\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolio: function (id, restoreKey, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling unDeletePortfolio.');\n            }\n            // verify required parameter 'restoreKey' is not null or undefined\n            if (restoreKey === null || restoreKey === undefined) {\n                throw new base_1.RequiredError('restoreKey', 'Required parameter restoreKey was null or undefined when calling unDeletePortfolio.');\n            }\n            var localVarPath = \"/portfolios/{id}/undelete\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof restoreKey !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(restoreKey !== undefined ? restoreKey : {}) : (restoreKey || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Unshare a Portfolio with one or more groups with specific permissions\n         * @summary Unshare a portfolio from one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {UnsharePolicy} unsharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unsharePortfolio: function (portfolioId, unsharePolicy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new base_1.RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling unsharePortfolio.');\n            }\n            // verify required parameter 'unsharePolicy' is not null or undefined\n            if (unsharePolicy === null || unsharePolicy === undefined) {\n                throw new base_1.RequiredError('unsharePolicy', 'Required parameter unsharePolicy was null or undefined when calling unsharePortfolio.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/unshare\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof unsharePolicy !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(unsharePolicy !== undefined ? unsharePolicy : {}) : (unsharePolicy || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the edited portfolio.\n         * @summary Edit an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {Portfolio} portfolio Parameters needed to update a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolio: function (id, portfolio, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling updatePortfolio.');\n            }\n            // verify required parameter 'portfolio' is not null or undefined\n            if (portfolio === null || portfolio === undefined) {\n                throw new base_1.RequiredError('portfolio', 'Required parameter portfolio was null or undefined when calling updatePortfolio.');\n            }\n            var localVarPath = \"/portfolios/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof portfolio !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(portfolio !== undefined ? portfolio : {}) : (portfolio || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * PortfolioApi - functional programming interface\n * @export\n */\nexports.PortfolioApiFp = function (configuration) {\n    return {\n        /**\n         * Adds a single tag to Portfolio object\n         * @summary Add Tag for Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioTag: function (id, tag, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).addPortfolioTag(id, tag, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Adds a portfolio.\n         * @summary Add a new portfolio\n         * @param {Portfolio} portfolio Parameters needed to add a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolio: function (portfolio, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).createPortfolio(portfolio, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Deletes the portfolio specified by the ID.\n         * @summary Delete an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolio: function (id, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).destroyPortfolio(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets all portfilio items in the portfolio specified by the given ID.\n         * @summary Get all portfolio items from a specific portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchPortfolioItemsWithPortfolio: function (portfolioId, limit, offset, filter, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).fetchPortfolioItemsWithPortfolio(portfolioId, limit, offset, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioTags: function (id, limit, offset, filter, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).listPortfolioTags(id, limit, offset, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of portfolios.\n         * @summary List portfolios\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolios: function (limit, offset, filter, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).listPortfolios(limit, offset, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Make a copy of the Portfolio.\n         * @summary Make a copy of the Portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolio: function (portfolioId, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).postCopyPortfolio(portfolioId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Remove Tags from Portfolio\n         * @summary Remove Tags from Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioTags: function (id, tag, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).removePortfolioTags(id, tag, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Fetch share information about a portfolio\n         * @summary Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        shareInfo: function (portfolioId, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).shareInfo(portfolioId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Share a Portfolio with one or more groups with specific permissions\n         * @summary Share a portfolio with one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {SharePolicy} sharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sharePortfolio: function (portfolioId, sharePolicy, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).sharePortfolio(portfolioId, sharePolicy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets the portfolio specified by the portfolio ID.\n         * @summary Get a specific portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolio: function (id, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).showPortfolio(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Fetch the specified portfolio\\'s icon image.\n         * @summary Fetches the specified portfolio\\'s icon image\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioIcon: function (portfolioId, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).showPortfolioIcon(portfolioId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Undeletes the portfolio specified by the portfolio ID.\n         * @summary Undelete specific portfolio\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolio: function (id, restoreKey, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).unDeletePortfolio(id, restoreKey, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Unshare a Portfolio with one or more groups with specific permissions\n         * @summary Unshare a portfolio from one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {UnsharePolicy} unsharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unsharePortfolio: function (portfolioId, unsharePolicy, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).unsharePortfolio(portfolioId, unsharePolicy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns the edited portfolio.\n         * @summary Edit an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {Portfolio} portfolio Parameters needed to update a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolio: function (id, portfolio, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).updatePortfolio(id, portfolio, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * PortfolioApi - factory interface\n * @export\n */\nexports.PortfolioApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Adds a single tag to Portfolio object\n         * @summary Add Tag for Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioTag: function (id, tag, options) {\n            return exports.PortfolioApiFp(configuration).addPortfolioTag(id, tag, options)(axios, basePath);\n        },\n        /**\n         * Adds a portfolio.\n         * @summary Add a new portfolio\n         * @param {Portfolio} portfolio Parameters needed to add a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolio: function (portfolio, options) {\n            return exports.PortfolioApiFp(configuration).createPortfolio(portfolio, options)(axios, basePath);\n        },\n        /**\n         * Deletes the portfolio specified by the ID.\n         * @summary Delete an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolio: function (id, options) {\n            return exports.PortfolioApiFp(configuration).destroyPortfolio(id, options)(axios, basePath);\n        },\n        /**\n         * Gets all portfilio items in the portfolio specified by the given ID.\n         * @summary Get all portfolio items from a specific portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchPortfolioItemsWithPortfolio: function (portfolioId, limit, offset, filter, options) {\n            return exports.PortfolioApiFp(configuration).fetchPortfolioItemsWithPortfolio(portfolioId, limit, offset, filter, options)(axios, basePath);\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioTags: function (id, limit, offset, filter, options) {\n            return exports.PortfolioApiFp(configuration).listPortfolioTags(id, limit, offset, filter, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of portfolios.\n         * @summary List portfolios\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolios: function (limit, offset, filter, options) {\n            return exports.PortfolioApiFp(configuration).listPortfolios(limit, offset, filter, options)(axios, basePath);\n        },\n        /**\n         * Make a copy of the Portfolio.\n         * @summary Make a copy of the Portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolio: function (portfolioId, options) {\n            return exports.PortfolioApiFp(configuration).postCopyPortfolio(portfolioId, options)(axios, basePath);\n        },\n        /**\n         * Remove Tags from Portfolio\n         * @summary Remove Tags from Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioTags: function (id, tag, options) {\n            return exports.PortfolioApiFp(configuration).removePortfolioTags(id, tag, options)(axios, basePath);\n        },\n        /**\n         * Fetch share information about a portfolio\n         * @summary Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        shareInfo: function (portfolioId, options) {\n            return exports.PortfolioApiFp(configuration).shareInfo(portfolioId, options)(axios, basePath);\n        },\n        /**\n         * Share a Portfolio with one or more groups with specific permissions\n         * @summary Share a portfolio with one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {SharePolicy} sharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sharePortfolio: function (portfolioId, sharePolicy, options) {\n            return exports.PortfolioApiFp(configuration).sharePortfolio(portfolioId, sharePolicy, options)(axios, basePath);\n        },\n        /**\n         * Gets the portfolio specified by the portfolio ID.\n         * @summary Get a specific portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolio: function (id, options) {\n            return exports.PortfolioApiFp(configuration).showPortfolio(id, options)(axios, basePath);\n        },\n        /**\n         * Fetch the specified portfolio\\'s icon image.\n         * @summary Fetches the specified portfolio\\'s icon image\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioIcon: function (portfolioId, options) {\n            return exports.PortfolioApiFp(configuration).showPortfolioIcon(portfolioId, options)(axios, basePath);\n        },\n        /**\n         * Undeletes the portfolio specified by the portfolio ID.\n         * @summary Undelete specific portfolio\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolio: function (id, restoreKey, options) {\n            return exports.PortfolioApiFp(configuration).unDeletePortfolio(id, restoreKey, options)(axios, basePath);\n        },\n        /**\n         * Unshare a Portfolio with one or more groups with specific permissions\n         * @summary Unshare a portfolio from one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {UnsharePolicy} unsharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unsharePortfolio: function (portfolioId, unsharePolicy, options) {\n            return exports.PortfolioApiFp(configuration).unsharePortfolio(portfolioId, unsharePolicy, options)(axios, basePath);\n        },\n        /**\n         * Returns the edited portfolio.\n         * @summary Edit an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {Portfolio} portfolio Parameters needed to update a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolio: function (id, portfolio, options) {\n            return exports.PortfolioApiFp(configuration).updatePortfolio(id, portfolio, options)(axios, basePath);\n        },\n    };\n};\n/**\n * PortfolioApi - object-oriented interface\n * @export\n * @class PortfolioApi\n * @extends {BaseAPI}\n */\nvar PortfolioApi = /** @class */ (function (_super) {\n    __extends(PortfolioApi, _super);\n    function PortfolioApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Adds a single tag to Portfolio object\n     * @summary Add Tag for Portfolio\n     * @param {string} id ID of the resource\n     * @param {Array<Tag>} tag\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.addPortfolioTag = function (id, tag, options) {\n        return exports.PortfolioApiFp(this.configuration).addPortfolioTag(id, tag, options)(this.axios, this.basePath);\n    };\n    /**\n     * Adds a portfolio.\n     * @summary Add a new portfolio\n     * @param {Portfolio} portfolio Parameters needed to add a Portfolio\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.createPortfolio = function (portfolio, options) {\n        return exports.PortfolioApiFp(this.configuration).createPortfolio(portfolio, options)(this.axios, this.basePath);\n    };\n    /**\n     * Deletes the portfolio specified by the ID.\n     * @summary Delete an existing portfolio\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.destroyPortfolio = function (id, options) {\n        return exports.PortfolioApiFp(this.configuration).destroyPortfolio(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets all portfilio items in the portfolio specified by the given ID.\n     * @summary Get all portfolio items from a specific portfolio\n     * @param {string} portfolioId The Portfolio ID\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.fetchPortfolioItemsWithPortfolio = function (portfolioId, limit, offset, filter, options) {\n        return exports.PortfolioApiFp(this.configuration).fetchPortfolioItemsWithPortfolio(portfolioId, limit, offset, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns an array of Tag objects\n     * @summary List Tags for Portfolio\n     * @param {string} id ID of the resource\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.listPortfolioTags = function (id, limit, offset, filter, options) {\n        return exports.PortfolioApiFp(this.configuration).listPortfolioTags(id, limit, offset, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of portfolios.\n     * @summary List portfolios\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.listPortfolios = function (limit, offset, filter, options) {\n        return exports.PortfolioApiFp(this.configuration).listPortfolios(limit, offset, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Make a copy of the Portfolio.\n     * @summary Make a copy of the Portfolio\n     * @param {string} portfolioId The Portfolio ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.postCopyPortfolio = function (portfolioId, options) {\n        return exports.PortfolioApiFp(this.configuration).postCopyPortfolio(portfolioId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Remove Tags from Portfolio\n     * @summary Remove Tags from Portfolio\n     * @param {string} id ID of the resource\n     * @param {Array<Tag>} tag\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.removePortfolioTags = function (id, tag, options) {\n        return exports.PortfolioApiFp(this.configuration).removePortfolioTags(id, tag, options)(this.axios, this.basePath);\n    };\n    /**\n     * Fetch share information about a portfolio\n     * @summary Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group\n     * @param {string} portfolioId The Portfolio ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.shareInfo = function (portfolioId, options) {\n        return exports.PortfolioApiFp(this.configuration).shareInfo(portfolioId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Share a Portfolio with one or more groups with specific permissions\n     * @summary Share a portfolio with one or more groups with specific permission\n     * @param {string} portfolioId The Portfolio ID\n     * @param {SharePolicy} sharePolicy\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.sharePortfolio = function (portfolioId, sharePolicy, options) {\n        return exports.PortfolioApiFp(this.configuration).sharePortfolio(portfolioId, sharePolicy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets the portfolio specified by the portfolio ID.\n     * @summary Get a specific portfolio\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.showPortfolio = function (id, options) {\n        return exports.PortfolioApiFp(this.configuration).showPortfolio(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Fetch the specified portfolio\\'s icon image.\n     * @summary Fetches the specified portfolio\\'s icon image\n     * @param {string} portfolioId The Portfolio ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.showPortfolioIcon = function (portfolioId, options) {\n        return exports.PortfolioApiFp(this.configuration).showPortfolioIcon(portfolioId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Undeletes the portfolio specified by the portfolio ID.\n     * @summary Undelete specific portfolio\n     * @param {string} id ID of the resource\n     * @param {RestoreKey} restoreKey\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.unDeletePortfolio = function (id, restoreKey, options) {\n        return exports.PortfolioApiFp(this.configuration).unDeletePortfolio(id, restoreKey, options)(this.axios, this.basePath);\n    };\n    /**\n     * Unshare a Portfolio with one or more groups with specific permissions\n     * @summary Unshare a portfolio from one or more groups with specific permission\n     * @param {string} portfolioId The Portfolio ID\n     * @param {UnsharePolicy} unsharePolicy\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.unsharePortfolio = function (portfolioId, unsharePolicy, options) {\n        return exports.PortfolioApiFp(this.configuration).unsharePortfolio(portfolioId, unsharePolicy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns the edited portfolio.\n     * @summary Edit an existing portfolio\n     * @param {string} id ID of the resource\n     * @param {Portfolio} portfolio Parameters needed to update a Portfolio\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.updatePortfolio = function (id, portfolio, options) {\n        return exports.PortfolioApiFp(this.configuration).updatePortfolio(id, portfolio, options)(this.axios, this.basePath);\n    };\n    return PortfolioApi;\n}(base_1.BaseAPI));\nexports.PortfolioApi = PortfolioApi;\n/**\n * PortfolioItemApi - axios parameter creator\n * @export\n */\nexports.PortfolioItemApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Adds a single tag to a Portfolio Item object\n         * @summary Add Tag for Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioItemTag: function (id, tag, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling addPortfolioItemTag.');\n            }\n            // verify required parameter 'tag' is not null or undefined\n            if (tag === null || tag === undefined) {\n                throw new base_1.RequiredError('tag', 'Required parameter tag was null or undefined when calling addPortfolioItemTag.');\n            }\n            var localVarPath = \"/portfolio_items/{id}/tag\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof tag !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(tag !== undefined ? tag : {}) : (tag || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Adds a name and description for a portfolio item and returns the newly created portfolio item.\n         * @summary Add a new portfolio item\n         * @param {CreatePortfolioItem} createPortfolioItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolioItem: function (createPortfolioItem, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'createPortfolioItem' is not null or undefined\n            if (createPortfolioItem === null || createPortfolioItem === undefined) {\n                throw new base_1.RequiredError('createPortfolioItem', 'Required parameter createPortfolioItem was null or undefined when calling createPortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof createPortfolioItem !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(createPortfolioItem !== undefined ? createPortfolioItem : {}) : (createPortfolioItem || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deletes the portfolio item based on portfolio item ID passed\n         * @summary Delete an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolioItem: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling destroyPortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the next name for a the Portfolio Item prior to a copy operation\n         * @summary Get the next name for a the Portfolio Item prior to a copy operation\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {string} [destinationPortfolioId] The destination portfolio to compare names against\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPortfolioItemNextName: function (portfolioItemId, destinationPortfolioId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new base_1.RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling getPortfolioItemNextName.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/next_name\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (destinationPortfolioId !== undefined) {\n                localVarQueryParameter['destination_portfolio_id'] = destinationPortfolioId;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio Items\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItemTags: function (id, limit, offset, filter, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling listPortfolioItemTags.');\n            }\n            var localVarPath = \"/portfolio_items/{id}/tags\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of portfolio items.\n         * @summary List all portfolio items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItems: function (limit, offset, filter, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/portfolio_items\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets the provider control parameters for a portfolio item.\n         * @summary Gets the provider control parameters for this portfolio item; requires control paramaters provided when provisioning the portfolio item.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProviderControlParameters: function (portfolioItemId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new base_1.RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling listProviderControlParameters.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/provider_control_parameters\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets all service plans for a portfolio item.\n         * @summary Gets all service plans for a specific portfolio item; requires a connection to the topology service.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServicePlans: function (portfolioItemId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new base_1.RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling listServicePlans.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/service_plans\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Make a copy of the Portfolio Item.\n         * @summary Make a copy of the Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {CopyPortfolioItem} [copyPortfolioItem]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolioItem: function (portfolioItemId, copyPortfolioItem, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new base_1.RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling postCopyPortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/copy\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof copyPortfolioItem !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(copyPortfolioItem !== undefined ? copyPortfolioItem : {}) : (copyPortfolioItem || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Remove Tags from Portfolio Item\n         * @summary Remove Tags from Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioItemTags: function (id, tag, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling removePortfolioItemTags.');\n            }\n            // verify required parameter 'tag' is not null or undefined\n            if (tag === null || tag === undefined) {\n                throw new base_1.RequiredError('tag', 'Required parameter tag was null or undefined when calling removePortfolioItemTags.');\n            }\n            var localVarPath = \"/portfolio_items/{id}/untag\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof tag !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(tag !== undefined ? tag : {}) : (tag || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a specific portfolio item based on the portfolio item ID passed\n         * @summary Gets a specific portfolio item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItem: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showPortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch the specified portfolio item\\'s icon image.\n         * @summary Fetches the specified portfolio item\\'s icon image\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItemIcon: function (portfolioItemId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new base_1.RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling showPortfolioItemIcon.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/icon\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * If a record has been discarded, this operation will undelete it so it can be requested normally.\n         * @summary Undelete a specified Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolioItem: function (portfolioItemId, restoreKey, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new base_1.RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling unDeletePortfolioItem.');\n            }\n            // verify required parameter 'restoreKey' is not null or undefined\n            if (restoreKey === null || restoreKey === undefined) {\n                throw new base_1.RequiredError('restoreKey', 'Required parameter restoreKey was null or undefined when calling unDeletePortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/undelete\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof restoreKey !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(restoreKey !== undefined ? restoreKey : {}) : (restoreKey || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Edits portfolio item specified by the given ID.\n         * @summary Edit an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {PortfolioItem} portfolioItem Parameters needed to update a Portfolio Item\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolioItem: function (id, portfolioItem, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling updatePortfolioItem.');\n            }\n            // verify required parameter 'portfolioItem' is not null or undefined\n            if (portfolioItem === null || portfolioItem === undefined) {\n                throw new base_1.RequiredError('portfolioItem', 'Required parameter portfolioItem was null or undefined when calling updatePortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof portfolioItem !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(portfolioItem !== undefined ? portfolioItem : {}) : (portfolioItem || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * PortfolioItemApi - functional programming interface\n * @export\n */\nexports.PortfolioItemApiFp = function (configuration) {\n    return {\n        /**\n         * Adds a single tag to a Portfolio Item object\n         * @summary Add Tag for Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioItemTag: function (id, tag, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).addPortfolioItemTag(id, tag, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Adds a name and description for a portfolio item and returns the newly created portfolio item.\n         * @summary Add a new portfolio item\n         * @param {CreatePortfolioItem} createPortfolioItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolioItem: function (createPortfolioItem, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).createPortfolioItem(createPortfolioItem, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Deletes the portfolio item based on portfolio item ID passed\n         * @summary Delete an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolioItem: function (id, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).destroyPortfolioItem(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get the next name for a the Portfolio Item prior to a copy operation\n         * @summary Get the next name for a the Portfolio Item prior to a copy operation\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {string} [destinationPortfolioId] The destination portfolio to compare names against\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPortfolioItemNextName: function (portfolioItemId, destinationPortfolioId, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).getPortfolioItemNextName(portfolioItemId, destinationPortfolioId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio Items\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItemTags: function (id, limit, offset, filter, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).listPortfolioItemTags(id, limit, offset, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of portfolio items.\n         * @summary List all portfolio items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItems: function (limit, offset, filter, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).listPortfolioItems(limit, offset, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets the provider control parameters for a portfolio item.\n         * @summary Gets the provider control parameters for this portfolio item; requires control paramaters provided when provisioning the portfolio item.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProviderControlParameters: function (portfolioItemId, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).listProviderControlParameters(portfolioItemId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets all service plans for a portfolio item.\n         * @summary Gets all service plans for a specific portfolio item; requires a connection to the topology service.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServicePlans: function (portfolioItemId, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).listServicePlans(portfolioItemId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Make a copy of the Portfolio Item.\n         * @summary Make a copy of the Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {CopyPortfolioItem} [copyPortfolioItem]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolioItem: function (portfolioItemId, copyPortfolioItem, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).postCopyPortfolioItem(portfolioItemId, copyPortfolioItem, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Remove Tags from Portfolio Item\n         * @summary Remove Tags from Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioItemTags: function (id, tag, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).removePortfolioItemTags(id, tag, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a specific portfolio item based on the portfolio item ID passed\n         * @summary Gets a specific portfolio item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItem: function (id, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).showPortfolioItem(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Fetch the specified portfolio item\\'s icon image.\n         * @summary Fetches the specified portfolio item\\'s icon image\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItemIcon: function (portfolioItemId, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).showPortfolioItemIcon(portfolioItemId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * If a record has been discarded, this operation will undelete it so it can be requested normally.\n         * @summary Undelete a specified Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolioItem: function (portfolioItemId, restoreKey, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).unDeletePortfolioItem(portfolioItemId, restoreKey, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Edits portfolio item specified by the given ID.\n         * @summary Edit an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {PortfolioItem} portfolioItem Parameters needed to update a Portfolio Item\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolioItem: function (id, portfolioItem, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).updatePortfolioItem(id, portfolioItem, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * PortfolioItemApi - factory interface\n * @export\n */\nexports.PortfolioItemApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Adds a single tag to a Portfolio Item object\n         * @summary Add Tag for Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioItemTag: function (id, tag, options) {\n            return exports.PortfolioItemApiFp(configuration).addPortfolioItemTag(id, tag, options)(axios, basePath);\n        },\n        /**\n         * Adds a name and description for a portfolio item and returns the newly created portfolio item.\n         * @summary Add a new portfolio item\n         * @param {CreatePortfolioItem} createPortfolioItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolioItem: function (createPortfolioItem, options) {\n            return exports.PortfolioItemApiFp(configuration).createPortfolioItem(createPortfolioItem, options)(axios, basePath);\n        },\n        /**\n         * Deletes the portfolio item based on portfolio item ID passed\n         * @summary Delete an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolioItem: function (id, options) {\n            return exports.PortfolioItemApiFp(configuration).destroyPortfolioItem(id, options)(axios, basePath);\n        },\n        /**\n         * Get the next name for a the Portfolio Item prior to a copy operation\n         * @summary Get the next name for a the Portfolio Item prior to a copy operation\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {string} [destinationPortfolioId] The destination portfolio to compare names against\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPortfolioItemNextName: function (portfolioItemId, destinationPortfolioId, options) {\n            return exports.PortfolioItemApiFp(configuration).getPortfolioItemNextName(portfolioItemId, destinationPortfolioId, options)(axios, basePath);\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio Items\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItemTags: function (id, limit, offset, filter, options) {\n            return exports.PortfolioItemApiFp(configuration).listPortfolioItemTags(id, limit, offset, filter, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of portfolio items.\n         * @summary List all portfolio items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {object} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItems: function (limit, offset, filter, options) {\n            return exports.PortfolioItemApiFp(configuration).listPortfolioItems(limit, offset, filter, options)(axios, basePath);\n        },\n        /**\n         * Gets the provider control parameters for a portfolio item.\n         * @summary Gets the provider control parameters for this portfolio item; requires control paramaters provided when provisioning the portfolio item.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProviderControlParameters: function (portfolioItemId, options) {\n            return exports.PortfolioItemApiFp(configuration).listProviderControlParameters(portfolioItemId, options)(axios, basePath);\n        },\n        /**\n         * Gets all service plans for a portfolio item.\n         * @summary Gets all service plans for a specific portfolio item; requires a connection to the topology service.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServicePlans: function (portfolioItemId, options) {\n            return exports.PortfolioItemApiFp(configuration).listServicePlans(portfolioItemId, options)(axios, basePath);\n        },\n        /**\n         * Make a copy of the Portfolio Item.\n         * @summary Make a copy of the Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {CopyPortfolioItem} [copyPortfolioItem]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolioItem: function (portfolioItemId, copyPortfolioItem, options) {\n            return exports.PortfolioItemApiFp(configuration).postCopyPortfolioItem(portfolioItemId, copyPortfolioItem, options)(axios, basePath);\n        },\n        /**\n         * Remove Tags from Portfolio Item\n         * @summary Remove Tags from Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioItemTags: function (id, tag, options) {\n            return exports.PortfolioItemApiFp(configuration).removePortfolioItemTags(id, tag, options)(axios, basePath);\n        },\n        /**\n         * Gets a specific portfolio item based on the portfolio item ID passed\n         * @summary Gets a specific portfolio item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItem: function (id, options) {\n            return exports.PortfolioItemApiFp(configuration).showPortfolioItem(id, options)(axios, basePath);\n        },\n        /**\n         * Fetch the specified portfolio item\\'s icon image.\n         * @summary Fetches the specified portfolio item\\'s icon image\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItemIcon: function (portfolioItemId, options) {\n            return exports.PortfolioItemApiFp(configuration).showPortfolioItemIcon(portfolioItemId, options)(axios, basePath);\n        },\n        /**\n         * If a record has been discarded, this operation will undelete it so it can be requested normally.\n         * @summary Undelete a specified Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolioItem: function (portfolioItemId, restoreKey, options) {\n            return exports.PortfolioItemApiFp(configuration).unDeletePortfolioItem(portfolioItemId, restoreKey, options)(axios, basePath);\n        },\n        /**\n         * Edits portfolio item specified by the given ID.\n         * @summary Edit an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {PortfolioItem} portfolioItem Parameters needed to update a Portfolio Item\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolioItem: function (id, portfolioItem, options) {\n            return exports.PortfolioItemApiFp(configuration).updatePortfolioItem(id, portfolioItem, options)(axios, basePath);\n        },\n    };\n};\n/**\n * PortfolioItemApi - object-oriented interface\n * @export\n * @class PortfolioItemApi\n * @extends {BaseAPI}\n */\nvar PortfolioItemApi = /** @class */ (function (_super) {\n    __extends(PortfolioItemApi, _super);\n    function PortfolioItemApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Adds a single tag to a Portfolio Item object\n     * @summary Add Tag for Portfolio Item\n     * @param {string} id ID of the resource\n     * @param {Array<Tag>} tag\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.addPortfolioItemTag = function (id, tag, options) {\n        return exports.PortfolioItemApiFp(this.configuration).addPortfolioItemTag(id, tag, options)(this.axios, this.basePath);\n    };\n    /**\n     * Adds a name and description for a portfolio item and returns the newly created portfolio item.\n     * @summary Add a new portfolio item\n     * @param {CreatePortfolioItem} createPortfolioItem\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.createPortfolioItem = function (createPortfolioItem, options) {\n        return exports.PortfolioItemApiFp(this.configuration).createPortfolioItem(createPortfolioItem, options)(this.axios, this.basePath);\n    };\n    /**\n     * Deletes the portfolio item based on portfolio item ID passed\n     * @summary Delete an existing portfolio item\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.destroyPortfolioItem = function (id, options) {\n        return exports.PortfolioItemApiFp(this.configuration).destroyPortfolioItem(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Get the next name for a the Portfolio Item prior to a copy operation\n     * @summary Get the next name for a the Portfolio Item prior to a copy operation\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {string} [destinationPortfolioId] The destination portfolio to compare names against\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.getPortfolioItemNextName = function (portfolioItemId, destinationPortfolioId, options) {\n        return exports.PortfolioItemApiFp(this.configuration).getPortfolioItemNextName(portfolioItemId, destinationPortfolioId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns an array of Tag objects\n     * @summary List Tags for Portfolio Items\n     * @param {string} id ID of the resource\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.listPortfolioItemTags = function (id, limit, offset, filter, options) {\n        return exports.PortfolioItemApiFp(this.configuration).listPortfolioItemTags(id, limit, offset, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of portfolio items.\n     * @summary List all portfolio items\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {object} [filter] Filter for querying collections.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.listPortfolioItems = function (limit, offset, filter, options) {\n        return exports.PortfolioItemApiFp(this.configuration).listPortfolioItems(limit, offset, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets the provider control parameters for a portfolio item.\n     * @summary Gets the provider control parameters for this portfolio item; requires control paramaters provided when provisioning the portfolio item.\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.listProviderControlParameters = function (portfolioItemId, options) {\n        return exports.PortfolioItemApiFp(this.configuration).listProviderControlParameters(portfolioItemId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets all service plans for a portfolio item.\n     * @summary Gets all service plans for a specific portfolio item; requires a connection to the topology service.\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.listServicePlans = function (portfolioItemId, options) {\n        return exports.PortfolioItemApiFp(this.configuration).listServicePlans(portfolioItemId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Make a copy of the Portfolio Item.\n     * @summary Make a copy of the Portfolio Item\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {CopyPortfolioItem} [copyPortfolioItem]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.postCopyPortfolioItem = function (portfolioItemId, copyPortfolioItem, options) {\n        return exports.PortfolioItemApiFp(this.configuration).postCopyPortfolioItem(portfolioItemId, copyPortfolioItem, options)(this.axios, this.basePath);\n    };\n    /**\n     * Remove Tags from Portfolio Item\n     * @summary Remove Tags from Portfolio Item\n     * @param {string} id ID of the resource\n     * @param {Array<Tag>} tag\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.removePortfolioItemTags = function (id, tag, options) {\n        return exports.PortfolioItemApiFp(this.configuration).removePortfolioItemTags(id, tag, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a specific portfolio item based on the portfolio item ID passed\n     * @summary Gets a specific portfolio item\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.showPortfolioItem = function (id, options) {\n        return exports.PortfolioItemApiFp(this.configuration).showPortfolioItem(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Fetch the specified portfolio item\\'s icon image.\n     * @summary Fetches the specified portfolio item\\'s icon image\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.showPortfolioItemIcon = function (portfolioItemId, options) {\n        return exports.PortfolioItemApiFp(this.configuration).showPortfolioItemIcon(portfolioItemId, options)(this.axios, this.basePath);\n    };\n    /**\n     * If a record has been discarded, this operation will undelete it so it can be requested normally.\n     * @summary Undelete a specified Portfolio Item\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {RestoreKey} restoreKey\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.unDeletePortfolioItem = function (portfolioItemId, restoreKey, options) {\n        return exports.PortfolioItemApiFp(this.configuration).unDeletePortfolioItem(portfolioItemId, restoreKey, options)(this.axios, this.basePath);\n    };\n    /**\n     * Edits portfolio item specified by the given ID.\n     * @summary Edit an existing portfolio item\n     * @param {string} id ID of the resource\n     * @param {PortfolioItem} portfolioItem Parameters needed to update a Portfolio Item\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.updatePortfolioItem = function (id, portfolioItem, options) {\n        return exports.PortfolioItemApiFp(this.configuration).updatePortfolioItem(id, portfolioItem, options)(this.axios, this.basePath);\n    };\n    return PortfolioItemApi;\n}(base_1.BaseAPI));\nexports.PortfolioItemApi = PortfolioItemApi;\n/**\n * ServicePlansApi - axios parameter creator\n * @export\n */\nexports.ServicePlansApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Returns the new Service Plan\n         * @summary Create Service Plan\n         * @param {ImportServicePlan} [importServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServicePlan: function (importServicePlan, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/service_plans\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof importServicePlan !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(importServicePlan !== undefined ? importServicePlan : {}) : (importServicePlan || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Patch Service Plan Modified Schema\n         * @param {string} id ID of the resource\n         * @param {PatchModifiedServicePlan} [patchModifiedServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchServicePlanModified: function (id, patchModifiedServicePlan, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling patchServicePlanModified.');\n            }\n            var localVarPath = \"/service_plans/{id}/modified\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof patchModifiedServicePlan !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchModifiedServicePlan !== undefined ? patchModifiedServicePlan : {}) : (patchModifiedServicePlan || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Resets the Service Plan\\'s Modified schema\n         * @summary Reset Service Plan Modified schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServicePlanModified: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling resetServicePlanModified.');\n            }\n            var localVarPath = \"/service_plans/{id}/reset\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the specified Service Plan\n         * @summary Show Service Plan\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlan: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showServicePlan.');\n            }\n            var localVarPath = \"/service_plans/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the specified Service Plan\\'s base schema\n         * @summary Show Service Plan Base Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanBase: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showServicePlanBase.');\n            }\n            var localVarPath = \"/service_plans/{id}/base\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the specified Service Plan\\'s modified schema\n         * @summary Show Service Plan modified Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanModified: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling showServicePlanModified.');\n            }\n            var localVarPath = \"/service_plans/{id}/modified\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * ServicePlansApi - functional programming interface\n * @export\n */\nexports.ServicePlansApiFp = function (configuration) {\n    return {\n        /**\n         * Returns the new Service Plan\n         * @summary Create Service Plan\n         * @param {ImportServicePlan} [importServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServicePlan: function (importServicePlan, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).createServicePlan(importServicePlan, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Patch Service Plan Modified Schema\n         * @param {string} id ID of the resource\n         * @param {PatchModifiedServicePlan} [patchModifiedServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchServicePlanModified: function (id, patchModifiedServicePlan, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).patchServicePlanModified(id, patchModifiedServicePlan, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Resets the Service Plan\\'s Modified schema\n         * @summary Reset Service Plan Modified schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServicePlanModified: function (id, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).resetServicePlanModified(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns the specified Service Plan\n         * @summary Show Service Plan\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlan: function (id, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).showServicePlan(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns the specified Service Plan\\'s base schema\n         * @summary Show Service Plan Base Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanBase: function (id, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).showServicePlanBase(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns the specified Service Plan\\'s modified schema\n         * @summary Show Service Plan modified Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanModified: function (id, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).showServicePlanModified(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * ServicePlansApi - factory interface\n * @export\n */\nexports.ServicePlansApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Returns the new Service Plan\n         * @summary Create Service Plan\n         * @param {ImportServicePlan} [importServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServicePlan: function (importServicePlan, options) {\n            return exports.ServicePlansApiFp(configuration).createServicePlan(importServicePlan, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Patch Service Plan Modified Schema\n         * @param {string} id ID of the resource\n         * @param {PatchModifiedServicePlan} [patchModifiedServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchServicePlanModified: function (id, patchModifiedServicePlan, options) {\n            return exports.ServicePlansApiFp(configuration).patchServicePlanModified(id, patchModifiedServicePlan, options)(axios, basePath);\n        },\n        /**\n         * Resets the Service Plan\\'s Modified schema\n         * @summary Reset Service Plan Modified schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServicePlanModified: function (id, options) {\n            return exports.ServicePlansApiFp(configuration).resetServicePlanModified(id, options)(axios, basePath);\n        },\n        /**\n         * Returns the specified Service Plan\n         * @summary Show Service Plan\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlan: function (id, options) {\n            return exports.ServicePlansApiFp(configuration).showServicePlan(id, options)(axios, basePath);\n        },\n        /**\n         * Returns the specified Service Plan\\'s base schema\n         * @summary Show Service Plan Base Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanBase: function (id, options) {\n            return exports.ServicePlansApiFp(configuration).showServicePlanBase(id, options)(axios, basePath);\n        },\n        /**\n         * Returns the specified Service Plan\\'s modified schema\n         * @summary Show Service Plan modified Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanModified: function (id, options) {\n            return exports.ServicePlansApiFp(configuration).showServicePlanModified(id, options)(axios, basePath);\n        },\n    };\n};\n/**\n * ServicePlansApi - object-oriented interface\n * @export\n * @class ServicePlansApi\n * @extends {BaseAPI}\n */\nvar ServicePlansApi = /** @class */ (function (_super) {\n    __extends(ServicePlansApi, _super);\n    function ServicePlansApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Returns the new Service Plan\n     * @summary Create Service Plan\n     * @param {ImportServicePlan} [importServicePlan]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.createServicePlan = function (importServicePlan, options) {\n        return exports.ServicePlansApiFp(this.configuration).createServicePlan(importServicePlan, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Patch Service Plan Modified Schema\n     * @param {string} id ID of the resource\n     * @param {PatchModifiedServicePlan} [patchModifiedServicePlan]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.patchServicePlanModified = function (id, patchModifiedServicePlan, options) {\n        return exports.ServicePlansApiFp(this.configuration).patchServicePlanModified(id, patchModifiedServicePlan, options)(this.axios, this.basePath);\n    };\n    /**\n     * Resets the Service Plan\\'s Modified schema\n     * @summary Reset Service Plan Modified schema\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.resetServicePlanModified = function (id, options) {\n        return exports.ServicePlansApiFp(this.configuration).resetServicePlanModified(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns the specified Service Plan\n     * @summary Show Service Plan\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.showServicePlan = function (id, options) {\n        return exports.ServicePlansApiFp(this.configuration).showServicePlan(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns the specified Service Plan\\'s base schema\n     * @summary Show Service Plan Base Schema\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.showServicePlanBase = function (id, options) {\n        return exports.ServicePlansApiFp(this.configuration).showServicePlanBase(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns the specified Service Plan\\'s modified schema\n     * @summary Show Service Plan modified Schema\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.showServicePlanModified = function (id, options) {\n        return exports.ServicePlansApiFp(this.configuration).showServicePlanModified(id, options)(this.axios, this.basePath);\n    };\n    return ServicePlansApi;\n}(base_1.BaseAPI));\nexports.ServicePlansApi = ServicePlansApi;\n/**\n * SettingsApi - axios parameter creator\n * @export\n */\nexports.SettingsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Create Tenant Setting\n         * @summary Create Tenant Setting\n         * @param {Setting} setting Json encoded key/value pair to create a new setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSetting: function (setting, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'setting' is not null or undefined\n            if (setting === null || setting === undefined) {\n                throw new base_1.RequiredError('setting', 'Required parameter setting was null or undefined when calling createSetting.');\n            }\n            var localVarPath = \"/settings\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof setting !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(setting !== undefined ? setting : {}) : (setting || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a Tenant Setting\n         * @summary Delete a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroySetting: function (name, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new base_1.RequiredError('name', 'Required parameter name was null or undefined when calling destroySetting.');\n            }\n            var localVarPath = \"/settings/{name}\"\n                .replace(\"{\" + \"name\" + \"}\", encodeURIComponent(String(name)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List Tenant Settings\n         * @summary List Tenant Settings\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSettings: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/settings\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a specific Tenant Setting\n         * @summary Get a specific Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showSetting: function (name, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new base_1.RequiredError('name', 'Required parameter name was null or undefined when calling showSetting.');\n            }\n            var localVarPath = \"/settings/{name}\"\n                .replace(\"{\" + \"name\" + \"}\", encodeURIComponent(String(name)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a Tenant Setting\n         * @summary Update a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSetting: function (name, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new base_1.RequiredError('name', 'Required parameter name was null or undefined when calling updateSetting.');\n            }\n            var localVarPath = \"/settings/{name}\"\n                .replace(\"{\" + \"name\" + \"}\", encodeURIComponent(String(name)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * SettingsApi - functional programming interface\n * @export\n */\nexports.SettingsApiFp = function (configuration) {\n    return {\n        /**\n         * Create Tenant Setting\n         * @summary Create Tenant Setting\n         * @param {Setting} setting Json encoded key/value pair to create a new setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSetting: function (setting, options) {\n            var localVarAxiosArgs = exports.SettingsApiAxiosParamCreator(configuration).createSetting(setting, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Delete a Tenant Setting\n         * @summary Delete a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroySetting: function (name, options) {\n            var localVarAxiosArgs = exports.SettingsApiAxiosParamCreator(configuration).destroySetting(name, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * List Tenant Settings\n         * @summary List Tenant Settings\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSettings: function (options) {\n            var localVarAxiosArgs = exports.SettingsApiAxiosParamCreator(configuration).listSettings(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get a specific Tenant Setting\n         * @summary Get a specific Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showSetting: function (name, options) {\n            var localVarAxiosArgs = exports.SettingsApiAxiosParamCreator(configuration).showSetting(name, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Update a Tenant Setting\n         * @summary Update a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSetting: function (name, options) {\n            var localVarAxiosArgs = exports.SettingsApiAxiosParamCreator(configuration).updateSetting(name, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * SettingsApi - factory interface\n * @export\n */\nexports.SettingsApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Create Tenant Setting\n         * @summary Create Tenant Setting\n         * @param {Setting} setting Json encoded key/value pair to create a new setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSetting: function (setting, options) {\n            return exports.SettingsApiFp(configuration).createSetting(setting, options)(axios, basePath);\n        },\n        /**\n         * Delete a Tenant Setting\n         * @summary Delete a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroySetting: function (name, options) {\n            return exports.SettingsApiFp(configuration).destroySetting(name, options)(axios, basePath);\n        },\n        /**\n         * List Tenant Settings\n         * @summary List Tenant Settings\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSettings: function (options) {\n            return exports.SettingsApiFp(configuration).listSettings(options)(axios, basePath);\n        },\n        /**\n         * Get a specific Tenant Setting\n         * @summary Get a specific Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showSetting: function (name, options) {\n            return exports.SettingsApiFp(configuration).showSetting(name, options)(axios, basePath);\n        },\n        /**\n         * Update a Tenant Setting\n         * @summary Update a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSetting: function (name, options) {\n            return exports.SettingsApiFp(configuration).updateSetting(name, options)(axios, basePath);\n        },\n    };\n};\n/**\n * SettingsApi - object-oriented interface\n * @export\n * @class SettingsApi\n * @extends {BaseAPI}\n */\nvar SettingsApi = /** @class */ (function (_super) {\n    __extends(SettingsApi, _super);\n    function SettingsApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Create Tenant Setting\n     * @summary Create Tenant Setting\n     * @param {Setting} setting Json encoded key/value pair to create a new setting\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    SettingsApi.prototype.createSetting = function (setting, options) {\n        return exports.SettingsApiFp(this.configuration).createSetting(setting, options)(this.axios, this.basePath);\n    };\n    /**\n     * Delete a Tenant Setting\n     * @summary Delete a Tenant Setting\n     * @param {string} name name of the setting\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    SettingsApi.prototype.destroySetting = function (name, options) {\n        return exports.SettingsApiFp(this.configuration).destroySetting(name, options)(this.axios, this.basePath);\n    };\n    /**\n     * List Tenant Settings\n     * @summary List Tenant Settings\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    SettingsApi.prototype.listSettings = function (options) {\n        return exports.SettingsApiFp(this.configuration).listSettings(options)(this.axios, this.basePath);\n    };\n    /**\n     * Get a specific Tenant Setting\n     * @summary Get a specific Tenant Setting\n     * @param {string} name name of the setting\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    SettingsApi.prototype.showSetting = function (name, options) {\n        return exports.SettingsApiFp(this.configuration).showSetting(name, options)(this.axios, this.basePath);\n    };\n    /**\n     * Update a Tenant Setting\n     * @summary Update a Tenant Setting\n     * @param {string} name name of the setting\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    SettingsApi.prototype.updateSetting = function (name, options) {\n        return exports.SettingsApiFp(this.configuration).updateSetting(name, options)(this.axios, this.basePath);\n    };\n    return SettingsApi;\n}(base_1.BaseAPI));\nexports.SettingsApi = SettingsApi;\n/**\n * TagsApi - axios parameter creator\n * @export\n */\nexports.TagsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * List Tags\n         * @summary List Tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTags: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/tags\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * TagsApi - functional programming interface\n * @export\n */\nexports.TagsApiFp = function (configuration) {\n    return {\n        /**\n         * List Tags\n         * @summary List Tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTags: function (options) {\n            var localVarAxiosArgs = exports.TagsApiAxiosParamCreator(configuration).listTags(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * TagsApi - factory interface\n * @export\n */\nexports.TagsApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * List Tags\n         * @summary List Tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTags: function (options) {\n            return exports.TagsApiFp(configuration).listTags(options)(axios, basePath);\n        },\n    };\n};\n/**\n * TagsApi - object-oriented interface\n * @export\n * @class TagsApi\n * @extends {BaseAPI}\n */\nvar TagsApi = /** @class */ (function (_super) {\n    __extends(TagsApi, _super);\n    function TagsApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * List Tags\n     * @summary List Tags\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TagsApi\n     */\n    TagsApi.prototype.listTags = function (options) {\n        return exports.TagsApiFp(this.configuration).listTags(options)(this.axios, this.basePath);\n    };\n    return TagsApi;\n}(base_1.BaseAPI));\nexports.TagsApi = TagsApi;\n/**\n * TenantApi - axios parameter creator\n * @export\n */\nexports.TenantApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Get a list of tenants.\n         * @summary List Tenants\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTenants: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/tenants\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets the tenant specified by the tenant id.\n         * @summary Get a specific Tenant\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showTenant: function (tenantId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'tenantId' is not null or undefined\n            if (tenantId === null || tenantId === undefined) {\n                throw new base_1.RequiredError('tenantId', 'Required parameter tenantId was null or undefined when calling showTenant.');\n            }\n            var localVarPath = \"/tenants/{tenant_id}\"\n                .replace(\"{\" + \"tenant_id\" + \"}\", encodeURIComponent(String(tenantId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Run a task to seed the Tenant Groups required for an org admin to onboard additional users.\n         * @summary Seed Tenant Groups\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tenantSeed: function (tenantId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'tenantId' is not null or undefined\n            if (tenantId === null || tenantId === undefined) {\n                throw new base_1.RequiredError('tenantId', 'Required parameter tenantId was null or undefined when calling tenantSeed.');\n            }\n            var localVarPath = \"/tenants/{tenant_id}/seed\"\n                .replace(\"{\" + \"tenant_id\" + \"}\", encodeURIComponent(String(tenantId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * TenantApi - functional programming interface\n * @export\n */\nexports.TenantApiFp = function (configuration) {\n    return {\n        /**\n         * Get a list of tenants.\n         * @summary List Tenants\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTenants: function (options) {\n            var localVarAxiosArgs = exports.TenantApiAxiosParamCreator(configuration).listTenants(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets the tenant specified by the tenant id.\n         * @summary Get a specific Tenant\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showTenant: function (tenantId, options) {\n            var localVarAxiosArgs = exports.TenantApiAxiosParamCreator(configuration).showTenant(tenantId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Run a task to seed the Tenant Groups required for an org admin to onboard additional users.\n         * @summary Seed Tenant Groups\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tenantSeed: function (tenantId, options) {\n            var localVarAxiosArgs = exports.TenantApiAxiosParamCreator(configuration).tenantSeed(tenantId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * TenantApi - factory interface\n * @export\n */\nexports.TenantApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Get a list of tenants.\n         * @summary List Tenants\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTenants: function (options) {\n            return exports.TenantApiFp(configuration).listTenants(options)(axios, basePath);\n        },\n        /**\n         * Gets the tenant specified by the tenant id.\n         * @summary Get a specific Tenant\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showTenant: function (tenantId, options) {\n            return exports.TenantApiFp(configuration).showTenant(tenantId, options)(axios, basePath);\n        },\n        /**\n         * Run a task to seed the Tenant Groups required for an org admin to onboard additional users.\n         * @summary Seed Tenant Groups\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tenantSeed: function (tenantId, options) {\n            return exports.TenantApiFp(configuration).tenantSeed(tenantId, options)(axios, basePath);\n        },\n    };\n};\n/**\n * TenantApi - object-oriented interface\n * @export\n * @class TenantApi\n * @extends {BaseAPI}\n */\nvar TenantApi = /** @class */ (function (_super) {\n    __extends(TenantApi, _super);\n    function TenantApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Get a list of tenants.\n     * @summary List Tenants\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TenantApi\n     */\n    TenantApi.prototype.listTenants = function (options) {\n        return exports.TenantApiFp(this.configuration).listTenants(options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets the tenant specified by the tenant id.\n     * @summary Get a specific Tenant\n     * @param {string} tenantId ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TenantApi\n     */\n    TenantApi.prototype.showTenant = function (tenantId, options) {\n        return exports.TenantApiFp(this.configuration).showTenant(tenantId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Run a task to seed the Tenant Groups required for an org admin to onboard additional users.\n     * @summary Seed Tenant Groups\n     * @param {string} tenantId ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TenantApi\n     */\n    TenantApi.prototype.tenantSeed = function (tenantId, options) {\n        return exports.TenantApiFp(this.configuration).tenantSeed(tenantId, options)(this.axios, this.basePath);\n    };\n    return TenantApi;\n}(base_1.BaseAPI));\nexports.TenantApi = TenantApi;\n"],"sourceRoot":""}