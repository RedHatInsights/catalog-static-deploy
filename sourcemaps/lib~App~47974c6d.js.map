{"version":3,"sources":["webpack:///./node_modules/@redhat-cloud-services/catalog-client/dist/api.js"],"names":["extendStatics","__extends","this","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","url","axios_1","BASE_PATH","replace","COLLECTION_FORMATS","csv","ssv","tsv","pipes","BaseAPI","configuration","basePath","axios","default","RequiredError","_super","field","msg","_this","call","name","Error","ApprovalRequest","StateEnum","Order","OrderItem","ProgressMessage","LevelEnum","ShareInfo","PermissionsEnum","SharePolicy","UnsharePolicy","DefaultApiAxiosParamCreator","getDocumentation","options","baseOptions","localVarUrlObj","parse","localVarRequestOptions","assign","method","localVarHeaderParameter","username","password","btoa","query","search","headers","format","postGraphQL","graphQLRequest","data","JSON","stringify","DefaultApiFp","localVarAxiosArgs","axiosRequestArgs","request","DefaultApiFactory","DefaultApi","apply","arguments","IconApiAxiosParamCreator","createIcon","content","portfolioId","portfolioItemId","localVarFormParams","URLSearchParams","undefined","set","toString","destroyIcon","id","localVarPath","encodeURIComponent","String","getIcon","showIconData","updateIcon","icon","IconApiFp","IconApiFactory","IconApi","OrderApiAxiosParamCreator","addToOrder","orderId","orderItem","cancelOrder","createOrder","destroyOrder","listOrderItemsFromOrder","limit","offset","filter","localVarQueryParameter","listOrders","restoreOrder","restoreKey","showOrder","showOrderItemFromOrder","submitOrder","OrderApiFp","OrderApiFactory","OrderApi","OrderItemApiAxiosParamCreator","destroyOrderItem","listApprovalRequests","orderItemId","listOrderItems","listProgressMessages","restoreOrderItem","showOrderItem","OrderItemApiFp","OrderItemApiFactory","OrderItemApi","PortfolioApiAxiosParamCreator","addPortfolioTag","tag","createPortfolio","portfolio","destroyPortfolio","fetchPortfolioItemsWithPortfolio","listPortfolioTags","listPortfolios","postCopyPortfolio","removePortfolioTags","shareInfo","sharePortfolio","sharePolicy","showPortfolio","showPortfolioIcon","unDeletePortfolio","unsharePortfolio","unsharePolicy","updatePortfolio","PortfolioApiFp","PortfolioApiFactory","PortfolioApi","PortfolioItemApiAxiosParamCreator","addPortfolioItemTag","createPortfolioItem","destroyPortfolioItem","getPortfolioItemNextName","destinationPortfolioId","listPortfolioItemTags","listPortfolioItems","listProviderControlParameters","listServicePlans","postCopyPortfolioItem","copyPortfolioItem","removePortfolioItemTags","showPortfolioItem","showPortfolioItemIcon","unDeletePortfolioItem","updatePortfolioItem","portfolioItem","PortfolioItemApiFp","PortfolioItemApiFactory","PortfolioItemApi","ServicePlansApiAxiosParamCreator","createServicePlan","importServicePlan","patchServicePlanModified","patchModifiedServicePlan","resetServicePlanModified","showServicePlan","showServicePlanBase","showServicePlanModified","ServicePlansApiFp","ServicePlansApiFactory","ServicePlansApi","SettingsApiAxiosParamCreator","createSetting","setting","destroySetting","listSettings","showSetting","updateSetting","SettingsApiFp","SettingsApiFactory","SettingsApi","TagsApiAxiosParamCreator","listTags","TagsApiFp","TagsApiFactory","TagsApi","TenantApiAxiosParamCreator","listTenants","showTenant","tenantId","tenantSeed","TenantApiFp","TenantApiFactory","TenantApi"],"mappings":"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","file":"js/lib~App~47974c6d.e794343bc502e552d7d7.js","sourcesContent":["\"use strict\";\n// tslint:disable\n/// <reference path=\"./custom.d.ts\" />\n/**\n * Catalog API\n * This API gets and orders catalog items from different cloud sources.\n *\n * OpenAPI spec version: 1.0.0\n * Contact: support@redhat.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar url = require(\"url\");\nvar axios_1 = require(\"axios\");\nvar BASE_PATH = \"https://cloud.redhat.com//api/catalog/v1.0\".replace(/\\/+$/, \"\");\n/**\n *\n * @export\n */\nexports.COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n/**\n *\n * @export\n * @class BaseAPI\n */\nvar BaseAPI = /** @class */ (function () {\n    function BaseAPI(configuration, basePath, axios) {\n        if (basePath === void 0) { basePath = BASE_PATH; }\n        if (axios === void 0) { axios = axios_1.default; }\n        this.basePath = basePath;\n        this.axios = axios;\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n    return BaseAPI;\n}());\nexports.BaseAPI = BaseAPI;\n;\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nvar RequiredError = /** @class */ (function (_super) {\n    __extends(RequiredError, _super);\n    function RequiredError(field, msg) {\n        var _this = _super.call(this, msg) || this;\n        _this.field = field;\n        _this.name = \"RequiredError\";\n        return _this;\n    }\n    return RequiredError;\n}(Error));\nexports.RequiredError = RequiredError;\n/**\n * @export\n * @namespace ApprovalRequest\n */\nvar ApprovalRequest;\n(function (ApprovalRequest) {\n    /**\n     * @export\n     * @enum {string}\n     */\n    var StateEnum;\n    (function (StateEnum) {\n        StateEnum[\"Undecided\"] = \"undecided\";\n        StateEnum[\"Approved\"] = \"approved\";\n        StateEnum[\"Denied\"] = \"denied\";\n        StateEnum[\"Canceled\"] = \"canceled\";\n    })(StateEnum = ApprovalRequest.StateEnum || (ApprovalRequest.StateEnum = {}));\n})(ApprovalRequest = exports.ApprovalRequest || (exports.ApprovalRequest = {}));\n/**\n * @export\n * @namespace Order\n */\nvar Order;\n(function (Order) {\n    /**\n     * @export\n     * @enum {string}\n     */\n    var StateEnum;\n    (function (StateEnum) {\n        StateEnum[\"Created\"] = \"Created\";\n        StateEnum[\"ApprovalPending\"] = \"Approval Pending\";\n        StateEnum[\"Ordered\"] = \"Ordered\";\n        StateEnum[\"Failed\"] = \"Failed\";\n        StateEnum[\"Completed\"] = \"Completed\";\n        StateEnum[\"Canceled\"] = \"Canceled\";\n    })(StateEnum = Order.StateEnum || (Order.StateEnum = {}));\n})(Order = exports.Order || (exports.Order = {}));\n/**\n * @export\n * @namespace OrderItem\n */\nvar OrderItem;\n(function (OrderItem) {\n    /**\n     * @export\n     * @enum {string}\n     */\n    var StateEnum;\n    (function (StateEnum) {\n        StateEnum[\"Created\"] = \"Created\";\n        StateEnum[\"ApprovalPending\"] = \"Approval Pending\";\n        StateEnum[\"Ordered\"] = \"Ordered\";\n        StateEnum[\"Failed\"] = \"Failed\";\n        StateEnum[\"Completed\"] = \"Completed\";\n        StateEnum[\"Approved\"] = \"Approved\";\n        StateEnum[\"Denied\"] = \"Denied\";\n    })(StateEnum = OrderItem.StateEnum || (OrderItem.StateEnum = {}));\n})(OrderItem = exports.OrderItem || (exports.OrderItem = {}));\n/**\n * @export\n * @namespace ProgressMessage\n */\nvar ProgressMessage;\n(function (ProgressMessage) {\n    /**\n     * @export\n     * @enum {string}\n     */\n    var LevelEnum;\n    (function (LevelEnum) {\n        LevelEnum[\"Info\"] = \"info\";\n        LevelEnum[\"Error\"] = \"error\";\n        LevelEnum[\"Warning\"] = \"warning\";\n        LevelEnum[\"Debug\"] = \"debug\";\n    })(LevelEnum = ProgressMessage.LevelEnum || (ProgressMessage.LevelEnum = {}));\n})(ProgressMessage = exports.ProgressMessage || (exports.ProgressMessage = {}));\n/**\n * @export\n * @namespace ShareInfo\n */\nvar ShareInfo;\n(function (ShareInfo) {\n    /**\n     * @export\n     * @enum {string}\n     */\n    var PermissionsEnum;\n    (function (PermissionsEnum) {\n        PermissionsEnum[\"Read\"] = \"read\";\n        PermissionsEnum[\"Update\"] = \"update\";\n        PermissionsEnum[\"Delete\"] = \"delete\";\n        PermissionsEnum[\"Order\"] = \"order\";\n    })(PermissionsEnum = ShareInfo.PermissionsEnum || (ShareInfo.PermissionsEnum = {}));\n})(ShareInfo = exports.ShareInfo || (exports.ShareInfo = {}));\n/**\n * @export\n * @namespace SharePolicy\n */\nvar SharePolicy;\n(function (SharePolicy) {\n    /**\n     * @export\n     * @enum {string}\n     */\n    var PermissionsEnum;\n    (function (PermissionsEnum) {\n        PermissionsEnum[\"Read\"] = \"read\";\n        PermissionsEnum[\"Update\"] = \"update\";\n        PermissionsEnum[\"Delete\"] = \"delete\";\n        PermissionsEnum[\"Order\"] = \"order\";\n    })(PermissionsEnum = SharePolicy.PermissionsEnum || (SharePolicy.PermissionsEnum = {}));\n})(SharePolicy = exports.SharePolicy || (exports.SharePolicy = {}));\n/**\n * @export\n * @namespace UnsharePolicy\n */\nvar UnsharePolicy;\n(function (UnsharePolicy) {\n    /**\n     * @export\n     * @enum {string}\n     */\n    var PermissionsEnum;\n    (function (PermissionsEnum) {\n        PermissionsEnum[\"Read\"] = \"read\";\n        PermissionsEnum[\"Update\"] = \"update\";\n        PermissionsEnum[\"Delete\"] = \"delete\";\n        PermissionsEnum[\"Order\"] = \"order\";\n    })(PermissionsEnum = UnsharePolicy.PermissionsEnum || (UnsharePolicy.PermissionsEnum = {}));\n})(UnsharePolicy = exports.UnsharePolicy || (exports.UnsharePolicy = {}));\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexports.DefaultApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Return this API document in JSON format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDocumentation: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/openapi.json\";\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Performs a GraphQL Query\n         * @summary Perform a GraphQL Query\n         * @param {GraphQLRequest} graphQLRequest GraphQL Query Request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postGraphQL: function (graphQLRequest, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'graphQLRequest' is not null or undefined\n            if (graphQLRequest === null || graphQLRequest === undefined) {\n                throw new RequiredError('graphQLRequest', 'Required parameter graphQLRequest was null or undefined when calling postGraphQL.');\n            }\n            var localVarPath = \"/graphql\";\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            var needsSerialization = (\"GraphQLRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(graphQLRequest || {}) : (graphQLRequest || \"\");\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexports.DefaultApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Return this API document in JSON format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDocumentation: function (options) {\n            var localVarAxiosArgs = exports.DefaultApiAxiosParamCreator(configuration).getDocumentation(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Performs a GraphQL Query\n         * @summary Perform a GraphQL Query\n         * @param {GraphQLRequest} graphQLRequest GraphQL Query Request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postGraphQL: function (graphQLRequest, options) {\n            var localVarAxiosArgs = exports.DefaultApiAxiosParamCreator(configuration).postGraphQL(graphQLRequest, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * DefaultApi - factory interface\n * @export\n */\nexports.DefaultApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Return this API document in JSON format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDocumentation: function (options) {\n            return exports.DefaultApiFp(configuration).getDocumentation(options)(axios, basePath);\n        },\n        /**\n         * Performs a GraphQL Query\n         * @summary Perform a GraphQL Query\n         * @param {GraphQLRequest} graphQLRequest GraphQL Query Request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postGraphQL: function (graphQLRequest, options) {\n            return exports.DefaultApiFp(configuration).postGraphQL(graphQLRequest, options)(axios, basePath);\n        },\n    };\n};\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nvar DefaultApi = /** @class */ (function (_super) {\n    __extends(DefaultApi, _super);\n    function DefaultApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Return this API document in JSON format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    DefaultApi.prototype.getDocumentation = function (options) {\n        return exports.DefaultApiFp(this.configuration).getDocumentation(options)(this.axios, this.basePath);\n    };\n    /**\n     * Performs a GraphQL Query\n     * @summary Perform a GraphQL Query\n     * @param {GraphQLRequest} graphQLRequest GraphQL Query Request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    DefaultApi.prototype.postGraphQL = function (graphQLRequest, options) {\n        return exports.DefaultApiFp(this.configuration).postGraphQL(graphQLRequest, options)(this.axios, this.basePath);\n    };\n    return DefaultApi;\n}(BaseAPI));\nexports.DefaultApi = DefaultApi;\n/**\n * IconApi - axios parameter creator\n * @export\n */\nexports.IconApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Creates an Icon from the specified parameters\n         * @summary Create an Icon\n         * @param {any} [content] The binary image contents, maximum size is 250KB\n         * @param {string} [portfolioId] The Portfolio this Icon belongs to\n         * @param {string} [portfolioItemId] The Portfolio Item this Icon belongs to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createIcon: function (content, portfolioId, portfolioItemId, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/icons\";\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            var localVarFormParams = new url.URLSearchParams();\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            if (content !== undefined) {\n                localVarFormParams.set('content', content);\n            }\n            if (portfolioId !== undefined) {\n                localVarFormParams.set('portfolio_id', portfolioId);\n            }\n            if (portfolioItemId !== undefined) {\n                localVarFormParams.set('portfolio_item_id', portfolioItemId);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            localVarRequestOptions.data = localVarFormParams.toString();\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deletes the icon based on the icon ID passed\n         * @summary Delete an existing Icon\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyIcon: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling destroyIcon.');\n            }\n            var localVarPath = \"/icons/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch an Icon by ID\n         * @summary Fetch an Icon by ID\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIcon: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling getIcon.');\n            }\n            var localVarPath = \"/icons/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch the specified portfolio item's icon image.\n         * @summary Fetches the specified icon's image\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showIconData: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling showIconData.');\n            }\n            var localVarPath = \"/icons/{id}/icon_data\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Edits Icon specified by the given ID.\n         * @summary Edit an existing Icon\n         * @param {string} id ID of the resource\n         * @param {Icon} icon Parameters needed to update an Icon\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateIcon: function (id, icon, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateIcon.');\n            }\n            // verify required parameter 'icon' is not null or undefined\n            if (icon === null || icon === undefined) {\n                throw new RequiredError('icon', 'Required parameter icon was null or undefined when calling updateIcon.');\n            }\n            var localVarPath = \"/icons/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            var needsSerialization = (\"Icon\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(icon || {}) : (icon || \"\");\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * IconApi - functional programming interface\n * @export\n */\nexports.IconApiFp = function (configuration) {\n    return {\n        /**\n         * Creates an Icon from the specified parameters\n         * @summary Create an Icon\n         * @param {any} [content] The binary image contents, maximum size is 250KB\n         * @param {string} [portfolioId] The Portfolio this Icon belongs to\n         * @param {string} [portfolioItemId] The Portfolio Item this Icon belongs to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createIcon: function (content, portfolioId, portfolioItemId, options) {\n            var localVarAxiosArgs = exports.IconApiAxiosParamCreator(configuration).createIcon(content, portfolioId, portfolioItemId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Deletes the icon based on the icon ID passed\n         * @summary Delete an existing Icon\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyIcon: function (id, options) {\n            var localVarAxiosArgs = exports.IconApiAxiosParamCreator(configuration).destroyIcon(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Fetch an Icon by ID\n         * @summary Fetch an Icon by ID\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIcon: function (id, options) {\n            var localVarAxiosArgs = exports.IconApiAxiosParamCreator(configuration).getIcon(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Fetch the specified portfolio item's icon image.\n         * @summary Fetches the specified icon's image\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showIconData: function (id, options) {\n            var localVarAxiosArgs = exports.IconApiAxiosParamCreator(configuration).showIconData(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Edits Icon specified by the given ID.\n         * @summary Edit an existing Icon\n         * @param {string} id ID of the resource\n         * @param {Icon} icon Parameters needed to update an Icon\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateIcon: function (id, icon, options) {\n            var localVarAxiosArgs = exports.IconApiAxiosParamCreator(configuration).updateIcon(id, icon, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * IconApi - factory interface\n * @export\n */\nexports.IconApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Creates an Icon from the specified parameters\n         * @summary Create an Icon\n         * @param {any} [content] The binary image contents, maximum size is 250KB\n         * @param {string} [portfolioId] The Portfolio this Icon belongs to\n         * @param {string} [portfolioItemId] The Portfolio Item this Icon belongs to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createIcon: function (content, portfolioId, portfolioItemId, options) {\n            return exports.IconApiFp(configuration).createIcon(content, portfolioId, portfolioItemId, options)(axios, basePath);\n        },\n        /**\n         * Deletes the icon based on the icon ID passed\n         * @summary Delete an existing Icon\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyIcon: function (id, options) {\n            return exports.IconApiFp(configuration).destroyIcon(id, options)(axios, basePath);\n        },\n        /**\n         * Fetch an Icon by ID\n         * @summary Fetch an Icon by ID\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIcon: function (id, options) {\n            return exports.IconApiFp(configuration).getIcon(id, options)(axios, basePath);\n        },\n        /**\n         * Fetch the specified portfolio item's icon image.\n         * @summary Fetches the specified icon's image\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showIconData: function (id, options) {\n            return exports.IconApiFp(configuration).showIconData(id, options)(axios, basePath);\n        },\n        /**\n         * Edits Icon specified by the given ID.\n         * @summary Edit an existing Icon\n         * @param {string} id ID of the resource\n         * @param {Icon} icon Parameters needed to update an Icon\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateIcon: function (id, icon, options) {\n            return exports.IconApiFp(configuration).updateIcon(id, icon, options)(axios, basePath);\n        },\n    };\n};\n/**\n * IconApi - object-oriented interface\n * @export\n * @class IconApi\n * @extends {BaseAPI}\n */\nvar IconApi = /** @class */ (function (_super) {\n    __extends(IconApi, _super);\n    function IconApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Creates an Icon from the specified parameters\n     * @summary Create an Icon\n     * @param {any} [content] The binary image contents, maximum size is 250KB\n     * @param {string} [portfolioId] The Portfolio this Icon belongs to\n     * @param {string} [portfolioItemId] The Portfolio Item this Icon belongs to\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IconApi\n     */\n    IconApi.prototype.createIcon = function (content, portfolioId, portfolioItemId, options) {\n        return exports.IconApiFp(this.configuration).createIcon(content, portfolioId, portfolioItemId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Deletes the icon based on the icon ID passed\n     * @summary Delete an existing Icon\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IconApi\n     */\n    IconApi.prototype.destroyIcon = function (id, options) {\n        return exports.IconApiFp(this.configuration).destroyIcon(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Fetch an Icon by ID\n     * @summary Fetch an Icon by ID\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IconApi\n     */\n    IconApi.prototype.getIcon = function (id, options) {\n        return exports.IconApiFp(this.configuration).getIcon(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Fetch the specified portfolio item's icon image.\n     * @summary Fetches the specified icon's image\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IconApi\n     */\n    IconApi.prototype.showIconData = function (id, options) {\n        return exports.IconApiFp(this.configuration).showIconData(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Edits Icon specified by the given ID.\n     * @summary Edit an existing Icon\n     * @param {string} id ID of the resource\n     * @param {Icon} icon Parameters needed to update an Icon\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IconApi\n     */\n    IconApi.prototype.updateIcon = function (id, icon, options) {\n        return exports.IconApiFp(this.configuration).updateIcon(id, icon, options)(this.axios, this.basePath);\n    };\n    return IconApi;\n}(BaseAPI));\nexports.IconApi = IconApi;\n/**\n * OrderApi - axios parameter creator\n * @export\n */\nexports.OrderApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Adds an order item to an order in pending state\n         * @summary Add an order item to an order in pending state\n         * @param {string} orderId The Order ID\n         * @param {OrderItem} orderItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addToOrder: function (orderId, orderItem, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling addToOrder.');\n            }\n            // verify required parameter 'orderItem' is not null or undefined\n            if (orderItem === null || orderItem === undefined) {\n                throw new RequiredError('orderItem', 'Required parameter orderItem was null or undefined when calling addToOrder.');\n            }\n            var localVarPath = \"/orders/{order_id}/order_items\"\n                .replace(\"{\" + \"order_id\" + \"}\", encodeURIComponent(String(orderId)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            var needsSerialization = (\"OrderItem\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderItem || {}) : (orderItem || \"\");\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an updated order.\n         * @summary Cancels a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancelOrder: function (orderId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling cancelOrder.');\n            }\n            var localVarPath = \"/orders/{order_id}/cancel\"\n                .replace(\"{\" + \"order_id\" + \"}\", encodeURIComponent(String(orderId)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new order.\n         * @summary Create a new order\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createOrder: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/orders\";\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deletes the Order based on order ID passed\n         * @summary Delete an existing Order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrder: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling destroyOrder.');\n            }\n            var localVarPath = \"/orders/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of items associated with an order.\n         * @summary Gets a list of items in a given order\n         * @param {string} orderId The Order ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItemsFromOrder: function (orderId, limit, offset, filter, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling listOrderItemsFromOrder.');\n            }\n            var localVarPath = \"/orders/{order_id}/order_items\"\n                .replace(\"{\" + \"order_id\" + \"}\", encodeURIComponent(String(orderId)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of orders associated with the logged in user.\n         * @summary Get a list of orders\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrders: function (limit, offset, filter, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/orders\";\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Restores the order specified by the order ID.\n         * @summary Restore specific Order\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrder: function (id, restoreKey, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling restoreOrder.');\n            }\n            // verify required parameter 'restoreKey' is not null or undefined\n            if (restoreKey === null || restoreKey === undefined) {\n                throw new RequiredError('restoreKey', 'Required parameter restoreKey was null or undefined when calling restoreOrder.');\n            }\n            var localVarPath = \"/orders/{id}/restore\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            var needsSerialization = (\"RestoreKey\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(restoreKey || {}) : (restoreKey || \"\");\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a specific order based on the order ID\n         * @summary Get a specific order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrder: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling showOrder.');\n            }\n            var localVarPath = \"/orders/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets an order item associated with an order.\n         * @summary Gets an individual order item from a given order\n         * @param {string} orderId The Order ID\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItemFromOrder: function (orderId, id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling showOrderItemFromOrder.');\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling showOrderItemFromOrder.');\n            }\n            var localVarPath = \"/orders/{order_id}/order_items/{id}\"\n                .replace(\"{\" + \"order_id\" + \"}\", encodeURIComponent(String(orderId)))\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an updated order.\n         * @summary Submit a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitOrder: function (orderId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderId' is not null or undefined\n            if (orderId === null || orderId === undefined) {\n                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling submitOrder.');\n            }\n            var localVarPath = \"/orders/{order_id}/submit_order\"\n                .replace(\"{\" + \"order_id\" + \"}\", encodeURIComponent(String(orderId)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * OrderApi - functional programming interface\n * @export\n */\nexports.OrderApiFp = function (configuration) {\n    return {\n        /**\n         * Adds an order item to an order in pending state\n         * @summary Add an order item to an order in pending state\n         * @param {string} orderId The Order ID\n         * @param {OrderItem} orderItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addToOrder: function (orderId, orderItem, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).addToOrder(orderId, orderItem, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns an updated order.\n         * @summary Cancels a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancelOrder: function (orderId, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).cancelOrder(orderId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Creates a new order.\n         * @summary Create a new order\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createOrder: function (options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).createOrder(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Deletes the Order based on order ID passed\n         * @summary Delete an existing Order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrder: function (id, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).destroyOrder(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of items associated with an order.\n         * @summary Gets a list of items in a given order\n         * @param {string} orderId The Order ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItemsFromOrder: function (orderId, limit, offset, filter, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).listOrderItemsFromOrder(orderId, limit, offset, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of orders associated with the logged in user.\n         * @summary Get a list of orders\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrders: function (limit, offset, filter, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).listOrders(limit, offset, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Restores the order specified by the order ID.\n         * @summary Restore specific Order\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrder: function (id, restoreKey, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).restoreOrder(id, restoreKey, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get a specific order based on the order ID\n         * @summary Get a specific order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrder: function (id, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).showOrder(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets an order item associated with an order.\n         * @summary Gets an individual order item from a given order\n         * @param {string} orderId The Order ID\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItemFromOrder: function (orderId, id, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).showOrderItemFromOrder(orderId, id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns an updated order.\n         * @summary Submit a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitOrder: function (orderId, options) {\n            var localVarAxiosArgs = exports.OrderApiAxiosParamCreator(configuration).submitOrder(orderId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * OrderApi - factory interface\n * @export\n */\nexports.OrderApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Adds an order item to an order in pending state\n         * @summary Add an order item to an order in pending state\n         * @param {string} orderId The Order ID\n         * @param {OrderItem} orderItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addToOrder: function (orderId, orderItem, options) {\n            return exports.OrderApiFp(configuration).addToOrder(orderId, orderItem, options)(axios, basePath);\n        },\n        /**\n         * Returns an updated order.\n         * @summary Cancels a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancelOrder: function (orderId, options) {\n            return exports.OrderApiFp(configuration).cancelOrder(orderId, options)(axios, basePath);\n        },\n        /**\n         * Creates a new order.\n         * @summary Create a new order\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createOrder: function (options) {\n            return exports.OrderApiFp(configuration).createOrder(options)(axios, basePath);\n        },\n        /**\n         * Deletes the Order based on order ID passed\n         * @summary Delete an existing Order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrder: function (id, options) {\n            return exports.OrderApiFp(configuration).destroyOrder(id, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of items associated with an order.\n         * @summary Gets a list of items in a given order\n         * @param {string} orderId The Order ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItemsFromOrder: function (orderId, limit, offset, filter, options) {\n            return exports.OrderApiFp(configuration).listOrderItemsFromOrder(orderId, limit, offset, filter, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of orders associated with the logged in user.\n         * @summary Get a list of orders\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrders: function (limit, offset, filter, options) {\n            return exports.OrderApiFp(configuration).listOrders(limit, offset, filter, options)(axios, basePath);\n        },\n        /**\n         * Restores the order specified by the order ID.\n         * @summary Restore specific Order\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrder: function (id, restoreKey, options) {\n            return exports.OrderApiFp(configuration).restoreOrder(id, restoreKey, options)(axios, basePath);\n        },\n        /**\n         * Get a specific order based on the order ID\n         * @summary Get a specific order\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrder: function (id, options) {\n            return exports.OrderApiFp(configuration).showOrder(id, options)(axios, basePath);\n        },\n        /**\n         * Gets an order item associated with an order.\n         * @summary Gets an individual order item from a given order\n         * @param {string} orderId The Order ID\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItemFromOrder: function (orderId, id, options) {\n            return exports.OrderApiFp(configuration).showOrderItemFromOrder(orderId, id, options)(axios, basePath);\n        },\n        /**\n         * Returns an updated order.\n         * @summary Submit a given order\n         * @param {string} orderId The Order ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitOrder: function (orderId, options) {\n            return exports.OrderApiFp(configuration).submitOrder(orderId, options)(axios, basePath);\n        },\n    };\n};\n/**\n * OrderApi - object-oriented interface\n * @export\n * @class OrderApi\n * @extends {BaseAPI}\n */\nvar OrderApi = /** @class */ (function (_super) {\n    __extends(OrderApi, _super);\n    function OrderApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Adds an order item to an order in pending state\n     * @summary Add an order item to an order in pending state\n     * @param {string} orderId The Order ID\n     * @param {OrderItem} orderItem\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.addToOrder = function (orderId, orderItem, options) {\n        return exports.OrderApiFp(this.configuration).addToOrder(orderId, orderItem, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns an updated order.\n     * @summary Cancels a given order\n     * @param {string} orderId The Order ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.cancelOrder = function (orderId, options) {\n        return exports.OrderApiFp(this.configuration).cancelOrder(orderId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Creates a new order.\n     * @summary Create a new order\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.createOrder = function (options) {\n        return exports.OrderApiFp(this.configuration).createOrder(options)(this.axios, this.basePath);\n    };\n    /**\n     * Deletes the Order based on order ID passed\n     * @summary Delete an existing Order\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.destroyOrder = function (id, options) {\n        return exports.OrderApiFp(this.configuration).destroyOrder(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of items associated with an order.\n     * @summary Gets a list of items in a given order\n     * @param {string} orderId The Order ID\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {any} [filter] Filter for querying collections.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.listOrderItemsFromOrder = function (orderId, limit, offset, filter, options) {\n        return exports.OrderApiFp(this.configuration).listOrderItemsFromOrder(orderId, limit, offset, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of orders associated with the logged in user.\n     * @summary Get a list of orders\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {any} [filter] Filter for querying collections.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.listOrders = function (limit, offset, filter, options) {\n        return exports.OrderApiFp(this.configuration).listOrders(limit, offset, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Restores the order specified by the order ID.\n     * @summary Restore specific Order\n     * @param {string} id ID of the resource\n     * @param {RestoreKey} restoreKey\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.restoreOrder = function (id, restoreKey, options) {\n        return exports.OrderApiFp(this.configuration).restoreOrder(id, restoreKey, options)(this.axios, this.basePath);\n    };\n    /**\n     * Get a specific order based on the order ID\n     * @summary Get a specific order\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.showOrder = function (id, options) {\n        return exports.OrderApiFp(this.configuration).showOrder(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets an order item associated with an order.\n     * @summary Gets an individual order item from a given order\n     * @param {string} orderId The Order ID\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.showOrderItemFromOrder = function (orderId, id, options) {\n        return exports.OrderApiFp(this.configuration).showOrderItemFromOrder(orderId, id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns an updated order.\n     * @summary Submit a given order\n     * @param {string} orderId The Order ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderApi\n     */\n    OrderApi.prototype.submitOrder = function (orderId, options) {\n        return exports.OrderApiFp(this.configuration).submitOrder(orderId, options)(this.axios, this.basePath);\n    };\n    return OrderApi;\n}(BaseAPI));\nexports.OrderApi = OrderApi;\n/**\n * OrderItemApi - axios parameter creator\n * @export\n */\nexports.OrderItemApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Deletes the order item  based on order item ID passed\n         * @summary Delete an existing OrderItem\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrderItem: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling destroyOrderItem.');\n            }\n            var localVarPath = \"/order_items/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of approval request associated with an order item. As the item is being approved one can check the status of the approvals.\n         * @summary Gets a list of approval requests for an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listApprovalRequests: function (orderItemId, limit, offset, filter, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderItemId' is not null or undefined\n            if (orderItemId === null || orderItemId === undefined) {\n                throw new RequiredError('orderItemId', 'Required parameter orderItemId was null or undefined when calling listApprovalRequests.');\n            }\n            var localVarPath = \"/order_items/{order_item_id}/approval_requests\"\n                .replace(\"{\" + \"order_item_id\" + \"}\", encodeURIComponent(String(orderItemId)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of order items.\n         * @summary List Order Items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItems: function (limit, offset, filter, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/order_items\";\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of progress messages associated with an order item. As the item is being processed the provider can update the progress messages.\n         * @summary Gets a list of progress messages in an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProgressMessages: function (orderItemId, limit, offset, filter, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'orderItemId' is not null or undefined\n            if (orderItemId === null || orderItemId === undefined) {\n                throw new RequiredError('orderItemId', 'Required parameter orderItemId was null or undefined when calling listProgressMessages.');\n            }\n            var localVarPath = \"/order_items/{order_item_id}/progress_messages\"\n                .replace(\"{\" + \"order_item_id\" + \"}\", encodeURIComponent(String(orderItemId)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Restores the order item specified by the order item ID.\n         * @summary Restore specific Order item\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrderItem: function (id, restoreKey, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling restoreOrderItem.');\n            }\n            // verify required parameter 'restoreKey' is not null or undefined\n            if (restoreKey === null || restoreKey === undefined) {\n                throw new RequiredError('restoreKey', 'Required parameter restoreKey was null or undefined when calling restoreOrderItem.');\n            }\n            var localVarPath = \"/order_items/{id}/restore\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            var needsSerialization = (\"RestoreKey\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(restoreKey || {}) : (restoreKey || \"\");\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a specific order item based on the order item ID passed\n         * @summary Gets a specific order item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItem: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling showOrderItem.');\n            }\n            var localVarPath = \"/order_items/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * OrderItemApi - functional programming interface\n * @export\n */\nexports.OrderItemApiFp = function (configuration) {\n    return {\n        /**\n         * Deletes the order item  based on order item ID passed\n         * @summary Delete an existing OrderItem\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrderItem: function (id, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).destroyOrderItem(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of approval request associated with an order item. As the item is being approved one can check the status of the approvals.\n         * @summary Gets a list of approval requests for an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listApprovalRequests: function (orderItemId, limit, offset, filter, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).listApprovalRequests(orderItemId, limit, offset, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of order items.\n         * @summary List Order Items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItems: function (limit, offset, filter, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).listOrderItems(limit, offset, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of progress messages associated with an order item. As the item is being processed the provider can update the progress messages.\n         * @summary Gets a list of progress messages in an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProgressMessages: function (orderItemId, limit, offset, filter, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).listProgressMessages(orderItemId, limit, offset, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Restores the order item specified by the order item ID.\n         * @summary Restore specific Order item\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrderItem: function (id, restoreKey, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).restoreOrderItem(id, restoreKey, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a specific order item based on the order item ID passed\n         * @summary Gets a specific order item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItem: function (id, options) {\n            var localVarAxiosArgs = exports.OrderItemApiAxiosParamCreator(configuration).showOrderItem(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * OrderItemApi - factory interface\n * @export\n */\nexports.OrderItemApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Deletes the order item  based on order item ID passed\n         * @summary Delete an existing OrderItem\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyOrderItem: function (id, options) {\n            return exports.OrderItemApiFp(configuration).destroyOrderItem(id, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of approval request associated with an order item. As the item is being approved one can check the status of the approvals.\n         * @summary Gets a list of approval requests for an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listApprovalRequests: function (orderItemId, limit, offset, filter, options) {\n            return exports.OrderItemApiFp(configuration).listApprovalRequests(orderItemId, limit, offset, filter, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of order items.\n         * @summary List Order Items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrderItems: function (limit, offset, filter, options) {\n            return exports.OrderItemApiFp(configuration).listOrderItems(limit, offset, filter, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of progress messages associated with an order item. As the item is being processed the provider can update the progress messages.\n         * @summary Gets a list of progress messages in an item\n         * @param {string} orderItemId The Order Item ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProgressMessages: function (orderItemId, limit, offset, filter, options) {\n            return exports.OrderItemApiFp(configuration).listProgressMessages(orderItemId, limit, offset, filter, options)(axios, basePath);\n        },\n        /**\n         * Restores the order item specified by the order item ID.\n         * @summary Restore specific Order item\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        restoreOrderItem: function (id, restoreKey, options) {\n            return exports.OrderItemApiFp(configuration).restoreOrderItem(id, restoreKey, options)(axios, basePath);\n        },\n        /**\n         * Gets a specific order item based on the order item ID passed\n         * @summary Gets a specific order item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showOrderItem: function (id, options) {\n            return exports.OrderItemApiFp(configuration).showOrderItem(id, options)(axios, basePath);\n        },\n    };\n};\n/**\n * OrderItemApi - object-oriented interface\n * @export\n * @class OrderItemApi\n * @extends {BaseAPI}\n */\nvar OrderItemApi = /** @class */ (function (_super) {\n    __extends(OrderItemApi, _super);\n    function OrderItemApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Deletes the order item  based on order item ID passed\n     * @summary Delete an existing OrderItem\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.destroyOrderItem = function (id, options) {\n        return exports.OrderItemApiFp(this.configuration).destroyOrderItem(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of approval request associated with an order item. As the item is being approved one can check the status of the approvals.\n     * @summary Gets a list of approval requests for an item\n     * @param {string} orderItemId The Order Item ID\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {any} [filter] Filter for querying collections.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.listApprovalRequests = function (orderItemId, limit, offset, filter, options) {\n        return exports.OrderItemApiFp(this.configuration).listApprovalRequests(orderItemId, limit, offset, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of order items.\n     * @summary List Order Items\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {any} [filter] Filter for querying collections.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.listOrderItems = function (limit, offset, filter, options) {\n        return exports.OrderItemApiFp(this.configuration).listOrderItems(limit, offset, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of progress messages associated with an order item. As the item is being processed the provider can update the progress messages.\n     * @summary Gets a list of progress messages in an item\n     * @param {string} orderItemId The Order Item ID\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {any} [filter] Filter for querying collections.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.listProgressMessages = function (orderItemId, limit, offset, filter, options) {\n        return exports.OrderItemApiFp(this.configuration).listProgressMessages(orderItemId, limit, offset, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Restores the order item specified by the order item ID.\n     * @summary Restore specific Order item\n     * @param {string} id ID of the resource\n     * @param {RestoreKey} restoreKey\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.restoreOrderItem = function (id, restoreKey, options) {\n        return exports.OrderItemApiFp(this.configuration).restoreOrderItem(id, restoreKey, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a specific order item based on the order item ID passed\n     * @summary Gets a specific order item\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrderItemApi\n     */\n    OrderItemApi.prototype.showOrderItem = function (id, options) {\n        return exports.OrderItemApiFp(this.configuration).showOrderItem(id, options)(this.axios, this.basePath);\n    };\n    return OrderItemApi;\n}(BaseAPI));\nexports.OrderItemApi = OrderItemApi;\n/**\n * PortfolioApi - axios parameter creator\n * @export\n */\nexports.PortfolioApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Adds a single tag to Portfolio object\n         * @summary Add Tag for Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioTag: function (id, tag, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling addPortfolioTag.');\n            }\n            // verify required parameter 'tag' is not null or undefined\n            if (tag === null || tag === undefined) {\n                throw new RequiredError('tag', 'Required parameter tag was null or undefined when calling addPortfolioTag.');\n            }\n            var localVarPath = \"/portfolios/{id}/tag\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            var needsSerialization = (\"Array&lt;Tag&gt;\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(tag || {}) : (tag || \"\");\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Adds a portfolio.\n         * @summary Add a new portfolio\n         * @param {Portfolio} portfolio Parameters needed to add a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolio: function (portfolio, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolio' is not null or undefined\n            if (portfolio === null || portfolio === undefined) {\n                throw new RequiredError('portfolio', 'Required parameter portfolio was null or undefined when calling createPortfolio.');\n            }\n            var localVarPath = \"/portfolios\";\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            var needsSerialization = (\"Portfolio\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(portfolio || {}) : (portfolio || \"\");\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deletes the portfolio specified by the ID.\n         * @summary Delete an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolio: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling destroyPortfolio.');\n            }\n            var localVarPath = \"/portfolios/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets all portfilio items in the portfolio specified by the given ID.\n         * @summary Get all portfolio items from a specific portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchPortfolioItemsWithPortfolio: function (portfolioId, limit, offset, filter, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling fetchPortfolioItemsWithPortfolio.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/portfolio_items\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioTags: function (id, limit, offset, filter, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling listPortfolioTags.');\n            }\n            var localVarPath = \"/portfolios/{id}/tags\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of portfolios.\n         * @summary List portfolios\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolios: function (limit, offset, filter, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/portfolios\";\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Make a copy of the Portfolio.\n         * @summary Make a copy of the Portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolio: function (portfolioId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling postCopyPortfolio.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/copy\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Remove Tags from Portfolio\n         * @summary Remove Tags from Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioTags: function (id, tag, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling removePortfolioTags.');\n            }\n            // verify required parameter 'tag' is not null or undefined\n            if (tag === null || tag === undefined) {\n                throw new RequiredError('tag', 'Required parameter tag was null or undefined when calling removePortfolioTags.');\n            }\n            var localVarPath = \"/portfolios/{id}/untag\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            var needsSerialization = (\"Array&lt;Tag&gt;\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(tag || {}) : (tag || \"\");\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch share information about a portfolio\n         * @summary Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        shareInfo: function (portfolioId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling shareInfo.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/share_info\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Share a Portfolio with one or more groups with specific permissions\n         * @summary Share a portfolio with one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {SharePolicy} sharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sharePortfolio: function (portfolioId, sharePolicy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling sharePortfolio.');\n            }\n            // verify required parameter 'sharePolicy' is not null or undefined\n            if (sharePolicy === null || sharePolicy === undefined) {\n                throw new RequiredError('sharePolicy', 'Required parameter sharePolicy was null or undefined when calling sharePortfolio.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/share\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            var needsSerialization = (\"SharePolicy\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(sharePolicy || {}) : (sharePolicy || \"\");\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets the portfolio specified by the portfolio ID.\n         * @summary Get a specific portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolio: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling showPortfolio.');\n            }\n            var localVarPath = \"/portfolios/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch the specified portfolio's icon image.\n         * @summary Fetches the specified portfolio's icon image\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioIcon: function (portfolioId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling showPortfolioIcon.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/icon\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Undeletes the portfolio specified by the portfolio ID.\n         * @summary Undelete specific portfolio\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolio: function (id, restoreKey, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling unDeletePortfolio.');\n            }\n            // verify required parameter 'restoreKey' is not null or undefined\n            if (restoreKey === null || restoreKey === undefined) {\n                throw new RequiredError('restoreKey', 'Required parameter restoreKey was null or undefined when calling unDeletePortfolio.');\n            }\n            var localVarPath = \"/portfolios/{id}/undelete\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            var needsSerialization = (\"RestoreKey\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(restoreKey || {}) : (restoreKey || \"\");\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Unshare a Portfolio with one or more groups with specific permissions\n         * @summary Unshare a portfolio from one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {UnsharePolicy} unsharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unsharePortfolio: function (portfolioId, unsharePolicy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioId' is not null or undefined\n            if (portfolioId === null || portfolioId === undefined) {\n                throw new RequiredError('portfolioId', 'Required parameter portfolioId was null or undefined when calling unsharePortfolio.');\n            }\n            // verify required parameter 'unsharePolicy' is not null or undefined\n            if (unsharePolicy === null || unsharePolicy === undefined) {\n                throw new RequiredError('unsharePolicy', 'Required parameter unsharePolicy was null or undefined when calling unsharePortfolio.');\n            }\n            var localVarPath = \"/portfolios/{portfolio_id}/unshare\"\n                .replace(\"{\" + \"portfolio_id\" + \"}\", encodeURIComponent(String(portfolioId)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            var needsSerialization = (\"UnsharePolicy\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(unsharePolicy || {}) : (unsharePolicy || \"\");\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the edited portfolio.\n         * @summary Edit an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {Portfolio} portfolio Parameters needed to update a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolio: function (id, portfolio, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updatePortfolio.');\n            }\n            // verify required parameter 'portfolio' is not null or undefined\n            if (portfolio === null || portfolio === undefined) {\n                throw new RequiredError('portfolio', 'Required parameter portfolio was null or undefined when calling updatePortfolio.');\n            }\n            var localVarPath = \"/portfolios/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            var needsSerialization = (\"Portfolio\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(portfolio || {}) : (portfolio || \"\");\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * PortfolioApi - functional programming interface\n * @export\n */\nexports.PortfolioApiFp = function (configuration) {\n    return {\n        /**\n         * Adds a single tag to Portfolio object\n         * @summary Add Tag for Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioTag: function (id, tag, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).addPortfolioTag(id, tag, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Adds a portfolio.\n         * @summary Add a new portfolio\n         * @param {Portfolio} portfolio Parameters needed to add a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolio: function (portfolio, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).createPortfolio(portfolio, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Deletes the portfolio specified by the ID.\n         * @summary Delete an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolio: function (id, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).destroyPortfolio(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets all portfilio items in the portfolio specified by the given ID.\n         * @summary Get all portfolio items from a specific portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchPortfolioItemsWithPortfolio: function (portfolioId, limit, offset, filter, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).fetchPortfolioItemsWithPortfolio(portfolioId, limit, offset, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioTags: function (id, limit, offset, filter, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).listPortfolioTags(id, limit, offset, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of portfolios.\n         * @summary List portfolios\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolios: function (limit, offset, filter, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).listPortfolios(limit, offset, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Make a copy of the Portfolio.\n         * @summary Make a copy of the Portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolio: function (portfolioId, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).postCopyPortfolio(portfolioId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Remove Tags from Portfolio\n         * @summary Remove Tags from Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioTags: function (id, tag, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).removePortfolioTags(id, tag, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Fetch share information about a portfolio\n         * @summary Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        shareInfo: function (portfolioId, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).shareInfo(portfolioId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Share a Portfolio with one or more groups with specific permissions\n         * @summary Share a portfolio with one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {SharePolicy} sharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sharePortfolio: function (portfolioId, sharePolicy, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).sharePortfolio(portfolioId, sharePolicy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets the portfolio specified by the portfolio ID.\n         * @summary Get a specific portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolio: function (id, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).showPortfolio(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Fetch the specified portfolio's icon image.\n         * @summary Fetches the specified portfolio's icon image\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioIcon: function (portfolioId, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).showPortfolioIcon(portfolioId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Undeletes the portfolio specified by the portfolio ID.\n         * @summary Undelete specific portfolio\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolio: function (id, restoreKey, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).unDeletePortfolio(id, restoreKey, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Unshare a Portfolio with one or more groups with specific permissions\n         * @summary Unshare a portfolio from one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {UnsharePolicy} unsharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unsharePortfolio: function (portfolioId, unsharePolicy, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).unsharePortfolio(portfolioId, unsharePolicy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns the edited portfolio.\n         * @summary Edit an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {Portfolio} portfolio Parameters needed to update a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolio: function (id, portfolio, options) {\n            var localVarAxiosArgs = exports.PortfolioApiAxiosParamCreator(configuration).updatePortfolio(id, portfolio, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * PortfolioApi - factory interface\n * @export\n */\nexports.PortfolioApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Adds a single tag to Portfolio object\n         * @summary Add Tag for Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioTag: function (id, tag, options) {\n            return exports.PortfolioApiFp(configuration).addPortfolioTag(id, tag, options)(axios, basePath);\n        },\n        /**\n         * Adds a portfolio.\n         * @summary Add a new portfolio\n         * @param {Portfolio} portfolio Parameters needed to add a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolio: function (portfolio, options) {\n            return exports.PortfolioApiFp(configuration).createPortfolio(portfolio, options)(axios, basePath);\n        },\n        /**\n         * Deletes the portfolio specified by the ID.\n         * @summary Delete an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolio: function (id, options) {\n            return exports.PortfolioApiFp(configuration).destroyPortfolio(id, options)(axios, basePath);\n        },\n        /**\n         * Gets all portfilio items in the portfolio specified by the given ID.\n         * @summary Get all portfolio items from a specific portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchPortfolioItemsWithPortfolio: function (portfolioId, limit, offset, filter, options) {\n            return exports.PortfolioApiFp(configuration).fetchPortfolioItemsWithPortfolio(portfolioId, limit, offset, filter, options)(axios, basePath);\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioTags: function (id, limit, offset, filter, options) {\n            return exports.PortfolioApiFp(configuration).listPortfolioTags(id, limit, offset, filter, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of portfolios.\n         * @summary List portfolios\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolios: function (limit, offset, filter, options) {\n            return exports.PortfolioApiFp(configuration).listPortfolios(limit, offset, filter, options)(axios, basePath);\n        },\n        /**\n         * Make a copy of the Portfolio.\n         * @summary Make a copy of the Portfolio\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolio: function (portfolioId, options) {\n            return exports.PortfolioApiFp(configuration).postCopyPortfolio(portfolioId, options)(axios, basePath);\n        },\n        /**\n         * Remove Tags from Portfolio\n         * @summary Remove Tags from Portfolio\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioTags: function (id, tag, options) {\n            return exports.PortfolioApiFp(configuration).removePortfolioTags(id, tag, options)(axios, basePath);\n        },\n        /**\n         * Fetch share information about a portfolio\n         * @summary Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        shareInfo: function (portfolioId, options) {\n            return exports.PortfolioApiFp(configuration).shareInfo(portfolioId, options)(axios, basePath);\n        },\n        /**\n         * Share a Portfolio with one or more groups with specific permissions\n         * @summary Share a portfolio with one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {SharePolicy} sharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sharePortfolio: function (portfolioId, sharePolicy, options) {\n            return exports.PortfolioApiFp(configuration).sharePortfolio(portfolioId, sharePolicy, options)(axios, basePath);\n        },\n        /**\n         * Gets the portfolio specified by the portfolio ID.\n         * @summary Get a specific portfolio\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolio: function (id, options) {\n            return exports.PortfolioApiFp(configuration).showPortfolio(id, options)(axios, basePath);\n        },\n        /**\n         * Fetch the specified portfolio's icon image.\n         * @summary Fetches the specified portfolio's icon image\n         * @param {string} portfolioId The Portfolio ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioIcon: function (portfolioId, options) {\n            return exports.PortfolioApiFp(configuration).showPortfolioIcon(portfolioId, options)(axios, basePath);\n        },\n        /**\n         * Undeletes the portfolio specified by the portfolio ID.\n         * @summary Undelete specific portfolio\n         * @param {string} id ID of the resource\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolio: function (id, restoreKey, options) {\n            return exports.PortfolioApiFp(configuration).unDeletePortfolio(id, restoreKey, options)(axios, basePath);\n        },\n        /**\n         * Unshare a Portfolio with one or more groups with specific permissions\n         * @summary Unshare a portfolio from one or more groups with specific permission\n         * @param {string} portfolioId The Portfolio ID\n         * @param {UnsharePolicy} unsharePolicy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unsharePortfolio: function (portfolioId, unsharePolicy, options) {\n            return exports.PortfolioApiFp(configuration).unsharePortfolio(portfolioId, unsharePolicy, options)(axios, basePath);\n        },\n        /**\n         * Returns the edited portfolio.\n         * @summary Edit an existing portfolio\n         * @param {string} id ID of the resource\n         * @param {Portfolio} portfolio Parameters needed to update a Portfolio\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolio: function (id, portfolio, options) {\n            return exports.PortfolioApiFp(configuration).updatePortfolio(id, portfolio, options)(axios, basePath);\n        },\n    };\n};\n/**\n * PortfolioApi - object-oriented interface\n * @export\n * @class PortfolioApi\n * @extends {BaseAPI}\n */\nvar PortfolioApi = /** @class */ (function (_super) {\n    __extends(PortfolioApi, _super);\n    function PortfolioApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Adds a single tag to Portfolio object\n     * @summary Add Tag for Portfolio\n     * @param {string} id ID of the resource\n     * @param {Array<Tag>} tag\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.addPortfolioTag = function (id, tag, options) {\n        return exports.PortfolioApiFp(this.configuration).addPortfolioTag(id, tag, options)(this.axios, this.basePath);\n    };\n    /**\n     * Adds a portfolio.\n     * @summary Add a new portfolio\n     * @param {Portfolio} portfolio Parameters needed to add a Portfolio\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.createPortfolio = function (portfolio, options) {\n        return exports.PortfolioApiFp(this.configuration).createPortfolio(portfolio, options)(this.axios, this.basePath);\n    };\n    /**\n     * Deletes the portfolio specified by the ID.\n     * @summary Delete an existing portfolio\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.destroyPortfolio = function (id, options) {\n        return exports.PortfolioApiFp(this.configuration).destroyPortfolio(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets all portfilio items in the portfolio specified by the given ID.\n     * @summary Get all portfolio items from a specific portfolio\n     * @param {string} portfolioId The Portfolio ID\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {any} [filter] Filter for querying collections.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.fetchPortfolioItemsWithPortfolio = function (portfolioId, limit, offset, filter, options) {\n        return exports.PortfolioApiFp(this.configuration).fetchPortfolioItemsWithPortfolio(portfolioId, limit, offset, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns an array of Tag objects\n     * @summary List Tags for Portfolio\n     * @param {string} id ID of the resource\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {any} [filter] Filter for querying collections.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.listPortfolioTags = function (id, limit, offset, filter, options) {\n        return exports.PortfolioApiFp(this.configuration).listPortfolioTags(id, limit, offset, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of portfolios.\n     * @summary List portfolios\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {any} [filter] Filter for querying collections.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.listPortfolios = function (limit, offset, filter, options) {\n        return exports.PortfolioApiFp(this.configuration).listPortfolios(limit, offset, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Make a copy of the Portfolio.\n     * @summary Make a copy of the Portfolio\n     * @param {string} portfolioId The Portfolio ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.postCopyPortfolio = function (portfolioId, options) {\n        return exports.PortfolioApiFp(this.configuration).postCopyPortfolio(portfolioId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Remove Tags from Portfolio\n     * @summary Remove Tags from Portfolio\n     * @param {string} id ID of the resource\n     * @param {Array<Tag>} tag\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.removePortfolioTags = function (id, tag, options) {\n        return exports.PortfolioApiFp(this.configuration).removePortfolioTags(id, tag, options)(this.axios, this.basePath);\n    };\n    /**\n     * Fetch share information about a portfolio\n     * @summary Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group\n     * @param {string} portfolioId The Portfolio ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.shareInfo = function (portfolioId, options) {\n        return exports.PortfolioApiFp(this.configuration).shareInfo(portfolioId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Share a Portfolio with one or more groups with specific permissions\n     * @summary Share a portfolio with one or more groups with specific permission\n     * @param {string} portfolioId The Portfolio ID\n     * @param {SharePolicy} sharePolicy\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.sharePortfolio = function (portfolioId, sharePolicy, options) {\n        return exports.PortfolioApiFp(this.configuration).sharePortfolio(portfolioId, sharePolicy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets the portfolio specified by the portfolio ID.\n     * @summary Get a specific portfolio\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.showPortfolio = function (id, options) {\n        return exports.PortfolioApiFp(this.configuration).showPortfolio(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Fetch the specified portfolio's icon image.\n     * @summary Fetches the specified portfolio's icon image\n     * @param {string} portfolioId The Portfolio ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.showPortfolioIcon = function (portfolioId, options) {\n        return exports.PortfolioApiFp(this.configuration).showPortfolioIcon(portfolioId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Undeletes the portfolio specified by the portfolio ID.\n     * @summary Undelete specific portfolio\n     * @param {string} id ID of the resource\n     * @param {RestoreKey} restoreKey\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.unDeletePortfolio = function (id, restoreKey, options) {\n        return exports.PortfolioApiFp(this.configuration).unDeletePortfolio(id, restoreKey, options)(this.axios, this.basePath);\n    };\n    /**\n     * Unshare a Portfolio with one or more groups with specific permissions\n     * @summary Unshare a portfolio from one or more groups with specific permission\n     * @param {string} portfolioId The Portfolio ID\n     * @param {UnsharePolicy} unsharePolicy\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.unsharePortfolio = function (portfolioId, unsharePolicy, options) {\n        return exports.PortfolioApiFp(this.configuration).unsharePortfolio(portfolioId, unsharePolicy, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns the edited portfolio.\n     * @summary Edit an existing portfolio\n     * @param {string} id ID of the resource\n     * @param {Portfolio} portfolio Parameters needed to update a Portfolio\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioApi\n     */\n    PortfolioApi.prototype.updatePortfolio = function (id, portfolio, options) {\n        return exports.PortfolioApiFp(this.configuration).updatePortfolio(id, portfolio, options)(this.axios, this.basePath);\n    };\n    return PortfolioApi;\n}(BaseAPI));\nexports.PortfolioApi = PortfolioApi;\n/**\n * PortfolioItemApi - axios parameter creator\n * @export\n */\nexports.PortfolioItemApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Adds a single tag to a Portfolio Item object\n         * @summary Add Tag for Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioItemTag: function (id, tag, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling addPortfolioItemTag.');\n            }\n            // verify required parameter 'tag' is not null or undefined\n            if (tag === null || tag === undefined) {\n                throw new RequiredError('tag', 'Required parameter tag was null or undefined when calling addPortfolioItemTag.');\n            }\n            var localVarPath = \"/portfolio_items/{id}/tag\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            var needsSerialization = (\"Array&lt;Tag&gt;\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(tag || {}) : (tag || \"\");\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Adds a name and description for a portfolio item and returns the newly created portfolio item.\n         * @summary Add a new portfolio item\n         * @param {CreatePortfolioItem} createPortfolioItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolioItem: function (createPortfolioItem, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'createPortfolioItem' is not null or undefined\n            if (createPortfolioItem === null || createPortfolioItem === undefined) {\n                throw new RequiredError('createPortfolioItem', 'Required parameter createPortfolioItem was null or undefined when calling createPortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items\";\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            var needsSerialization = (\"CreatePortfolioItem\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(createPortfolioItem || {}) : (createPortfolioItem || \"\");\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deletes the portfolio item based on portfolio item ID passed\n         * @summary Delete an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolioItem: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling destroyPortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the next name for a the Portfolio Item prior to a copy operation\n         * @summary Get the next name for a the Portfolio Item prior to a copy operation\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {string} [destinationPortfolioId] The destination portfolio to compare names against\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPortfolioItemNextName: function (portfolioItemId, destinationPortfolioId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling getPortfolioItemNextName.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/next_name\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            if (destinationPortfolioId !== undefined) {\n                localVarQueryParameter['destination_portfolio_id'] = destinationPortfolioId;\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio Items\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItemTags: function (id, limit, offset, filter, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling listPortfolioItemTags.');\n            }\n            var localVarPath = \"/portfolio_items/{id}/tags\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a list of portfolio items.\n         * @summary List all portfolio items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItems: function (limit, offset, filter, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/portfolio_items\";\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets the provider control parameters for a portfolio item.\n         * @summary Gets the provider control parameters for this portfolio item; requires control paramaters provided when provisioning the portfolio item.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProviderControlParameters: function (portfolioItemId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling listProviderControlParameters.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/provider_control_parameters\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets all service plans for a portfolio item.\n         * @summary Gets all service plans for a specific portfolio item; requires a connection to the topology service.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServicePlans: function (portfolioItemId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling listServicePlans.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/service_plans\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Make a copy of the Portfolio Item.\n         * @summary Make a copy of the Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {CopyPortfolioItem} [copyPortfolioItem]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolioItem: function (portfolioItemId, copyPortfolioItem, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling postCopyPortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/copy\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            var needsSerialization = (\"CopyPortfolioItem\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(copyPortfolioItem || {}) : (copyPortfolioItem || \"\");\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Remove Tags from Portfolio Item\n         * @summary Remove Tags from Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioItemTags: function (id, tag, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling removePortfolioItemTags.');\n            }\n            // verify required parameter 'tag' is not null or undefined\n            if (tag === null || tag === undefined) {\n                throw new RequiredError('tag', 'Required parameter tag was null or undefined when calling removePortfolioItemTags.');\n            }\n            var localVarPath = \"/portfolio_items/{id}/untag\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            var needsSerialization = (\"Array&lt;Tag&gt;\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(tag || {}) : (tag || \"\");\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a specific portfolio item based on the portfolio item ID passed\n         * @summary Gets a specific portfolio item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItem: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling showPortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch the specified portfolio item's icon image.\n         * @summary Fetches the specified portfolio item's icon image\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItemIcon: function (portfolioItemId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling showPortfolioItemIcon.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/icon\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * If a record has been discarded, this operation will undelete it so it can be requested normally.\n         * @summary Undelete a specified Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolioItem: function (portfolioItemId, restoreKey, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portfolioItemId' is not null or undefined\n            if (portfolioItemId === null || portfolioItemId === undefined) {\n                throw new RequiredError('portfolioItemId', 'Required parameter portfolioItemId was null or undefined when calling unDeletePortfolioItem.');\n            }\n            // verify required parameter 'restoreKey' is not null or undefined\n            if (restoreKey === null || restoreKey === undefined) {\n                throw new RequiredError('restoreKey', 'Required parameter restoreKey was null or undefined when calling unDeletePortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items/{portfolio_item_id}/undelete\"\n                .replace(\"{\" + \"portfolio_item_id\" + \"}\", encodeURIComponent(String(portfolioItemId)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            var needsSerialization = (\"RestoreKey\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(restoreKey || {}) : (restoreKey || \"\");\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Edits portfolio item specified by the given ID.\n         * @summary Edit an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {PortfolioItem} portfolioItem Parameters needed to update a Portfolio Item\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolioItem: function (id, portfolioItem, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updatePortfolioItem.');\n            }\n            // verify required parameter 'portfolioItem' is not null or undefined\n            if (portfolioItem === null || portfolioItem === undefined) {\n                throw new RequiredError('portfolioItem', 'Required parameter portfolioItem was null or undefined when calling updatePortfolioItem.');\n            }\n            var localVarPath = \"/portfolio_items/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            var needsSerialization = (\"PortfolioItem\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(portfolioItem || {}) : (portfolioItem || \"\");\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * PortfolioItemApi - functional programming interface\n * @export\n */\nexports.PortfolioItemApiFp = function (configuration) {\n    return {\n        /**\n         * Adds a single tag to a Portfolio Item object\n         * @summary Add Tag for Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioItemTag: function (id, tag, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).addPortfolioItemTag(id, tag, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Adds a name and description for a portfolio item and returns the newly created portfolio item.\n         * @summary Add a new portfolio item\n         * @param {CreatePortfolioItem} createPortfolioItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolioItem: function (createPortfolioItem, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).createPortfolioItem(createPortfolioItem, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Deletes the portfolio item based on portfolio item ID passed\n         * @summary Delete an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolioItem: function (id, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).destroyPortfolioItem(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get the next name for a the Portfolio Item prior to a copy operation\n         * @summary Get the next name for a the Portfolio Item prior to a copy operation\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {string} [destinationPortfolioId] The destination portfolio to compare names against\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPortfolioItemNextName: function (portfolioItemId, destinationPortfolioId, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).getPortfolioItemNextName(portfolioItemId, destinationPortfolioId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio Items\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItemTags: function (id, limit, offset, filter, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).listPortfolioItemTags(id, limit, offset, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a list of portfolio items.\n         * @summary List all portfolio items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItems: function (limit, offset, filter, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).listPortfolioItems(limit, offset, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets the provider control parameters for a portfolio item.\n         * @summary Gets the provider control parameters for this portfolio item; requires control paramaters provided when provisioning the portfolio item.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProviderControlParameters: function (portfolioItemId, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).listProviderControlParameters(portfolioItemId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets all service plans for a portfolio item.\n         * @summary Gets all service plans for a specific portfolio item; requires a connection to the topology service.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServicePlans: function (portfolioItemId, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).listServicePlans(portfolioItemId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Make a copy of the Portfolio Item.\n         * @summary Make a copy of the Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {CopyPortfolioItem} [copyPortfolioItem]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolioItem: function (portfolioItemId, copyPortfolioItem, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).postCopyPortfolioItem(portfolioItemId, copyPortfolioItem, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Remove Tags from Portfolio Item\n         * @summary Remove Tags from Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioItemTags: function (id, tag, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).removePortfolioItemTags(id, tag, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a specific portfolio item based on the portfolio item ID passed\n         * @summary Gets a specific portfolio item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItem: function (id, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).showPortfolioItem(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Fetch the specified portfolio item's icon image.\n         * @summary Fetches the specified portfolio item's icon image\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItemIcon: function (portfolioItemId, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).showPortfolioItemIcon(portfolioItemId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * If a record has been discarded, this operation will undelete it so it can be requested normally.\n         * @summary Undelete a specified Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolioItem: function (portfolioItemId, restoreKey, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).unDeletePortfolioItem(portfolioItemId, restoreKey, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Edits portfolio item specified by the given ID.\n         * @summary Edit an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {PortfolioItem} portfolioItem Parameters needed to update a Portfolio Item\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolioItem: function (id, portfolioItem, options) {\n            var localVarAxiosArgs = exports.PortfolioItemApiAxiosParamCreator(configuration).updatePortfolioItem(id, portfolioItem, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * PortfolioItemApi - factory interface\n * @export\n */\nexports.PortfolioItemApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Adds a single tag to a Portfolio Item object\n         * @summary Add Tag for Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPortfolioItemTag: function (id, tag, options) {\n            return exports.PortfolioItemApiFp(configuration).addPortfolioItemTag(id, tag, options)(axios, basePath);\n        },\n        /**\n         * Adds a name and description for a portfolio item and returns the newly created portfolio item.\n         * @summary Add a new portfolio item\n         * @param {CreatePortfolioItem} createPortfolioItem\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPortfolioItem: function (createPortfolioItem, options) {\n            return exports.PortfolioItemApiFp(configuration).createPortfolioItem(createPortfolioItem, options)(axios, basePath);\n        },\n        /**\n         * Deletes the portfolio item based on portfolio item ID passed\n         * @summary Delete an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroyPortfolioItem: function (id, options) {\n            return exports.PortfolioItemApiFp(configuration).destroyPortfolioItem(id, options)(axios, basePath);\n        },\n        /**\n         * Get the next name for a the Portfolio Item prior to a copy operation\n         * @summary Get the next name for a the Portfolio Item prior to a copy operation\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {string} [destinationPortfolioId] The destination portfolio to compare names against\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPortfolioItemNextName: function (portfolioItemId, destinationPortfolioId, options) {\n            return exports.PortfolioItemApiFp(configuration).getPortfolioItemNextName(portfolioItemId, destinationPortfolioId, options)(axios, basePath);\n        },\n        /**\n         * Returns an array of Tag objects\n         * @summary List Tags for Portfolio Items\n         * @param {string} id ID of the resource\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItemTags: function (id, limit, offset, filter, options) {\n            return exports.PortfolioItemApiFp(configuration).listPortfolioItemTags(id, limit, offset, filter, options)(axios, basePath);\n        },\n        /**\n         * Gets a list of portfolio items.\n         * @summary List all portfolio items\n         * @param {number} [limit] The numbers of items to return per page.\n         * @param {number} [offset] The number of items to skip before starting to collect the result set.\n         * @param {any} [filter] Filter for querying collections.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPortfolioItems: function (limit, offset, filter, options) {\n            return exports.PortfolioItemApiFp(configuration).listPortfolioItems(limit, offset, filter, options)(axios, basePath);\n        },\n        /**\n         * Gets the provider control parameters for a portfolio item.\n         * @summary Gets the provider control parameters for this portfolio item; requires control paramaters provided when provisioning the portfolio item.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listProviderControlParameters: function (portfolioItemId, options) {\n            return exports.PortfolioItemApiFp(configuration).listProviderControlParameters(portfolioItemId, options)(axios, basePath);\n        },\n        /**\n         * Gets all service plans for a portfolio item.\n         * @summary Gets all service plans for a specific portfolio item; requires a connection to the topology service.\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServicePlans: function (portfolioItemId, options) {\n            return exports.PortfolioItemApiFp(configuration).listServicePlans(portfolioItemId, options)(axios, basePath);\n        },\n        /**\n         * Make a copy of the Portfolio Item.\n         * @summary Make a copy of the Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {CopyPortfolioItem} [copyPortfolioItem]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCopyPortfolioItem: function (portfolioItemId, copyPortfolioItem, options) {\n            return exports.PortfolioItemApiFp(configuration).postCopyPortfolioItem(portfolioItemId, copyPortfolioItem, options)(axios, basePath);\n        },\n        /**\n         * Remove Tags from Portfolio Item\n         * @summary Remove Tags from Portfolio Item\n         * @param {string} id ID of the resource\n         * @param {Array<Tag>} tag\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removePortfolioItemTags: function (id, tag, options) {\n            return exports.PortfolioItemApiFp(configuration).removePortfolioItemTags(id, tag, options)(axios, basePath);\n        },\n        /**\n         * Gets a specific portfolio item based on the portfolio item ID passed\n         * @summary Gets a specific portfolio item\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItem: function (id, options) {\n            return exports.PortfolioItemApiFp(configuration).showPortfolioItem(id, options)(axios, basePath);\n        },\n        /**\n         * Fetch the specified portfolio item's icon image.\n         * @summary Fetches the specified portfolio item's icon image\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showPortfolioItemIcon: function (portfolioItemId, options) {\n            return exports.PortfolioItemApiFp(configuration).showPortfolioItemIcon(portfolioItemId, options)(axios, basePath);\n        },\n        /**\n         * If a record has been discarded, this operation will undelete it so it can be requested normally.\n         * @summary Undelete a specified Portfolio Item\n         * @param {string} portfolioItemId The Portfolio Item ID\n         * @param {RestoreKey} restoreKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unDeletePortfolioItem: function (portfolioItemId, restoreKey, options) {\n            return exports.PortfolioItemApiFp(configuration).unDeletePortfolioItem(portfolioItemId, restoreKey, options)(axios, basePath);\n        },\n        /**\n         * Edits portfolio item specified by the given ID.\n         * @summary Edit an existing portfolio item\n         * @param {string} id ID of the resource\n         * @param {PortfolioItem} portfolioItem Parameters needed to update a Portfolio Item\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePortfolioItem: function (id, portfolioItem, options) {\n            return exports.PortfolioItemApiFp(configuration).updatePortfolioItem(id, portfolioItem, options)(axios, basePath);\n        },\n    };\n};\n/**\n * PortfolioItemApi - object-oriented interface\n * @export\n * @class PortfolioItemApi\n * @extends {BaseAPI}\n */\nvar PortfolioItemApi = /** @class */ (function (_super) {\n    __extends(PortfolioItemApi, _super);\n    function PortfolioItemApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Adds a single tag to a Portfolio Item object\n     * @summary Add Tag for Portfolio Item\n     * @param {string} id ID of the resource\n     * @param {Array<Tag>} tag\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.addPortfolioItemTag = function (id, tag, options) {\n        return exports.PortfolioItemApiFp(this.configuration).addPortfolioItemTag(id, tag, options)(this.axios, this.basePath);\n    };\n    /**\n     * Adds a name and description for a portfolio item and returns the newly created portfolio item.\n     * @summary Add a new portfolio item\n     * @param {CreatePortfolioItem} createPortfolioItem\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.createPortfolioItem = function (createPortfolioItem, options) {\n        return exports.PortfolioItemApiFp(this.configuration).createPortfolioItem(createPortfolioItem, options)(this.axios, this.basePath);\n    };\n    /**\n     * Deletes the portfolio item based on portfolio item ID passed\n     * @summary Delete an existing portfolio item\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.destroyPortfolioItem = function (id, options) {\n        return exports.PortfolioItemApiFp(this.configuration).destroyPortfolioItem(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Get the next name for a the Portfolio Item prior to a copy operation\n     * @summary Get the next name for a the Portfolio Item prior to a copy operation\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {string} [destinationPortfolioId] The destination portfolio to compare names against\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.getPortfolioItemNextName = function (portfolioItemId, destinationPortfolioId, options) {\n        return exports.PortfolioItemApiFp(this.configuration).getPortfolioItemNextName(portfolioItemId, destinationPortfolioId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns an array of Tag objects\n     * @summary List Tags for Portfolio Items\n     * @param {string} id ID of the resource\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {any} [filter] Filter for querying collections.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.listPortfolioItemTags = function (id, limit, offset, filter, options) {\n        return exports.PortfolioItemApiFp(this.configuration).listPortfolioItemTags(id, limit, offset, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a list of portfolio items.\n     * @summary List all portfolio items\n     * @param {number} [limit] The numbers of items to return per page.\n     * @param {number} [offset] The number of items to skip before starting to collect the result set.\n     * @param {any} [filter] Filter for querying collections.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.listPortfolioItems = function (limit, offset, filter, options) {\n        return exports.PortfolioItemApiFp(this.configuration).listPortfolioItems(limit, offset, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets the provider control parameters for a portfolio item.\n     * @summary Gets the provider control parameters for this portfolio item; requires control paramaters provided when provisioning the portfolio item.\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.listProviderControlParameters = function (portfolioItemId, options) {\n        return exports.PortfolioItemApiFp(this.configuration).listProviderControlParameters(portfolioItemId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets all service plans for a portfolio item.\n     * @summary Gets all service plans for a specific portfolio item; requires a connection to the topology service.\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.listServicePlans = function (portfolioItemId, options) {\n        return exports.PortfolioItemApiFp(this.configuration).listServicePlans(portfolioItemId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Make a copy of the Portfolio Item.\n     * @summary Make a copy of the Portfolio Item\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {CopyPortfolioItem} [copyPortfolioItem]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.postCopyPortfolioItem = function (portfolioItemId, copyPortfolioItem, options) {\n        return exports.PortfolioItemApiFp(this.configuration).postCopyPortfolioItem(portfolioItemId, copyPortfolioItem, options)(this.axios, this.basePath);\n    };\n    /**\n     * Remove Tags from Portfolio Item\n     * @summary Remove Tags from Portfolio Item\n     * @param {string} id ID of the resource\n     * @param {Array<Tag>} tag\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.removePortfolioItemTags = function (id, tag, options) {\n        return exports.PortfolioItemApiFp(this.configuration).removePortfolioItemTags(id, tag, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a specific portfolio item based on the portfolio item ID passed\n     * @summary Gets a specific portfolio item\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.showPortfolioItem = function (id, options) {\n        return exports.PortfolioItemApiFp(this.configuration).showPortfolioItem(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Fetch the specified portfolio item's icon image.\n     * @summary Fetches the specified portfolio item's icon image\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.showPortfolioItemIcon = function (portfolioItemId, options) {\n        return exports.PortfolioItemApiFp(this.configuration).showPortfolioItemIcon(portfolioItemId, options)(this.axios, this.basePath);\n    };\n    /**\n     * If a record has been discarded, this operation will undelete it so it can be requested normally.\n     * @summary Undelete a specified Portfolio Item\n     * @param {string} portfolioItemId The Portfolio Item ID\n     * @param {RestoreKey} restoreKey\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.unDeletePortfolioItem = function (portfolioItemId, restoreKey, options) {\n        return exports.PortfolioItemApiFp(this.configuration).unDeletePortfolioItem(portfolioItemId, restoreKey, options)(this.axios, this.basePath);\n    };\n    /**\n     * Edits portfolio item specified by the given ID.\n     * @summary Edit an existing portfolio item\n     * @param {string} id ID of the resource\n     * @param {PortfolioItem} portfolioItem Parameters needed to update a Portfolio Item\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PortfolioItemApi\n     */\n    PortfolioItemApi.prototype.updatePortfolioItem = function (id, portfolioItem, options) {\n        return exports.PortfolioItemApiFp(this.configuration).updatePortfolioItem(id, portfolioItem, options)(this.axios, this.basePath);\n    };\n    return PortfolioItemApi;\n}(BaseAPI));\nexports.PortfolioItemApi = PortfolioItemApi;\n/**\n * ServicePlansApi - axios parameter creator\n * @export\n */\nexports.ServicePlansApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Returns the new Service Plan\n         * @summary Create Service Plan\n         * @param {ImportServicePlan} [importServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServicePlan: function (importServicePlan, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/service_plans\";\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            var needsSerialization = (\"ImportServicePlan\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(importServicePlan || {}) : (importServicePlan || \"\");\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Patch Service Plan Modified Schema\n         * @param {string} id ID of the resource\n         * @param {PatchModifiedServicePlan} [patchModifiedServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchServicePlanModified: function (id, patchModifiedServicePlan, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling patchServicePlanModified.');\n            }\n            var localVarPath = \"/service_plans/{id}/modified\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            var needsSerialization = (\"PatchModifiedServicePlan\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchModifiedServicePlan || {}) : (patchModifiedServicePlan || \"\");\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Resets the Service Plan's Modified schema\n         * @summary Reset Service Plan Modified schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServicePlanModified: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling resetServicePlanModified.');\n            }\n            var localVarPath = \"/service_plans/{id}/reset\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the specified Service Plan\n         * @summary Show Service Plan\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlan: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling showServicePlan.');\n            }\n            var localVarPath = \"/service_plans/{id}\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the specified Service Plan's base schema\n         * @summary Show Service Plan Base Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanBase: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling showServicePlanBase.');\n            }\n            var localVarPath = \"/service_plans/{id}/base\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the specified Service Plan's modified schema\n         * @summary Show Service Plan modified Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanModified: function (id, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling showServicePlanModified.');\n            }\n            var localVarPath = \"/service_plans/{id}/modified\"\n                .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * ServicePlansApi - functional programming interface\n * @export\n */\nexports.ServicePlansApiFp = function (configuration) {\n    return {\n        /**\n         * Returns the new Service Plan\n         * @summary Create Service Plan\n         * @param {ImportServicePlan} [importServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServicePlan: function (importServicePlan, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).createServicePlan(importServicePlan, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Patch Service Plan Modified Schema\n         * @param {string} id ID of the resource\n         * @param {PatchModifiedServicePlan} [patchModifiedServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchServicePlanModified: function (id, patchModifiedServicePlan, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).patchServicePlanModified(id, patchModifiedServicePlan, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Resets the Service Plan's Modified schema\n         * @summary Reset Service Plan Modified schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServicePlanModified: function (id, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).resetServicePlanModified(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns the specified Service Plan\n         * @summary Show Service Plan\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlan: function (id, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).showServicePlan(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns the specified Service Plan's base schema\n         * @summary Show Service Plan Base Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanBase: function (id, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).showServicePlanBase(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns the specified Service Plan's modified schema\n         * @summary Show Service Plan modified Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanModified: function (id, options) {\n            var localVarAxiosArgs = exports.ServicePlansApiAxiosParamCreator(configuration).showServicePlanModified(id, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * ServicePlansApi - factory interface\n * @export\n */\nexports.ServicePlansApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Returns the new Service Plan\n         * @summary Create Service Plan\n         * @param {ImportServicePlan} [importServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServicePlan: function (importServicePlan, options) {\n            return exports.ServicePlansApiFp(configuration).createServicePlan(importServicePlan, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Patch Service Plan Modified Schema\n         * @param {string} id ID of the resource\n         * @param {PatchModifiedServicePlan} [patchModifiedServicePlan]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchServicePlanModified: function (id, patchModifiedServicePlan, options) {\n            return exports.ServicePlansApiFp(configuration).patchServicePlanModified(id, patchModifiedServicePlan, options)(axios, basePath);\n        },\n        /**\n         * Resets the Service Plan's Modified schema\n         * @summary Reset Service Plan Modified schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServicePlanModified: function (id, options) {\n            return exports.ServicePlansApiFp(configuration).resetServicePlanModified(id, options)(axios, basePath);\n        },\n        /**\n         * Returns the specified Service Plan\n         * @summary Show Service Plan\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlan: function (id, options) {\n            return exports.ServicePlansApiFp(configuration).showServicePlan(id, options)(axios, basePath);\n        },\n        /**\n         * Returns the specified Service Plan's base schema\n         * @summary Show Service Plan Base Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanBase: function (id, options) {\n            return exports.ServicePlansApiFp(configuration).showServicePlanBase(id, options)(axios, basePath);\n        },\n        /**\n         * Returns the specified Service Plan's modified schema\n         * @summary Show Service Plan modified Schema\n         * @param {string} id ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showServicePlanModified: function (id, options) {\n            return exports.ServicePlansApiFp(configuration).showServicePlanModified(id, options)(axios, basePath);\n        },\n    };\n};\n/**\n * ServicePlansApi - object-oriented interface\n * @export\n * @class ServicePlansApi\n * @extends {BaseAPI}\n */\nvar ServicePlansApi = /** @class */ (function (_super) {\n    __extends(ServicePlansApi, _super);\n    function ServicePlansApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Returns the new Service Plan\n     * @summary Create Service Plan\n     * @param {ImportServicePlan} [importServicePlan]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.createServicePlan = function (importServicePlan, options) {\n        return exports.ServicePlansApiFp(this.configuration).createServicePlan(importServicePlan, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Patch Service Plan Modified Schema\n     * @param {string} id ID of the resource\n     * @param {PatchModifiedServicePlan} [patchModifiedServicePlan]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.patchServicePlanModified = function (id, patchModifiedServicePlan, options) {\n        return exports.ServicePlansApiFp(this.configuration).patchServicePlanModified(id, patchModifiedServicePlan, options)(this.axios, this.basePath);\n    };\n    /**\n     * Resets the Service Plan's Modified schema\n     * @summary Reset Service Plan Modified schema\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.resetServicePlanModified = function (id, options) {\n        return exports.ServicePlansApiFp(this.configuration).resetServicePlanModified(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns the specified Service Plan\n     * @summary Show Service Plan\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.showServicePlan = function (id, options) {\n        return exports.ServicePlansApiFp(this.configuration).showServicePlan(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns the specified Service Plan's base schema\n     * @summary Show Service Plan Base Schema\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.showServicePlanBase = function (id, options) {\n        return exports.ServicePlansApiFp(this.configuration).showServicePlanBase(id, options)(this.axios, this.basePath);\n    };\n    /**\n     * Returns the specified Service Plan's modified schema\n     * @summary Show Service Plan modified Schema\n     * @param {string} id ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServicePlansApi\n     */\n    ServicePlansApi.prototype.showServicePlanModified = function (id, options) {\n        return exports.ServicePlansApiFp(this.configuration).showServicePlanModified(id, options)(this.axios, this.basePath);\n    };\n    return ServicePlansApi;\n}(BaseAPI));\nexports.ServicePlansApi = ServicePlansApi;\n/**\n * SettingsApi - axios parameter creator\n * @export\n */\nexports.SettingsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Create Tenant Setting\n         * @summary Create Tenant Setting\n         * @param {Setting} setting Json encoded key/value pair to create a new setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSetting: function (setting, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'setting' is not null or undefined\n            if (setting === null || setting === undefined) {\n                throw new RequiredError('setting', 'Required parameter setting was null or undefined when calling createSetting.');\n            }\n            var localVarPath = \"/settings\";\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            var needsSerialization = (\"Setting\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(setting || {}) : (setting || \"\");\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a Tenant Setting\n         * @summary Delete a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroySetting: function (name, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new RequiredError('name', 'Required parameter name was null or undefined when calling destroySetting.');\n            }\n            var localVarPath = \"/settings/{name}\"\n                .replace(\"{\" + \"name\" + \"}\", encodeURIComponent(String(name)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List Tenant Settings\n         * @summary List Tenant Settings\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSettings: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/settings\";\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a specific Tenant Setting\n         * @summary Get a specific Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showSetting: function (name, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new RequiredError('name', 'Required parameter name was null or undefined when calling showSetting.');\n            }\n            var localVarPath = \"/settings/{name}\"\n                .replace(\"{\" + \"name\" + \"}\", encodeURIComponent(String(name)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a Tenant Setting\n         * @summary Update a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSetting: function (name, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new RequiredError('name', 'Required parameter name was null or undefined when calling updateSetting.');\n            }\n            var localVarPath = \"/settings/{name}\"\n                .replace(\"{\" + \"name\" + \"}\", encodeURIComponent(String(name)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * SettingsApi - functional programming interface\n * @export\n */\nexports.SettingsApiFp = function (configuration) {\n    return {\n        /**\n         * Create Tenant Setting\n         * @summary Create Tenant Setting\n         * @param {Setting} setting Json encoded key/value pair to create a new setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSetting: function (setting, options) {\n            var localVarAxiosArgs = exports.SettingsApiAxiosParamCreator(configuration).createSetting(setting, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Delete a Tenant Setting\n         * @summary Delete a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroySetting: function (name, options) {\n            var localVarAxiosArgs = exports.SettingsApiAxiosParamCreator(configuration).destroySetting(name, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * List Tenant Settings\n         * @summary List Tenant Settings\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSettings: function (options) {\n            var localVarAxiosArgs = exports.SettingsApiAxiosParamCreator(configuration).listSettings(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get a specific Tenant Setting\n         * @summary Get a specific Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showSetting: function (name, options) {\n            var localVarAxiosArgs = exports.SettingsApiAxiosParamCreator(configuration).showSetting(name, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Update a Tenant Setting\n         * @summary Update a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSetting: function (name, options) {\n            var localVarAxiosArgs = exports.SettingsApiAxiosParamCreator(configuration).updateSetting(name, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * SettingsApi - factory interface\n * @export\n */\nexports.SettingsApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Create Tenant Setting\n         * @summary Create Tenant Setting\n         * @param {Setting} setting Json encoded key/value pair to create a new setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSetting: function (setting, options) {\n            return exports.SettingsApiFp(configuration).createSetting(setting, options)(axios, basePath);\n        },\n        /**\n         * Delete a Tenant Setting\n         * @summary Delete a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        destroySetting: function (name, options) {\n            return exports.SettingsApiFp(configuration).destroySetting(name, options)(axios, basePath);\n        },\n        /**\n         * List Tenant Settings\n         * @summary List Tenant Settings\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSettings: function (options) {\n            return exports.SettingsApiFp(configuration).listSettings(options)(axios, basePath);\n        },\n        /**\n         * Get a specific Tenant Setting\n         * @summary Get a specific Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showSetting: function (name, options) {\n            return exports.SettingsApiFp(configuration).showSetting(name, options)(axios, basePath);\n        },\n        /**\n         * Update a Tenant Setting\n         * @summary Update a Tenant Setting\n         * @param {string} name name of the setting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSetting: function (name, options) {\n            return exports.SettingsApiFp(configuration).updateSetting(name, options)(axios, basePath);\n        },\n    };\n};\n/**\n * SettingsApi - object-oriented interface\n * @export\n * @class SettingsApi\n * @extends {BaseAPI}\n */\nvar SettingsApi = /** @class */ (function (_super) {\n    __extends(SettingsApi, _super);\n    function SettingsApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Create Tenant Setting\n     * @summary Create Tenant Setting\n     * @param {Setting} setting Json encoded key/value pair to create a new setting\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    SettingsApi.prototype.createSetting = function (setting, options) {\n        return exports.SettingsApiFp(this.configuration).createSetting(setting, options)(this.axios, this.basePath);\n    };\n    /**\n     * Delete a Tenant Setting\n     * @summary Delete a Tenant Setting\n     * @param {string} name name of the setting\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    SettingsApi.prototype.destroySetting = function (name, options) {\n        return exports.SettingsApiFp(this.configuration).destroySetting(name, options)(this.axios, this.basePath);\n    };\n    /**\n     * List Tenant Settings\n     * @summary List Tenant Settings\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    SettingsApi.prototype.listSettings = function (options) {\n        return exports.SettingsApiFp(this.configuration).listSettings(options)(this.axios, this.basePath);\n    };\n    /**\n     * Get a specific Tenant Setting\n     * @summary Get a specific Tenant Setting\n     * @param {string} name name of the setting\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    SettingsApi.prototype.showSetting = function (name, options) {\n        return exports.SettingsApiFp(this.configuration).showSetting(name, options)(this.axios, this.basePath);\n    };\n    /**\n     * Update a Tenant Setting\n     * @summary Update a Tenant Setting\n     * @param {string} name name of the setting\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    SettingsApi.prototype.updateSetting = function (name, options) {\n        return exports.SettingsApiFp(this.configuration).updateSetting(name, options)(this.axios, this.basePath);\n    };\n    return SettingsApi;\n}(BaseAPI));\nexports.SettingsApi = SettingsApi;\n/**\n * TagsApi - axios parameter creator\n * @export\n */\nexports.TagsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * List Tags\n         * @summary List Tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTags: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/tags\";\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * TagsApi - functional programming interface\n * @export\n */\nexports.TagsApiFp = function (configuration) {\n    return {\n        /**\n         * List Tags\n         * @summary List Tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTags: function (options) {\n            var localVarAxiosArgs = exports.TagsApiAxiosParamCreator(configuration).listTags(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * TagsApi - factory interface\n * @export\n */\nexports.TagsApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * List Tags\n         * @summary List Tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTags: function (options) {\n            return exports.TagsApiFp(configuration).listTags(options)(axios, basePath);\n        },\n    };\n};\n/**\n * TagsApi - object-oriented interface\n * @export\n * @class TagsApi\n * @extends {BaseAPI}\n */\nvar TagsApi = /** @class */ (function (_super) {\n    __extends(TagsApi, _super);\n    function TagsApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * List Tags\n     * @summary List Tags\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TagsApi\n     */\n    TagsApi.prototype.listTags = function (options) {\n        return exports.TagsApiFp(this.configuration).listTags(options)(this.axios, this.basePath);\n    };\n    return TagsApi;\n}(BaseAPI));\nexports.TagsApi = TagsApi;\n/**\n * TenantApi - axios parameter creator\n * @export\n */\nexports.TenantApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Get a list of tenants.\n         * @summary List Tenants\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTenants: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/tenants\";\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets the tenant specified by the tenant id.\n         * @summary Get a specific Tenant\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showTenant: function (tenantId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'tenantId' is not null or undefined\n            if (tenantId === null || tenantId === undefined) {\n                throw new RequiredError('tenantId', 'Required parameter tenantId was null or undefined when calling showTenant.');\n            }\n            var localVarPath = \"/tenants/{tenant_id}\"\n                .replace(\"{\" + \"tenant_id\" + \"}\", encodeURIComponent(String(tenantId)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Run a task to seed the Tenant Groups required for an org admin to onboard additional users.\n         * @summary Seed Tenant Groups\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tenantSeed: function (tenantId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'tenantId' is not null or undefined\n            if (tenantId === null || tenantId === undefined) {\n                throw new RequiredError('tenantId', 'Required parameter tenantId was null or undefined when calling tenantSeed.');\n            }\n            var localVarPath = \"/tenants/{tenant_id}/seed\"\n                .replace(\"{\" + \"tenant_id\" + \"}\", encodeURIComponent(String(tenantId)));\n            var localVarUrlObj = url.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * TenantApi - functional programming interface\n * @export\n */\nexports.TenantApiFp = function (configuration) {\n    return {\n        /**\n         * Get a list of tenants.\n         * @summary List Tenants\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTenants: function (options) {\n            var localVarAxiosArgs = exports.TenantApiAxiosParamCreator(configuration).listTenants(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets the tenant specified by the tenant id.\n         * @summary Get a specific Tenant\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showTenant: function (tenantId, options) {\n            var localVarAxiosArgs = exports.TenantApiAxiosParamCreator(configuration).showTenant(tenantId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Run a task to seed the Tenant Groups required for an org admin to onboard additional users.\n         * @summary Seed Tenant Groups\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tenantSeed: function (tenantId, options) {\n            var localVarAxiosArgs = exports.TenantApiAxiosParamCreator(configuration).tenantSeed(tenantId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = BASE_PATH; }\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * TenantApi - factory interface\n * @export\n */\nexports.TenantApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Get a list of tenants.\n         * @summary List Tenants\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTenants: function (options) {\n            return exports.TenantApiFp(configuration).listTenants(options)(axios, basePath);\n        },\n        /**\n         * Gets the tenant specified by the tenant id.\n         * @summary Get a specific Tenant\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        showTenant: function (tenantId, options) {\n            return exports.TenantApiFp(configuration).showTenant(tenantId, options)(axios, basePath);\n        },\n        /**\n         * Run a task to seed the Tenant Groups required for an org admin to onboard additional users.\n         * @summary Seed Tenant Groups\n         * @param {string} tenantId ID of the resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tenantSeed: function (tenantId, options) {\n            return exports.TenantApiFp(configuration).tenantSeed(tenantId, options)(axios, basePath);\n        },\n    };\n};\n/**\n * TenantApi - object-oriented interface\n * @export\n * @class TenantApi\n * @extends {BaseAPI}\n */\nvar TenantApi = /** @class */ (function (_super) {\n    __extends(TenantApi, _super);\n    function TenantApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Get a list of tenants.\n     * @summary List Tenants\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TenantApi\n     */\n    TenantApi.prototype.listTenants = function (options) {\n        return exports.TenantApiFp(this.configuration).listTenants(options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets the tenant specified by the tenant id.\n     * @summary Get a specific Tenant\n     * @param {string} tenantId ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TenantApi\n     */\n    TenantApi.prototype.showTenant = function (tenantId, options) {\n        return exports.TenantApiFp(this.configuration).showTenant(tenantId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Run a task to seed the Tenant Groups required for an org admin to onboard additional users.\n     * @summary Seed Tenant Groups\n     * @param {string} tenantId ID of the resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TenantApi\n     */\n    TenantApi.prototype.tenantSeed = function (tenantId, options) {\n        return exports.TenantApiFp(this.configuration).tenantSeed(tenantId, options)(this.axios, this.basePath);\n    };\n    return TenantApi;\n}(BaseAPI));\nexports.TenantApi = TenantApi;\n"],"sourceRoot":""}