{"version":3,"file":"js/portfolio-item-detail.d9f1a65a3c89091e1901.js","mappings":"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","sources":["webpack:///./src/smart-components/portfolio/portfolio-item-detail/detail-toolbar-actions.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/portfolio-item-detail-toolbar.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/item-detail-info-bar.js","webpack:///./src/forms/edit-portfolio-item-form.schema.ts","webpack:///./src/messages/icon.messages.ts","webpack:///./src/smart-components/portfolio/portfolio-item-detail/icon-upload.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/edit-portfolio-item.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/item-detail-description.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/portfolio-item-detail.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  KebabToggle,\n  LevelItem\n} from '@patternfly/react-core';\nimport ButtonWithSpinner from '../../../presentational-components/shared/button-with-spinner';\nimport CatalogLink from '../../common/catalog-link';\nimport actionMessages from '../../../messages/actions.messages';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport orderProcessesMessages from '../../../messages/order-processes.messages';\nimport { PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE } from '../../../constants/routes';\n\nconst DetailToolbarActions = ({\n  copyUrl,\n  orderUrl,\n  editUrl,\n  workflowUrl,\n  editSurveyUrl,\n  isOpen,\n  setOpen,\n  isFetching,\n  availability,\n  orderable,\n  userCapabilities,\n  canLinkOrderProcesses\n}) => {\n  const formatMessage = useFormatMessage();\n  const dropdownItems = [];\n\n  if (userCapabilities?.update) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Edit Portfolio\"\n        key=\"edit-portfolio-item\"\n        id=\"edit-portfolio-item\"\n        component={\n          <CatalogLink pathname={editUrl} preserveSearch>\n            {formatMessage(actionMessages.edit)}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (userCapabilities?.copy) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Copy Portfolio\"\n        key=\"copy-portfolio-item\"\n        id=\"copy-portfolio-item\"\n        component={\n          <CatalogLink pathname={copyUrl} preserveSearch>\n            {formatMessage(actionMessages.copy)}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (userCapabilities?.set_approval) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Set approval\"\n        key=\"set-approval_workflow\"\n        id=\"set-approval_workflow\"\n        component={\n          <CatalogLink pathname={workflowUrl} preserveSearch>\n            {formatMessage(actionMessages.setApproval)}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (userCapabilities?.update && canLinkOrderProcesses) {\n    const orderProcessAction = formatMessage(\n      orderProcessesMessages.setOrderProcess\n    );\n    dropdownItems.push(\n      <DropdownItem\n        aria-label={orderProcessAction}\n        key=\"attach-order-processes\"\n        id=\"attach-order-processes\"\n        component={\n          <CatalogLink\n            preserveSearch\n            pathname={PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE}\n          >\n            {orderProcessAction}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (userCapabilities?.update) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Edit survey\"\n        key=\"edit-survey\"\n        id=\"edit-survey\"\n        component={\n          <CatalogLink pathname={editSurveyUrl} preserveSearch>\n            {formatMessage(portfolioMessages.portfolioItemSurvey)}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  return (\n    <Fragment>\n      <LevelItem>\n        <CatalogLink\n          isDisabled={isFetching || !orderable}\n          pathname={orderUrl}\n          preserveSearch\n        >\n          <ButtonWithSpinner\n            isDisabled={isFetching || !orderable}\n            showSpinner={isFetching}\n            variant=\"primary\"\n            id=\"order-portfolio-item\"\n            ouiaId=\"order-portfolio-item\"\n          >\n            {formatMessage(portfolioMessages.portfolioItemOrder)}\n          </ButtonWithSpinner>\n        </CatalogLink>\n      </LevelItem>\n      <LevelItem style={{ marginLeft: 16 }}>\n        {availability !== 'unavailable' && dropdownItems.length > 0 && (\n          <Dropdown\n            isPlain\n            onToggle={setOpen}\n            onSelect={() => setOpen(false)}\n            position={DropdownPosition.right}\n            toggle={\n              <KebabToggle\n                id=\"portfolio-item-actions-toggle\"\n                onToggle={(isOpen) => setOpen(isOpen)}\n              />\n            }\n            isOpen={isOpen}\n            dropdownItems={dropdownItems}\n          />\n        )}\n      </LevelItem>\n    </Fragment>\n  );\n};\n\nDetailToolbarActions.propTypes = {\n  orderUrl: PropTypes.string.isRequired,\n  editUrl: PropTypes.string.isRequired,\n  copyUrl: PropTypes.string.isRequired,\n  editSurveyUrl: PropTypes.string.isRequired,\n  workflowUrl: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool,\n  setOpen: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool,\n  availability: PropTypes.oneOf(['available', 'unavailable']).isRequired,\n  orderable: PropTypes.bool,\n  userCapabilities: PropTypes.shape({\n    update: PropTypes.bool,\n    copy: PropTypes.bool,\n    set_approval: PropTypes.bool\n  }).isRequired,\n  canLinkOrderProcesses: PropTypes.bool\n};\n\nDetailToolbarActions.defaultProps = {\n  isFetching: false,\n  orderable: true,\n  canLinkOrderProcesses: false\n};\n\nexport default DetailToolbarActions;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Link, Switch, useLocation } from 'react-router-dom';\nimport {\n  Level,\n  LevelItem,\n  Text,\n  TextContent,\n  TextVariants,\n  Button,\n  Flex,\n  Dropdown,\n  KebabToggle,\n  DropdownItem\n} from '@patternfly/react-core';\n\nimport DetailToolbarActions from './detail-toolbar-actions';\nimport { CATALOG_API_BASE } from '../../../utilities/constants';\nimport CardIcon from '../../../presentational-components/shared/card-icon';\nimport TopToolbar, {\n  TopToolbarTitle\n} from '../../../presentational-components/shared/top-toolbar';\nimport ButtonWithSpinner from '../../../presentational-components/shared/button-with-spinner';\nimport { StyledLevelItem } from '../../../presentational-components/styled-components/level';\nimport actionMessages from '../../../messages/actions.messages';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport BackToProducts from '../../../presentational-components/portfolio/back-to-products';\nimport { PORTFOLIO_ITEM_ROUTE_EDIT } from '../../../constants/routes';\nimport useFormatMessage from '../../../utilities/use-format-message';\n\nconst PortfolioItemIconItem = ({ product }) => (\n  <CardIcon\n    src={\n      window.catalog?.standalone\n        ? product.icon_url\n        : `${CATALOG_API_BASE}/portfolio_items/${product.id}/icon`\n    }\n    sourceId={product?.service_offering_source_ref}\n    height={64}\n  />\n);\n\nPortfolioItemIconItem.propTypes = {\n  product: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    service_offering_source_ref: PropTypes.string,\n    icon_url: PropTypes.string\n  }).isRequired\n};\n\nexport const PortfolioItemDetailToolbar = ({\n  url,\n  isOpen,\n  product,\n  setOpen,\n  isFetching,\n  availability,\n  userCapabilities,\n  orderable,\n  fromProducts,\n  canLinkOrderProcesses,\n  breadcrumbfragments\n}) => {\n  const formatMessage = useFormatMessage();\n  const { pathname } = useLocation();\n\n  return (\n    <TopToolbar\n      paddingBottom={pathname !== PORTFOLIO_ITEM_ROUTE_EDIT}\n      breadcrumbs={!fromProducts}\n      breadcrumbfragments={breadcrumbfragments}\n    >\n      {fromProducts && <BackToProducts />}\n      <Level className=\"flex-no-wrap\">\n        <Switch>\n          <Route path={PORTFOLIO_ITEM_ROUTE_EDIT} exact>\n            <TopToolbarTitle\n              title={formatMessage(portfolioMessages.editProduct)}\n              noData\n            />\n          </Route>\n          <Route>\n            <StyledLevelItem grow alignStart className=\"pf-l-flex\">\n              {userCapabilities.update ? (\n                <PortfolioItemIconItem product={product} />\n              ) : (\n                <CardIcon\n                  src={\n                    window.catalog?.standalone\n                      ? product.icon_url\n                      : `${CATALOG_API_BASE}/portfolio_items/${product.id}/icon`\n                  }\n                  sourceId={product.service_offering_source_ref}\n                  height={64}\n                />\n              )}\n              <TextContent className=\"pf-u-ml-md\">\n                <Text component={TextVariants.h1}>{product.name}</Text>\n              </TextContent>\n            </StyledLevelItem>\n            <LevelItem style={{ minHeight: 36 }} className=\"flex-item-no-wrap\">\n              <Level className=\"flex-no-wrap\">\n                <DetailToolbarActions\n                  isOpen={isOpen}\n                  setOpen={(open) => setOpen(open)}\n                  orderUrl={`${url}/order`}\n                  editUrl={`${url}/edit`}\n                  copyUrl={`${url}/copy`}\n                  editSurveyUrl={`${url}/edit-survey`}\n                  workflowUrl={`${url}/edit-workflow`}\n                  isFetching={isFetching}\n                  availability={availability}\n                  orderable={orderable}\n                  userCapabilities={userCapabilities}\n                  canLinkOrderProcesses={canLinkOrderProcesses}\n                />\n              </Level>\n            </LevelItem>\n          </Route>\n        </Switch>\n      </Level>\n    </TopToolbar>\n  );\n};\n\nPortfolioItemDetailToolbar.propTypes = {\n  url: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool,\n  product: PropTypes.shape({\n    distributor: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    service_offering_source_ref: PropTypes.string.isRequired,\n    metadata: PropTypes.shape({ orderable: PropTypes.bool }),\n    icon_url: PropTypes.string\n  }).isRequired,\n  setOpen: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool,\n  availability: PropTypes.oneOf(['available', 'unavailable']).isRequired,\n  userCapabilities: PropTypes.object,\n  fromProducts: PropTypes.bool,\n  orderable: PropTypes.bool,\n  canLinkOrderProcesses: PropTypes.bool\n};\n\nPortfolioItemDetailToolbar.defaultProps = {\n  isFetching: false,\n  orderable: true\n};\n\nconst SurveyEditorDropdown = ({ handleResetSurvey }) => {\n  const formatMessage = useFormatMessage();\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <Dropdown\n      isOpen={isOpen}\n      isPlain\n      onSelect={() => setIsOpen(false)}\n      position=\"right\"\n      toggle={<KebabToggle onToggle={(isOpen) => setIsOpen(isOpen)} />}\n      dropdownItems={[\n        <DropdownItem\n          onClick={handleResetSurvey}\n          component=\"button\"\n          key=\"synchronize\"\n        >\n          {formatMessage(portfolioMessages.restoreSurvey)}\n        </DropdownItem>\n      ]}\n    />\n  );\n};\n\nSurveyEditorDropdown.propTypes = {\n  handleResetSurvey: PropTypes.func.isRequired\n};\n\nexport const SurveyEditingToolbar = ({\n  handleSaveSurvey,\n  breadcrumbfragments,\n  closeUrl,\n  search,\n  isFetching,\n  isValid,\n  modified,\n  breadcrumbs,\n  handleResetSurvey\n}) => {\n  const formatMessage = useFormatMessage();\n  return (\n    <TopToolbar\n      breadcrumbs={breadcrumbs}\n      breadcrumbfragments={breadcrumbfragments}\n    >\n      <Level>\n        <StyledLevelItem grow alignStart className=\"pf-l-flex\">\n          <TextContent>\n            <Text component={TextVariants.h1}>\n              {formatMessage(portfolioMessages.portfolioItemSurvey)}\n            </Text>\n          </TextContent>\n        </StyledLevelItem>\n        <LevelItem>\n          <Flex className=\"align-items-center\">\n            <ButtonWithSpinner\n              variant=\"primary\"\n              ouiaId={'save-survey'}\n              showSpinner={isFetching}\n              isDisabled={isFetching || !isValid}\n              onClick={handleSaveSurvey}\n            >\n              {formatMessage(actionMessages.save)}\n            </ButtonWithSpinner>\n            <Link\n              to={{\n                pathname: closeUrl,\n                search\n              }}\n            >\n              <Button ouiaId={'cancel'} variant=\"link\">\n                Cancel\n              </Button>\n            </Link>\n            {modified && (\n              <SurveyEditorDropdown handleResetSurvey={handleResetSurvey} />\n            )}\n          </Flex>\n        </LevelItem>\n      </Level>\n    </TopToolbar>\n  );\n};\n\nSurveyEditingToolbar.propTypes = {\n  handleSaveSurvey: PropTypes.func.isRequired,\n  closeUrl: PropTypes.string.isRequired,\n  search: PropTypes.string.isRequired,\n  isFetching: PropTypes.bool,\n  isValid: PropTypes.bool,\n  modified: PropTypes.bool,\n  handleResetSurvey: PropTypes.func,\n  fromProducts: PropTypes.bool,\n  canLinkOrderProcesses: PropTypes.bool\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport useFormatMessage from '../../../utilities/use-format-message';\n\nconst messages = {\n  platform: {\n    id: 'portfolio.item.detail.info.platform',\n    defaultMessage: 'Platform'\n  },\n  portfolio: {\n    id: 'portfolio.item.detail.info.portfolio',\n    defaultMessage: 'Portfolio'\n  },\n  vendor: {\n    id: 'portfolio.item.detail.info.vendor',\n    defaultMessage: 'Vendor'\n  },\n  created: {\n    id: 'portfolio.item.detail.info.created',\n    defaultMessage: 'Created'\n  }\n};\n\nconst ItemDetailInfoBar = ({ product, source, portfolio }) => {\n  const formatMessage = useFormatMessage();\n  return (\n    <TextContent className=\"pf-u-mb-md\">\n      <Text className=\"font-14\">{formatMessage(messages.platform)}</Text>\n      <Text\n        id=\"source-name\"\n        className=\"overflow-wrap\"\n        component={TextVariants.p}\n      >\n        {source.name}\n      </Text>\n      <Text className=\"font-14\">{formatMessage(messages.portfolio)}</Text>\n      <Text\n        id=\"portfolio-name\"\n        className=\"overflow-wrap\"\n        component={TextVariants.p}\n      >\n        {portfolio.name}\n      </Text>\n      {product.distributor && (\n        <span id=\"distributor\">\n          <Text className=\"font-14\">{formatMessage(messages.vendor)}</Text>\n          <Text className=\"overflow-wrap\" component={TextVariants.p}>\n            {product.distributor}\n          </Text>\n        </span>\n      )}\n      <Text className=\"font-14\">{formatMessage(messages.created)}</Text>\n      <Text id=\"created_at\" component={TextVariants.p}>\n        <DateFormat variant=\"relative\" date={product.created_at} />\n      </Text>\n    </TextContent>\n  );\n};\n\nItemDetailInfoBar.propTypes = {\n  product: PropTypes.shape({\n    distributor: PropTypes.string,\n    updated_at: PropTypes.string,\n    created_at: PropTypes.string.isRequired\n  }).isRequired,\n  source: PropTypes.shape({\n    name: PropTypes.string\n  }).isRequired,\n  portfolio: PropTypes.shape({\n    name: PropTypes.string\n  }).isRequired\n};\n\nexport default ItemDetailInfoBar;\n","import Schema from '@data-driven-forms/react-form-renderer/common-types/schema';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nconst editPortfolioItemSchema: Schema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'schemas.portfolio-item.name',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }]\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'description',\n      label: 'schemas.portfolio-item.description'\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'long_description',\n      label: 'schemas.portfolio-item.long_description'\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'distributor',\n      label: 'schemas.portfolio-item.vendor'\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'documentation_url',\n      label: 'schemas.portfolio-item.documentation_url',\n      validate: [\n        {\n          type: validatorTypes.URL\n        }\n      ]\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'support_url',\n      label: 'schemas.portfolio-item.support_url',\n      validate: [\n        {\n          type: validatorTypes.URL\n        }\n      ]\n    }\n  ]\n};\n\nexport default editPortfolioItemSchema;\n","import { defineMessages } from 'react-intl';\n\nconst iconMessages = defineMessages({\n  changeIcon: {\n    id: 'icons.actions.change',\n    defaultMessage: 'Upload image'\n  },\n  resetIcon: {\n    id: 'icons.actions.reset',\n    defaultMessage: 'Reset image'\n  }\n});\n\nexport default iconMessages;\n","import React, { useState, useRef } from 'react';\nimport { PencilAltIcon } from '@patternfly/react-icons';\nimport {\n  Spinner,\n  Dropdown,\n  DropdownToggle,\n  DropdownItem\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport styled from 'styled-components';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport iconMessages from '../../../messages/icon.messages';\n\nconst UploadButton = styled.span`\n  border: none;\n  position: absolute;\n  top: 0;\n  left: 0;\n  padding-left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: transparent;\n  &::after {\n    content: ' ';\n    position: absolute;\n    display: block;\n    top: -0.3em;\n    right: -0.3em;\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    background-color: rgba(255, 255, 255, 0.8);\n    z-index: 0;\n  }\n  svg,\n  .pf-c-spinner {\n    z-index: 1;\n    position: absolute;\n    top: 0;\n    right: 0;\n  }\n`;\n\nconst UploadIconWrapper = styled.div`\n  position: relative;\n  display: inline-block;\n`;\n\nconst ImagePreview = styled.img`\n  height: 64px;\n  max-width: 300px;\n  object-fit: cover;\n`;\n\nconst StyledDropdown = styled(Dropdown)`\n  .pf-c-dropdown__menu {\n    top: 24px;\n    left: calc(100% - 24px);\n  }\n`;\n\nconst IconUpload = ({ uploadIcon, resetIcon, enableReset, children }) => {\n  const formatMessage = useFormatMessage();\n  const inputRef = useRef();\n  const [image, setImage] = useState();\n  const [isUploading, setIsUploading] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const handleClick = () => {\n    setIsOpen(false);\n    return inputRef.current.click();\n  };\n\n  const handleReset = () => {\n    setImage(undefined);\n    setIsUploading(true);\n    return resetIcon().then(() => setIsUploading(false));\n  };\n\n  const dispatch = useDispatch();\n\n  const dropdownItems = [\n    <DropdownItem onClick={handleClick} key=\"change-icon\">\n      {formatMessage(iconMessages.changeIcon)}\n    </DropdownItem>,\n    <DropdownItem\n      isDisabled={!enableReset}\n      onClick={handleReset}\n      key=\"reset-icon\"\n    >\n      {formatMessage(iconMessages.resetIcon)}\n    </DropdownItem>\n  ];\n\n  return (\n    <UploadIconWrapper>\n      <input\n        accept=\".png,.svg,.jpeg\"\n        onChange={(event) => {\n          setImage(event.target.files[0]);\n          setIsUploading(true);\n          uploadIcon(event.target.files[0])\n            .then(() => setIsUploading(false))\n            .catch((error) => {\n              dispatch(\n                addNotification({\n                  variant: 'danger',\n                  title: formatMessage(\n                    portfolioMessages.portfolioItemIconTitle\n                  ),\n                  description: error.data.errors[0].detail,\n                  dismissable: true\n                })\n              );\n              setImage(undefined);\n              setIsUploading(false);\n            });\n        }}\n        ref={inputRef}\n        type=\"file\"\n        id=\"icon-upload\"\n        hidden\n      />\n      <StyledDropdown\n        onSelect={() => setIsOpen(false)}\n        isOpen={isOpen}\n        isPlain\n        disabled={isUploading}\n        dropdownItems={dropdownItems}\n        toggle={\n          <DropdownToggle\n            disabled={isUploading}\n            toggleIndicator={null}\n            onToggle={(isOpen, event) => {\n              event.stopPropagation();\n              setIsOpen(isOpen);\n            }}\n          >\n            <UploadButton ouiaId={'upload-icon'}>\n              {isUploading ? (\n                <Spinner size=\"md\" />\n              ) : (\n                <PencilAltIcon size=\"sm\" />\n              )}\n            </UploadButton>\n            {!image && children}\n            {image && (\n              <ImagePreview\n                style={{ height: 64 }}\n                src={URL.createObjectURL(image)}\n                id={image.name}\n              />\n            )}\n          </DropdownToggle>\n        }\n      />\n    </UploadIconWrapper>\n  );\n};\n\nIconUpload.propTypes = {\n  uploadIcon: PropTypes.func.isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node)\n  ]),\n  resetIcon: PropTypes.func.isRequired,\n  enableReset: PropTypes.bool\n};\n\nexport default IconUpload;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nimport FormRenderer from '../../common/form-renderer';\nimport editPortfolioItemSchema from '../../../forms/edit-portfolio-item-form.schema';\nimport { updatePortfolioItem } from '../../../redux/actions/portfolio-actions';\nimport { updatePortfolioItem as updatePortfolioItemS } from '../../../redux/actions/portfolio-actions-s';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport IconUpload from './icon-upload';\nimport { CATALOG_API_BASE } from '../../../utilities/constants';\nimport CardIcon from '../../../presentational-components/shared/card-icon';\n\nconst EditPortfolioItem = ({\n  cancelUrl,\n  uploadIcon,\n  resetIcon,\n  product: { owner, created_at, updated_at, ...product },\n  userCapabilities\n}) => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const { search } = useLocation();\n  return (\n    <Stack hasGutter>\n      <StackItem key={product.icon_id || 'default'}>\n        <IconUpload\n          uploadIcon={uploadIcon}\n          resetIcon={resetIcon}\n          enableReset={!!product.icon_id}\n        >\n          <CardIcon\n            src={`${CATALOG_API_BASE}/portfolio_items/${\n              product.id\n            }/icon?cache_id=${product.icon_id || 'default'}`} // we need ho add the query to prevent the browser caching when reseting the image\n            sourceId={product.service_offering_source_ref}\n            height={64}\n          />\n        </IconUpload>\n      </StackItem>\n      <StackItem>\n        <FormRenderer\n          initialValues={{ ...product }}\n          onSubmit={(values) => {\n            push({\n              pathname: cancelUrl,\n              search\n            });\n            return dispatch(\n              window.catalog?.standalone\n                ? updatePortfolioItemS({\n                    ...values,\n                    metadata: { user_capabilities: userCapabilities }\n                  })\n                : updatePortfolioItem({\n                    ...values,\n                    metadata: { user_capabilities: userCapabilities }\n                  })\n            );\n          }}\n          schema={editPortfolioItemSchema}\n          templateProps={{\n            disableSubmit: ['pristine']\n          }}\n          onCancel={() =>\n            push({\n              pathname: cancelUrl,\n              search\n            })\n          }\n        />\n      </StackItem>\n    </Stack>\n  );\n};\n\nEditPortfolioItem.propTypes = {\n  cancelUrl: PropTypes.string.isRequired,\n  product: PropTypes.object.isRequired,\n  userCapabilities: PropTypes.object.isRequired,\n  uploadIcon: PropTypes.func.isRequired,\n  resetIcon: PropTypes.func.isRequired\n};\n\nexport default EditPortfolioItem;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Switch } from 'react-router-dom';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\n\nimport EditPortfolioItem from './edit-portfolio-item';\nimport EditApprovalWorkflow from '../../../smart-components/common/edit-approval-workflow';\nimport { PORTFOLIO_ITEM_RESOURCE_TYPE } from '../../../utilities/constants';\nimport CatalogRoute from '../../../routing/catalog-route';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport SetOrderProcessModal from '../../order-process/set-order-process-modal';\nimport { PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE } from '../../../constants/routes';\n\nconst ItemDetailDescription = ({\n  userCapabilities,\n  product,\n  url,\n  search,\n  detailPaths,\n  uploadIcon,\n  resetIcon\n}) => {\n  const formatMessage = useFormatMessage();\n  return (\n    <Switch>\n      <Route path={`${url}/edit-workflow`}>\n        <EditApprovalWorkflow\n          pushParam={{ pathname: url, search }}\n          objectType={PORTFOLIO_ITEM_RESOURCE_TYPE}\n          objectId={product.id}\n          objectName={() => product.name}\n          querySelector=\"portfolio-item\"\n        />\n      </Route>\n      <Route path={PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE}>\n        <SetOrderProcessModal\n          querySelector=\"portfolio-item\"\n          objectType={PORTFOLIO_ITEM_RESOURCE_TYPE}\n          objectName={() => product.name}\n          pushParam={{ pathname: url, search }}\n        />\n      </Route>\n      <Route\n        exact\n        path={detailPaths}\n        render={() => (\n          <TextContent>\n            {(product.description || product.long_description) && (\n              <Text component={TextVariants.h6}>\n                {formatMessage(portfolioMessages.portfolioItemOverview)}\n              </Text>\n            )}\n            {product.description && (\n              <Text id=\"description\" component={TextVariants.p}>\n                {product.description}\n              </Text>\n            )}\n            {product.long_description && (\n              <Text id=\"long_description\" component={TextVariants.p}>\n                {product.long_description}\n              </Text>\n            )}\n            {product.support_url && (\n              <Text id=\"support_url\" component={TextVariants.p}>\n                <a\n                  href={product.support_url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {formatMessage(portfolioMessages.portfolioItemSupport)}\n                </a>\n              </Text>\n            )}\n            {product.documentation_url && (\n              <Fragment>\n                <Text component={TextVariants.h6}>\n                  {formatMessage(portfolioMessages.portfolioItemDocumentation)}\n                </Text>\n                <Text id=\"documentation_url\" component={TextVariants.p}>\n                  <a\n                    href={product.documentation_url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {formatMessage(portfolioMessages.portfolioItemDocLink)}\n                  </a>\n                </Text>\n              </Fragment>\n            )}\n          </TextContent>\n        )}\n      />\n      <CatalogRoute\n        exact\n        path={`${url}/edit`}\n        requiredCapabilities=\"update\"\n        userCapabilities={userCapabilities}\n      >\n        <EditPortfolioItem\n          cancelUrl={url}\n          product={product}\n          userCapabilities={userCapabilities}\n          uploadIcon={uploadIcon}\n          resetIcon={resetIcon}\n        />\n      </CatalogRoute>\n    </Switch>\n  );\n};\n\nItemDetailDescription.propTypes = {\n  product: PropTypes.shape({\n    name: PropTypes.string,\n    long_description: PropTypes.string,\n    support_url: PropTypes.string,\n    documentation_url: PropTypes.string,\n    description: PropTypes.string,\n    id: PropTypes.string.isRequired\n  }).isRequired,\n  url: PropTypes.string.isRequired,\n  search: PropTypes.string.isRequired,\n  userCapabilities: PropTypes.object.isRequired,\n  detailPaths: PropTypes.arrayOf(PropTypes.string),\n  uploadIcon: PropTypes.func.isRequired,\n  resetIcon: PropTypes.func.isRequired\n};\n\nexport default ItemDetailDescription;\n","import React, {\n  useEffect,\n  useState,\n  Fragment,\n  lazy,\n  Suspense,\n  useContext\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Route, Switch, useRouteMatch, useLocation } from 'react-router-dom';\nimport { Grid, GridItem, Alert } from '@patternfly/react-core';\nimport { Section } from '@redhat-cloud-services/frontend-components/Section';\n\nimport ItemDetailInfoBar from './item-detail-info-bar';\nimport ItemDetailDescription from './item-detail-description';\nimport { PortfolioItemDetailToolbar } from './portfolio-item-detail-toolbar';\nimport TopToolbar from '../../../presentational-components/shared/top-toolbar';\nimport { getPortfolioItemDetail } from '../../../redux/actions/portfolio-actions';\nimport { getPortfolioItemDetail as getPortfolioItemDetailS } from '../../../redux/actions/portfolio-actions-s';\nimport {\n  ProductLoaderPlaceholder,\n  AppPlaceholder\n} from '../../../presentational-components/shared/loader-placeholders';\nimport {\n  uploadPortfolioItemIcon,\n  resetPortfolioItemIcon\n} from '../../../helpers/portfolio/portfolio-helper';\nimport {\n  uploadPortfolioItemIcon as uploadPortfolioItemIconS,\n  resetPortfolioItemIcon as resetPortfolioItemIconS\n} from '../../../helpers/portfolio/portfolio-helper-s';\nimport useQuery from '../../../utilities/use-query';\nimport {\n  PORTFOLIO_ITEM_ROUTE,\n  PORTFOLIO_ITEM_ROUTE_EDIT,\n  PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE\n} from '../../../constants/routes';\nimport CatalogRoute from '../../../routing/catalog-route';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport BackToProducts from '../../../presentational-components/portfolio/back-to-products';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport { hasPermission } from '../../../helpers/shared/helpers';\nimport UserContext from '../../../user-context';\nimport { USER_CAPABILITIES_PLACEHOLDER } from '../../../utilities/constants';\n\nconst SurveyEditor = lazy(() =>\n  import(\n    /* webpackChunkName: \"survey-editor\" */ '../../survey-editing/survey-editor'\n  )\n);\n\nconst requiredParams = [\n  'portfolio',\n  'source',\n  'portfolio-item',\n  'from-products'\n];\n\nconst PortfolioItemDetail = () => {\n  const formatMessage = useFormatMessage();\n  const [isOpen, setOpen] = useState(false);\n  const [isFetching, setIsFetching] = useState(true);\n  const dispatch = useDispatch();\n  const [queryValues, search] = useQuery(requiredParams);\n  const { pathname } = useLocation();\n  const { url } = useRouteMatch(PORTFOLIO_ITEM_ROUTE);\n  const portfolioItemData = useSelector(\n    ({ portfolioReducer: { portfolioItem } }) => portfolioItem\n  );\n  const portfolio = useSelector(\n    ({ portfolioReducer: { selectedPortfolio } }) => selectedPortfolio\n  );\n  const fromProducts = queryValues['from-products'] === 'true';\n  const { permissions: userPermissions } = useContext(UserContext);\n  const canLinkOrderProcesses = hasPermission(userPermissions, [\n    'catalog:order_processes:link'\n  ]);\n\n  const fetchData = (skipLoading) => {\n    if (!skipLoading) {\n      setIsFetching(true);\n    }\n    dispatch(\n      window.catalog?.standalone\n        ? getPortfolioItemDetailS({\n            portfolioItem: queryValues['portfolio-item'],\n            ...queryValues\n          })\n        : getPortfolioItemDetail({\n            portfolioItem: queryValues['portfolio-item'],\n            ...queryValues\n          })\n    )\n      .then(() => setIsFetching(false))\n      .catch(() => setIsFetching(false));\n  };\n\n  useEffect(() => {\n    fetchData(false);\n  }, [queryValues['portfolio-item']]);\n\n  if (isFetching || Object.keys(portfolioItemData).length === 0) {\n    return (\n      <Section className=\"global-primary-background full-height\">\n        <TopToolbar breadcrumbs={!fromProducts}>\n          {fromProducts && <BackToProducts />}\n          <ProductLoaderPlaceholder />\n        </TopToolbar>\n      </Section>\n    );\n  }\n\n  const availability = window.catalog?.standalone\n    ? 'available'\n    : portfolioItemData?.source?.availability_status || 'unavailable';\n  let unavailable = [];\n\n  if (portfolioItemData?.source) {\n    unavailable = [portfolioItemData?.source]\n      .filter(({ notFound }) => notFound)\n      .map(({ object }) => (\n        <Alert\n          className=\"pf-u-mb-sm\"\n          key={object}\n          variant=\"warning\"\n          isInline\n          title={formatMessage(portfolioMessages.objectUnavaiable, {\n            object\n          })}\n        />\n      ));\n  }\n\n  const uploadIcon = (file) => {\n    return (window.catalog?.standalone\n      ? uploadPortfolioItemIconS({\n          portfolioItemId: portfolioItemData?.portfolioItem?.id,\n          file\n        })\n      : uploadPortfolioItemIcon({\n          portfolioItemId: portfolioItemData?.portfolioItem?.id,\n          file\n        })\n    ).then(() => fetchData(true));\n  };\n\n  const resetIcon = () =>\n    (window.catalog?.standalone\n      ? resetPortfolioItemIconS(portfolioItemData?.portfolioItem?.icon_id)\n      : resetPortfolioItemIcon(portfolioItemData?.portfolioItem?.icon_id)\n    ).then(fetchData);\n  const detailPaths = [\n    PORTFOLIO_ITEM_ROUTE,\n    `${url}/order`,\n    `${url}/copy`,\n    `${url}/edit-workflow`,\n    PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE\n  ];\n  return (\n    <Fragment>\n      <Switch>\n        <CatalogRoute\n          requiredCapabilities=\"update\"\n          userCapabilities={\n            portfolioItemData?.portfolioItem?.metadata?.user_capabilities\n          }\n          path={`${url}/edit-survey`}\n        >\n          <Suspense fallback={<AppPlaceholder />}>\n            <SurveyEditor\n              closeUrl={url}\n              search={search}\n              uploadIcon={uploadIcon}\n              portfolioItem={portfolioItemData.portfolioItem}\n              portfolio={portfolio}\n            />\n          </Suspense>\n        </CatalogRoute>\n        <Route>\n          <Section className=\"full-height global-primary-background\">\n            <PortfolioItemDetailToolbar\n              fromProducts={fromProducts}\n              url={url}\n              isOpen={isOpen}\n              product={portfolioItemData.portfolioItem}\n              setOpen={setOpen}\n              isFetching={isFetching}\n              availability={availability}\n              userCapabilities={\n                window.catalog?.standalone\n                  ? USER_CAPABILITIES_PLACEHOLDER\n                  : portfolioItemData?.portfolioItem?.metadata\n                      ?.user_capabilities\n              }\n              orderable={portfolioItemData?.portfolioItem.metadata?.orderable}\n              canLinkOrderProcesses={canLinkOrderProcesses}\n            />\n            {unavailable.length > 0 && (\n              <div className=\"pf-u-mr-lg pf-u-ml-lg\">{unavailable}</div>\n            )}\n            {portfolioItemData?.source?.availability_status ===\n              'unavailable' && (\n              <Alert\n                className=\"pf-u-ml-lg pf-u-mr-lg\"\n                id=\"unavailable-alert-info\"\n                variant=\"info\"\n                isInline\n                title={formatMessage(portfolioMessages.sourceUnavaiable)}\n              />\n            )}\n            <Grid hasGutter className=\"pf-u-p-lg\">\n              <Route path={detailPaths} exact>\n                <GridItem md={3} lg={2}>\n                  <ItemDetailInfoBar\n                    product={portfolioItemData.portfolioItem}\n                    portfolio={portfolio}\n                    source={portfolioItemData.source}\n                  />\n                </GridItem>\n              </Route>\n              <GridItem\n                md={pathname === PORTFOLIO_ITEM_ROUTE_EDIT ? 12 : 9}\n                lg={pathname === PORTFOLIO_ITEM_ROUTE_EDIT ? 12 : 10}\n              >\n                <ItemDetailDescription\n                  resetIcon={resetIcon}\n                  uploadIcon={uploadIcon}\n                  product={portfolioItemData.portfolioItem}\n                  userCapabilities={\n                    portfolioItemData?.portfolioItem?.metadata\n                      ?.user_capabilities\n                  }\n                  url={url}\n                  detailPaths={detailPaths}\n                  search={search}\n                />\n              </GridItem>\n            </Grid>\n          </Section>\n        </Route>\n      </Switch>\n    </Fragment>\n  );\n};\n\nexport default PortfolioItemDetail;\n"],"names":["DetailToolbarActions","copyUrl","orderUrl","editUrl","workflowUrl","editSurveyUrl","isOpen","setOpen","isFetching","availability","orderable","userCapabilities","canLinkOrderProcesses","formatMessage","useFormatMessage","dropdownItems","update","push","DropdownItem","key","id","component","pathname","preserveSearch","actionMessages","role","copy","set_approval","orderProcessAction","orderProcessesMessages","PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE","portfolioMessages","Fragment","LevelItem","isDisabled","showSpinner","variant","ouiaId","style","marginLeft","length","Dropdown","isPlain","onToggle","onSelect","position","DropdownPosition","toggle","KebabToggle","propTypes","PropTypes","isRequired","defaultProps","PortfolioItemIconItem","product","src","window","catalog","standalone","icon_url","CATALOG_API_BASE","sourceId","service_offering_source_ref","height","PortfolioItemDetailToolbar","url","fromProducts","breadcrumbfragments","useLocation","paddingBottom","PORTFOLIO_ITEM_ROUTE_EDIT","breadcrumbs","Level","className","Switch","Route","path","exact","title","noData","grow","alignStart","TextContent","Text","TextVariants","name","minHeight","open","distributor","metadata","SurveyEditorDropdown","handleResetSurvey","useState","setIsOpen","onClick","SurveyEditingToolbar","handleSaveSurvey","closeUrl","search","isValid","modified","Flex","Link","to","Button","messages","defaultMessage","ItemDetailInfoBar","source","portfolio","DateFormat","date","created_at","updated_at","fields","label","validate","type","changeIcon","resetIcon","UploadButton","styled","UploadIconWrapper","ImagePreview","StyledDropdown","IconUpload","uploadIcon","enableReset","children","inputRef","useRef","image","setImage","isUploading","setIsUploading","dispatch","useDispatch","current","click","iconMessages","undefined","then","accept","onChange","event","target","files","error","addNotification","description","data","errors","detail","dismissable","ref","hidden","disabled","DropdownToggle","toggleIndicator","stopPropagation","Spinner","size","URL","createObjectURL","EditPortfolioItem","cancelUrl","owner","useHistory","Stack","hasGutter","StackItem","icon_id","initialValues","onSubmit","values","updatePortfolioItemS","user_capabilities","updatePortfolioItem","schema","editPortfolioItemSchema","templateProps","disableSubmit","onCancel","ItemDetailDescription","detailPaths","pushParam","objectType","PORTFOLIO_ITEM_RESOURCE_TYPE","objectId","objectName","querySelector","render","long_description","support_url","href","rel","documentation_url","requiredCapabilities","SurveyEditor","lazy","requiredParams","setIsFetching","useQuery","queryValues","useRouteMatch","PORTFOLIO_ITEM_ROUTE","portfolioItemData","useSelector","portfolioReducer","portfolioItem","selectedPortfolio","userPermissions","useContext","UserContext","permissions","hasPermission","fetchData","skipLoading","getPortfolioItemDetailS","getPortfolioItemDetail","useEffect","Object","keys","Section","availability_status","unavailable","filter","notFound","map","object","Alert","isInline","file","uploadPortfolioItemIconS","portfolioItemId","uploadPortfolioItemIcon","Suspense","fallback","USER_CAPABILITIES_PLACEHOLDER","Grid","GridItem","md","lg","resetPortfolioItemIconS","resetPortfolioItemIcon"],"sourceRoot":""}