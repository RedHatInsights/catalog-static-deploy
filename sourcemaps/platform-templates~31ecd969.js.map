{"version":3,"sources":["webpack:///./src/messages/platforms.messages.ts","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/CardHeader.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/CardFooter.js","webpack:///./src/presentational-components/platform/platform-item.tsx","webpack:///./src/smart-components/platform/platform-templates.js"],"names":["platformsMessages","workflowColumn","id","defaultMessage","noInventoriesDescription","noInventoriesFilterDescription","inventoriesFilter","templatesFilter","noTemplatesTitle","noTemplatesDescription","configureSourceTitle","connectSource","contactAdmin","title","noPlatforms","offeringTitle","offeringParameters","CardHeader","_a","children","className","onExpand","toggleButtonProps","props","Consumer","cardId","Object","assign","cardHeader","cardHeaderToggle","variant","type","onClick","evt","cardHeaderToggleIcon","displayName","CardFooter","component","Component","cardFooter","StyledLevel","key","ouiaId","height","sourceId","source_id","editMode","isChecked","checked","handleCheck","onToggleItemSelect","initialState","filterValue","isOpen","isFetching","isFiltering","platformItemsState","state","action","payload","debouncedFilter","asyncFormValidator","value","dispatch","filteringCallback","meta","defaultSettings","fetchPlatformItems","then","PlatformTemplates","formatMessage","useFormatMessage","useQuery","platform","useReducer","stateDispatch","useSelector","platformItems","platformReducer","data","selectedPlatform","platformIconMapping","useDispatch","useEffect","scrollToTop","handleFilterChange","offset","filteredItems","items","map","item","pathname","PLATFORM_SERVICE_OFFERINGS_ROUTE","searchParams","service","preserveSearch","src","name","schema","createPlatformsFilterToolbarSchema","onFilterChange","searchValue","filterPlaceholder","apiRequest","_","options","isLoading","renderEmptyState","filteringMessages","noResults","Icon","SearchIcon","PrimaryAction","clearFilters","description","noResultsDescription","count","dropDirection"],"mappings":"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","file":"js/platform-templates~31ecd969.eec6a8f7c3bb29ba3b7f.js","sourcesContent":["import { defineMessages } from 'react-intl';\n\nconst platformsMessages = defineMessages({\n  workflowColumn: {\n    id: 'platform.inventories.columns.workflow',\n    defaultMessage: 'Workflow'\n  },\n  noInventoriesDescription: {\n    id: 'platform.inventories.empty.no-inventories',\n    defaultMessage: 'No inventories found.'\n  },\n  noInventoriesFilterDescription: {\n    id: 'platform.inventories.empty.no-results',\n    defaultMessage: 'No inventories match your filter criteria.'\n  },\n  inventoriesFilter: {\n    id: 'platform.inventories.filter.placeholder',\n    defaultMessage: 'Filter by inventory'\n  },\n  templatesFilter: {\n    id: 'platform.templates.filter.placeholder',\n    defaultMessage: 'Filter by template'\n  },\n  noTemplatesTitle: {\n    id: 'platform.templates.no-templates',\n    defaultMessage: 'No templates'\n  },\n  noTemplatesDescription: {\n    id: 'platform.templates.empty.no-templates',\n    defaultMessage: 'This platform has no templates.'\n  },\n  configureSourceTitle: {\n    id: 'platforms.list.configure-source',\n    defaultMessage: 'Configure a source in order to add products to portfolios.'\n  },\n  connectSource: {\n    id: 'platforms.list.connect-source',\n    defaultMessage:\n      'To connect to a source, go to <a>Sources</a> under Settings.'\n  },\n  contactAdmin: {\n    id: 'platforms.list.contact-admin',\n    defaultMessage:\n      'Contact your organization administrator to setup sources for Catalog.'\n  },\n  title: {\n    id: 'platforms.title',\n    defaultMessage: 'Platforms'\n  },\n  noPlatforms: {\n    id: 'platforms.list.empty.title',\n    defaultMessage: 'No platforms yet'\n  },\n  offeringTitle: {\n    id: 'platforms.offerings.detail.title',\n    defaultMessage: 'Service offering'\n  },\n  offeringParameters: {\n    id: 'platforms.offerings.detail.extra-params',\n    defaultMessage: 'Extra parameters'\n  }\n});\n\nexport default platformsMessages;\n","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { CardContext } from './Card';\nimport { Button } from '../Button';\nimport AngleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-right-icon\";\nexport const CardHeader = (_a) => {\n    var { children = null, className = '', id, onExpand, toggleButtonProps } = _a, props = __rest(_a, [\"children\", \"className\", \"id\", \"onExpand\", \"toggleButtonProps\"]);\n    return (React.createElement(CardContext.Consumer, null, ({ cardId }) => (React.createElement(\"div\", Object.assign({ className: css(styles.cardHeader, className), id: id }, props),\n        onExpand && (React.createElement(\"div\", { className: css(styles.cardHeaderToggle) },\n            React.createElement(Button, Object.assign({ variant: \"plain\", type: \"button\", onClick: evt => {\n                    onExpand(evt, cardId);\n                } }, toggleButtonProps),\n                React.createElement(\"span\", { className: css(styles.cardHeaderToggleIcon) },\n                    React.createElement(AngleRightIcon, { \"aria-hidden\": \"true\" }))))),\n        children))));\n};\nCardHeader.displayName = 'CardHeader';\n//# sourceMappingURL=CardHeader.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { css } from '@patternfly/react-styles';\nexport const CardFooter = (_a) => {\n    var { children = null, className = '', component = 'div' } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: css(styles.cardFooter, className) }, props), children));\n};\nCardFooter.displayName = 'CardFooter';\n//# sourceMappingURL=CardFooter.js.map","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { CardHeader, CardFooter, Level } from '@patternfly/react-core';\n\nimport CardIcon from '../shared/card-icon';\nimport CardCheckbox from '../shared/card-checkbox';\nimport ServiceOfferingCardBody from '../shared/service-offering-body';\nimport { StyledCard } from '../styled-components/styled-gallery';\nimport styled from 'styled-components';\n\nconst StyledLevel = styled(Level)`\n  flex: 1;\n`;\n\nexport interface PlatformItemProps {\n  id: string;\n  source_id?: string;\n  editMode?: boolean;\n  checked?: boolean;\n  onToggleItemSelect: (value: any) => void;\n}\nconst PlatformItem: React.ComponentType<PlatformItemProps> = (props) => (\n  <StyledCard key={props.id} ouiaId={`platform-item${props.id}`}>\n    <CardHeader>\n      <StyledLevel>\n        <CardIcon height={40} sourceId={props.source_id} />\n        {props.editMode && (\n          <CardCheckbox\n            id={props.id}\n            isChecked={props.checked}\n            handleCheck={props.onToggleItemSelect}\n          />\n        )}\n      </StyledLevel>\n    </CardHeader>\n    <ServiceOfferingCardBody {...props} />\n    <CardFooter />\n  </StyledCard>\n);\n\nexport default PlatformItem;\n","import React, { Fragment, useEffect, useReducer } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport ToolbarRenderer from '../../toolbar/toolbar-renderer';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport { fetchPlatformItems } from '../../redux/actions/platform-actions';\nimport PlatformItem from '../../presentational-components/platform/platform-item';\nimport { createPlatformsFilterToolbarSchema } from '../../toolbar/schemas/platforms-toolbar.schema';\nimport ContentGalleryEmptyState from '../../presentational-components/shared/content-gallery-empty-state';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport ContentGallery from '../content-gallery/content-gallery';\nimport { Button } from '@patternfly/react-core';\nimport AsyncPagination from '../common/async-pagination';\nimport BottomPaginationContainer from '../../presentational-components/shared/bottom-pagination-container';\nimport useQuery from '../../utilities/use-query';\nimport { PLATFORM_SERVICE_OFFERINGS_ROUTE } from '../../constants/routes';\nimport filteringMessages from '../../messages/filtering.messages';\nimport platformsMessages from '../../messages/platforms.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\n\nconst initialState = {\n  filterValue: '',\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false\n};\n\nconst platformItemsState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return { ...state, filterValue: action.payload };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst debouncedFilter = asyncFormValidator(\n  (id, value, dispatch, filteringCallback, meta = defaultSettings) => {\n    filteringCallback(true);\n    dispatch(fetchPlatformItems(id, value, meta)).then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst PlatformTemplates = () => {\n  const formatMessage = useFormatMessage();\n  const [{ platform: id }] = useQuery(['platform']);\n  const [{ filterValue, isFetching, isFiltering }, stateDispatch] = useReducer(\n    platformItemsState,\n    initialState\n  );\n  const { data, meta } = useSelector(({ platformReducer: { platformItems } }) =>\n    platformItems[id] ? platformItems[id] : { data: [], meta: defaultSettings }\n  );\n  const { platform, platformIconMapping } = useSelector(\n    ({ platformReducer: { selectedPlatform, platformIconMapping } }) => ({\n      platform: selectedPlatform,\n      platformIconMapping\n    })\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchPlatformItems(id, filterValue, defaultSettings)).then(() =>\n      stateDispatch({ type: 'setFetching', payload: false })\n    );\n    scrollToTop();\n  }, [id]);\n\n  const handleFilterChange = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      id,\n      value,\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering }),\n      {\n        ...meta,\n        offset: 0\n      }\n    );\n  };\n\n  const filteredItems = {\n    items: data\n      ? data.map((item) => (\n          <PlatformItem\n            key={item.id}\n            pathname={PLATFORM_SERVICE_OFFERINGS_ROUTE}\n            searchParams={{\n              service: item.id\n            }}\n            preserveSearch\n            src={platformIconMapping[id]}\n            {...item}\n          />\n        ))\n      : []\n  };\n\n  const title = platform ? platform.name : '';\n  return (\n    <Fragment>\n      <ToolbarRenderer\n        schema={createPlatformsFilterToolbarSchema({\n          onFilterChange: handleFilterChange,\n          searchValue: filterValue,\n          filterPlaceholder: formatMessage(platformsMessages.templatesFilter),\n          meta,\n          apiRequest: (_, options) =>\n            dispatch(fetchPlatformItems(id, filterValue, options))\n        })}\n      />\n      <ContentGallery\n        title={title}\n        isLoading={isFetching || isFiltering}\n        renderEmptyState={() => (\n          <ContentGalleryEmptyState\n            title={\n              filterValue === ''\n                ? formatMessage(platformsMessages.noTemplatesTitle)\n                : formatMessage(filteringMessages.noResults)\n            }\n            Icon={SearchIcon}\n            PrimaryAction={() =>\n              filterValue !== '' ? (\n                <Button\n                  ouiaId={'clear-filters'}\n                  onClick={() => handleFilterChange('')}\n                  variant=\"link\"\n                >\n                  {formatMessage(filteringMessages.clearFilters)}\n                </Button>\n              ) : null\n            }\n            description={\n              filterValue === ''\n                ? formatMessage(platformsMessages.noTemplatesDescription)\n                : formatMessage(filteringMessages.noResultsDescription)\n            }\n          />\n        )}\n        {...filteredItems}\n      />\n      {meta.count > 0 && (\n        <BottomPaginationContainer>\n          <AsyncPagination\n            dropDirection=\"up\"\n            meta={meta}\n            apiRequest={(_, options) =>\n              dispatch(fetchPlatformItems(id, filterValue, options))\n            }\n          />\n        </BottomPaginationContainer>\n      )}\n    </Fragment>\n  );\n};\n\nexport default PlatformTemplates;\n"],"sourceRoot":""}