{"version":3,"file":"js/order-provision.2ee2750732c87363847a.js","mappings":"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","sources":["webpack:///./src/smart-components/order/order-detail/progress-messages.tsx","webpack:///./src/smart-components/order/order-detail/order-provision.tsx"],"sourcesContent":["import React from 'react';\n\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  Grid,\n  Card,\n  CardBody,\n  GridItem,\n  Stack,\n  StackItem\n} from '@patternfly/react-core';\n\nimport ReactJsonView from 'react-json-view';\nimport ordersMessages from '../../../messages/orders.messages';\nimport { FormatMessage } from '../../../types/common-types';\nimport {\n  OrderItem,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\n\nexport interface ProgressMessagesParams {\n  orderItem: OrderItem;\n  progressMessages: ProgressMessage[];\n  formatMessage: FormatMessage;\n}\n\nconst ProgressMessages: React.ComponentType<ProgressMessagesParams> = ({\n  orderItem,\n  progressMessages,\n  formatMessage\n}) => {\n  return (\n    <Grid hasGutter>\n      <GridItem md={12} lg={6} xl={4}>\n        <Stack hasGutter>\n          <StackItem>\n            <Card>\n              <CardBody>\n                <TextContent>\n                  <Text className=\"pf-u-mb-md\" component={TextVariants.h2}>\n                    {formatMessage(ordersMessages.orderItemParameters)}\n                  </Text>\n                </TextContent>\n                {orderItem?.service_parameters && (\n                  <ReactJsonView src={orderItem.service_parameters} />\n                )}\n              </CardBody>\n            </Card>\n          </StackItem>\n        </Stack>\n      </GridItem>\n      <GridItem md={12} lg={6} xl={8}>\n        <Card>\n          <CardBody>\n            <TextContent>\n              <Text className=\"pf-u-mb-md\" component={TextVariants.h2}>\n                {formatMessage(ordersMessages.orderProgressMessages)}\n              </Text>\n            </TextContent>\n            {<ReactJsonView src={progressMessages} />}\n          </CardBody>\n        </Card>\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default ProgressMessages;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Bullseye,\n  Card,\n  CardBody,\n  Flex,\n  Spinner,\n  Text,\n  TextContent,\n  TextVariants,\n  Title\n} from '@patternfly/react-core';\n\nimport {\n  expandable,\n  ICell,\n  IRowData,\n  Table,\n  TableBody,\n  TableHeader,\n  TableText\n} from '@patternfly/react-table';\n\nimport InfoIcon from '@patternfly/react-icons/dist/js/icons/info-icon';\nimport { fetchOrderProvision } from '../../../redux/actions/order-actions';\nimport ordersMessages from '../../../messages/orders.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport { CatalogRootState } from '../../../types/redux';\nimport {\n  OrderDetail,\n  OrderProvisionType\n} from '../../../redux/reducers/order-reducer';\nimport statesMessages, {\n  getTranslatableState\n} from '../../../messages/states.messages';\nimport orderStatusMapper from '../order-status-mapper';\nimport {\n  OrderItem,\n  OrderItemStateEnum,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\nimport { FormatMessage } from '../../../types/common-types';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport ProgressMessages from './progress-messages';\nimport UserContext from '../../../user-context';\nimport { hasPermission } from '../../../helpers/shared/helpers';\n\nexport interface RowType {\n  id?: string;\n  parent?: number;\n  isOpen?: boolean;\n  cells: { title: any }[];\n}\n\nexport interface ExpandedRowType {\n  parent: number;\n  isOpen: boolean;\n  cells: { title: any }[];\n}\n\nconst isEmpty = (orderProvision?: OrderProvisionType) =>\n  !orderProvision ||\n  !orderProvision.orderItems ||\n  orderProvision.orderItems.length === 0;\n\nconst OrderProvision: React.ComponentType = () => {\n  const formatMessage = useFormatMessage();\n  const [isFetching, setIsFetching] = useState(true);\n  const dispatch = useDispatch();\n  const { order } = useSelector<CatalogRootState, OrderDetail>(\n    ({ orderReducer: { orderDetail } }) => orderDetail\n  );\n\n  const orderProvision = useSelector<CatalogRootState, OrderProvisionType>(\n    ({ orderReducer: { orderProvision } }) => orderProvision\n  );\n  const { permissions: userPermissions } = useContext(UserContext);\n  const showProgressMessages = hasPermission(userPermissions, [\n    'catalog:order_processes:link'\n  ]);\n\n  if (!isFetching && isEmpty(orderProvision)) {\n    return (\n      <Bullseye id=\"no-order-provision\">\n        <Flex direction={{ default: 'column' }} grow={{ default: 'grow' }}>\n          <Bullseye>\n            <InfoIcon size=\"xl\" />\n          </Bullseye>\n          <Bullseye>\n            <Title headingLevel=\"h1\" size=\"2xl\">\n              {formatMessage(ordersMessages.noOrderProvision)}\n            </Title>\n          </Bullseye>\n        </Flex>\n      </Bullseye>\n    );\n  }\n\n  const capitalize = (str: any) => str?.charAt(0).toUpperCase() + str?.slice(1);\n\n  const columns: Array<ICell> = [\n    {\n      title: 'Updated',\n      cellFormatters: showProgressMessages ? [expandable] : []\n    },\n    { title: 'Type' },\n    { title: 'Activity' },\n    { title: '' }\n  ];\n\n  const createOrderItemMainRow = (\n    item: OrderItem,\n    formatMessage: FormatMessage\n  ): RowType => {\n    const translatableState = getTranslatableState(\n      item.state as OrderItemStateEnum\n    );\n    return {\n      id: item.id,\n      isOpen: false,\n      cells: [\n        {\n          title: (\n            <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n              <DateFormat date={item.updated_at} type=\"exact\" />\n            </Text>\n          )\n        },\n        {\n          title: (\n            <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n              <TableText>\n                {capitalize(\n                  item.process_scope ||\n                    formatMessage(ordersMessages.defaultOrderItemType)\n                )}\n              </TableText>\n            </Text>\n          )\n        },\n        {\n          title: (\n            <Text className=\"pf-u-mb-0\" component={TextVariants.small}>\n              <TableText>{item.name}</TableText>\n            </Text>\n          )\n        },\n        {\n          title: (\n            <TableText>\n              <TextContent\n                style={{\n                  color:\n                    orderStatusMapper[\n                      item.state as keyof typeof orderStatusMapper\n                    ].color\n                }}\n              >\n                {\n                  orderStatusMapper[\n                    item.state as keyof typeof orderStatusMapper\n                  ].icon\n                }\n                &nbsp;\n                {formatMessage(statesMessages[translatableState])}\n              </TextContent>\n            </TableText>\n          )\n        }\n      ]\n    };\n  };\n\n  const createOrderItemExpandedRow = (\n    item: OrderItem,\n    progressMessages: ProgressMessage[],\n    formatMessage: FormatMessage,\n    key: number\n  ): RowType => {\n    return {\n      parent: key * 2,\n      cells: [\n        {\n          title: (\n            <ProgressMessages\n              orderItem={item}\n              progressMessages={progressMessages}\n              formatMessage={formatMessage}\n            />\n          )\n        }\n      ]\n    };\n  };\n\n  const createOrderRow = (\n    item: OrderItem,\n    formatMessage: FormatMessage,\n    key: number\n  ): RowType[] => {\n    const orderRow = [createOrderItemMainRow(item, formatMessage)];\n    if (\n      showProgressMessages &&\n      orderProvision.progressMessageItems &&\n      orderProvision.progressMessageItems.length > 0\n    ) {\n      const progressMessageItem = orderProvision.progressMessageItems.find(\n        (msgItem) => msgItem.orderItemId === item.id\n      );\n      if (progressMessageItem) {\n        orderRow.push(\n          createOrderItemExpandedRow(\n            item,\n            progressMessageItem.progressMessages,\n            formatMessage,\n            key\n          )\n        );\n      }\n    }\n\n    return orderRow;\n  };\n\n  const createRows = (): RowType[] =>\n    orderProvision.orderItems.reduce((acc: RowType[], item: OrderItem, key) => {\n      const row = createOrderRow(item, formatMessage, key);\n      return [...acc, ...row];\n    }, []);\n\n  const [rows, setRows] = useState<RowType[]>(createRows());\n\n  useEffect(() => {\n    setIsFetching(true);\n    Promise.all([dispatch(fetchOrderProvision(order.id))]).then(() =>\n      setIsFetching(false)\n    );\n  }, []);\n\n  useEffect((): void => {\n    setRows(createRows());\n  }, [orderProvision?.orderItems]);\n\n  const setOpen = (data: RowType[], rowId: any) =>\n    data.map((row) =>\n      row.id === rowId\n        ? {\n            ...row,\n            isOpen: !row.isOpen\n          }\n        : {\n            ...row\n          }\n    );\n\n  const onCollapse = (\n    event: React.MouseEvent,\n    rowIndex: number,\n    isOpen: boolean,\n    rowData: IRowData\n  ): void => {\n    const u_rows = setOpen(rows, rowData.id);\n    setRows(u_rows);\n  };\n\n  return (\n    <TextContent>\n      {isFetching ? (\n        <Bullseye>\n          <Flex direction={{ default: 'column' }} grow={{ default: 'grow' }}>\n            <Bullseye id=\"fetching-order-provision\">\n              <Title headingLevel=\"h1\" size=\"xl\">\n                {formatMessage(ordersMessages.fetchingOrderProvision)}\n              </Title>\n            </Bullseye>\n            <Bullseye>\n              <Spinner size=\"xl\" />\n            </Bullseye>\n          </Flex>\n        </Bullseye>\n      ) : (\n        <Card>\n          <CardBody>\n            <Text className=\"pf-u-mb-md\" component={TextVariants.h2}>\n              {formatMessage(ordersMessages.activity)}\n            </Text>\n            <Table\n              aria-label=\"Order provisioning activity\"\n              cells={columns}\n              rows={rows}\n              onCollapse={showProgressMessages ? onCollapse : undefined}\n            >\n              <TableHeader />\n              <TableBody />\n            </Table>\n          </CardBody>\n        </Card>\n      )}\n    </TextContent>\n  );\n};\n\nexport default OrderProvision;\n"],"names":["orderItem","progressMessages","formatMessage","Grid","hasGutter","GridItem","md","lg","xl","Stack","StackItem","Card","CardBody","TextContent","Text","className","component","TextVariants","service_parameters","src","useState","isFetching","setIsFetching","dispatch","useDispatch","order","useSelector","orderProvision","userPermissions","useContext","showProgressMessages","orderItems","length","isEmpty","Bullseye","id","Flex","direction","default","grow","size","Title","headingLevel","columns","title","cellFormatters","expandable","createOrderItemMainRow","item","str","translatableState","state","isOpen","cells","DateFormat","date","updated_at","type","TableText","process_scope","charAt","toUpperCase","slice","name","style","color","icon","createRows","reduce","acc","key","row","orderRow","progressMessageItems","progressMessageItem","find","msgItem","orderItemId","push","parent","createOrderItemExpandedRow","createOrderRow","rows","setRows","useEffect","Promise","all","then","Spinner","Table","onCollapse","event","rowIndex","rowData","data","rowId","u_rows","map","undefined","TableHeader","TableBody"],"sourceRoot":""}