{"version":3,"file":"js/2482.c1444881918b4f4e20a3.js","mappings":"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","sources":["webpack:///./src/messages/orders.messages.ts","webpack:///./src/presentational-components/order/order-notification.tsx","webpack:///./src/helpers/order/new-order-helper.ts","webpack:///./src/helpers/order/order-helper.ts","webpack:///./src/redux/actions/order-actions.tsx"],"sourcesContent":["import { defineMessages } from 'react-intl';\n\nconst ordersMessages = defineMessages({\n  orderedBy: {\n    id: 'orders.common.orderedBy',\n    defaultMessage: 'Ordered by {owner}'\n  },\n  orderedByLabel: {\n    id: 'orders.approval.orderedBy',\n    defaultMessage: 'Ordered by'\n  },\n  lastUpdated: {\n    id: 'orders.common.lastUpdated',\n    defaultMessage: 'Last updated'\n  },\n  compositeTitle: {\n    id: 'orders.common.compositeTitle',\n    defaultMessage: '{name} - Order # {id}'\n  },\n  detailTitle: {\n    id: 'orders.detail.title',\n    defaultMessage: 'Order ID {id}'\n  },\n  orderSuccess: {\n    id: 'orders.notification.success',\n    defaultMessage:\n      'You can track the progress of Order # {id} in your <link>Orders</link> page.'\n  },\n  noOrdersTitle: {\n    id: 'orders.list.empty.title',\n    defaultMessage: 'No orders'\n  },\n  noOrdersDescription: {\n    id: 'orders.list.empty.description',\n    defaultMessage: 'No orders have been created.'\n  },\n  noApprovalRequests: {\n    id: 'orders.approval.no-requests',\n    defaultMessage:\n      'We were unable to find any approval requests for this order.'\n  },\n  creatingApprovalRequest: {\n    id: 'orders.approval.creating',\n    defaultMessage: 'Creating approval request'\n  },\n  approvalTitle: {\n    id: 'orders.approval.title',\n    defaultMessage: 'Summary'\n  },\n  approvalDetail: {\n    id: 'orders.approval.view-detail',\n    // eslint-disable-next-line quotes\n    defaultMessage: \"View this order's approval request details\"\n  },\n  approvalCreated: {\n    id: 'orders.approval.details.created',\n    defaultMessage: 'Request created'\n  },\n  approvalReason: {\n    id: 'orders.approval.details.reason',\n    defaultMessage: 'Approval reason'\n  },\n  approvalCompleted: {\n    id: 'orders.approval.details.completed',\n    defaultMessage: 'Completed at'\n  },\n  orderDetails: {\n    id: 'orders.common.details',\n    defaultMessage: 'Order details'\n  },\n  menuApproval: {\n    id: 'orders.menu.approval',\n    defaultMessage: 'Approval'\n  },\n  menuProvision: {\n    id: 'orders.menu.provision',\n    defaultMessage: 'Provision'\n  },\n  menuLifecycle: {\n    id: 'orders.menu.lifecycle',\n    defaultMessage: 'Lifecycle'\n  },\n  menuSteps: {\n    id: 'orders.menu.steps',\n    defaultMessage: 'Order steps'\n  },\n  objectsNotFound: {\n    id: 'order.detail.not-found',\n    defaultMessage:\n      'The {objects} for this order {count, plural, one {is} other {are}} not available'\n  },\n  orderID: {\n    id: 'orders.order.detail.ID',\n    defaultMessage: 'Order ID'\n  },\n  orderParameters: {\n    id: 'orders.order.detail.parameters',\n    defaultMessage: 'Order parameters'\n  },\n  orderItemParameters: {\n    id: 'orders.order.provision.parameters',\n    defaultMessage: 'Parameters'\n  },\n  defaultOrderItemType: {\n    id: 'orders.order.default_type',\n    defaultMessage: 'Product'\n  },\n  orderProgressMessages: {\n    id: 'orders.order.detail.messages',\n    defaultMessage: 'Progress messages'\n  },\n  lifecycleLink: {\n    id: 'orders.order.lifecycle.link',\n    defaultMessage: 'Manage product'\n  },\n  cancelOrder: {\n    id: 'orders.actions.cancel',\n    defaultMessage: 'Cancel order'\n  },\n  reOrder: {\n    id: 'orders.actions.reorder',\n    defaultMessage: 'Reorder'\n  },\n  keepOrder: {\n    id: 'orders.actions.keep',\n    defaultMessage: 'Keep order'\n  },\n  cancelDescription: {\n    id: 'orders.cancel.description',\n    defaultMessage: 'Are you sure you want to cancel {name}?'\n  },\n  backToOrders: {\n    id: 'orders.toolbar.backLink',\n    defaultMessage: 'Back to orders'\n  },\n  orderDate: {\n    id: 'orders.approval.order-date',\n    defaultMessage: 'Order date'\n  },\n  approvalParameters: {\n    id: 'orders.approval.parameters',\n    defaultMessage: 'Parameters'\n  },\n  activity: {\n    id: 'orders.approval.activity',\n    defaultMessage: 'Activity'\n  },\n  artifacts: {\n    id: 'orders.artifacts',\n    defaultMessage: 'Order artifacts'\n  },\n  noOrderProvision: {\n    id: 'orders.provision.no-items',\n    defaultMessage: 'We were unable to find provisioning data for this order.'\n  },\n  fetchingOrderProvision: {\n    id: 'orders.provision.fetching-provision',\n    defaultMessage: 'Retrieving order provisioning data'\n  }\n});\n\nexport default ordersMessages;\n","import React, { ComponentType, ReactElement, ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ORDER_ROUTE } from '../../constants/routes';\nimport ordersMessages from '../../messages/orders.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport { Dispatch } from 'redux';\n\nexport interface OrderNotificationProps {\n  id: string;\n  dispatch: Dispatch;\n  portfolioItemId: string;\n  portfolioId: string;\n  platformId: string;\n  orderItemId: string;\n}\n\nconst OrderNotification: ComponentType<OrderNotificationProps> = ({\n  id,\n  dispatch,\n  portfolioItemId,\n  portfolioId,\n  platformId,\n  orderItemId\n}) => {\n  const formatMessage = useFormatMessage();\n  return formatMessage(ordersMessages.orderSuccess, {\n    id,\n    // eslint-disable-next-line react/display-name\n    link: (chunks: ReactNode | ReactNode[]) => (\n      <Link\n        onClick={() => dispatch(clearNotifications())}\n        to={{\n          pathname: ORDER_ROUTE,\n          search: `?order=${id}&order-item=${orderItemId}&portfolio-item=${portfolioItemId}&platform=${platformId}&portfolio=${portfolioId}`\n        }}\n      >\n        {chunks}\n      </Link>\n    )\n  }) as ReactElement;\n};\n\nexport default OrderNotification;\n","// TODO migrate whole order-helper.js to TS\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  Order,\n  OrderItem,\n  PortfolioItem,\n  Portfolio,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\nimport { Source } from '@redhat-cloud-services/sources-client';\nimport { getAxiosInstance } from '../shared/user-login';\nimport {\n  CATALOG_API_BASE,\n  CATALOG_INVENTORY_API_BASE\n} from '../../utilities/constants';\nconst axiosInstance = getAxiosInstance();\n\nexport interface ObjectNotFound {\n  object: 'Order item' | 'Product' | 'Portfolio' | 'Messages' | 'Platform';\n  notFound: boolean;\n}\n\nexport type OrderDetailPayload = [\n  Order,\n  OrderItem | ObjectNotFound,\n  PortfolioItem | ObjectNotFound,\n  Source | ObjectNotFound,\n  ProgressMessage | ObjectNotFound,\n  Portfolio | ObjectNotFound\n];\n\nexport type ProgressMessageItem = {\n  orderItemId: string;\n  progressMessages: ProgressMessage[];\n};\n\nexport interface OrderProvisionPayload {\n  orderItems: OrderItem[] | [];\n  progressMessageItems: ProgressMessageItem[] | [];\n}\n\nexport const fetchOrderDetailSequence = async (\n  orderId: string\n): Promise<OrderDetailPayload> => {\n  let order: Order;\n  try {\n    order = await axiosInstance.get(`${CATALOG_API_BASE}/orders/${orderId}`);\n  } catch (error) {\n    order = {};\n    // @ts-ignore\n    if (error.status === 404 || error.status === 400) {\n      catalogHistory.replace({\n        pathname: '/404',\n        state: { from: catalogHistory.location }\n      });\n    } else {\n      throw error;\n    }\n  }\n\n  let orderItem: OrderItem | ObjectNotFound = {\n    object: 'Order item',\n    notFound: true\n  };\n  try {\n    const orderItems = await axiosInstance.get(\n      `${CATALOG_API_BASE}/order_items?order_id=${order.id}`\n    );\n    orderItem = orderItems.data[0];\n  } catch (_error) {\n    // no handler\n  }\n\n  let portfolioItem: PortfolioItem | ObjectNotFound = {\n    object: 'Product',\n    notFound: true\n  };\n\n  try {\n    portfolioItem = await axiosInstance.get(\n      `${CATALOG_API_BASE}/portfolio_items/${\n        (orderItem as OrderItem).portfolio_item_id\n      }`\n    );\n  } catch (_error) {\n    // nohandler\n  }\n\n  const parallerRequests = [\n    axiosInstance\n      .get(\n        `${CATALOG_INVENTORY_API_BASE}/sources/${\n          (portfolioItem as PortfolioItem).service_offering_source_ref\n        }`\n      )\n      .catch(() => ({ object: 'Platform', notFound: true })),\n\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/order_items/${\n          (orderItem as OrderItem).id\n        }/progress_messages`\n      )\n      .catch(() => ({ object: 'Messages', notFound: true })),\n    axiosInstance\n      .get(\n        `${CATALOG_API_BASE}/portfolios/${\n          (portfolioItem as PortfolioItem).portfolio_id\n        }`\n      )\n      .catch(() => ({ object: 'Portfolio', notFound: true }))\n  ];\n\n  return Promise.all(\n    parallerRequests\n  ).then(([platform, progressMessages, portfolio]) => [\n    order,\n    orderItem,\n    portfolioItem,\n    platform as Source | ObjectNotFound,\n    progressMessages as ProgressMessage | ObjectNotFound,\n    portfolio as Portfolio | ObjectNotFound\n  ]);\n};\n\nexport const fetchOrderProvisionItems = async (\n  orderId: string\n): Promise<OrderProvisionPayload> => {\n  let orderItems: OrderItem[];\n  try {\n    const items = await axiosInstance.get(\n      `${CATALOG_API_BASE}/order_items/?order_id=${orderId}`\n    );\n    orderItems = items.data;\n  } catch (error) {\n    orderItems = [];\n    // @ts-ignore\n    if (error.status === 404 || error.status === 400) {\n      catalogHistory.replace({\n        pathname: '/404',\n        state: { from: catalogHistory.location }\n      });\n    } else {\n      throw error;\n    }\n  }\n\n  const progressMessageItems: ProgressMessageItem[] = [];\n  const promises = orderItems.map((orderItem) =>\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/order_items/${orderItem.id}/progress_messages`)\n      .then((item) => {\n        progressMessageItems.push({\n          orderItemId: orderItem.id || '',\n          progressMessages: item.data\n        });\n        return progressMessageItems;\n      })\n  );\n  await Promise.all(promises);\n  return { orderItems, progressMessageItems };\n};\n","/* eslint camelcase: 0 */\nimport {\n  getAxiosInstance,\n  getPortfolioItemApi,\n  getOrderApi,\n  getOrderItemApi,\n  getGraphqlInstance\n} from '../shared/user-login';\nimport {\n  CATALOG_API_BASE,\n  APPROVAL_API_BASE,\n  CATALOG_INVENTORY_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\nimport catalogHistory from '../../routing/catalog-history';\nimport {\n  fetchOrderDetailSequence,\n  fetchOrderProvisionItems,\n  OrderDetailPayload,\n  OrderProvisionPayload\n} from './new-order-helper';\nimport {\n  ApiCollectionResponse,\n  ApiMetadata,\n  EnhancedOrder,\n  Full\n} from '../../types/common-types';\nimport {\n  ServicePlan,\n  Order,\n  OrderItem,\n  PortfolioItem,\n  ApprovalRequest,\n  ProgressMessage\n} from '@redhat-cloud-services/catalog-client';\nimport { AxiosPromise } from 'axios';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\nimport { Request, Action } from '@redhat-cloud-services/approval-client';\n\nconst orderApi = getOrderApi();\nconst orderItemApi = getOrderItemApi();\nconst portfolioItemApi = getPortfolioItemApi();\nconst axiosInstance = getAxiosInstance();\nconst graphqlInstance = getGraphqlInstance();\n\nexport const getServicePlans = (\n  portfolioItemId: string\n): Promise<ApiCollectionResponse<ServicePlan>> =>\n  (portfolioItemApi.listServicePlans(portfolioItemId) as unknown) as Promise<\n    ApiCollectionResponse<ServicePlan>\n  >;\n\nexport const sendSubmitOrder = async ({\n  service_parameters: { providerControlParameters, ...service_parameters },\n  ...parameters\n}: AnyObject): Promise<EnhancedOrder> => {\n  const order: Order = ((await orderApi.createOrder()) as unknown) as Order;\n  let orderItem: Partial<OrderItem> = {};\n  orderItem.count = 1;\n  orderItem = {\n    ...orderItem,\n    ...parameters,\n    service_parameters,\n    provider_control_parameters: providerControlParameters || {}\n  };\n  const orderItemResponse = await orderApi.addToOrder(\n    order.id as string,\n    orderItem as OrderItem\n  );\n  return orderApi.submitOrder(order.id as string).then((order) => ({\n    ...order,\n    orderItem: (orderItemResponse as unknown) as OrderItem\n  }));\n};\n\nexport const cancelOrder = (orderId: string): AxiosPromise<Order> =>\n  orderApi.cancelOrder(orderId);\n\nconst getOrderItems = (\n  orderIds: string[]\n): Promise<ApiCollectionResponse<OrderItem>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/order_items?limit=${orderIds.length * 3 ||\n      defaultSettings.limit}${orderIds.length ? '&' : ''}${orderIds\n      .map((orderId) => `filter[order_id][]=${orderId}`)\n      .join('&')}`\n  );\n\nconst getOrderPortfolioItems = (\n  itemIds: string[]\n): Promise<ApiCollectionResponse<PortfolioItem>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolio_items?${itemIds\n      .map((itemId) => `filter[id][]=${itemId}`)\n      .join('&')}`\n  );\n\nexport const getOrders = (\n  filter = '',\n  pagination = defaultSettings\n): Promise<{\n  data: (Order & { orderItems: OrderItem[] })[];\n  portfolioItems: ApiCollectionResponse<PortfolioItem>;\n  meta: ApiMetadata;\n}> =>\n  axiosInstance\n    .get(\n      `${CATALOG_API_BASE}/orders?${filter}&limit=${pagination.limit}&offset=${pagination.offset}`\n    ) // eslint-disable-line max-len\n    .then((orders: ApiCollectionResponse<Full<Order>>) =>\n      getOrderItems(orders.data.map(({ id }) => id)).then((orderItems) =>\n        getOrderPortfolioItems(\n          orderItems.data.map(({ portfolio_item_id }) => portfolio_item_id)\n        ).then((portfolioItems) => {\n          return {\n            portfolioItems,\n            ...orders,\n            data: orders.data.map((order) => ({\n              ...order,\n              orderItems: orderItems.data.filter(\n                ({ order_id }) => order_id === order.id\n              )\n            }))\n          };\n        })\n      )\n    );\n\nexport const getOrderApprovalRequests = (\n  orderItemId: string\n): Promise<ApiCollectionResponse<Request>> =>\n  (orderItemApi.listApprovalRequests(orderItemId) as unknown) as Promise<\n    ApiCollectionResponse<Request>\n  >;\n\nexport interface GetOrderDetailParams {\n  order: string;\n  'order-item'?: string;\n  'portfolio-item'?: string;\n  platform?: string;\n  portfolio?: string;\n}\nexport const getOrderDetail = (\n  params: GetOrderDetailParams\n): Promise<OrderDetailPayload> => {\n  if (Object.values(params).some((value) => !value)) {\n    /**\n     * Try to fetch data sequentially if any of the parameters is unknown\n     */\n    return fetchOrderDetailSequence(params.order);\n  }\n\n  const detailPromises = [\n    (axiosInstance\n      .get(`${CATALOG_API_BASE}/orders/${params.order}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return catalogHistory.replace({\n            pathname: '/404',\n            state: { from: catalogHistory.location }\n          });\n        }\n\n        throw error;\n      }) as unknown) as Promise<Order>,\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/order_items/${params['order-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Order item',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/portfolio_items/${params['portfolio-item']}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Product',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_INVENTORY_API_BASE}/sources/${params.platform}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Platform',\n            notFound: true\n          };\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/orders/${params.order}/progress_messages`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {};\n        }\n\n        throw error;\n      }),\n    axiosInstance\n      .get(`${CATALOG_API_BASE}/portfolios/${params.portfolio}`)\n      .catch((error) => {\n        if (error.status === 404 || error.status === 400) {\n          return {\n            object: 'Portfolio',\n            notFound: true\n          };\n        }\n\n        throw error;\n      })\n  ];\n\n  return (Promise.all(detailPromises) as unknown) as Promise<\n    OrderDetailPayload\n  >;\n};\n\nconst APPROVAL_REQUESTER_PERSONA = 'approval/requester';\nexport interface RequestTranscript extends Full<Request> {\n  actions: Action[];\n}\nconst requestTranscriptQuery = (parent_id: string) => `query {\n  requests(id: \"${parent_id}\") {\n    id\n    number_of_children\n    decision\n    group_name\n    created_at\n    state\n    actions {\n      id\n      created_at\n    }\n    requests {\n      id\n      number_of_children\n      decision\n      group_name\n      state\n      parent_id\n      created_at\n      actions {\n        id\n        created_at\n      }\n    }\n  }\n}`;\nconst fetchRequestTranscript = (\n  requestId: string\n): Promise<RequestTranscript[]> =>\n  graphqlInstance\n    .post(\n      `${APPROVAL_API_BASE}/graphql`,\n      { query: requestTranscriptQuery(requestId) },\n      { 'x-rh-persona': APPROVAL_REQUESTER_PERSONA }\n    )\n    .then(({ data: { requests } }) => {\n      return requests &&\n        requests.length > 0 &&\n        requests[0].number_of_children > 0\n        ? requests[0].requests\n        : requests;\n    });\n\nexport const getApprovalRequests = (\n  orderItemId: string\n): Promise<{\n  data: { group_name: string; decision: string; updated?: string }[];\n}> =>\n  axiosInstance\n    .get(`${CATALOG_API_BASE}/order_items/${orderItemId}/approval_requests`)\n    .then(({ data }: { data: Full<ApprovalRequest>[] }) => {\n      const promises = data.map(({ approval_request_ref }) =>\n        fetchRequestTranscript(approval_request_ref)\n      );\n      return Promise.all(promises).then((requests) => {\n        const data = requests?.[0]?.map(({ actions, ...request }) => ({\n          ...request,\n          updated:\n            actions?.length > 0 ? actions.pop()?.created_at : request.created_at\n        }));\n        return { data: data || [] };\n      });\n    });\n\nexport const getOrderProvisionItems = async (\n  orderId: string\n): Promise<OrderProvisionPayload> => {\n  const items = await fetchOrderProvisionItems(orderId);\n  return items;\n};\n\nexport const getProgressMessages = (\n  orderItemId: string\n): Promise<{\n  data: ProgressMessage[];\n}> =>\n  axiosInstance\n    .get(`${CATALOG_API_BASE}/order_items/${orderItemId}/progress_messages`)\n    .then(({ data }: { data: Full<ProgressMessage>[] }) => {\n      return { data: data || [] };\n    });\n","import React from 'react';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport * as ActionTypes from '../action-types';\nimport * as OrderHelper from '../../helpers/order/order-helper';\nimport OrderNotification from '../../presentational-components/order/order-notification';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport {\n  ApprovalRequestStateEnum,\n  Order,\n  OrderItem,\n  OrderStateEnum,\n  Portfolio,\n  PortfolioItem,\n  ProgressMessage,\n  ServicePlan\n} from '@redhat-cloud-services/catalog-client';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\nimport { Dispatch } from 'redux';\nimport {\n  Full,\n  StringObject,\n  ReduxAction,\n  ApiCollectionResponse\n} from '../../types/common-types';\nimport { AsyncMiddlewareAction, GetReduxState } from '../../types/redux';\nimport { Source } from '@redhat-cloud-services/sources-client';\nimport {\n  ObjectNotFound,\n  ProgressMessageItem\n} from '../../helpers/order/new-order-helper';\n\nexport const fetchServicePlans = (\n  portfolioItemId: string\n): AsyncMiddlewareAction<ApiCollectionResponse<ServicePlan>> => ({\n  type: ActionTypes.FETCH_SERVICE_PLANS,\n  payload: OrderHelper.getServicePlans(portfolioItemId)\n});\n\nexport const setSelectedPlan = (\n  data: ServicePlan\n): ReduxAction<ServicePlan> => ({\n  type: ActionTypes.SET_SELECTED_PLAN,\n  payload: data\n});\n\nexport const sendSubmitOrder = (\n  apiProps: AnyObject,\n  portfolioItem: Full<PortfolioItem>\n) => (dispatch: Dispatch): AsyncMiddlewareAction =>\n  dispatch({\n    type: ActionTypes.SUBMIT_SERVICE_ORDER,\n    payload: OrderHelper.sendSubmitOrder(apiProps).then(({ id, orderItem }) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been accepted successfully',\n          description: (\n            <OrderNotification\n              id={id!}\n              dispatch={dispatch}\n              portfolioItemId={portfolioItem.id}\n              portfolioId={portfolioItem.portfolio_id}\n              platformId={portfolioItem.service_offering_source_ref}\n              orderItemId={orderItem.id!}\n            />\n          ),\n          dismissable: true\n        })\n      )\n    )\n  });\n\nexport const cancelOrder = (orderId: string) => (\n  dispatch: Dispatch,\n  getState: GetReduxState\n): Promise<void | { type: string }> => {\n  dispatch({ type: `${ActionTypes.CANCEL_ORDER}_PENDING` });\n  const {\n    orderReducer: { orderDetail }\n  } = getState();\n  return OrderHelper.cancelOrder(orderId)\n    .then(() => {\n      orderDetail.order.state = OrderStateEnum.Canceled;\n      if (\n        orderDetail.approvalRequest &&\n        orderDetail.approvalRequest.data.length > 0\n      ) {\n        orderDetail.approvalRequest.data[0].state = 'canceled' as ApprovalRequestStateEnum;\n      }\n\n      dispatch({\n        type: ActionTypes.SET_ORDER_DETAIL,\n        payload: { ...orderDetail }\n      });\n      return orderDetail;\n    })\n    .then((orderDetail) =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Your order has been canceled successfully',\n          description: `${`Order #${orderDetail.order.id}`} was canceled.`,\n          dismissable: true\n        })\n      )\n    )\n    .then(() => dispatch({ type: `${ActionTypes.CANCEL_ORDER}_FULFILLED` }))\n    .catch((error) => {\n      dispatch({\n        type: `${ActionTypes.CANCEL_ORDER}_REJECTED`,\n        payload: error\n      });\n    });\n};\n\nexport const fetchOrders = (\n  filters: StringObject,\n  pagination = defaultSettings\n) => (dispatch: Dispatch): Promise<ReduxAction> => {\n  let queryFilter = Object.entries(filters)\n    .filter(([, value]) => value && value.length > 0)\n    .map(([key, value]) =>\n      Array.isArray(value)\n        ? value.map((value) => `filter[${key}][]=${value}`).join('&')\n        : `filter[${key}][contains_i]=${value}`\n    )\n    .join('&');\n  if (pagination.sortBy) {\n    queryFilter = `${queryFilter}&sort_by=${\n      pagination.sortBy\n    }:${pagination.sortDirection || 'desc'}`;\n  }\n\n  dispatch({ type: `${ActionTypes.FETCH_ORDERS}_PENDING` });\n  return OrderHelper.getOrders(queryFilter, pagination)\n    .then(({ portfolioItems, ...orders }) => {\n      dispatch({\n        type: ActionTypes.SET_PORTFOLIO_ITEMS,\n        payload: portfolioItems\n      });\n      return dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_FULFILLED`,\n        meta: {\n          ...pagination,\n          filter: queryFilter,\n          filters,\n          storeState: true,\n          stateKey: 'orders'\n        },\n        payload: orders\n      });\n    })\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_ORDERS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchOrderDetails = (params: OrderHelper.GetOrderDetailParams) => (\n  dispatch: Dispatch\n): Promise<{\n  type: string;\n  payload: {\n    order: Order | ObjectNotFound;\n    orderItem: OrderItem | ObjectNotFound;\n    portfolioItem: PortfolioItem | ObjectNotFound;\n    platform: Source | ObjectNotFound;\n    progressMessages: ProgressMessage | ObjectNotFound;\n    portfolio: Portfolio | ObjectNotFound;\n  };\n}> => {\n  dispatch({ type: `${ActionTypes.SET_ORDER_DETAIL}_PENDING` });\n  return OrderHelper.getOrderDetail(params)\n    .then(\n      ([\n        order,\n        orderItem,\n        portfolioItem,\n        platform,\n        progressMessages,\n        portfolio\n      ]) =>\n        dispatch({\n          type: `${ActionTypes.SET_ORDER_DETAIL}_FULFILLED`,\n          payload: {\n            order,\n            orderItem,\n            portfolioItem,\n            platform,\n            progressMessages,\n            portfolio\n          }\n        })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_DETAIL}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchApprovalRequests = (orderItemId: string) => (\n  dispatch: Dispatch\n): Promise<\n  | {\n      data: {\n        group_name: string;\n        decision: string;\n        updated?: string | undefined;\n      }[];\n    }\n  | { type: string; payload: any } /** the action in catch branch */\n> => {\n  dispatch({ type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_PENDING` });\n  return OrderHelper.getApprovalRequests(orderItemId)\n    .then((data) => {\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_FULFILLED`,\n        payload: data\n      });\n      return data;\n    })\n    .catch((err) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_APPROVAL_REQUESTS}_REJECTED`,\n        payload: err\n      })\n    );\n};\n\nexport const fetchOrderProvision = (orderId: string) => (\n  dispatch: Dispatch\n): Promise<{\n  type: string;\n  payload: {\n    orderItems: OrderItem[] | [];\n    progressMessageItems: ProgressMessageItem[] | [];\n  };\n}> => {\n  dispatch({ type: `${ActionTypes.SET_ORDER_PROVISION_ITEMS}_PENDING` });\n  return OrderHelper.getOrderProvisionItems(orderId)\n    .then(({ orderItems, progressMessageItems }) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_PROVISION_ITEMS}_FULFILLED`,\n        payload: {\n          orderItems,\n          progressMessageItems\n        }\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.SET_ORDER_PROVISION_ITEMS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n"],"names":["orderedBy","id","defaultMessage","orderedByLabel","lastUpdated","compositeTitle","detailTitle","orderSuccess","noOrdersTitle","noOrdersDescription","noApprovalRequests","creatingApprovalRequest","approvalTitle","approvalDetail","approvalCreated","approvalReason","approvalCompleted","orderDetails","menuApproval","menuProvision","menuLifecycle","menuSteps","objectsNotFound","orderID","orderParameters","orderItemParameters","defaultOrderItemType","orderProgressMessages","lifecycleLink","cancelOrder","reOrder","keepOrder","cancelDescription","backToOrders","orderDate","approvalParameters","activity","artifacts","noOrderProvision","fetchingOrderProvision","dispatch","portfolioItemId","portfolioId","platformId","orderItemId","formatMessage","link","chunks","Link","onClick","to","pathname","search","axiosInstance","fetchOrderProvisionItems","orderId","get","items","orderItems","data","status","state","from","progressMessageItems","promises","map","orderItem","then","item","push","progressMessages","Promise","all","orderApi","portfolioItemApi","graphqlInstance","getServicePlans","listServicePlans","fetchServicePlans","type","payload","apiProps","portfolioItem","service_parameters","providerControlParameters","parameters","createOrder","order","count","provider_control_parameters","addToOrder","orderItemResponse","submitOrder","variant","title","description","portfolio_id","service_offering_source_ref","dismissable","getState","orderDetail","OrderStateEnum","approvalRequest","length","catch","error","fetchOrders","filters","pagination","queryFilter","Object","entries","filter","value","key","Array","isArray","join","sortBy","sortDirection","limit","offset","orders","orderIds","itemIds","itemId","portfolioItems","meta","storeState","stateKey","fetchOrderDetails","params","values","some","object","notFound","portfolio_item_id","parallerRequests","platform","portfolio","detailPromises","fetchApprovalRequests","requestId","parent_id","post","query","requests","number_of_children","actions","request","updated","pop","created_at","err","fetchOrderProvision"],"sourceRoot":""}