{"version":3,"sources":["webpack:///./src/redux/actions/portfolio-actions.js","webpack:///./src/helpers/portfolio/portfolio-helper.js","webpack:///./node_modules/react-intl/lib/components/message.js"],"names":["doFetchPortfolios","defaultSettings","filter","options","type","ActionTypes","meta","payload","PortfolioHelper","fetchPortfolios","dispatch","fetchPortfoliosWithState","storeState","stateKey","fetchPortfolioItems","limit","offset","fetchPortfolioItemsWithPortfolio","portfolioId","fetchSelectedPortfolio","id","addPortfolio","portfolioData","notifications","fulfilled","variant","title","description","name","addToPortfolio","items","updatePortfolio","getState","then","ADD_NOTIFICATION","dismissable","error","undoRemovePortfolio","restoreKey","viewState","CLEAR_NOTIFICATIONS","portfolio","removePortfolio","restore_key","href","onClick","event","preventDefault","portfolioReducer","portfolios","data","length","removeProductsFromPortfolio","portfolioItems","portfolioName","selectedPortfolio","defaultMessage","values","count","undo","restoreData","err","undoRemoveProductsFromPortfolio","copyPortfolio","copyPortfolioItem","portfolioItemId","copyObject","newPortfolio","resetSelectedPortfolio","updatePortfolioItem","item","getPortfolioItemDetail","params","portfolioItem","source","axiosInstance","getAxiosInstance","portfolioApi","getPortfolioApi","portfolioItemApi","getPortfolioItemApi","listPortfolios","get","CATALOG_API_BASE","listPortfolioItems","portfolioReference","reduce","acc","curr","index","portfolio_id","Object","keys","map","join","forEach","portfolioItemIndex","getPortfolio","showPortfolio","getPortfolioItemsWithPortfolio","a","createPortfolio","Promise","all","createPortfolioItem","service_offering_ref","store","sanitizeValues","destroyPortfolio","removePortfolioItem","destroyPortfolioItem","removePortfolioItems","portfolioItemIds","itemId","fetchPortfolioByName","restorePortfolioItems","unDeletePortfolioItem","postCopyPortfolio","postCopyPortfolioItem","uploadPortfolioItemIcon","file","iconId","FormData","append","patch","post","headers","accept","_boundary","SOURCES_API_BASE","status","object","notFound","getPortfolioFromState","find","undeletePortfolio","__rest","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","shallowEquals","defaultFormatMessage","descriptor","assign","locale","FormattedMessage","nextProps","_a","this","props","otherProps","nextValues","nextOtherProps","Consumer","intl","formatMessage","textComponent","Text","children","tagName","Component","nodes","Array","isArray","displayName","defaultProps"],"mappings":"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","file":"js/lib~add-portfolio~copy-portfolio-item-modal~portfolio~portfolios~products~remove-portfolio~share-por~a2fe5007.c918a0a9a18fb18a3eab.js","sourcesContent":["import React, { Fragment } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport {\n  ADD_NOTIFICATION,\n  CLEAR_NOTIFICATIONS\n} from '@redhat-cloud-services/frontend-components-notifications/cjs/actionTypes';\n\nimport * as ActionTypes from '../action-types';\nimport * as PortfolioHelper from '../../helpers/portfolio/portfolio-helper';\nimport { defaultSettings } from '../../helpers/shared/pagination';\n\nexport const doFetchPortfolios = ({\n  filter,\n  ...options\n} = defaultSettings) => ({\n  type: ActionTypes.FETCH_PORTFOLIOS,\n  meta: { ...defaultSettings, filter, ...options },\n  payload: PortfolioHelper.listPortfolios(filter, options)\n});\n\nexport const fetchPortfolios = (options) => (dispatch) =>\n  dispatch(doFetchPortfolios(options));\n\nexport const fetchPortfoliosWithState = (options = defaultSettings) => (\n  dispatch\n) =>\n  dispatch(\n    doFetchPortfolios({ ...options, storeState: true, stateKey: 'portfolio' })\n  );\n\nexport const fetchPortfolioItems = (\n  filter = '',\n  options = defaultSettings\n) => ({\n  type: ActionTypes.FETCH_PORTFOLIO_ITEMS,\n  meta: { filter, storeState: true, stateKey: 'products' },\n  payload: PortfolioHelper.listPortfolioItems(\n    options.limit,\n    options.offset,\n    filter\n  )\n});\n\nexport const fetchPortfolioItemsWithPortfolio = (\n  portfolioId,\n  options = defaultSettings\n) => ({\n  type: ActionTypes.FETCH_PORTFOLIO_ITEMS_WITH_PORTFOLIO,\n  payload: PortfolioHelper.getPortfolioItemsWithPortfolio(portfolioId, options),\n  meta: {\n    ...options,\n    storeState: true,\n    stateKey: 'portfolioItems'\n  }\n});\n\nexport const fetchSelectedPortfolio = (id) => ({\n  type: ActionTypes.FETCH_PORTFOLIO,\n  payload: PortfolioHelper.getPortfolio(id)\n});\n\nexport const searchPortfolioItems = (value) => ({\n  type: ActionTypes.FILTER_PORTFOLIO_ITEMS,\n  payload: new Promise((resolve) => {\n    resolve(value);\n  })\n});\n\nexport const addPortfolio = (portfolioData) => ({\n  type: ActionTypes.ADD_PORTFOLIO,\n  payload: PortfolioHelper.addPortfolio(portfolioData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: 'Success adding portfolio',\n        description: `Portfolio ${portfolioData.name} was added successfully.`\n      }\n    }\n  }\n});\n\nexport const addToPortfolio = (portfolioId, items) => ({\n  type: ActionTypes.ADD_TO_PORTFOLIO,\n  payload: PortfolioHelper.addToPortfolio(portfolioId, items),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: 'Success adding products',\n        description: 'Products were successfully added to portfolio.'\n      }\n    }\n  }\n});\n\nexport const updatePortfolio = (portfolioData, options) => (\n  dispatch,\n  getState\n) => {\n  dispatch({\n    type: ActionTypes.UPDATE_TEMPORARY_PORTFOLIO,\n    payload: portfolioData\n  });\n\n  return PortfolioHelper.updatePortfolio(portfolioData, { getState })\n    .then(() => dispatch(doFetchPortfolios(options)))\n    .then(() =>\n      dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          dismissable: true,\n          variant: 'success',\n          title: 'Success updating portfolio',\n          description: 'The portfolio was updated successfully.'\n        }\n      })\n    )\n    .catch((error) => {\n      dispatch({ type: ActionTypes.RESTORE_PORTFOLIO_PREV_STATE });\n      throw error;\n    })\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.UPDATE_TEMPORARY_PORTFOLIO}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const undoRemovePortfolio = (portfolioId, restoreKey, viewState) => (\n  dispatch\n) => {\n  dispatch({ type: CLEAR_NOTIFICATIONS });\n  return PortfolioHelper.undeletePortfolio(portfolioId, restoreKey).then(\n    (portfolio) => {\n      dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          variant: 'success',\n          dismissable: true,\n          title: `Portfolio ${portfolio.name} has been restored`\n        }\n      });\n      return dispatch(fetchPortfolios(viewState));\n    }\n  );\n};\n\nexport const removePortfolio = (portfolioId, viewState = {}) => (\n  dispatch,\n  getState\n) => {\n  dispatch({\n    type: ActionTypes.DELETE_TEMPORARY_PORTFOLIO,\n    payload: portfolioId\n  });\n  return dispatch({\n    type: ActionTypes.REMOVE_PORTFOLIO,\n    payload: PortfolioHelper.removePortfolio(portfolioId)\n      .then(({ restore_key }) => {\n        dispatch({\n          type: ADD_NOTIFICATION,\n          payload: {\n            variant: 'success',\n            title: 'Success removing portfolio',\n            dismissable: true,\n            description: (\n              <Fragment>\n                The portfolio was removed successfully. You can&nbsp;\n                <a\n                  href=\"#\"\n                  id={`undo-delete-portfolio-${portfolioId}`}\n                  onClick={(event) => {\n                    event.preventDefault();\n                    dispatch(\n                      undoRemovePortfolio(portfolioId, restore_key, viewState)\n                    );\n                  }}\n                >\n                  Undo\n                </a>\n                &nbsp;this action if this was a mistake.\n              </Fragment>\n            )\n          }\n        });\n        const { meta, data } = getState().portfolioReducer.portfolios;\n        return dispatch(\n          fetchPortfolios({\n            ...viewState,\n            ...meta,\n            offset: data.length === 0 ? 0 : meta.offset\n          })\n        );\n      })\n      .catch((error) => {\n        dispatch({ type: ActionTypes.RESTORE_PORTFOLIO_PREV_STATE });\n        throw error;\n      })\n  });\n};\n\nexport const selectPortfolioItem = (portfolioItem) => ({\n  type: ActionTypes.SELECT_PORTFOLIO_ITEM,\n  payload: portfolioItem\n});\n\nexport const undoRemoveProductsFromPortfolio = (restoreData, portfolioId) => (\n  dispatch\n) => {\n  dispatch({ type: `${ActionTypes.RESTORE_PORTFOLIO_ITEMS}_PENDING` });\n  return PortfolioHelper.restorePortfolioItems(restoreData)\n    .then(() =>\n      dispatch({ type: `${ActionTypes.RESTORE_PORTFOLIO_ITEMS}_FULFILLED` })\n    )\n    .then(() => dispatch({ type: CLEAR_NOTIFICATIONS }))\n    .then(() => dispatch(fetchPortfolioItemsWithPortfolio(portfolioId)))\n    .then(() =>\n      dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          variant: 'success',\n          dismissable: true,\n          title: 'Products have been restored'\n        }\n      })\n    )\n    .catch((err) =>\n      dispatch({\n        type: `${ActionTypes.RESTORE_PORTFOLIO_ITEMS}_REJECTED`,\n        payload: err\n      })\n    );\n};\n\nexport const removeProductsFromPortfolio = (portfolioItems, portfolioName) => (\n  dispatch,\n  getState\n) => {\n  dispatch({\n    type: `${ActionTypes.REMOVE_PORTFOLIO_ITEMS}_PENDING`\n  });\n  const {\n    portfolioReducer: {\n      portfolioItems: { meta },\n      selectedPortfolio: { id: portfolioId }\n    }\n  } = getState();\n  return PortfolioHelper.removePortfolioItems(portfolioItems)\n    .then((data) =>\n      dispatch(\n        fetchPortfolioItemsWithPortfolio(portfolioId, {\n          offset: 0,\n          limit: meta.limit,\n          filter: ''\n        })\n      ).then(() => data)\n    )\n    .then((data) => {\n      return dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          variant: 'success',\n          title: 'Products removed',\n          dismissable: true,\n          description: (\n            <FormattedMessage\n              id=\"portfolio.remove.portfolio-items\"\n              defaultMessage=\"You have removed {count, number} {count, plural, one {product} other {products} } from the {portfolioName} portfolio. {undo} if this was a mistake.\" // eslint-disable-line max-len\n              values={{\n                count: portfolioItems.length,\n                portfolioName,\n                undo: (\n                  <a\n                    href=\"#\"\n                    id={`restore-portfolio-item-${portfolioId}`}\n                    onClick={(event) => {\n                      event.preventDefault();\n                      dispatch(\n                        undoRemoveProductsFromPortfolio(data, portfolioId)\n                      );\n                    }}\n                  >\n                    Undo\n                  </a>\n                )\n              }}\n            />\n          )\n        }\n      });\n    })\n    .then(() =>\n      dispatch({ type: `${ActionTypes.REMOVE_PORTFOLIO_ITEMS}_FULFILLED` })\n    )\n    .catch((err) =>\n      dispatch({\n        type: `${ActionTypes.REMOVE_PORTFOLIO_ITEMS}_REJECTED`,\n        payload: err\n      })\n    );\n};\n\nexport const copyPortfolio = (id) => (dispatch) => {\n  dispatch({ type: 'COPY_PORTFOLIO_PENDING' });\n  return PortfolioHelper.copyPortfolio(id)\n    .then((portfolio) => {\n      dispatch({ type: 'COPY_PORTFOLIO_FULFILLED' });\n      dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          variant: 'success',\n          title: 'You have successfully copied a portfolio',\n          description: `${portfolio.name} has been copied.`,\n          dismissable: true\n        }\n      });\n      return portfolio;\n    })\n    .catch((err) =>\n      dispatch({ type: 'COPY_PORTFOLIO_REJECTED', payload: err })\n    );\n};\n\nexport const copyPortfolioItem = (\n  portfolioItemId,\n  copyObject,\n  newPortfolio\n) => (dispatch) => {\n  return PortfolioHelper.copyPortfolioItem(portfolioItemId, copyObject)\n    .then((data) => {\n      dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          variant: 'success',\n          title: 'You have successfully copied a product',\n          description: `${data.name} has been copied into ${newPortfolio.name}`,\n          dismissable: true\n        }\n      });\n      return data;\n    })\n    .catch((err) =>\n      dispatch({ type: 'COPY_PORTFOLIO_ITEM_REJECTED', payload: err })\n    );\n};\n\nexport const resetSelectedPortfolio = () => ({\n  type: ActionTypes.RESET_SELECTED_PORTFOLIO\n});\n\nexport const updatePortfolioItem = (values) => (dispatch, getState) => {\n  dispatch({\n    type: ActionTypes.UPDATE_TEMPORARY_PORTFOLIO_ITEM,\n    payload: values\n  });\n  return PortfolioHelper.updatePortfolioItem(values, { getState })\n    .then((data) => {\n      dispatch({ type: ActionTypes.UPDATE_PORTFOLIO_ITEM, payload: data });\n      return data;\n    })\n    .then((item) =>\n      dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          variant: 'success',\n          title: `Product \"${item.name}\" was successfully updated`,\n          dismissable: true\n        }\n      })\n    )\n    .catch((error) => {\n      dispatch({ type: ActionTypes.RESTORE_PORTFOLIO_ITEM_PREV_STATE });\n      throw error;\n    })\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.UPDATE_TEMPORARY_PORTFOLIO_ITEM}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const getPortfolioItemDetail = (params) => (dispatch) => {\n  dispatch({ type: `${ActionTypes.SELECT_PORTFOLIO_ITEM}_PENDING` });\n  return PortfolioHelper.getPortfolioItemDetail(params).then(\n    ([portfolioItem, source]) =>\n      dispatch({\n        type: `${ActionTypes.SELECT_PORTFOLIO_ITEM}_FULFILLED`,\n        payload: {\n          portfolioItem,\n          source\n        }\n      })\n  );\n};\n","import {\n  getAxiosInstance,\n  getPortfolioApi,\n  getPortfolioItemApi\n} from '../shared/user-login';\nimport { CATALOG_API_BASE, SOURCES_API_BASE } from '../../utilities/constants';\nimport { sanitizeValues } from '../shared/helpers';\nimport { defaultSettings } from '../shared/pagination';\n\nconst axiosInstance = getAxiosInstance();\nconst portfolioApi = getPortfolioApi();\nconst portfolioItemApi = getPortfolioItemApi();\n\nexport function listPortfolios(\n  filter = '',\n  { limit, offset } = defaultSettings\n) {\n  return axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolios?filter[name][contains_i]=${filter}&limit=${limit}&offset=${offset}`\n  );\n}\n\nexport function listPortfolioItems(limit = 50, offset = 0, filter = '') {\n  return axiosInstance\n    .get(\n      `${CATALOG_API_BASE}/portfolio_items?filter[name][contains_i]=${filter}&limit=${limit}&offset=${offset}`\n    )\n    .then((portfolioItems) => {\n      const portfolioReference = portfolioItems.data.reduce(\n        (acc, curr, index) =>\n          curr.portfolio_id\n            ? {\n                ...acc,\n                [curr.portfolio_id]: acc[curr.portfolio_id]\n                  ? [...acc[curr.portfolio_id], index]\n                  : [index]\n              }\n            : acc,\n        {}\n      );\n      return axiosInstance\n        .get(\n          `${CATALOG_API_BASE}/portfolios?${Object.keys(portfolioReference)\n            .map((id) => `filter[id][]=${id}`)\n            .join('&')}`\n        )\n        .then(({ data }) => ({\n          portfolioItems,\n          portfolioReference,\n          portfolios: data\n        }));\n    })\n    .then(({ portfolioItems, portfolioReference, portfolios }) => {\n      portfolios.forEach(\n        ({ id, name }) =>\n          portfolioReference[id] &&\n          portfolioReference[id].forEach((portfolioItemIndex) => {\n            portfolioItems.data[portfolioItemIndex].portfolioName = name;\n          })\n      );\n      return portfolioItems;\n    });\n}\n\nexport function getPortfolio(portfolioId) {\n  return portfolioApi.showPortfolio(portfolioId);\n}\n\nexport function getPortfolioItemsWithPortfolio(\n  portfolioId,\n  { limit, offset, filter = '' } = defaultSettings\n) {\n  return axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolios/${portfolioId}/portfolio_items?filter[name][contains_i]=${filter}&limit=${limit}&offset=${offset}`\n  );\n}\n\n// TO DO - change to use the API call that adds multiple items to a portfolio when available\nexport async function addPortfolio(portfolioData, items) {\n  let portfolio = await portfolioApi.createPortfolio(portfolioData);\n  if (portfolio && items && items.length > 0) {\n    return addToPortfolio(portfolio, items);\n  }\n\n  return portfolio;\n}\n\nexport async function addToPortfolio(portfolioId, items) {\n  return Promise.all(\n    items.map((item) =>\n      portfolioItemApi.createPortfolioItem({\n        portfolio_id: portfolioId,\n        service_offering_ref: item\n      })\n    )\n  );\n}\n\nexport async function updatePortfolio({ id, ...portfolioData }, store) {\n  return await portfolioApi.updatePortfolio(\n    id,\n    sanitizeValues(portfolioData, 'Portfolio', store)\n  );\n}\n\nexport async function removePortfolio(portfolioId) {\n  return portfolioApi.destroyPortfolio(portfolioId);\n}\n\nexport async function removePortfolioItem(portfolioItemId) {\n  return portfolioItemApi.destroyPortfolioItem(portfolioItemId);\n}\n\nexport async function removePortfolioItems(portfolioItemIds) {\n  return Promise.all(\n    portfolioItemIds.map(async (itemId) => {\n      const { restore_key } = await removePortfolioItem(itemId);\n      return {\n        portfolioItemId: itemId,\n        restoreKey: restore_key\n      };\n    })\n  );\n}\n\nexport function fetchProviderControlParameters(portfolioItemId) {\n  return axiosInstance\n    .get(\n      `${CATALOG_API_BASE}/portfolio_items/${portfolioItemId}/provider_control_parameters`\n    )\n    .then((data) => ({\n      required: [],\n      ...data,\n      properties: {\n        ...data.properties,\n        namespace: {\n          ...data.properties.namespace,\n          enum: Array.from(new Set([...data.properties.namespace.enum]))\n        }\n      }\n    }));\n}\n\nexport async function updatePortfolioItem({ id, ...portfolioItem }, store) {\n  return await portfolioItemApi.updatePortfolioItem(\n    id,\n    sanitizeValues(portfolioItem, 'PortfolioItem', store)\n  );\n}\n\nexport function fetchPortfolioByName(name = '') {\n  return axiosInstance.get(`${CATALOG_API_BASE}/portfolios`, {\n    params: {\n      filter: {\n        name\n      }\n    }\n  });\n}\n\nexport const restorePortfolioItems = (restoreData) =>\n  Promise.all(\n    restoreData.map(({ portfolioItemId, restoreKey }) =>\n      portfolioItemApi.unDeletePortfolioItem(portfolioItemId, {\n        restore_key: restoreKey\n      })\n    )\n  );\n\nexport const copyPortfolio = (portfolioId) =>\n  portfolioApi.postCopyPortfolio(portfolioId);\n\nexport const copyPortfolioItem = (portfolioItemId, copyObject = {}) =>\n  portfolioItemApi.postCopyPortfolioItem(portfolioItemId, copyObject);\n\nexport const uploadPortfolioItemIcon = (portfolioItemId, file, iconId) => {\n  let data = new FormData();\n  data.append('content', file, file.name);\n  if (iconId) {\n    return axiosInstance.patch(`${CATALOG_API_BASE}/icons/${iconId}`, data);\n  }\n\n  data.append('portfolio_item_id', portfolioItemId);\n  return axiosInstance.post(`${CATALOG_API_BASE}/icons`, data, {\n    headers: {\n      accept: 'application/json',\n      'Content-Type': `multipart/form-data; boundary=${data._boundary}`\n    }\n  });\n};\n\nexport const getPortfolioItemDetail = (params) =>\n  Promise.all([\n    axiosInstance.get(\n      `${CATALOG_API_BASE}/portfolio_items/${params.portfolioItem}`\n    ),\n    axiosInstance\n      .get(`${SOURCES_API_BASE}/sources/${params.source}`)\n      .catch((error) => {\n        if (error.status === 404) {\n          return {\n            object: 'platform',\n            notFound: true\n          };\n        }\n\n        throw error;\n      })\n  ]);\n\nexport const getPortfolioFromState = (portfolioReducer, portfolioId) =>\n  portfolioReducer.selectedPortfolio &&\n  portfolioReducer.selectedPortfolio.id === portfolioId\n    ? portfolioReducer.selectedPortfolio\n    : portfolioReducer.portfolios.data.find(({ id }) => id === portfolioId);\n\nexport const undeletePortfolio = (portfolioId, restoreKey) =>\n  axiosInstance.post(`${CATALOG_API_BASE}/portfolios/${portfolioId}/undelete`, {\n    restore_key: restoreKey\n  });\n","/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { Context } from './injectIntl';\nimport { formatMessage } from '../formatters/message';\nimport { invariantIntlContext, DEFAULT_INTL_CONFIG, createFormatters, } from '../utils';\nimport * as shallowEquals_ from 'shallow-equal/objects';\nconst shallowEquals = shallowEquals_.default || shallowEquals_;\nconst defaultFormatMessage = (descriptor, values) => {\n    if (process.env.NODE_ENV !== 'production') {\n        console.error('[React Intl] Could not find required `intl` object. <IntlProvider> needs to exist in the component ancestry. Using default message as fallback.');\n    }\n    return formatMessage(Object.assign(Object.assign({}, DEFAULT_INTL_CONFIG), { locale: 'en' }), createFormatters(), descriptor, values);\n};\nclass FormattedMessage extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        const _a = this.props, { values } = _a, otherProps = __rest(_a, [\"values\"]);\n        const { values: nextValues } = nextProps, nextOtherProps = __rest(nextProps, [\"values\"]);\n        return (!shallowEquals(nextValues, values) ||\n            !shallowEquals(otherProps, nextOtherProps));\n    }\n    render() {\n        return (React.createElement(Context.Consumer, null, (intl) => {\n            if (!this.props.defaultMessage) {\n                invariantIntlContext(intl);\n            }\n            const { formatMessage = defaultFormatMessage, textComponent: Text = React.Fragment, } = intl || {};\n            const { id, description, defaultMessage, values, children, tagName: Component = Text, } = this.props;\n            const descriptor = { id, description, defaultMessage };\n            let nodes = formatMessage(descriptor, values);\n            if (!Array.isArray(nodes)) {\n                nodes = [nodes];\n            }\n            if (typeof children === 'function') {\n                return children(...nodes);\n            }\n            if (Component) {\n                // Needs to use `createElement()` instead of JSX, otherwise React will\n                // warn about a missing `key` prop with rich-text message formatting.\n                return React.createElement(Component, null, ...nodes);\n            }\n            return nodes;\n        }));\n    }\n}\nFormattedMessage.displayName = 'FormattedMessage';\nFormattedMessage.defaultProps = {\n    values: {},\n};\nexport default FormattedMessage;\n"],"sourceRoot":""}