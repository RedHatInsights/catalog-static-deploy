{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/extends.js","webpack:///./src/messages/portfolio.messages.js","webpack:///./src/redux/actions/portfolio-actions.js","webpack:///./src/helpers/portfolio/portfolio-helper.js"],"names":["_extends","module","exports","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","portfolioMessages","defineMessages","require","removeItemsNotification","id","defaultMessage","removePortfolioNotification","modalCreateTitle","modalCreateSubmit","modalEditTitle","addProducts","emptyNoProducts","portfoliosPlaceholder","portfoliosNoData","portfoliosNoDataDescription","portfolioRemoveDescription","portfolioRemoveTitle","portfolioRemoveCancel","portfolioShareUnknown","portfolioSharePermissions","portfolioShareGroups","portfolioShareTitle","portfolioShareApply","portfolioShareDescription","addProducstPlatformTitle","addProducstPlatformDescription","addProducstFilterTitle","copyItemTitle","portfolioItemSurvey","portfolioItemOrder","portfolioItemIconTitle","portfolioItemOverview","portfolioItemSupport","portfolioItemDocumentation","portfolioItemDocLink","restoreSurvey","surveyTitle","sourceUnavaiable","objectUnavaiable","backToProducts","editProduct","shareTooltip","shareErrorMissingGroup","shareErrorMissingPermission","shareErrorMissingData","shareDuplicate","noShares","shareGroupsAccess","shareSuccessTitle","doFetchPortfolios","defaultSettings","filter","options","type","ActionTypes","meta","payload","PortfolioHelper","fetchPortfolios","dispatch","fetchPortfoliosWithState","storeState","stateKey","fetchPortfolioItems","limit","offset","fetchPortfolioItemsWithPortfolio","portfolioId","fetchSelectedPortfolio","addPortfolio","portfolioData","notifications","fulfilled","variant","title","description","name","addToPortfolio","items","updatePortfolio","getState","then","ADD_NOTIFICATION","dismissable","error","undoRemovePortfolio","restoreKey","viewState","CLEAR_NOTIFICATIONS","portfolio","removePortfolio","restore_key","values","a","chunks","href","onClick","event","preventDefault","portfolioReducer","portfolios","data","removeProductsFromPortfolio","portfolioItems","portfolioName","selectedPortfolio","count","restoreData","err","undoRemoveProductsFromPortfolio","copyPortfolio","copyPortfolioItem","portfolioItemId","copyObject","newPortfolio","resetSelectedPortfolio","updatePortfolioItem","item","getPortfolioItemDetail","params","portfolioItem","axiosInstance","getAxiosInstance","portfolioApi","getPortfolioApi","portfolioItemApi","getPortfolioItemApi","listPortfolios","get","CATALOG_API_BASE","listPortfolioItems","portfolioReference","reduce","acc","curr","index","portfolio_id","keys","map","join","forEach","portfolioItemIndex","getPortfolio","showPortfolio","getPortfolioItemsWithPortfolio","createPortfolio","Promise","all","createPortfolioItem","service_offering_ref","store","sanitizeValues","destroyPortfolio","removePortfolioItem","destroyPortfolioItem","removePortfolioItems","portfolioItemIds","itemId","fetchPortfolioByName","restorePortfolioItems","unDeletePortfolioItem","postCopyPortfolio","postCopyPortfolioItem","uploadPortfolioItemIcon","file","iconId","FormData","append","patch","post","headers","accept","_boundary","SOURCES_API_BASE","status","object","notFound","getPortfolioFromState","find","undeletePortfolio"],"mappings":"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","file":"js/lib~add-portfolio~copy-portfolio-item-modal~portfolio~portfolios~products~remove-portfolio~share-por~a2fe5007.a9e6740c239f64806ba9.js","sourcesContent":["function _extends() {\n  module.exports = _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends;","const { defineMessages } = require('react-intl');\n\nconst portfolioMessages = defineMessages({\n  removeItemsNotification: {\n    id: 'portfolio.notifications.remove.portfolio-items',\n    defaultMessage:\n      'You have removed {count, number} {count, plural, one {product} other {products} } from the {portfolioName} portfolio. <a>Undo</a> if this was a mistake.' // eslint-disable-line max-len\n  },\n  removePortfolioNotification: {\n    id: 'portfolio.notifications.remove.portfolio',\n    defaultMessage:\n      'The portfolio was removed successfully. You can <a>Undo</a> this action if this was a mistake.'\n  },\n  modalCreateTitle: {\n    id: 'portfolio.modal.add.title',\n    defaultMessage: 'Create portfolio'\n  },\n  modalCreateSubmit: {\n    id: 'portfolio.modal.add.create',\n    defaultMessage: 'Create'\n  },\n  modalEditTitle: {\n    id: 'portfolio.modal.edit.title',\n    defaultMessage: 'Edit portfolio'\n  },\n  addProducts: {\n    id: 'portfolio.empty.add.products',\n    defaultMessage: 'Add products'\n  },\n  emptyNoProducts: {\n    id: 'portfolio.empty.no-products',\n    defaultMessage: 'No products in your portfolio'\n  },\n  portfoliosPlaceholder: {\n    id: 'portfolios.filters.placeholder',\n    defaultMessage: 'Filter by portfolio'\n  },\n  portfoliosNoData: {\n    id: 'portfolios.empty.noData.title',\n    defaultMessage: 'No portfolios'\n  },\n  portfoliosNoDataDescription: {\n    id: 'portfolios.empty.noData.description',\n    defaultMessage: 'No portfolios match your filter criteria.'\n  },\n  portfolioRemoveDescription: {\n    id: 'portfolio.remove.modal.description',\n    defaultMessage:\n      'This action will permanently delete portfolio {name} and its data.'\n  },\n  portfolioRemoveTitle: {\n    id: 'portfolio.remove.modal.title',\n    defaultMessage: 'Delete Portfolio?'\n  },\n  portfolioRemoveCancel: {\n    id: 'portfolio.remove.modal.cancel',\n    defaultMessage: 'Cancel'\n  },\n  portfolioShareUnknown: {\n    id: 'portfolio.share.modal.option.unknown',\n    defaultMessage: 'Unknown'\n  },\n  portfolioSharePermissions: {\n    id: 'portfolio.share.modal.permissions',\n    defaultMessage: 'Select the share permissions'\n  },\n  portfolioShareGroups: {\n    id: 'portfolio.share.modal.groups',\n    defaultMessage: 'Select a group'\n  },\n  portfolioShareTitle: {\n    id: 'portfolio.share.modal.title',\n    defaultMessage: 'Share portfolio'\n  },\n  portfolioShareApply: {\n    id: 'portfolio.share.modal.apply',\n    defaultMessage: 'Apply'\n  },\n  portfolioShareDescription: {\n    id: 'portfolio.share.modal.description',\n    defaultMessage: 'Share <strong>{name}</strong> portfolio'\n  },\n  addProducstPlatformTitle: {\n    id: 'portfolio.add.platform.title.empty',\n    defaultMessage: 'Please choose platform'\n  },\n  addProducstPlatformDescription: {\n    id: 'portfolio.add.platform.description.empty',\n    defaultMessage:\n      'In order to select products for your portfolio you must choose platform first'\n  },\n  addProducstFilterTitle: {\n    id: 'portfolio.add.platform.filter.empty',\n    defaultMessage: 'No products match filter parameters'\n  },\n  copyItemTitle: {\n    id: 'portfolio.item.copy',\n    defaultMessage: 'Copy product'\n  },\n  portfolioItemSurvey: {\n    id: 'portfolio.item.detail.actions.survey',\n    defaultMessage: 'Edit survey'\n  },\n  portfolioItemOrder: {\n    id: 'portfolio.item.detail.actions.order',\n    defaultMessage: 'Order'\n  },\n  portfolioItemIconTitle: {\n    id: 'portfolio.item.icon.upload.notification',\n    defaultMessage: 'Icon upload error'\n  },\n  portfolioItemOverview: {\n    id: 'portfolio.item.detail.overview',\n    defaultMessage: 'Overview'\n  },\n  portfolioItemSupport: {\n    id: 'portfolio.item.detail.support',\n    defaultMessage: 'Learn more'\n  },\n  portfolioItemDocumentation: {\n    id: 'portfolio.item.detail.documentation',\n    defaultMessage: 'Documentation'\n  },\n  portfolioItemDocLink: {\n    id: 'portfolio.item.detail.doclink',\n    defaultMessage: 'Doc link'\n  },\n  restoreSurvey: {\n    id: 'portfolio.item.survey.restore',\n    defaultMessage: 'Restore to Ansible Tower version'\n  },\n  surveyTitle: {\n    id: 'portfolio.item.survey.edit',\n    defaultMessage: 'Editing survey: {name}'\n  },\n  sourceUnavaiable: {\n    id: 'portfolio.detail.alert.source.unavailable',\n    defaultMessage: 'The platform for this product is unavailable'\n  },\n  objectUnavaiable: {\n    id: 'portfolio.detail.alert.unavailable',\n    defaultMessage: 'The {object} for this product is no longer available'\n  },\n  backToProducts: {\n    id: 'portfolio.detail.back-to-products',\n    defaultMessage: 'Back to products'\n  },\n  editProduct: {\n    id: 'portfolio.item.edit.title',\n    defaultMessage: 'Edit product'\n  },\n  shareTooltip: {\n    id: 'portfolio.share.add.tooltip',\n    defaultMessage: 'Share portfolio with selected group and permissions.'\n  },\n  shareErrorMissingGroup: {\n    id: 'portfolio.share.add.missing-group',\n    defaultMessage: 'Select group to share portfolio.'\n  },\n  shareErrorMissingPermission: {\n    id: 'portfolio.share.add.missing-permission',\n    defaultMessage: 'Assign permissions to selected group.'\n  },\n  shareErrorMissingData: {\n    id: 'portfolio.share.add.missing-data',\n    defaultMessage: 'Choose group and permissions.'\n  },\n  shareDuplicate: {\n    id: 'portfolio.share.add.duplicate',\n    defaultMessage: 'Portfolio is already shared with this group.'\n  },\n  noShares: {\n    id: 'portfolio.share.add.no-shares',\n    defaultMessage: 'To share portfolio select a group and permissions'\n  },\n  shareGroupsAccess: {\n    id: 'share.groups.access',\n    defaultMessage: 'Groups with access'\n  },\n  shareSuccessTitle: {\n    id: 'share.notification.success.title',\n    defaultMessage: 'Portfolio sharing settings were updated'\n  }\n});\n\nexport default portfolioMessages;\n","import React from 'react';\nimport {\n  ADD_NOTIFICATION,\n  CLEAR_NOTIFICATIONS\n} from '@redhat-cloud-services/frontend-components-notifications/cjs/actionTypes';\n\nimport * as ActionTypes from '../action-types';\nimport * as PortfolioHelper from '../../helpers/portfolio/portfolio-helper';\nimport { defaultSettings } from '../../helpers/shared/pagination';\n\nimport portfolioMessages from '../../messages/portfolio.messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport const doFetchPortfolios = ({\n  filter,\n  ...options\n} = defaultSettings) => ({\n  type: ActionTypes.FETCH_PORTFOLIOS,\n  meta: { ...defaultSettings, filter, ...options },\n  payload: PortfolioHelper.listPortfolios(filter, options)\n});\n\nexport const fetchPortfolios = (options) => (dispatch) =>\n  dispatch(doFetchPortfolios(options));\n\nexport const fetchPortfoliosWithState = (options = defaultSettings) => (\n  dispatch\n) =>\n  dispatch(\n    doFetchPortfolios({ ...options, storeState: true, stateKey: 'portfolio' })\n  );\n\nexport const fetchPortfolioItems = (\n  filter = '',\n  options = defaultSettings\n) => ({\n  type: ActionTypes.FETCH_PORTFOLIO_ITEMS,\n  meta: { filter, storeState: true, stateKey: 'products' },\n  payload: PortfolioHelper.listPortfolioItems(\n    options.limit,\n    options.offset,\n    filter\n  )\n});\n\nexport const fetchPortfolioItemsWithPortfolio = (\n  portfolioId,\n  options = defaultSettings\n) => ({\n  type: ActionTypes.FETCH_PORTFOLIO_ITEMS_WITH_PORTFOLIO,\n  payload: PortfolioHelper.getPortfolioItemsWithPortfolio(portfolioId, options),\n  meta: {\n    ...options,\n    storeState: true,\n    stateKey: 'portfolioItems'\n  }\n});\n\nexport const fetchSelectedPortfolio = (id) => ({\n  type: ActionTypes.FETCH_PORTFOLIO,\n  payload: PortfolioHelper.getPortfolio(id)\n});\n\nexport const searchPortfolioItems = (value) => ({\n  type: ActionTypes.FILTER_PORTFOLIO_ITEMS,\n  payload: new Promise((resolve) => {\n    resolve(value);\n  })\n});\n\nexport const addPortfolio = (portfolioData) => ({\n  type: ActionTypes.ADD_PORTFOLIO,\n  payload: PortfolioHelper.addPortfolio(portfolioData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: 'Success adding portfolio',\n        description: `Portfolio ${portfolioData.name} was added successfully.`\n      }\n    }\n  }\n});\n\nexport const addToPortfolio = (portfolioId, items) => ({\n  type: ActionTypes.ADD_TO_PORTFOLIO,\n  payload: PortfolioHelper.addToPortfolio(portfolioId, items),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: 'Success adding products',\n        description: 'Products were successfully added to portfolio.'\n      }\n    }\n  }\n});\n\nexport const updatePortfolio = (portfolioData, options) => (\n  dispatch,\n  getState\n) => {\n  dispatch({\n    type: ActionTypes.UPDATE_TEMPORARY_PORTFOLIO,\n    payload: portfolioData\n  });\n\n  return PortfolioHelper.updatePortfolio(portfolioData, { getState })\n    .then(() => dispatch(doFetchPortfolios(options)))\n    .then(() =>\n      dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          dismissable: true,\n          variant: 'success',\n          title: 'Success updating portfolio',\n          description: 'The portfolio was updated successfully.'\n        }\n      })\n    )\n    .catch((error) => {\n      dispatch({ type: ActionTypes.RESTORE_PORTFOLIO_PREV_STATE });\n      throw error;\n    })\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.UPDATE_TEMPORARY_PORTFOLIO}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const undoRemovePortfolio = (portfolioId, restoreKey, viewState) => (\n  dispatch\n) => {\n  dispatch({ type: CLEAR_NOTIFICATIONS });\n  return PortfolioHelper.undeletePortfolio(portfolioId, restoreKey).then(\n    (portfolio) => {\n      dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          variant: 'success',\n          dismissable: true,\n          title: `Portfolio ${portfolio.name} has been restored`\n        }\n      });\n      return dispatch(fetchPortfolios(viewState));\n    }\n  );\n};\n\nexport const removePortfolio = (portfolioId, viewState = {}) => (\n  dispatch,\n  getState\n) => {\n  dispatch({\n    type: ActionTypes.DELETE_TEMPORARY_PORTFOLIO,\n    payload: portfolioId\n  });\n  return dispatch({\n    type: ActionTypes.REMOVE_PORTFOLIO,\n    payload: PortfolioHelper.removePortfolio(portfolioId)\n      .then(({ restore_key }) => {\n        dispatch({\n          type: ADD_NOTIFICATION,\n          payload: {\n            variant: 'success',\n            title: 'Success removing portfolio',\n            dismissable: true,\n            description: (\n              <FormattedMessage\n                {...portfolioMessages.removePortfolioNotification}\n                values={{\n                  // eslint-disable-next-line react/display-name\n                  a: (chunks) => (\n                    <a\n                      href=\"#\"\n                      id={`undo-delete-portfolio-${portfolioId}`}\n                      onClick={(event) => {\n                        event.preventDefault();\n                        dispatch(\n                          undoRemovePortfolio(\n                            portfolioId,\n                            restore_key,\n                            viewState\n                          )\n                        );\n                      }}\n                    >\n                      {chunks}\n                    </a>\n                  )\n                }}\n              />\n            )\n          }\n        });\n        const { meta, data } = getState().portfolioReducer.portfolios;\n        return dispatch(\n          fetchPortfolios({\n            ...viewState,\n            ...meta,\n            offset: data.length === 0 ? 0 : meta.offset\n          })\n        );\n      })\n      .catch((error) => {\n        dispatch({ type: ActionTypes.RESTORE_PORTFOLIO_PREV_STATE });\n        throw error;\n      })\n  });\n};\n\nexport const selectPortfolioItem = (portfolioItem) => ({\n  type: ActionTypes.SELECT_PORTFOLIO_ITEM,\n  payload: portfolioItem\n});\n\nexport const undoRemoveProductsFromPortfolio = (restoreData, portfolioId) => (\n  dispatch\n) => {\n  dispatch({ type: `${ActionTypes.RESTORE_PORTFOLIO_ITEMS}_PENDING` });\n  return PortfolioHelper.restorePortfolioItems(restoreData)\n    .then(() =>\n      dispatch({ type: `${ActionTypes.RESTORE_PORTFOLIO_ITEMS}_FULFILLED` })\n    )\n    .then(() => dispatch({ type: CLEAR_NOTIFICATIONS }))\n    .then(() => dispatch(fetchPortfolioItemsWithPortfolio(portfolioId)))\n    .then(() =>\n      dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          variant: 'success',\n          dismissable: true,\n          title: 'Products have been restored'\n        }\n      })\n    )\n    .catch((err) =>\n      dispatch({\n        type: `${ActionTypes.RESTORE_PORTFOLIO_ITEMS}_REJECTED`,\n        payload: err\n      })\n    );\n};\n\nexport const removeProductsFromPortfolio = (portfolioItems, portfolioName) => (\n  dispatch,\n  getState\n) => {\n  dispatch({\n    type: `${ActionTypes.REMOVE_PORTFOLIO_ITEMS}_PENDING`\n  });\n  const {\n    portfolioReducer: {\n      portfolioItems: { meta },\n      selectedPortfolio: { id: portfolioId }\n    }\n  } = getState();\n  return PortfolioHelper.removePortfolioItems(portfolioItems)\n    .then((data) =>\n      dispatch(\n        fetchPortfolioItemsWithPortfolio(portfolioId, {\n          offset: 0,\n          limit: meta.limit,\n          filter: ''\n        })\n      ).then(() => data)\n    )\n    .then((data) => {\n      return dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          variant: 'success',\n          title: 'Products removed',\n          dismissable: true,\n          description: (\n            <FormattedMessage\n              {...portfolioMessages.removeItemsNotification}\n              values={{\n                count: portfolioItems.length,\n                portfolioName,\n                // eslint-disable-next-line react/display-name\n                a: (chunks) => (\n                  <a\n                    href=\"#\"\n                    id={`restore-portfolio-item-${portfolioId}`}\n                    onClick={(event) => {\n                      event.preventDefault();\n                      dispatch(\n                        undoRemoveProductsFromPortfolio(data, portfolioId)\n                      );\n                    }}\n                  >\n                    {chunks}\n                  </a>\n                )\n              }}\n            />\n          )\n        }\n      });\n    })\n    .then(() =>\n      dispatch({ type: `${ActionTypes.REMOVE_PORTFOLIO_ITEMS}_FULFILLED` })\n    )\n    .catch((err) =>\n      dispatch({\n        type: `${ActionTypes.REMOVE_PORTFOLIO_ITEMS}_REJECTED`,\n        payload: err\n      })\n    );\n};\n\nexport const copyPortfolio = (id) => (dispatch) => {\n  dispatch({ type: 'COPY_PORTFOLIO_PENDING' });\n  return PortfolioHelper.copyPortfolio(id)\n    .then((portfolio) => {\n      dispatch({ type: 'COPY_PORTFOLIO_FULFILLED' });\n      dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          variant: 'success',\n          title: 'You have successfully copied a portfolio',\n          description: `${portfolio.name} has been copied.`,\n          dismissable: true\n        }\n      });\n      return portfolio;\n    })\n    .catch((err) =>\n      dispatch({ type: 'COPY_PORTFOLIO_REJECTED', payload: err })\n    );\n};\n\nexport const copyPortfolioItem = (\n  portfolioItemId,\n  copyObject,\n  newPortfolio\n) => (dispatch) => {\n  return PortfolioHelper.copyPortfolioItem(portfolioItemId, copyObject)\n    .then((data) => {\n      dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          variant: 'success',\n          title: 'You have successfully copied a product',\n          description: `${data.name} has been copied into ${newPortfolio.name}`,\n          dismissable: true\n        }\n      });\n      return data;\n    })\n    .catch((err) =>\n      dispatch({ type: 'COPY_PORTFOLIO_ITEM_REJECTED', payload: err })\n    );\n};\n\nexport const resetSelectedPortfolio = () => ({\n  type: ActionTypes.RESET_SELECTED_PORTFOLIO\n});\n\nexport const updatePortfolioItem = (values) => (dispatch, getState) => {\n  dispatch({\n    type: ActionTypes.UPDATE_TEMPORARY_PORTFOLIO_ITEM,\n    payload: values\n  });\n  return PortfolioHelper.updatePortfolioItem(values, { getState })\n    .then((data) => {\n      dispatch({ type: ActionTypes.UPDATE_PORTFOLIO_ITEM, payload: data });\n      return data;\n    })\n    .then((item) =>\n      dispatch({\n        type: ADD_NOTIFICATION,\n        payload: {\n          variant: 'success',\n          title: `Product \"${item.name}\" was successfully updated`,\n          dismissable: true\n        }\n      })\n    )\n    .catch((error) => {\n      dispatch({ type: ActionTypes.RESTORE_PORTFOLIO_ITEM_PREV_STATE });\n      throw error;\n    })\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.UPDATE_TEMPORARY_PORTFOLIO_ITEM}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const getPortfolioItemDetail = (params) => (dispatch) => {\n  dispatch({ type: `${ActionTypes.SELECT_PORTFOLIO_ITEM}_PENDING` });\n  return PortfolioHelper.getPortfolioItemDetail(params).then(\n    ([portfolioItem, source]) =>\n      dispatch({\n        type: `${ActionTypes.SELECT_PORTFOLIO_ITEM}_FULFILLED`,\n        payload: {\n          portfolioItem,\n          source\n        }\n      })\n  );\n};\n","import {\n  getAxiosInstance,\n  getPortfolioApi,\n  getPortfolioItemApi\n} from '../shared/user-login';\nimport { CATALOG_API_BASE, SOURCES_API_BASE } from '../../utilities/constants';\nimport { sanitizeValues } from '../shared/helpers';\nimport { defaultSettings } from '../shared/pagination';\n\nconst axiosInstance = getAxiosInstance();\nconst portfolioApi = getPortfolioApi();\nconst portfolioItemApi = getPortfolioItemApi();\n\nexport function listPortfolios(\n  filter = '',\n  { limit, offset } = defaultSettings\n) {\n  return axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolios?filter[name][contains_i]=${filter}&limit=${limit}&offset=${offset}`\n  );\n}\n\nexport function listPortfolioItems(limit = 50, offset = 0, filter = '') {\n  return axiosInstance\n    .get(\n      `${CATALOG_API_BASE}/portfolio_items?filter[name][contains_i]=${filter}&limit=${limit}&offset=${offset}`\n    )\n    .then((portfolioItems) => {\n      const portfolioReference = portfolioItems.data.reduce(\n        (acc, curr, index) =>\n          curr.portfolio_id\n            ? {\n                ...acc,\n                [curr.portfolio_id]: acc[curr.portfolio_id]\n                  ? [...acc[curr.portfolio_id], index]\n                  : [index]\n              }\n            : acc,\n        {}\n      );\n      return axiosInstance\n        .get(\n          `${CATALOG_API_BASE}/portfolios?${Object.keys(portfolioReference)\n            .map((id) => `filter[id][]=${id}`)\n            .join('&')}`\n        )\n        .then(({ data }) => ({\n          portfolioItems,\n          portfolioReference,\n          portfolios: data\n        }));\n    })\n    .then(({ portfolioItems, portfolioReference, portfolios }) => {\n      portfolios.forEach(\n        ({ id, name }) =>\n          portfolioReference[id] &&\n          portfolioReference[id].forEach((portfolioItemIndex) => {\n            portfolioItems.data[portfolioItemIndex].portfolioName = name;\n          })\n      );\n      return portfolioItems;\n    });\n}\n\nexport function getPortfolio(portfolioId) {\n  return portfolioApi.showPortfolio(portfolioId);\n}\n\nexport function getPortfolioItemsWithPortfolio(\n  portfolioId,\n  { limit, offset, filter = '' } = defaultSettings\n) {\n  return axiosInstance.get(\n    `${CATALOG_API_BASE}/portfolios/${portfolioId}/portfolio_items?filter[name][contains_i]=${filter}&limit=${limit}&offset=${offset}`\n  );\n}\n\n// TO DO - change to use the API call that adds multiple items to a portfolio when available\nexport async function addPortfolio(portfolioData, items) {\n  let portfolio = await portfolioApi.createPortfolio(portfolioData);\n  if (portfolio && items && items.length > 0) {\n    return addToPortfolio(portfolio, items);\n  }\n\n  return portfolio;\n}\n\nexport async function addToPortfolio(portfolioId, items) {\n  return Promise.all(\n    items.map((item) =>\n      portfolioItemApi.createPortfolioItem({\n        portfolio_id: portfolioId,\n        service_offering_ref: item\n      })\n    )\n  );\n}\n\nexport async function updatePortfolio({ id, ...portfolioData }, store) {\n  return await portfolioApi.updatePortfolio(\n    id,\n    sanitizeValues(portfolioData, 'Portfolio', store)\n  );\n}\n\nexport async function removePortfolio(portfolioId) {\n  return portfolioApi.destroyPortfolio(portfolioId);\n}\n\nexport async function removePortfolioItem(portfolioItemId) {\n  return portfolioItemApi.destroyPortfolioItem(portfolioItemId);\n}\n\nexport async function removePortfolioItems(portfolioItemIds) {\n  return Promise.all(\n    portfolioItemIds.map(async (itemId) => {\n      const { restore_key } = await removePortfolioItem(itemId);\n      return {\n        portfolioItemId: itemId,\n        restoreKey: restore_key\n      };\n    })\n  );\n}\n\nexport function fetchProviderControlParameters(portfolioItemId) {\n  return axiosInstance\n    .get(\n      `${CATALOG_API_BASE}/portfolio_items/${portfolioItemId}/provider_control_parameters`\n    )\n    .then((data) => ({\n      required: [],\n      ...data,\n      properties: {\n        ...data.properties,\n        namespace: {\n          ...data.properties.namespace,\n          enum: Array.from(new Set([...data.properties.namespace.enum]))\n        }\n      }\n    }));\n}\n\nexport async function updatePortfolioItem({ id, ...portfolioItem }, store) {\n  return await portfolioItemApi.updatePortfolioItem(\n    id,\n    sanitizeValues(portfolioItem, 'PortfolioItem', store)\n  );\n}\n\nexport function fetchPortfolioByName(name = '') {\n  return axiosInstance.get(`${CATALOG_API_BASE}/portfolios`, {\n    params: {\n      filter: {\n        name\n      }\n    }\n  });\n}\n\nexport const restorePortfolioItems = (restoreData) =>\n  Promise.all(\n    restoreData.map(({ portfolioItemId, restoreKey }) =>\n      portfolioItemApi.unDeletePortfolioItem(portfolioItemId, {\n        restore_key: restoreKey\n      })\n    )\n  );\n\nexport const copyPortfolio = (portfolioId) =>\n  portfolioApi.postCopyPortfolio(portfolioId);\n\nexport const copyPortfolioItem = (portfolioItemId, copyObject = {}) =>\n  portfolioItemApi.postCopyPortfolioItem(portfolioItemId, copyObject);\n\nexport const uploadPortfolioItemIcon = (portfolioItemId, file, iconId) => {\n  let data = new FormData();\n  data.append('content', file, file.name);\n  if (iconId) {\n    return axiosInstance.patch(`${CATALOG_API_BASE}/icons/${iconId}`, data);\n  }\n\n  data.append('portfolio_item_id', portfolioItemId);\n  return axiosInstance.post(`${CATALOG_API_BASE}/icons`, data, {\n    headers: {\n      accept: 'application/json',\n      'Content-Type': `multipart/form-data; boundary=${data._boundary}`\n    }\n  });\n};\n\nexport const getPortfolioItemDetail = (params) =>\n  Promise.all([\n    axiosInstance.get(\n      `${CATALOG_API_BASE}/portfolio_items/${params.portfolioItem}`\n    ),\n    axiosInstance\n      .get(`${SOURCES_API_BASE}/sources/${params.source}`)\n      .catch((error) => {\n        if (error.status === 404) {\n          return {\n            object: 'platform',\n            notFound: true\n          };\n        }\n\n        throw error;\n      })\n  ]);\n\nexport const getPortfolioFromState = (portfolioReducer, portfolioId) =>\n  portfolioReducer.selectedPortfolio &&\n  portfolioReducer.selectedPortfolio.id === portfolioId\n    ? portfolioReducer.selectedPortfolio\n    : portfolioReducer.portfolios.data.find(({ id }) => id === portfolioId);\n\nexport const undeletePortfolio = (portfolioId, restoreKey) =>\n  axiosInstance.post(`${CATALOG_API_BASE}/portfolios/${portfolioId}/undelete`, {\n    restore_key: restoreKey\n  });\n"],"sourceRoot":""}