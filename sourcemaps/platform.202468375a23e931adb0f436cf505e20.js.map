{"version":3,"file":"js/platform.f50d43b499e4f6b25ec3.js","mappings":"qUA8BMA,GAAkBC,EAAAA,EAAAA,OAAK,kBAC3B,oEAGIC,GAAoBD,EAAAA,EAAAA,OAAK,kBAC7B,sJAGIE,GAAsBF,EAAAA,EAAAA,OAAK,kBAC/B,6GAKIG,GAAwBH,EAAAA,EAAAA,OAAK,kBACjC,0FAKII,EAAW,CACf,CACEC,SAAU,EACVC,MAAO,YACPC,KAAM,0CAER,CACEF,SAAU,EACVC,MAAO,cACPC,KAAM,4CAER,CACEF,SAAU,EACVC,MAAO,UACPC,KAAM,yCAsFV,QAlFiB,WACf,IAAMC,GAAWC,EAAAA,EAAAA,eACjB,GAAuBC,EAAAA,EAAAA,GAAS,CAAC,aAAxBC,GAAT,eAASA,SACT,GAA8CC,EAAAA,EAAAA,cAC5C,oBAAGC,gBAAH,MAAiE,CAC/DC,iBADF,EAAsBA,iBAEpBC,gBAFF,EAAwCA,oBADlCD,EAAR,EAAQA,iBAAkBC,EAA1B,EAA0BA,gBAOpBC,GAAmBC,EAAAA,EAAAA,GAAe,CAACH,EAAkBC,IACrDG,GAAgBC,EAAAA,EAAAA,KA4BtB,OA1BAC,EAAAA,EAAAA,YAAU,WAAM,QAYd,OAXAC,QAAQC,IAAI,CACVd,EACE,UAAAe,OAAOC,eAAP,SAAgBC,YACZC,EAAAA,EAAAA,IAAuBf,IACvBgB,EAAAA,EAAAA,IAAsBhB,IAE5BH,EACE,UAAAe,OAAOC,eAAP,SAAgBC,YAAaG,EAAAA,EAAAA,OAAoBC,EAAAA,EAAAA,UAGrDC,EAAAA,EAAAA,MACO,WACLd,OAED,CAACL,IAYF,kBAAC,EAAAoB,SAAD,KACE,kBAAC,EAAAC,MAAD,CACEC,OAAK,EACLC,KAAM,CACJC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GAJI,UAKDH,EAAAA,GALC,QAQN,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEI,QAAQC,EAAAA,EAAAA,IAAgC,CACtClC,MAAOQ,EAAiBP,KACxBkC,eAAe,EACfrC,SAAAA,EACAsC,kBAAmB,kBA3BL,SAAC/B,GAAD,MAAe,CACvCgC,MAAwC,cAAjChC,EAASiC,oBAAsC,QAAU,MAChEC,KAAM,kBAAC,UAAD,MACNvC,MACmC,cAAjCK,EAASiC,oBACL1B,EAAc4B,EAAAA,EAAAA,WACd5B,EAAc4B,EAAAA,EAAAA,eAqBeJ,CAAkB5B,UAKnD,kBAAC,EAAAiC,SAAD,CAAUC,SAAU,kBAAC,KAAD,OAClB,kBAAC,EAAAC,OAAD,KACE,kBAAC,EAAAjB,MAAD,CAAOE,KAAMgB,EAAAA,IACX,kBAAC/C,EAAD,OAEF,kBAAC,EAAA6B,MAAD,CAAOE,KAAMC,EAAAA,IACX,kBAACjC,EAAD,OAEF,kBAAC,EAAA8B,MAAD,CAAOE,KAAMI,EAAAA,IACX,kBAACvC,EAAD,OAEF,kBAAC,EAAAiC,MAAD,CAAOE,KAAM,CAACG,EAAAA,GAA0BD,EAAAA,KACtC,kBAACnC,EAAD","sources":["webpack:///./src/smart-components/platform/platform.js"],"sourcesContent":["import React, { Fragment, useEffect, lazy, Suspense } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport {\n  fetchSelectedPlatform,\n  fetchPlatforms\n} from '../../redux/actions/platform-actions';\nimport {\n  fetchSelectedPlatform as fetchSelectedPlatformS,\n  fetchPlatforms as fetchPlatformsS\n} from '../../redux/actions/platform-actions-s';\n\nimport useQuery from '../../utilities/use-query';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useBreadcrumbs from '../../utilities/use-breadcrumbs';\nimport {\n  PLATFORM_SERVICE_OFFERINGS_ROUTE,\n  PLATFORM_INVENTORIES_ROUTE,\n  PLATFORM_ROUTE,\n  PLATFORM_TEMPLATES_ROUTE,\n  PLATFORM_DETAILS_ROUTE\n} from '../../constants/routes';\nimport ToolbarRenderer from '../../toolbar/toolbar-renderer';\nimport { createPlatformsTopToolbarSchema } from '../../toolbar/schemas/platforms-toolbar.schema';\nimport { PlatformToolbarPlaceholder } from '../../presentational-components/shared/loader-placeholders';\nimport { LevelItem } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\n\nconst PlatformDetails = lazy(() =>\n  import(/* webpackChunkName: \"platform-details\" */ './platform-details')\n);\n\nconst PlatformTemplates = lazy(() =>\n  import(/* webpackChunkName: \"platform-templates\" */ './platform-templates')\n);\n\nconst PlatformInventories = lazy(() =>\n  import(\n    /* webpackChunkName: \"platform-inventories\" */ './platform-inventories'\n  )\n);\n\nconst ServiceOfferingDetail = lazy(() =>\n  import(\n    /* webpackChunkName: \"service-offering-detail\" */ './service-offering/service-offering-detail'\n  )\n);\n\nconst tabItems = [\n  {\n    eventKey: 0,\n    title: 'Templates',\n    name: `/platforms/platform/platform-templates`\n  },\n  {\n    eventKey: 1,\n    title: 'Inventories',\n    name: `/platforms/platform/platform-inventories`\n  },\n  {\n    eventKey: 2,\n    title: 'Summary',\n    name: `/platforms/platform/platform-details`\n  }\n];\n\nconst Platform = () => {\n  const dispatch = useDispatch();\n  const [{ platform }] = useQuery(['platform']);\n  const { selectedPlatform, serviceOffering } = useSelector(\n    ({ platformReducer: { selectedPlatform, serviceOffering } }) => ({\n      selectedPlatform,\n      serviceOffering\n    })\n  );\n\n  const resetBreadcrumbs = useBreadcrumbs([selectedPlatform, serviceOffering]);\n  const formatMessage = useFormatMessage();\n\n  useEffect(() => {\n    Promise.all([\n      dispatch(\n        window.catalog?.standalone\n          ? fetchSelectedPlatformS(platform)\n          : fetchSelectedPlatform(platform)\n      ),\n      dispatch(\n        window.catalog?.standalone ? fetchPlatformsS() : fetchPlatforms()\n      )\n    ]);\n    scrollToTop();\n    return () => {\n      resetBreadcrumbs();\n    };\n  }, [platform]);\n\n  const platformAvailable = (platform) => ({\n    color: platform.availability_status === 'available' ? 'green' : 'red',\n    icon: <InfoCircleIcon />,\n    title:\n      platform.availability_status === 'available'\n        ? formatMessage(labelMessages.available)\n        : formatMessage(labelMessages.notAvailable)\n  });\n\n  return (\n    <Fragment>\n      <Route\n        exact\n        path={[\n          PLATFORM_INVENTORIES_ROUTE,\n          PLATFORM_ROUTE,\n          PLATFORM_TEMPLATES_ROUTE,\n          PLATFORM_DETAILS_ROUTE,\n          `${PLATFORM_INVENTORIES_ROUTE}/*`\n        ]}\n      >\n        <LevelItem>\n          <ToolbarRenderer\n            schema={createPlatformsTopToolbarSchema({\n              title: selectedPlatform.name,\n              paddingBottom: false,\n              tabItems,\n              platformAvailable: () => platformAvailable(selectedPlatform)\n            })}\n          />\n        </LevelItem>\n      </Route>\n      <Suspense fallback={<PlatformToolbarPlaceholder />}>\n        <Switch>\n          <Route path={PLATFORM_SERVICE_OFFERINGS_ROUTE}>\n            <ServiceOfferingDetail />\n          </Route>\n          <Route path={PLATFORM_INVENTORIES_ROUTE}>\n            <PlatformInventories />\n          </Route>\n          <Route path={PLATFORM_DETAILS_ROUTE}>\n            <PlatformDetails />\n          </Route>\n          <Route path={[PLATFORM_TEMPLATES_ROUTE, PLATFORM_ROUTE]}>\n            <PlatformTemplates />\n          </Route>\n        </Switch>\n      </Suspense>\n    </Fragment>\n  );\n};\n\nexport default Platform;\n"],"names":["PlatformDetails","lazy","PlatformTemplates","PlatformInventories","ServiceOfferingDetail","tabItems","eventKey","title","name","dispatch","useDispatch","useQuery","platform","useSelector","platformReducer","selectedPlatform","serviceOffering","resetBreadcrumbs","useBreadcrumbs","formatMessage","useFormatMessage","useEffect","Promise","all","window","catalog","standalone","fetchSelectedPlatformS","fetchSelectedPlatform","fetchPlatformsS","fetchPlatforms","scrollToTop","Fragment","Route","exact","path","PLATFORM_INVENTORIES_ROUTE","PLATFORM_ROUTE","PLATFORM_TEMPLATES_ROUTE","PLATFORM_DETAILS_ROUTE","schema","createPlatformsTopToolbarSchema","paddingBottom","platformAvailable","color","availability_status","icon","labelMessages","Suspense","fallback","Switch","PLATFORM_SERVICE_OFFERINGS_ROUTE"],"sourceRoot":""}