{"version":3,"sources":["webpack:///./src/utilities/use-enhanced-history.ts","webpack:///./src/messages/filtering.messages.ts","webpack:///./src/smart-components/order-process/order-process-table-context.js","webpack:///./src/smart-components/order-process/order-process-table-helpers.js","webpack:///./src/presentational-components/shared/table-toolbar-view.tsx","webpack:///./src/presentational-components/shared/table-empty-state.tsx","webpack:///./src/utilities/use-order-process.ts","webpack:///./src/smart-components/order-process/add-order-process-modal.tsx","webpack:///./src/smart-components/order-process/remove-order-process-modal.js","webpack:///./src/smart-components/order-process/order-processes.js"],"names":["removeSearch","keepHash","history","push","target","internalTarget","location","hash","length","split","search","undefined","removeSearchQuery","filteringMessages","noItems","id","defaultMessage","filterByProduct","noResults","noResultsDescription","clearFilters","noProducts","noRecords","filterByTitle","noResultsFound","noResult","unknown","OrderProcessTableContext","createContext","selectedOrderProcesses","SelectBox","useContext","setSelectedOrderProcesses","Checkbox","isChecked","includes","onChange","propTypes","PropTypes","string","isRequired","createRows","data","map","name","description","created_at","cells","key","ouiaId","Fragment","date","TableToolbarView","columns","fetchData","toolbarButtons","actionResolver","routes","plural","pagination","filterValue","onFilterChange","isLoading","renderEmptyState","sortBy","onSort","activeFiltersConfig","filterConfig","rows","intl","useIntl","paginationConfig","itemCount","count","page","limit","offset","perPage","onSetPage","_e","onPerPageSelect","size","isDisabled","Section","type","PrimaryToolbar","className","actionsConfig","dropdownProps","position","actions","items","label","formatMessage","filterValues","placeholder","orderProcessesFilter","_event","value","Table","dropDirection","variant","isCompact","TableEmptyState","title","Icon","PrimaryAction","renderDescription","EmptyTable","centered","EmptyState","EmptyStateIcon","icon","component","h1","EmptyStateBody","EmptyStateSecondaryActions","any","func","orderProcesses","find","op","reducer","state","initialValues","schema","edit","dispatch","order_process","loadedProcess","stateDispatch","then","onCancel","Modal","isOpen","onClose","updateOrderProcess","createOrderProcess","onSubmit","values","submitAction","templateProps","submitLabel","save","create","disableSubmit","RemoveOrderProcessModal","ids","resetSelectedOrderProcesses","useDispatch","useState","fetchedOrderProcess","setFetchedOrderProcess","submitting","setSubmitting","useEnhancedHistory","useQuery","finalId","orderProcess","useOrderProcess","useEffect","fetchOrderProcess","ORDER_PROCESSES_ROUTE","orderProcessMessages","aria-label","removeProcessAriaLabel","header","Title","headingLevel","fill","removeProcessTitle","Button","onClick","removeOrderProcess","removeOrderProcesses","Spinner","actionMessages","deleting","labelMessages","cancel","TextContent","Text","TextVariants","p","removeProcessDescription","array","allSelected","selectAll","transforms","cellWidth","sortable","created","debouncedFilter","asyncFormValidator","filter","filteringCallback","meta","defaultSettings","fetchOrderProcesses","prepareChips","category","chips","initialState","isFetching","isFiltering","areAllSelected","selected","every","row","unique","index","self","indexOf","orderProcessesState","action","payload","selectedOrderProceses","sortIndexMapper","1","2","3","OrderProcesses","viewState","useInitialUriHash","useSelector","orderProcessReducer","shallowEqual","useReducer","updateOrderProcesses","insights","chrome","appNavClick","secondaryNav","scrollToTop","handleFilterChange","anyOrderProcessSelected","orderProcessesMessages","Provider","direction","property","sortOrderProcesses","exact","path","ADD_ORDER_PROCESS_ROUTE","postMethod","REMOVE_ORDER_PROCESS_ROUTE","UPDATE_ORDER_PROCESS_ROUTE","titlePlural","titleSingular","ToolbarItem","to","pathname","ouiaid","deleteOrderProcess","_rowId","noOrderProcesses","SearchIcon","filters","onDelete"],"mappings":"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","file":"js/order-processes~5a11b65b.0b07e064d749679ab461.js","sourcesContent":["import { useHistory } from 'react-router-dom';\nimport { History, Path } from 'history';\nimport { AnyObject } from '@data-driven-forms/react-form-renderer';\n\nexport type EnhancedHistoryPushtarget =\n  | Path\n  | { pathname: string; hash?: string; search?: string; state?: AnyObject };\n\nconst removeSearchQuery = (target: EnhancedHistoryPushtarget) => {\n  if (typeof target === 'string') {\n    return target.split('?')[0];\n  }\n\n  if (typeof target === 'object') {\n    return {\n      ...target,\n      search: undefined\n    };\n  }\n\n  return target;\n};\n\n/**\n * Wrapper around useHistory hook which adds aditional settings to standard history methods\n * @param {Boolean} removeSearch if true, using history navigation methods will remove search string from path\n * @param {Boolean} keepHash if true, using history navigation methods will not remove hash from URL\n */\nconst useEnhancedHistory = ({\n  removeSearch,\n  keepHash\n}: {\n  removeSearch?: boolean;\n  keepHash?: boolean;\n} = {}): History<History.UnknownFacade> => {\n  const history = useHistory();\n  return {\n    ...history,\n    push: (target: EnhancedHistoryPushtarget) => {\n      let internalTarget = target;\n      if (keepHash && history.location.hash.length > 0) {\n        internalTarget =\n          typeof internalTarget === 'object'\n            ? { ...internalTarget, hash: history.location.hash }\n            : `${internalTarget}${history.location.hash}`;\n      }\n\n      if (removeSearch) {\n        return history.push(removeSearchQuery(internalTarget));\n      }\n\n      return history.push(internalTarget);\n    }\n  };\n};\n\nexport default useEnhancedHistory;\n","import { defineMessages } from 'react-intl';\n\nconst filteringMessages = defineMessages({\n  noItems: {\n    id: 'common.filtering.noItems',\n    defaultMessage: 'No items found'\n  },\n  filterByProduct: {\n    id: 'common.filtering.filterByProduct',\n    defaultMessage: 'Filter by product'\n  },\n  noResults: {\n    id: 'common.filtering.noResults',\n    defaultMessage: 'No results found'\n  },\n  noResultsDescription: {\n    id: 'common.filtering.noResultsDescription',\n    defaultMessage:\n      'No results match the filter criteria. Remove all filters or clear all filters to show results.'\n  },\n  clearFilters: {\n    id: 'common.filtering.clear-filters',\n    defaultMessage: 'Clear all filters'\n  },\n  noProducts: {\n    id: 'common.filtering.no-products',\n    defaultMessage: 'No products yet'\n  },\n  noRecords: {\n    id: 'commonMessages.noRecords',\n    defaultMessage: 'No records'\n  },\n  filterByTitle: {\n    id: 'tableToolbar.filterByTitle',\n    defaultMessage: 'Filter by {title}'\n  },\n  noResultsFound: {\n    id: 'tableToolbar.noResultsFound',\n    defaultMessage: 'No results found'\n  },\n  noResult: {\n    id: 'tableToolbar.noResult',\n    defaultMessage: 'No {results}'\n  },\n  unknown: {\n    id: 'commonMessages.unknown',\n    defaultMessage: 'Unknown'\n  }\n});\n\nexport default filteringMessages;\n","import { createContext } from 'react';\n\nconst OrderProcessTableContext = createContext({ selectedOrderProcesses: [] });\n\nexport default OrderProcessTableContext;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox } from '@patternfly/react-core';\nimport { TimeAgo } from '../../helpers/shared/helpers';\nimport OrderProcessTableContext from './order-process-table-context';\n\nexport const SelectBox = ({ id }) => {\n  const { selectedOrderProcesses, setSelectedOrderProcesses } = useContext(\n    OrderProcessTableContext\n  );\n\n  return (\n    <Checkbox\n      id={`select-${id}`}\n      isChecked={selectedOrderProcesses.includes(id)}\n      onChange={() => setSelectedOrderProcesses(id)}\n    />\n  );\n};\n\nSelectBox.propTypes = {\n  id: PropTypes.string.isRequired\n};\n\nexport const createRows = (data) =>\n  data.map(({ id, name, description, created_at }) => ({\n    id,\n    'data-ouia-component-id': `test-${id}`,\n    cells: [\n      <div key={`${id}-checkbox`} ouiaId={`${id}-checkbox`}>\n        <SelectBox id={id} />\n      </div>,\n      <div key={`${id}-${name}`} ouiaId={`${id}-${name}`}>\n        {name}\n      </div>,\n      description,\n      <React.Fragment key={id}>\n        <TimeAgo date={created_at} />\n      </React.Fragment>\n    ]\n  }));\n","/* eslint-disable react/prop-types */\nimport React, { Fragment, ReactNode } from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  IActionsResolver,\n  ISortBy,\n  OnSort,\n  IRow,\n  ICell\n} from '@patternfly/react-table';\nimport {\n  defaultSettings,\n  getCurrentPage,\n  getNewPage,\n  PaginationConfiguration\n} from '../../helpers/shared/pagination';\nimport { ListLoader } from './loader-placeholders';\nimport { useIntl } from 'react-intl';\nimport { Section } from '@redhat-cloud-services/frontend-components/components/cjs/Section';\nimport {\n  PrimaryToolbar,\n  ActiveFiltersConfig,\n  FilterItem\n} from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport orderProcessesMessages from '../../messages/order-processes.messages';\n\nexport interface TableToolbarViewProps {\n  columns: ICell[];\n  toolbarButtons?: () => ReactNode;\n  fetchData: (pagination: PaginationConfiguration) => Promise<any | void>;\n  pagination?: PaginationConfiguration;\n  plural?: string;\n  singular?: string;\n  routes?: () => ReactNode;\n  actionResolver?: IActionsResolver;\n  filterValue?: string;\n  onFilterChange: (value?: string) => void;\n  isLoading?: boolean;\n  renderEmptyState?: () => ReactNode;\n  sortBy?: ISortBy;\n  onSort?: OnSort;\n  activeFiltersConfig?: ActiveFiltersConfig;\n  filterConfig?: FilterItem[];\n  rows: IRow[];\n  ouiaId?: string;\n}\nexport const TableToolbarView: React.ComponentType<TableToolbarViewProps> = ({\n  columns,\n  fetchData,\n  toolbarButtons,\n  actionResolver,\n  routes = () => null,\n  plural,\n  pagination = defaultSettings,\n  filterValue,\n  onFilterChange,\n  isLoading = false,\n  renderEmptyState = () => null,\n  sortBy,\n  onSort,\n  activeFiltersConfig,\n  filterConfig = [],\n  rows,\n  ouiaId\n}) => {\n  const intl = useIntl();\n\n  const paginationConfig = {\n    itemCount: pagination.count,\n    page: getCurrentPage(pagination.limit, pagination.offset),\n    perPage: pagination.limit,\n    onSetPage: (_e: React.MouseEvent, page: number) =>\n      fetchData({ ...pagination, offset: getNewPage(page, pagination.limit) }),\n    onPerPageSelect: (_e: React.MouseEvent, size: number) =>\n      fetchData({ ...pagination, limit: size }),\n    isDisabled: isLoading\n  };\n\n  const renderToolbar = () => (\n    <PrimaryToolbar\n      className=\"pf-u-p-lg\"\n      pagination={paginationConfig}\n      {...(toolbarButtons && {\n        actionsConfig: {\n          dropdownProps: {\n            position: 'right'\n          },\n          actions: [toolbarButtons()]\n        }\n      })}\n      filterConfig={{\n        items: [\n          {\n            label: intl.formatMessage({\n              id: 'name',\n              defaultMessage: 'Name'\n            }),\n            filterValues: {\n              id: 'filter-by-name',\n              placeholder: intl.formatMessage(\n                orderProcessesMessages.orderProcessesFilter\n              ),\n              'aria-label': intl.formatMessage(\n                orderProcessesMessages.orderProcessesFilter\n              ),\n              onChange: (\n                _event: React.SyntheticEvent<Element, Event>,\n                value?: string\n              ) => onFilterChange(value),\n              value: filterValue\n            }\n          },\n          ...filterConfig\n        ]\n      }}\n      activeFiltersConfig={activeFiltersConfig}\n    />\n  );\n\n  return (\n    <Section type=\"content\" page-type={`tab-${plural}`} id={`tab-${plural}`}>\n      {routes()}\n      {renderToolbar()}\n      {isLoading && <ListLoader />}\n      {!isLoading && rows.length === 0 ? (\n        renderEmptyState()\n      ) : (\n        <Fragment>\n          {!isLoading && (\n            <Table\n              aria-label={`${plural} table`}\n              rows={rows}\n              cells={columns}\n              actionResolver={actionResolver}\n              className=\"pf-u-pt-0\"\n              sortBy={sortBy}\n              onSort={onSort}\n              ouiaId={ouiaId}\n            >\n              <TableHeader />\n              <TableBody />\n            </Table>\n          )}\n          {pagination.count! > 0 && (\n            <PrimaryToolbar\n              className=\"pf-u-pl-lg pf-u-pr-lg\"\n              pagination={{\n                ...paginationConfig,\n                dropDirection: 'up',\n                variant: 'bottom',\n                isCompact: false,\n                className: 'pf-u-pr-0'\n              }}\n            />\n          )}\n        </Fragment>\n      )}\n    </Section>\n  );\n};\n","import React, { ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  Text,\n  TextContent,\n  TextVariants\n} from '@patternfly/react-core';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/components/cjs/EmptyTable';\n\nexport interface TableEmptyState {\n  title: ReactNode;\n  Icon: React.ComponentType;\n  description: ReactNode;\n  PrimaryAction?: React.ElementType;\n  renderDescription?: () => ReactNode;\n}\nconst TableEmptyState: React.ComponentType<TableEmptyState> = ({\n  title,\n  Icon,\n  description,\n  PrimaryAction,\n  renderDescription\n}) => (\n  <EmptyTable centered aria-label=\"No records\">\n    <EmptyState className=\"pf-u-ml-auto pf-u-mr-auto\">\n      <EmptyStateIcon icon={Icon} />\n      <TextContent>\n        <Text component={TextVariants.h1}>{title}</Text>\n      </TextContent>\n      <EmptyStateBody>\n        {description}\n        {renderDescription && renderDescription()}\n      </EmptyStateBody>\n      <EmptyStateSecondaryActions>\n        {PrimaryAction && <PrimaryAction />}\n      </EmptyStateSecondaryActions>\n    </EmptyState>\n  </EmptyTable>\n);\n\nTableEmptyState.propTypes = {\n  title: PropTypes.string.isRequired,\n  Icon: PropTypes.any.isRequired,\n  description: PropTypes.string.isRequired,\n  PrimaryAction: PropTypes.any,\n  renderDescription: PropTypes.func\n};\n\nexport default TableEmptyState;\n","import { OrderProcess } from '@redhat-cloud-services/catalog-client';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { ApiCollectionResponse } from '../types/common-types';\nimport { CatalogRootState } from '../types/redux';\n\nconst useOrderProcess = (id: string): OrderProcess | undefined => {\n  const orderProcesses = useSelector<\n    CatalogRootState,\n    ApiCollectionResponse<OrderProcess>\n  >(\n    ({ orderProcessReducer: { orderProcesses } }) => orderProcesses,\n    shallowEqual\n  );\n\n  return orderProcesses?.data?.find((op) => op.id === id);\n};\n\nexport default useOrderProcess;\n","/* eslint-disable react/prop-types */\nimport React, { useReducer, useEffect, Reducer } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { Modal } from '@patternfly/react-core';\n\nimport { ORDER_PROCESSES_ROUTE } from '../../constants/routes';\nimport createOrderProcessSchema from '../../forms/create-order-process.schema';\nimport {\n  addOrderProcess,\n  fetchOrderProcesses,\n  updateOrderProcess\n} from '../../redux/actions/order-process-actions';\nimport FormRenderer from '../common/form-renderer';\nimport labelMessages from '../../messages/labels.messages';\nimport useQuery from '../../utilities/use-query';\nimport orderProcessesMessages from '../../messages/order-processes.messages';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\nimport useOrderProcess from '../../utilities/use-order-process';\nimport { fetchOrderProcess } from '../../redux/actions/order-process-actions';\nimport { OrderProcess } from '@redhat-cloud-services/catalog-client';\nimport { Schema } from '@data-driven-forms/react-form-renderer';\nimport { CatalogRootState } from '../../types/redux';\nimport { Full } from '../../types/common-types';\n\ninterface OrderProcessModalState {\n  initialValues?: Partial<OrderProcess>;\n  schema?: Schema;\n  isLoading: boolean;\n}\n\ninterface OrderProcessModalStateAction {\n  type: 'loaded';\n  initialValues: Partial<OrderProcess>;\n  schema: Schema;\n}\nconst reducer = (\n  state: OrderProcessModalState,\n  { type, initialValues, schema }: OrderProcessModalStateAction\n) => {\n  switch (type) {\n    case 'loaded':\n      return {\n        ...state,\n        initialValues,\n        schema,\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n};\n\nexport interface AddOrderProcessProps {\n  edit?: boolean;\n}\nconst AddOrderProcess: React.ComponentType<AddOrderProcessProps> = ({\n  edit = false\n}) => {\n  const dispatch = useDispatch();\n  const [{ order_process }] = useQuery(['order_process']);\n  const data = useSelector<CatalogRootState, Partial<OrderProcess> | undefined>(\n    ({\n      orderProcessReducer: {\n        orderProcesses: { data }\n      }\n    }) => (edit ? data.find(({ id }) => id === order_process) : {})\n  );\n  const { push } = useEnhancedHistory({ keepHash: true });\n  const intl = useIntl();\n  const loadedProcess = useOrderProcess(order_process);\n\n  const [{ initialValues }, stateDispatch] = useReducer<\n    Reducer<OrderProcessModalState, OrderProcessModalStateAction>\n  >(reducer, {\n    isLoading: true\n  });\n\n  useEffect(() => {\n    if (!loadedProcess && loadedProcess !== undefined) {\n      (fetchOrderProcess(order_process) as Promise<Full<OrderProcess>>).then(\n        (data) =>\n          stateDispatch({\n            type: 'loaded',\n            initialValues: data,\n            schema: createOrderProcessSchema(intl, data.id)\n          })\n      );\n    } else if (typeof loadedProcess !== 'undefined') {\n      stateDispatch({\n        type: 'loaded',\n        initialValues: loadedProcess,\n        schema: createOrderProcessSchema(intl, loadedProcess.id!)\n      });\n    }\n  }, []);\n\n  const onCancel = () => push(ORDER_PROCESSES_ROUTE);\n\n  const onSave = (values: Partial<OrderProcess>) => {\n    const submitAction = edit\n      ? () =>\n          updateOrderProcess(\n            order_process,\n            { name: '', description: '', ...values },\n            intl\n          )\n      : () => addOrderProcess(values, intl);\n    onCancel();\n\n    return dispatch(submitAction() as Promise<void>).then(() =>\n      dispatch(fetchOrderProcesses())\n    );\n  };\n\n  if (edit && !data) {\n    return null;\n  }\n\n  return (\n    <Modal\n      isOpen\n      onClose={onCancel}\n      title={intl.formatMessage(\n        edit\n          ? orderProcessesMessages.updateOrderProcess\n          : orderProcessesMessages.createOrderProcess\n      )}\n      variant=\"small\"\n    >\n      <FormRenderer\n        initialValues={initialValues}\n        onSubmit={onSave}\n        onCancel={onCancel}\n        schema={createOrderProcessSchema(intl, order_process)}\n        templateProps={{\n          submitLabel: edit\n            ? intl.formatMessage(labelMessages.save)\n            : intl.formatMessage(labelMessages.create),\n          disableSubmit: ['validating', 'pristine']\n        }}\n      />\n    </Modal>\n  );\n};\n\nexport default AddOrderProcess;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport {\n  Modal,\n  Button,\n  Text,\n  TextContent,\n  TextVariants,\n  Spinner,\n  Title\n} from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  removeOrderProcess,\n  removeOrderProcesses,\n  fetchOrderProcess\n} from '../../redux/actions/order-process-actions';\nimport useQuery from '../../utilities/use-query';\nimport { ORDER_PROCESSES_ROUTE } from '../../constants/routes';\nimport useOrderProcess from '../../utilities/use-order-process';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport orderProcessMessages from '../../messages/order-processes.messages';\nimport actionMessages from '../../messages/actions.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\n\nconst RemoveOrderProcessModal = ({\n  ids = [],\n  fetchData,\n  resetSelectedOrderProcesses\n}) => {\n  const dispatch = useDispatch();\n  const [fetchedOrderProcess, setFetchedOrderProcess] = useState();\n  const [submitting, setSubmitting] = useState(false);\n  const { push } = useEnhancedHistory({ keepHash: true });\n  const [{ order_process: orderProcessId }] = useQuery(['order_process']);\n\n  const finalId = orderProcessId || (ids.length === 1 && ids[0]);\n\n  const intl = useIntl();\n  const orderProcess = useOrderProcess(finalId);\n\n  useEffect(() => {\n    if (finalId && !orderProcess) {\n      dispatch(fetchOrderProcess(finalId))\n        .then(({ value }) => setFetchedOrderProcess(value))\n        .catch(() => push(ORDER_PROCESSES_ROUTE));\n    }\n  }, []);\n\n  if (!finalId && ids.length === 0) {\n    return null;\n  }\n\n  const removeProcesses = () =>\n    (finalId\n      ? dispatch(removeOrderProcess(finalId, intl))\n      : dispatch(removeOrderProcesses(ids, intl))\n    )\n      .catch(() => setSubmitting(false))\n      .then(() => push(ORDER_PROCESSES_ROUTE))\n      .then(() => resetSelectedOrderProcesses())\n      .then(() => fetchData());\n\n  const onCancel = () => push(ORDER_PROCESSES_ROUTE);\n\n  const onSubmit = () => {\n    setSubmitting(true);\n    return removeProcesses();\n  };\n\n  const name = (\n    <b key=\"remove-key\">\n      {finalId ? (\n        (fetchedOrderProcess && fetchedOrderProcess.name) ||\n        (orderProcess && orderProcess.name)\n      ) : (\n        <React.Fragment>\n          {ids.length} {intl.formatMessage(orderProcessMessages.orderProcesses)}\n        </React.Fragment>\n      )}\n    </b>\n  );\n\n  const isLoading = finalId && !orderProcess && !fetchedOrderProcess;\n\n  return (\n    <Modal\n      isOpen\n      variant=\"small\"\n      aria-label={intl.formatMessage(\n        orderProcessMessages.removeProcessAriaLabel,\n        { count: finalId ? 1 : ids.length }\n      )}\n      header={\n        <Title size=\"2xl\" headingLevel=\"h1\">\n          <ExclamationTriangleIcon\n            size=\"sm\"\n            fill=\"#f0ab00\"\n            className=\"pf-u-mr-sm\"\n          />\n          {intl.formatMessage(orderProcessMessages.removeProcessTitle, {\n            count: finalId ? 1 : ids.length\n          })}\n        </Title>\n      }\n      onClose={onCancel}\n      actions={[\n        <Button\n          id=\"submit-remove-order-process\"\n          ouiaId=\"submit-remove-order-process\"\n          key=\"submit\"\n          variant=\"danger\"\n          type=\"button\"\n          isDisabled={submitting}\n          onClick={onSubmit}\n        >\n          {submitting ? (\n            <React.Fragment>\n              <Spinner size=\"sm\" className=\"pf-u-mr-md\" />\n              {intl.formatMessage(actionMessages.deleting)}\n            </React.Fragment>\n          ) : (\n            intl.formatMessage(actionMessages.delete)\n          )}\n        </Button>,\n        <Button\n          id=\"cancel-remove-order-process\"\n          ouiaId=\"cancel-remove-order-process\"\n          key=\"cancel\"\n          variant=\"link\"\n          type=\"button\"\n          isDisabled={submitting}\n          onClick={onCancel}\n        >\n          {intl.formatMessage(labelMessages.cancel)}\n        </Button>\n      ]}\n    >\n      <TextContent>\n        <Text component={TextVariants.p}>\n          {isLoading ? (\n            <FormItemLoader />\n          ) : (\n            intl.formatMessage(orderProcessMessages.removeProcessDescription, {\n              name\n            })\n          )}\n        </Text>\n      </TextContent>\n    </Modal>\n  );\n};\n\nRemoveOrderProcessModal.propTypes = {\n  fetchData: PropTypes.func.isRequired,\n  ids: PropTypes.array,\n  resetSelectedOrderProcesses: PropTypes.func.isRequired\n};\n\nexport default RemoveOrderProcessModal;\n","import React, { Fragment, useEffect, useReducer } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Link, Route } from 'react-router-dom';\nimport {\n  Button,\n  Text,\n  TextContent,\n  TextVariants,\n  ToolbarItem\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { sortable, cellWidth } from '@patternfly/react-table';\nimport {\n  fetchOrderProcesses,\n  sortOrderProcesses\n} from '../../redux/actions/order-process-actions';\nimport { createRows } from './order-process-table-helpers';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport TopToolbar from '../../presentational-components/shared/top-toolbar';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport asyncFormValidator from '../../utilities/async-form-validator';\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport TableEmptyState from '../../presentational-components/shared/table-empty-state';\nimport { useIntl } from 'react-intl';\nimport orderProcessesMessages from '../../messages/order-processes.messages';\nimport filteringMessages from '../../messages/filtering.messages';\nimport labelMessages from '../../messages/labels.messages';\nimport { StyledToolbarGroup } from '../../presentational-components/styled-components/toolbars';\nimport {\n  ADD_ORDER_PROCESS_ROUTE,\n  REMOVE_ORDER_PROCESS_ROUTE,\n  UPDATE_ORDER_PROCESS_ROUTE\n} from '../../constants/routes';\nimport AddOrderProcess from './add-order-process-modal';\nimport useInitialUriHash from '../../routing/use-initial-uri-hash';\nimport RemoveOrderProcess from './remove-order-process-modal';\nimport actionMessages from '../../messages/actions.messages';\nimport OrderProcessTableContext from './order-process-table-context';\nimport { Checkbox } from '@patternfly/react-core';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\n\nconst columns = (intl, allSelected, selectAll) => [\n  {\n    title: (\n      <Checkbox onChange={selectAll} isChecked={allSelected} id=\"select-all\" />\n    ),\n    transforms: [cellWidth(1)]\n  },\n  {\n    title: intl.formatMessage(labelMessages.name),\n    transforms: [sortable]\n  },\n  {\n    title: intl.formatMessage(labelMessages.description),\n    transforms: [sortable]\n  },\n  {\n    title: intl.formatMessage(labelMessages.created),\n    transforms: [sortable]\n  }\n];\n\nconst debouncedFilter = asyncFormValidator(\n  (filter, dispatch, filteringCallback, meta = defaultSettings, sortBy) => {\n    filteringCallback(true);\n    return dispatch(\n      fetchOrderProcesses({ filterValue: filter, ...meta, sortBy })\n    ).then(() => filteringCallback(false));\n  },\n  1000\n);\n\nconst prepareChips = (filterValue, intl) =>\n  filterValue\n    ? [\n        {\n          category: intl.formatMessage(labelMessages.name),\n          key: 'name',\n          chips: [{ name: filterValue, value: filterValue }]\n        }\n      ]\n    : [];\n\nconst initialState = {\n  filter: '',\n  isFetching: true,\n  isFiltering: false,\n  selectedOrderProcesses: [],\n  allSelected: false,\n  rows: []\n};\n\nconst areAllSelected = (rows = [], selected) =>\n  rows.every((row) => selected.includes(row.id));\nconst unique = (value, index, self) => self.indexOf(value) === index;\n\nconst orderProcessesState = (state, action) => {\n  switch (action.type) {\n    case 'setRows':\n      return {\n        ...state,\n        rows: action.payload,\n        allSelected: areAllSelected(\n          action.payload,\n          state.selectedOrderProcesses\n        )\n      };\n    case 'setFetching':\n      return {\n        ...state,\n        isFetching: action.payload\n      };\n    case 'setFilterValue':\n      return { ...state, filterValue: action.payload };\n    case 'select':\n      return {\n        ...state,\n        allSelected: false,\n        selectedOrderProcesses: state.selectedOrderProcesses.includes(\n          action.payload\n        )\n          ? state.selectedOrderProcesses.filter((id) => id !== action.payload)\n          : [...state.selectedOrderProcesses, action.payload]\n      };\n    case 'selectAll':\n      return {\n        ...state,\n        selectedOrderProcesses: [\n          ...state.selectedOrderProcesses,\n          ...action.payload\n        ].filter(unique),\n        allSelected: true\n      };\n    case 'unselectAll':\n      return {\n        ...state,\n        selectedOrderProcesses: state.selectedOrderProcesses.filter(\n          (selected) => !action.payload.includes(selected)\n        ),\n        allSelected: false\n      };\n    case 'resetSelected':\n      return {\n        ...state,\n        selectedOrderProceses: [],\n        allSelected: false\n      };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst sortIndexMapper = {\n  1: 'name',\n  2: 'description',\n  3: 'created_at'\n};\n\nconst OrderProcesses = () => {\n  const viewState = useInitialUriHash();\n  const {\n    orderProcesses: { data, meta },\n    sortBy\n  } = useSelector(\n    ({ orderProcessReducer: { orderProcesses, sortBy } }) => ({\n      orderProcesses,\n      sortBy\n    }),\n    shallowEqual\n  );\n  const [\n    {\n      filterValue,\n      isFetching,\n      isFiltering,\n      selectedOrderProcesses,\n      allSelected,\n      rows\n    },\n    stateDispatch\n  ] = useReducer(orderProcessesState, {\n    ...initialState,\n    filterValue: viewState?.orderProcesses?.filter || initialState.filterValue\n  });\n\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const history = useEnhancedHistory({ keepHash: true });\n  const setSelectedOrderProcesses = (id) =>\n    stateDispatch({ type: 'select', payload: id });\n\n  const updateOrderProcesses = (pagination, sortBy) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    return dispatch(fetchOrderProcesses(pagination, sortBy))\n      .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n      .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  useEffect(() => {\n    insights.chrome.appNavClick({ id: 'order-processes', secondaryNav: true });\n    updateOrderProcesses(\n      viewState?.orderProcesses\n        ? {\n            ...viewState.orderProcesses,\n            filterValue\n          }\n        : defaultSettings,\n      sortBy\n    );\n    scrollToTop();\n  }, []);\n\n  useEffect(() => {\n    stateDispatch({ type: 'setRows', payload: createRows(data) });\n  }, [data]);\n\n  const handleFilterChange = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      value,\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering }),\n      { ...meta, offset: 0 }\n    );\n  };\n\n  const routes = () => (\n    <Fragment>\n      <Route exact path={ADD_ORDER_PROCESS_ROUTE}>\n        <AddOrderProcess postMethod={updateOrderProcesses} />\n      </Route>\n      <Route exact path={REMOVE_ORDER_PROCESS_ROUTE}>\n        <RemoveOrderProcess\n          ids={selectedOrderProcesses}\n          fetchData={updateOrderProcesses}\n          resetSelectedOrderProcesses={() =>\n            stateDispatch({ type: 'resetSelected' })\n          }\n        />\n      </Route>\n      <Route exact path={UPDATE_ORDER_PROCESS_ROUTE}>\n        <AddOrderProcess edit />\n      </Route>\n    </Fragment>\n  );\n\n  const actionResolver = () => [\n    {\n      title: intl.formatMessage(actionMessages.edit),\n      onClick: (_event, _rowId, orderProcess) =>\n        history.push({\n          pathname: UPDATE_ORDER_PROCESS_ROUTE,\n          search: `?order_process=${orderProcess.id}`\n        })\n    },\n    {\n      title: intl.formatMessage(actionMessages.delete),\n      onClick: (_event, _rowId, orderProcess) =>\n        history.push({\n          pathname: REMOVE_ORDER_PROCESS_ROUTE,\n          search: `?order_process=${orderProcess.id}`\n        })\n    }\n  ];\n\n  const doSelectAll = () => {\n    return allSelected\n      ? stateDispatch({ type: 'unselectAll', payload: data.map((op) => op.id) })\n      : stateDispatch({ type: 'selectAll', payload: data.map((op) => op.id) });\n  };\n\n  const anyOrderProcessSelected = selectedOrderProcesses.length > 0;\n\n  const onSort = (_e, index, direction, { property }) => {\n    dispatch(\n      sortOrderProcesses({\n        index,\n        direction,\n        property: sortIndexMapper[index] || property\n      })\n    );\n    return updateOrderProcesses(\n      {\n        ...meta,\n        filterValue\n      },\n      {\n        index,\n        direction,\n        property: sortIndexMapper[index] || property\n      }\n    );\n  };\n\n  const toolbarButtons = () => (\n    <StyledToolbarGroup className=\"pf-u-pl-lg top-toolbar\">\n      <ToolbarItem>\n        <Link\n          id=\"add-order-process-link\"\n          to={{ pathname: ADD_ORDER_PROCESS_ROUTE }}\n        >\n          <Button\n            variant=\"primary\"\n            ouiaid={'create-order-process'}\n            aria-label={intl.formatMessage(labelMessages.create)}\n          >\n            {intl.formatMessage(labelMessages.create)}\n          </Button>\n        </Link>\n      </ToolbarItem>\n      <ToolbarItem>\n        <Link\n          id=\"remove-multiple-order-processes'\"\n          className={anyOrderProcessSelected ? '' : 'disabled-link'}\n          to={{ pathname: REMOVE_ORDER_PROCESS_ROUTE }}\n        >\n          <Button\n            variant=\"secondary\"\n            ouiaid={'delete-order-process'}\n            isDisabled={!anyOrderProcessSelected}\n            aria-label={intl.formatMessage(\n              orderProcessesMessages.deleteOrderProcess\n            )}\n          >\n            {intl.formatMessage(actionMessages.delete)}\n          </Button>\n        </Link>\n      </ToolbarItem>\n    </StyledToolbarGroup>\n  );\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TextContent className=\"pf-u-ml-md\">\n          <Text component={TextVariants.h1}>\n            {intl.formatMessage(orderProcessesMessages.title)}\n          </Text>\n        </TextContent>\n      </TopToolbar>\n      <OrderProcessTableContext.Provider\n        value={{ selectedOrderProcesses, setSelectedOrderProcesses }}\n      >\n        <TableToolbarView\n          ouiaId={'OrderProcessesTable'}\n          sortBy={sortBy}\n          onSort={onSort}\n          rows={rows}\n          columns={columns(intl, allSelected, doSelectAll)}\n          routes={routes}\n          fetchData={updateOrderProcesses}\n          titlePlural={intl.formatMessage(orderProcessesMessages.title)}\n          titleSingular={intl.formatMessage(\n            orderProcessesMessages.orderProcess\n          )}\n          pagination={meta}\n          filterValue={filterValue}\n          onFilterChange={handleFilterChange}\n          isLoading={isFetching || isFiltering}\n          toolbarButtons={toolbarButtons}\n          actionResolver={actionResolver}\n          renderEmptyState={() => (\n            <TableEmptyState\n              title={\n                filterValue === ''\n                  ? intl.formatMessage(orderProcessesMessages.noOrderProcesses)\n                  : intl.formatMessage(filteringMessages.noResultsFound)\n              }\n              Icon={SearchIcon}\n              PrimaryAction={() =>\n                filterValue !== '' ? (\n                  <Button\n                    ouiaId={'clear-filter'}\n                    onClick={() => handleFilterChange('')}\n                    variant=\"link\"\n                  >\n                    {intl.formatMessage(filteringMessages.clearFilters)}\n                  </Button>\n                ) : null\n              }\n              description={\n                filterValue === ''\n                  ? intl.formatMessage(orderProcessesMessages.noOrderProcesses)\n                  : intl.formatMessage(filteringMessages.noResultsDescription)\n              }\n            />\n          )}\n          activeFiltersConfig={{\n            filters: prepareChips(filterValue, intl),\n            onDelete: () => handleFilterChange('')\n          }}\n        />\n      </OrderProcessTableContext.Provider>\n    </Fragment>\n  );\n};\n\nexport default OrderProcesses;\n"],"sourceRoot":""}