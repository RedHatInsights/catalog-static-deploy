{"version":3,"file":"js/portfolio-item-detail.1644521700492.6dffbf880cb466e0ab66.js","mappings":"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","sources":["webpack:///./src/smart-components/portfolio/portfolio-item-detail/detail-toolbar-actions.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/portfolio-item-detail-toolbar.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/item-detail-info-bar.js","webpack:///./src/forms/edit-portfolio-item-form.schema.ts","webpack:///./src/messages/icon.messages.ts","webpack:///./src/smart-components/portfolio/portfolio-item-detail/icon-upload.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/edit-portfolio-item.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/item-detail-description.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/portfolio-item-detail.js","webpack:///./src/presentational-components/shared/button-with-spinner.tsx","webpack:///./src/presentational-components/styled-components/lazy-load-image.ts","webpack:///./src/presentational-components/shared/card-icon.tsx","webpack:///./src/helpers/approval/approval-helper.ts","webpack:///./src/utilities/extract-format-message.ts","webpack:///./src/messages/approval.messages.ts","webpack:///./src/redux/actions/approval-actions.ts","webpack:///./src/helpers/approval/approval-helper-s.ts","webpack:///./src/smart-components/common/edit-approval-workflow.tsx","webpack:///./src/redux/actions/approval-actions-s.ts"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  KebabToggle,\n  LevelItem\n} from '@patternfly/react-core';\nimport ButtonWithSpinner from '../../../presentational-components/shared/button-with-spinner';\nimport CatalogLink from '../../common/catalog-link';\nimport actionMessages from '../../../messages/actions.messages';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport orderProcessesMessages from '../../../messages/order-processes.messages';\nimport { PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE } from '../../../constants/routes';\n\nconst DetailToolbarActions = ({\n  copyUrl,\n  orderUrl,\n  editUrl,\n  workflowUrl,\n  editSurveyUrl,\n  isOpen,\n  setOpen,\n  isFetching,\n  availability,\n  orderable,\n  userCapabilities,\n  canLinkOrderProcesses\n}) => {\n  const formatMessage = useFormatMessage();\n  const dropdownItems = [];\n\n  if (userCapabilities?.update) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Edit Portfolio\"\n        key=\"edit-portfolio-item\"\n        id=\"edit-portfolio-item\"\n        component={\n          <CatalogLink pathname={editUrl} preserveSearch>\n            {formatMessage(actionMessages.edit)}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (userCapabilities?.copy) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Copy Portfolio\"\n        key=\"copy-portfolio-item\"\n        id=\"copy-portfolio-item\"\n        component={\n          <CatalogLink pathname={copyUrl} preserveSearch>\n            {formatMessage(actionMessages.copy)}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (userCapabilities?.set_approval) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Set approval\"\n        key=\"set-approval_workflow\"\n        id=\"set-approval_workflow\"\n        component={\n          <CatalogLink pathname={workflowUrl} preserveSearch>\n            {formatMessage(actionMessages.setApproval)}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (userCapabilities?.update && canLinkOrderProcesses) {\n    const orderProcessAction = formatMessage(\n      orderProcessesMessages.setOrderProcess\n    );\n    dropdownItems.push(\n      <DropdownItem\n        aria-label={orderProcessAction}\n        key=\"attach-order-processes\"\n        id=\"attach-order-processes\"\n        component={\n          <CatalogLink\n            preserveSearch\n            pathname={PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE}\n          >\n            {orderProcessAction}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (userCapabilities?.update) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Edit survey\"\n        key=\"edit-survey\"\n        id=\"edit-survey\"\n        component={\n          <CatalogLink pathname={editSurveyUrl} preserveSearch>\n            {formatMessage(portfolioMessages.portfolioItemSurvey)}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  return (\n    <Fragment>\n      <LevelItem>\n        <CatalogLink\n          isDisabled={isFetching || !orderable}\n          pathname={orderUrl}\n          preserveSearch\n        >\n          <ButtonWithSpinner\n            isDisabled={isFetching || !orderable}\n            showSpinner={isFetching}\n            variant=\"primary\"\n            id=\"order-portfolio-item\"\n            ouiaId=\"order-portfolio-item\"\n          >\n            {formatMessage(portfolioMessages.portfolioItemOrder)}\n          </ButtonWithSpinner>\n        </CatalogLink>\n      </LevelItem>\n      <LevelItem style={{ marginLeft: 16 }}>\n        {availability !== 'unavailable' && dropdownItems.length > 0 && (\n          <Dropdown\n            isPlain\n            onToggle={setOpen}\n            onSelect={() => setOpen(false)}\n            position={DropdownPosition.right}\n            toggle={\n              <KebabToggle\n                id=\"portfolio-item-actions-toggle\"\n                onToggle={(isOpen) => setOpen(isOpen)}\n              />\n            }\n            isOpen={isOpen}\n            dropdownItems={dropdownItems}\n          />\n        )}\n      </LevelItem>\n    </Fragment>\n  );\n};\n\nDetailToolbarActions.propTypes = {\n  orderUrl: PropTypes.string.isRequired,\n  editUrl: PropTypes.string.isRequired,\n  copyUrl: PropTypes.string.isRequired,\n  editSurveyUrl: PropTypes.string.isRequired,\n  workflowUrl: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool,\n  setOpen: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool,\n  availability: PropTypes.oneOf(['available', 'unavailable']).isRequired,\n  orderable: PropTypes.bool,\n  userCapabilities: PropTypes.shape({\n    update: PropTypes.bool,\n    copy: PropTypes.bool,\n    set_approval: PropTypes.bool\n  }).isRequired,\n  canLinkOrderProcesses: PropTypes.bool\n};\n\nDetailToolbarActions.defaultProps = {\n  isFetching: false,\n  orderable: true,\n  canLinkOrderProcesses: false\n};\n\nexport default DetailToolbarActions;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Link, Switch, useLocation } from 'react-router-dom';\nimport {\n  Level,\n  LevelItem,\n  Text,\n  TextContent,\n  TextVariants,\n  Button,\n  Flex,\n  Dropdown,\n  KebabToggle,\n  DropdownItem\n} from '@patternfly/react-core';\n\nimport DetailToolbarActions from './detail-toolbar-actions';\nimport { CATALOG_API_BASE } from '../../../utilities/constants';\nimport CardIcon from '../../../presentational-components/shared/card-icon';\nimport TopToolbar, {\n  TopToolbarTitle\n} from '../../../presentational-components/shared/top-toolbar';\nimport ButtonWithSpinner from '../../../presentational-components/shared/button-with-spinner';\nimport { StyledLevelItem } from '../../../presentational-components/styled-components/level';\nimport actionMessages from '../../../messages/actions.messages';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport BackToProducts from '../../../presentational-components/portfolio/back-to-products';\nimport { PORTFOLIO_ITEM_ROUTE_EDIT } from '../../../constants/routes';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport { isStandalone } from '../../../helpers/shared/helpers';\n\nconst PortfolioItemIconItem = ({ product }) => (\n  <CardIcon\n    src={\n      isStandalone()\n        ? product.icon_url\n        : `${CATALOG_API_BASE}/portfolio_items/${product.id}/icon`\n    }\n    sourceId={product?.service_offering_source_ref}\n    height={64}\n  />\n);\n\nPortfolioItemIconItem.propTypes = {\n  product: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    service_offering_source_ref: PropTypes.string,\n    icon_url: PropTypes.string\n  }).isRequired\n};\n\nexport const PortfolioItemDetailToolbar = ({\n  url,\n  isOpen,\n  product,\n  setOpen,\n  isFetching,\n  availability,\n  userCapabilities,\n  orderable,\n  fromProducts,\n  canLinkOrderProcesses,\n  breadcrumbfragments\n}) => {\n  const formatMessage = useFormatMessage();\n  const { pathname } = useLocation();\n  return (\n    <TopToolbar\n      paddingBottom={pathname !== PORTFOLIO_ITEM_ROUTE_EDIT}\n      breadcrumbs={!fromProducts}\n      breadcrumbfragments={breadcrumbfragments}\n    >\n      {fromProducts && <BackToProducts />}\n      <Level className=\"flex-no-wrap\">\n        <Switch>\n          <Route path={PORTFOLIO_ITEM_ROUTE_EDIT} exact>\n            <TopToolbarTitle\n              title={formatMessage(portfolioMessages.editProduct)}\n              noData\n            />\n          </Route>\n          <Route>\n            <StyledLevelItem grow alignStart className=\"pf-l-flex\">\n              {userCapabilities.update ? (\n                <PortfolioItemIconItem product={product} />\n              ) : (\n                <CardIcon\n                  src={\n                    isStandalone()\n                      ? product.icon_url\n                      : `${CATALOG_API_BASE}/portfolio_items/${product.id}/icon`\n                  }\n                  sourceId={product.service_offering_source_ref}\n                  height={64}\n                />\n              )}\n              <TextContent className=\"pf-u-ml-md\">\n                <Text component={TextVariants.h1}>{product.name}</Text>\n              </TextContent>\n            </StyledLevelItem>\n            <LevelItem style={{ minHeight: 36 }} className=\"flex-item-no-wrap\">\n              <Level className=\"flex-no-wrap\">\n                <DetailToolbarActions\n                  isOpen={isOpen}\n                  setOpen={(open) => setOpen(open)}\n                  orderUrl={`${url}/order`}\n                  editUrl={`${url}/edit`}\n                  copyUrl={`${url}/copy`}\n                  editSurveyUrl={`${url}/edit-survey`}\n                  workflowUrl={`${url}/edit-workflow`}\n                  isFetching={isFetching}\n                  availability={availability}\n                  orderable={orderable}\n                  userCapabilities={userCapabilities}\n                  canLinkOrderProcesses={canLinkOrderProcesses}\n                />\n              </Level>\n            </LevelItem>\n          </Route>\n        </Switch>\n      </Level>\n    </TopToolbar>\n  );\n};\n\nPortfolioItemDetailToolbar.propTypes = {\n  url: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool,\n  product: PropTypes.shape({\n    distributor: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    service_offering_source_ref: PropTypes.string.isRequired,\n    metadata: PropTypes.shape({ orderable: PropTypes.bool }),\n    icon_url: PropTypes.string\n  }).isRequired,\n  setOpen: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool,\n  availability: PropTypes.oneOf(['available', 'unavailable']).isRequired,\n  userCapabilities: PropTypes.object,\n  fromProducts: PropTypes.bool,\n  orderable: PropTypes.bool,\n  canLinkOrderProcesses: PropTypes.bool\n};\n\nPortfolioItemDetailToolbar.defaultProps = {\n  isFetching: false,\n  orderable: true\n};\n\nconst SurveyEditorDropdown = ({ handleResetSurvey }) => {\n  const formatMessage = useFormatMessage();\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <Dropdown\n      isOpen={isOpen}\n      isPlain\n      onSelect={() => setIsOpen(false)}\n      position=\"right\"\n      toggle={<KebabToggle onToggle={(isOpen) => setIsOpen(isOpen)} />}\n      dropdownItems={[\n        <DropdownItem\n          onClick={handleResetSurvey}\n          component=\"button\"\n          key=\"synchronize\"\n        >\n          {formatMessage(portfolioMessages.restoreSurvey)}\n        </DropdownItem>\n      ]}\n    />\n  );\n};\n\nSurveyEditorDropdown.propTypes = {\n  handleResetSurvey: PropTypes.func.isRequired\n};\n\nexport const SurveyEditingToolbar = ({\n  handleSaveSurvey,\n  breadcrumbfragments,\n  closeUrl,\n  search,\n  isFetching,\n  isValid,\n  modified,\n  breadcrumbs,\n  handleResetSurvey\n}) => {\n  const formatMessage = useFormatMessage();\n  return (\n    <TopToolbar\n      breadcrumbs={breadcrumbs}\n      breadcrumbfragments={breadcrumbfragments}\n    >\n      <Level>\n        <StyledLevelItem grow alignStart className=\"pf-l-flex\">\n          <TextContent>\n            <Text component={TextVariants.h1}>\n              {formatMessage(portfolioMessages.portfolioItemSurvey)}\n            </Text>\n          </TextContent>\n        </StyledLevelItem>\n        <LevelItem>\n          <Flex className=\"align-items-center\">\n            <ButtonWithSpinner\n              variant=\"primary\"\n              ouiaId={'save-survey'}\n              showSpinner={isFetching}\n              isDisabled={isFetching || !isValid}\n              onClick={handleSaveSurvey}\n            >\n              {formatMessage(actionMessages.save)}\n            </ButtonWithSpinner>\n            <Link\n              to={{\n                pathname: closeUrl,\n                search\n              }}\n            >\n              <Button ouiaId={'cancel'} variant=\"link\">\n                Cancel\n              </Button>\n            </Link>\n            {modified && (\n              <SurveyEditorDropdown handleResetSurvey={handleResetSurvey} />\n            )}\n          </Flex>\n        </LevelItem>\n      </Level>\n    </TopToolbar>\n  );\n};\n\nSurveyEditingToolbar.propTypes = {\n  handleSaveSurvey: PropTypes.func.isRequired,\n  closeUrl: PropTypes.string.isRequired,\n  search: PropTypes.string.isRequired,\n  isFetching: PropTypes.bool,\n  isValid: PropTypes.bool,\n  modified: PropTypes.bool,\n  handleResetSurvey: PropTypes.func,\n  fromProducts: PropTypes.bool,\n  canLinkOrderProcesses: PropTypes.bool\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport useFormatMessage from '../../../utilities/use-format-message';\n\nconst messages = {\n  platform: {\n    id: 'portfolio.item.detail.info.platform',\n    defaultMessage: 'Platform'\n  },\n  portfolio: {\n    id: 'portfolio.item.detail.info.portfolio',\n    defaultMessage: 'Portfolio'\n  },\n  vendor: {\n    id: 'portfolio.item.detail.info.vendor',\n    defaultMessage: 'Vendor'\n  },\n  created: {\n    id: 'portfolio.item.detail.info.created',\n    defaultMessage: 'Created'\n  }\n};\n\nconst ItemDetailInfoBar = ({ product, source, portfolio }) => {\n  const formatMessage = useFormatMessage();\n  return (\n    <TextContent className=\"pf-u-mb-md\">\n      <Text className=\"font-14\">{formatMessage(messages.platform)}</Text>\n      <Text\n        id=\"source-name\"\n        className=\"overflow-wrap\"\n        component={TextVariants.p}\n      >\n        {source.name}\n      </Text>\n      <Text className=\"font-14\">{formatMessage(messages.portfolio)}</Text>\n      <Text\n        id=\"portfolio-name\"\n        className=\"overflow-wrap\"\n        component={TextVariants.p}\n      >\n        {portfolio.name}\n      </Text>\n      {product.distributor && (\n        <span id=\"distributor\">\n          <Text className=\"font-14\">{formatMessage(messages.vendor)}</Text>\n          <Text className=\"overflow-wrap\" component={TextVariants.p}>\n            {product.distributor}\n          </Text>\n        </span>\n      )}\n      <Text className=\"font-14\">{formatMessage(messages.created)}</Text>\n      <Text id=\"created_at\" component={TextVariants.p}>\n        <DateFormat variant=\"relative\" date={product.created_at} />\n      </Text>\n    </TextContent>\n  );\n};\n\nItemDetailInfoBar.propTypes = {\n  product: PropTypes.shape({\n    distributor: PropTypes.string,\n    updated_at: PropTypes.string,\n    created_at: PropTypes.string.isRequired\n  }).isRequired,\n  source: PropTypes.shape({\n    name: PropTypes.string\n  }).isRequired,\n  portfolio: PropTypes.shape({\n    name: PropTypes.string\n  }).isRequired\n};\n\nexport default ItemDetailInfoBar;\n","import Schema from '@data-driven-forms/react-form-renderer/common-types/schema';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nconst editPortfolioItemSchema: Schema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'schemas.portfolio-item.name',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }]\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'description',\n      label: 'schemas.portfolio-item.description'\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'long_description',\n      label: 'schemas.portfolio-item.long_description'\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'distributor',\n      label: 'schemas.portfolio-item.vendor'\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'documentation_url',\n      label: 'schemas.portfolio-item.documentation_url',\n      validate: [\n        {\n          type: validatorTypes.URL\n        }\n      ]\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'support_url',\n      label: 'schemas.portfolio-item.support_url',\n      validate: [\n        {\n          type: validatorTypes.URL\n        }\n      ]\n    }\n  ]\n};\n\nexport default editPortfolioItemSchema;\n","import { defineMessages } from 'react-intl';\n\nconst iconMessages = defineMessages({\n  changeIcon: {\n    id: 'icons.actions.change',\n    defaultMessage: 'Upload image'\n  },\n  resetIcon: {\n    id: 'icons.actions.reset',\n    defaultMessage: 'Reset image'\n  }\n});\n\nexport default iconMessages;\n","import React, { useState, useRef } from 'react';\nimport { PencilAltIcon } from '@patternfly/react-icons';\nimport {\n  Spinner,\n  Dropdown,\n  DropdownToggle,\n  DropdownItem\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport styled from 'styled-components';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport iconMessages from '../../../messages/icon.messages';\n\nconst UploadButton = styled.span`\n  border: none;\n  position: absolute;\n  top: 0;\n  left: 0;\n  padding-left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: transparent;\n  &::after {\n    content: ' ';\n    position: absolute;\n    display: block;\n    top: -0.3em;\n    right: -0.3em;\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    background-color: rgba(255, 255, 255, 0.8);\n    z-index: 0;\n  }\n  svg,\n  .pf-c-spinner {\n    z-index: 1;\n    position: absolute;\n    top: 0;\n    right: 0;\n  }\n`;\n\nconst UploadIconWrapper = styled.div`\n  position: relative;\n  display: inline-block;\n`;\n\nconst ImagePreview = styled.img`\n  height: 64px;\n  max-width: 300px;\n  object-fit: cover;\n`;\n\nconst StyledDropdown = styled(Dropdown)`\n  .pf-c-dropdown__menu {\n    top: 24px;\n    left: calc(100% - 24px);\n  }\n`;\n\nconst IconUpload = ({ uploadIcon, resetIcon, enableReset, children }) => {\n  const formatMessage = useFormatMessage();\n  const inputRef = useRef();\n  const [image, setImage] = useState();\n  const [isUploading, setIsUploading] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const handleClick = () => {\n    setIsOpen(false);\n    return inputRef.current.click();\n  };\n\n  const handleReset = () => {\n    setImage(undefined);\n    setIsUploading(true);\n    return resetIcon().then(() => setIsUploading(false));\n  };\n\n  const dispatch = useDispatch();\n\n  const dropdownItems = [\n    <DropdownItem onClick={handleClick} key=\"change-icon\">\n      {formatMessage(iconMessages.changeIcon)}\n    </DropdownItem>,\n    <DropdownItem\n      isDisabled={!enableReset}\n      onClick={handleReset}\n      key=\"reset-icon\"\n    >\n      {formatMessage(iconMessages.resetIcon)}\n    </DropdownItem>\n  ];\n\n  return (\n    <UploadIconWrapper>\n      <input\n        accept=\".png,.svg,.jpeg\"\n        onChange={(event) => {\n          setImage(event.target.files[0]);\n          setIsUploading(true);\n          uploadIcon(event.target.files[0])\n            .then(() => setIsUploading(false))\n            .catch((error) => {\n              dispatch(\n                addNotification({\n                  variant: 'danger',\n                  title: formatMessage(\n                    portfolioMessages.portfolioItemIconTitle\n                  ),\n                  description: error.data.errors[0].detail,\n                  dismissable: true\n                })\n              );\n              setImage(undefined);\n              setIsUploading(false);\n            });\n        }}\n        ref={inputRef}\n        type=\"file\"\n        id=\"icon-upload\"\n        hidden\n      />\n      <StyledDropdown\n        onSelect={() => setIsOpen(false)}\n        isOpen={isOpen}\n        isPlain\n        disabled={isUploading}\n        dropdownItems={dropdownItems}\n        toggle={\n          <DropdownToggle\n            disabled={isUploading}\n            toggleIndicator={null}\n            onToggle={(isOpen, event) => {\n              event.stopPropagation();\n              setIsOpen(isOpen);\n            }}\n          >\n            <UploadButton ouiaId={'upload-icon'}>\n              {isUploading ? (\n                <Spinner size=\"md\" />\n              ) : (\n                <PencilAltIcon size=\"sm\" />\n              )}\n            </UploadButton>\n            {!image && children}\n            {image && (\n              <ImagePreview\n                style={{ height: 64 }}\n                src={URL.createObjectURL(image)}\n                id={image.name}\n              />\n            )}\n          </DropdownToggle>\n        }\n      />\n    </UploadIconWrapper>\n  );\n};\n\nIconUpload.propTypes = {\n  uploadIcon: PropTypes.func.isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node)\n  ]),\n  resetIcon: PropTypes.func.isRequired,\n  enableReset: PropTypes.bool\n};\n\nexport default IconUpload;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nimport FormRenderer from '../../common/form-renderer';\nimport editPortfolioItemSchema from '../../../forms/edit-portfolio-item-form.schema';\nimport { updatePortfolioItem } from '../../../redux/actions/portfolio-actions';\nimport { updatePortfolioItem as updatePortfolioItemS } from '../../../redux/actions/portfolio-actions-s';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport IconUpload from './icon-upload';\nimport { CATALOG_API_BASE } from '../../../utilities/constants';\nimport CardIcon from '../../../presentational-components/shared/card-icon';\nimport { isStandalone } from '../../../helpers/shared/helpers';\n\nconst EditPortfolioItem = ({\n  cancelUrl,\n  uploadIcon,\n  resetIcon,\n  product: { owner, created_at, updated_at, ...product },\n  userCapabilities\n}) => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const { search } = useLocation();\n  const icon_url = isStandalone() ? product.icon_url : product.icon_id;\n  const icon_src = isStandalone()\n    ? product.icon_url || 'default'\n    : `${CATALOG_API_BASE}/portfolio_items/${\n        product.id\n      }/icon?cache_id=${product.icon_id || 'default'}`;\n  return (\n    <Stack hasGutter>\n      <StackItem key={icon_url || 'default'}>\n        <IconUpload\n          uploadIcon={uploadIcon}\n          resetIcon={resetIcon}\n          enableReset={!!icon_url}\n        >\n          <CardIcon\n            src={icon_src} // we need ho add the query to prevent the browser caching when resetting the image\n            sourceId={product.service_offering_source_ref}\n            height={64}\n          />\n        </IconUpload>\n      </StackItem>\n      <StackItem>\n        <FormRenderer\n          initialValues={{ ...product }}\n          onSubmit={(values) => {\n            push({\n              pathname: cancelUrl,\n              search\n            });\n            return dispatch(\n              isStandalone()\n                ? updatePortfolioItemS({\n                    ...values,\n                    metadata: { user_capabilities: userCapabilities }\n                  })\n                : updatePortfolioItem({\n                    ...values,\n                    metadata: { user_capabilities: userCapabilities }\n                  })\n            );\n          }}\n          schema={editPortfolioItemSchema}\n          templateProps={{\n            disableSubmit: ['pristine']\n          }}\n          onCancel={() =>\n            push({\n              pathname: cancelUrl,\n              search\n            })\n          }\n        />\n      </StackItem>\n    </Stack>\n  );\n};\n\nEditPortfolioItem.propTypes = {\n  cancelUrl: PropTypes.string.isRequired,\n  product: PropTypes.object.isRequired,\n  userCapabilities: PropTypes.object.isRequired,\n  uploadIcon: PropTypes.func.isRequired,\n  resetIcon: PropTypes.func.isRequired\n};\n\nexport default EditPortfolioItem;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Switch } from 'react-router-dom';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\n\nimport EditPortfolioItem from './edit-portfolio-item';\nimport EditApprovalWorkflow from '../../../smart-components/common/edit-approval-workflow';\nimport { PORTFOLIO_ITEM_RESOURCE_TYPE } from '../../../utilities/constants';\nimport CatalogRoute from '../../../routing/catalog-route';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport SetOrderProcessModal from '../../order-process/set-order-process-modal';\nimport { PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE } from '../../../constants/routes';\n\nconst ItemDetailDescription = ({\n  userCapabilities,\n  product,\n  url,\n  search,\n  detailPaths,\n  uploadIcon,\n  resetIcon\n}) => {\n  const formatMessage = useFormatMessage();\n  return (\n    <Switch>\n      <Route path={`${url}/edit-workflow`}>\n        <EditApprovalWorkflow\n          pushParam={{ pathname: url, search }}\n          objectType={PORTFOLIO_ITEM_RESOURCE_TYPE}\n          objectId={product.id}\n          objectName={() => product.name}\n          querySelector=\"portfolio-item\"\n        />\n      </Route>\n      <Route path={PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE}>\n        <SetOrderProcessModal\n          querySelector=\"portfolio-item\"\n          objectType={PORTFOLIO_ITEM_RESOURCE_TYPE}\n          objectName={() => product.name}\n          pushParam={{ pathname: url, search }}\n        />\n      </Route>\n      <Route\n        exact\n        path={detailPaths}\n        render={() => (\n          <TextContent>\n            {(product.description || product.long_description) && (\n              <Text component={TextVariants.h6}>\n                {formatMessage(portfolioMessages.portfolioItemOverview)}\n              </Text>\n            )}\n            {product.description && (\n              <Text id=\"description\" component={TextVariants.p}>\n                {product.description}\n              </Text>\n            )}\n            {product.long_description && (\n              <Text id=\"long_description\" component={TextVariants.p}>\n                {product.long_description}\n              </Text>\n            )}\n            {product.support_url && (\n              <Text id=\"support_url\" component={TextVariants.p}>\n                <a\n                  href={product.support_url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {formatMessage(portfolioMessages.portfolioItemSupport)}\n                </a>\n              </Text>\n            )}\n            {product.documentation_url && (\n              <Fragment>\n                <Text component={TextVariants.h6}>\n                  {formatMessage(portfolioMessages.portfolioItemDocumentation)}\n                </Text>\n                <Text id=\"documentation_url\" component={TextVariants.p}>\n                  <a\n                    href={product.documentation_url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {formatMessage(portfolioMessages.portfolioItemDocLink)}\n                  </a>\n                </Text>\n              </Fragment>\n            )}\n          </TextContent>\n        )}\n      />\n      <CatalogRoute\n        exact\n        path={`${url}/edit`}\n        requiredCapabilities=\"update\"\n        userCapabilities={userCapabilities}\n      >\n        <EditPortfolioItem\n          cancelUrl={url}\n          product={product}\n          userCapabilities={userCapabilities}\n          uploadIcon={uploadIcon}\n          resetIcon={resetIcon}\n        />\n      </CatalogRoute>\n    </Switch>\n  );\n};\n\nItemDetailDescription.propTypes = {\n  product: PropTypes.shape({\n    name: PropTypes.string,\n    long_description: PropTypes.string,\n    support_url: PropTypes.string,\n    documentation_url: PropTypes.string,\n    description: PropTypes.string,\n    id: PropTypes.string.isRequired\n  }).isRequired,\n  url: PropTypes.string.isRequired,\n  search: PropTypes.string.isRequired,\n  userCapabilities: PropTypes.object.isRequired,\n  detailPaths: PropTypes.arrayOf(PropTypes.string),\n  uploadIcon: PropTypes.func.isRequired,\n  resetIcon: PropTypes.func.isRequired\n};\n\nexport default ItemDetailDescription;\n","import React, {\n  useEffect,\n  useState,\n  Fragment,\n  lazy,\n  Suspense,\n  useContext\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Route, Switch, useRouteMatch, useLocation } from 'react-router-dom';\nimport { Grid, GridItem, Alert } from '@patternfly/react-core';\nimport { Section } from '@redhat-cloud-services/frontend-components/Section';\n\nimport ItemDetailInfoBar from './item-detail-info-bar';\nimport ItemDetailDescription from './item-detail-description';\nimport { PortfolioItemDetailToolbar } from './portfolio-item-detail-toolbar';\nimport TopToolbar from '../../../presentational-components/shared/top-toolbar';\nimport { getPortfolioItemDetail } from '../../../redux/actions/portfolio-actions';\nimport { getPortfolioItemDetail as getPortfolioItemDetailS } from '../../../redux/actions/portfolio-actions-s';\nimport {\n  ProductLoaderPlaceholder,\n  AppPlaceholder\n} from '../../../presentational-components/shared/loader-placeholders';\nimport {\n  uploadPortfolioItemIcon,\n  resetPortfolioItemIcon\n} from '../../../helpers/portfolio/portfolio-helper';\nimport {\n  uploadPortfolioItemIcon as uploadPortfolioItemIconS,\n  resetPortfolioItemIcon as resetPortfolioItemIconS\n} from '../../../helpers/portfolio/portfolio-helper-s';\nimport useQuery from '../../../utilities/use-query';\nimport {\n  PORTFOLIO_ITEM_ROUTE,\n  PORTFOLIO_ITEM_ROUTE_EDIT,\n  PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE\n} from '../../../constants/routes';\nimport CatalogRoute from '../../../routing/catalog-route';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport BackToProducts from '../../../presentational-components/portfolio/back-to-products';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport { hasPermission, isStandalone } from '../../../helpers/shared/helpers';\nimport UserContext from '../../../user-context';\nimport { USER_CAPABILITIES_PLACEHOLDER } from '../../../utilities/constants';\n\nconst SurveyEditor = lazy(() =>\n  import(\n    /* webpackChunkName: \"survey-editor\" */ '../../survey-editing/survey-editor'\n  )\n);\n\nconst SurveyEditorS = lazy(() =>\n  import(\n    /* webpackChunkName: \"survey-editor-s\" */ '../../survey-editing/survey-editor-s'\n  )\n);\n\nconst requiredParams = [\n  'portfolio',\n  'source',\n  'portfolio-item',\n  'from-products'\n];\n\nconst PortfolioItemDetail = () => {\n  const formatMessage = useFormatMessage();\n  const [isOpen, setOpen] = useState(false);\n  const [isFetching, setIsFetching] = useState(true);\n  const dispatch = useDispatch();\n  const [queryValues, search] = useQuery(requiredParams);\n  const { pathname } = useLocation();\n  const { url } = useRouteMatch(PORTFOLIO_ITEM_ROUTE);\n  const portfolioItemData = useSelector(\n    ({ portfolioReducer: { portfolioItem } }) => portfolioItem\n  );\n  const portfolio = useSelector(\n    ({ portfolioReducer: { selectedPortfolio } }) => selectedPortfolio\n  );\n  const fromProducts = queryValues['from-products'] === 'true';\n  const { permissions: userPermissions } = useContext(UserContext);\n  const canLinkOrderProcesses = hasPermission(userPermissions, [\n    'catalog:order_processes:link'\n  ]);\n\n  const fetchData = (skipLoading) => {\n    if (!skipLoading) {\n      setIsFetching(true);\n    }\n\n    dispatch(\n      isStandalone()\n        ? getPortfolioItemDetailS({\n            portfolioItem: queryValues['portfolio-item'],\n            ...queryValues\n          })\n        : getPortfolioItemDetail({\n            portfolioItem: queryValues['portfolio-item'],\n            ...queryValues\n          })\n    )\n      .then(() => setIsFetching(false))\n      .catch(() => setIsFetching(false));\n  };\n\n  useEffect(() => {\n    fetchData(false);\n  }, [queryValues['portfolio-item']]);\n\n  if (isFetching || Object.keys(portfolioItemData).length === 0) {\n    return (\n      <Section className=\"global-primary-background full-height\">\n        <TopToolbar breadcrumbs={!fromProducts}>\n          {fromProducts && <BackToProducts />}\n          <ProductLoaderPlaceholder />\n        </TopToolbar>\n      </Section>\n    );\n  }\n\n  const availability = isStandalone()\n    ? 'available'\n    : portfolioItemData?.source?.availability_status || 'unavailable';\n  let unavailable = [];\n\n  if (portfolioItemData?.source) {\n    unavailable = [portfolioItemData?.source]\n      .filter(({ notFound }) => notFound)\n      .map(({ object }) => (\n        <Alert\n          className=\"pf-u-mb-sm\"\n          key={object}\n          variant=\"warning\"\n          isInline\n          title={formatMessage(portfolioMessages.objectUnavaiable, {\n            object\n          })}\n        />\n      ));\n  }\n\n  const uploadIcon = (file) => {\n    return (isStandalone()\n      ? uploadPortfolioItemIconS({\n          portfolioItemId: portfolioItemData?.portfolioItem?.id,\n          icon_url: portfolioItemData?.portfolioItem?.icon_url,\n          file\n        })\n      : uploadPortfolioItemIcon({\n          portfolioItemId: portfolioItemData?.portfolioItem?.id,\n          file\n        })\n    ).then(() => fetchData(true));\n  };\n\n  const resetIcon = () =>\n    (isStandalone()\n      ? resetPortfolioItemIconS(portfolioItemData?.portfolioItem?.id)\n      : resetPortfolioItemIcon(portfolioItemData?.portfolioItem?.icon_id)\n    ).then(fetchData);\n  const detailPaths = [\n    PORTFOLIO_ITEM_ROUTE,\n    `${url}/order`,\n    `${url}/copy`,\n    `${url}/edit-workflow`,\n    PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE\n  ];\n  const SurveyEditorComponent = isStandalone() ? SurveyEditorS : SurveyEditor;\n  return (\n    <Fragment>\n      <Switch>\n        <CatalogRoute\n          requiredCapabilities=\"update\"\n          userCapabilities={\n            portfolioItemData?.portfolioItem?.metadata?.user_capabilities\n          }\n          path={`${url}/edit-survey`}\n        >\n          <Suspense fallback={<AppPlaceholder />}>\n            <SurveyEditorComponent\n              closeUrl={url}\n              search={search}\n              uploadIcon={uploadIcon}\n              portfolioItem={portfolioItemData.portfolioItem}\n              portfolio={portfolio}\n            />\n          </Suspense>\n        </CatalogRoute>\n        <Route>\n          <Section className=\"full-height global-primary-background\">\n            <PortfolioItemDetailToolbar\n              fromProducts={fromProducts}\n              url={url}\n              isOpen={isOpen}\n              product={portfolioItemData.portfolioItem}\n              setOpen={setOpen}\n              isFetching={isFetching}\n              availability={availability}\n              userCapabilities={\n                isStandalone()\n                  ? USER_CAPABILITIES_PLACEHOLDER\n                  : portfolioItemData?.portfolioItem?.metadata\n                      ?.user_capabilities\n              }\n              orderable={portfolioItemData?.portfolioItem.metadata?.orderable}\n              canLinkOrderProcesses={canLinkOrderProcesses}\n            />\n            {unavailable.length > 0 && (\n              <div className=\"pf-u-mr-lg pf-u-ml-lg\">{unavailable}</div>\n            )}\n            {portfolioItemData?.source?.availability_status ===\n              'unavailable' && (\n              <Alert\n                className=\"pf-u-ml-lg pf-u-mr-lg\"\n                id=\"unavailable-alert-info\"\n                variant=\"info\"\n                isInline\n                title={formatMessage(portfolioMessages.sourceUnavaiable)}\n              />\n            )}\n            <Section type=\"content\">\n              <Grid hasGutter className=\"pf-u-p-lg\">\n                <Route path={detailPaths} exact>\n                  <GridItem md={3} lg={2}>\n                    <ItemDetailInfoBar\n                      product={portfolioItemData.portfolioItem}\n                      portfolio={portfolio}\n                      source={isStandalone() ? '1' : portfolioItemData.source}\n                    />\n                  </GridItem>\n                </Route>\n                <GridItem\n                  md={pathname === PORTFOLIO_ITEM_ROUTE_EDIT ? 12 : 9}\n                  lg={pathname === PORTFOLIO_ITEM_ROUTE_EDIT ? 12 : 10}\n                >\n                  <ItemDetailDescription\n                    resetIcon={resetIcon}\n                    uploadIcon={uploadIcon}\n                    product={portfolioItemData.portfolioItem}\n                    userCapabilities={\n                      portfolioItemData?.portfolioItem?.metadata\n                        ?.user_capabilities\n                    }\n                    url={url}\n                    detailPaths={detailPaths}\n                    search={search}\n                  />\n                </GridItem>\n              </Grid>\n            </Section>\n          </Section>\n        </Route>\n      </Switch>\n    </Fragment>\n  );\n};\n\nexport default PortfolioItemDetail;\n","/* eslint-disable react/prop-types */\nimport React, { forwardRef } from 'react';\nimport styled from 'styled-components';\nimport { Button } from '@patternfly/react-core';\nimport { Spinner } from '@patternfly/react-core/dist/js/components/Spinner/Spinner';\nimport { AnyObject } from '../../types/common-types';\n\nconst SpinnerButton = styled(Button)`\n  display: flex !important;\n  align-items: center;\n`;\n\nconst SpinnerLabel = styled.span<{ showSpinner: boolean }>`\n  margin-right: ${({ showSpinner }) => (showSpinner ? '8px' : '0')};\n`;\n\nexport interface ButtonWithSpinnerProps extends AnyObject {\n  showSpinner?: boolean;\n  isDisabled?: boolean;\n}\nconst ButtonWithSpinner = forwardRef<HTMLButtonElement, ButtonWithSpinnerProps>(\n  ({ children, showSpinner = false, isDisabled = false, ...props }, ref) => (\n    <SpinnerButton ref={ref} {...props} isDisabled={isDisabled}>\n      <SpinnerLabel showSpinner={showSpinner}>{children}</SpinnerLabel>\n      {showSpinner && <Spinner size=\"md\" />}\n    </SpinnerButton>\n  )\n);\n\nButtonWithSpinner.displayName = 'ButtonWithSpinner';\n\nexport default ButtonWithSpinner;\n","import styled from 'styled-components';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\nconst StyledLazyLoadImage = styled(LazyLoadImage)`\n  height: ${({ height, hidden }) => (hidden ? '0px' : `${height}px` || '40px')};\n  display: ${({ hidden }) => (hidden ? 'none' : 'inherit')};\n  float: ${({ hidden }) => (hidden ? 'left' : 'inherit')};\n  width: ${({ hidden }) => (hidden ? 0 : 'inherit')};\n`;\n\nexport default StyledLazyLoadImage;\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\n\nimport { IconPlaceholder } from './loader-placeholders';\nimport CardIconDefault from '../../assets/images/card-icon-default.svg';\nimport CardIconDefaultS from '../../assets/images/card-icon-default-s.svg';\nimport StyledLazyLoadImage from '../styled-components/lazy-load-image';\nimport { CatalogRootState } from '../../types/redux';\nimport { StringObject } from '../../types/common-types';\nimport { isStandalone } from '../../helpers/shared/helpers';\n\ninterface CardIconContainerProps {\n  height: number;\n}\nconst CardIconContainer = styled.div<CardIconContainerProps>`\n  display: inline-block;\n  height: ${({ height }) => `${height}px`};\n`;\n\nexport interface CardIconProps {\n  src?: string;\n  height?: number;\n  sourceId?: string;\n}\nconst CardIcon: React.ComponentType<CardIconProps> = ({\n  src,\n  height = 40,\n  sourceId\n}) => {\n  const [isLoaded, setLoaded] = useState(false);\n  const [isUnknown, setUnknown] = useState(false);\n  const platformIconMapping = useSelector<CatalogRootState, StringObject>(\n    ({ platformReducer: { platformIconMapping } }) => platformIconMapping\n  );\n  const defaultIconI = sourceId\n    ? platformIconMapping[sourceId]\n    : CardIconDefault;\n\n  const defaultIcon = isStandalone() ? CardIconDefaultS : defaultIconI;\n\n  return (\n    <CardIconContainer height={height}>\n      {!isLoaded && <IconPlaceholder height={height} />}\n      <StyledLazyLoadImage\n        threshold={2000}\n        delayTime={0}\n        hidden={!isLoaded}\n        height={isLoaded ? height : 0}\n        onError={() => setUnknown(true)}\n        onLoad={() => setLoaded(true)}\n        src={!src || isUnknown ? defaultIcon : src}\n      />\n    </CardIconContainer>\n  );\n};\n\nexport default CardIcon;\n","import {\n  Workflow,\n  ResourceObject\n} from '@redhat-cloud-services/approval-client';\nimport { getWorkflowApi, getAxiosInstance } from '../shared/user-login';\nimport { APPROVAL_API_BASE } from '../../utilities/constants';\nimport { defaultSettings, PaginationConfiguration } from '../shared/pagination';\nimport {\n  ApiCollectionResponse,\n  SelectOptions,\n  InternalResourceObject\n} from '../../types/common-types';\n\nexport const getApprovalWorkflows = (): Promise<ApiCollectionResponse<\n  Workflow\n>> =>\n  (getWorkflowApi().listWorkflows() as unknown) as Promise<\n    ApiCollectionResponse<Workflow>\n  >;\n\nexport const loadWorkflowOptions = (\n  filterValue = '',\n  initialLookup: string[] = []\n): Promise<SelectOptions> => {\n  const initialLookupQuery = initialLookup\n    .map((workflow) => `filter[id][]=${workflow}`)\n    .join('&');\n\n  return getAxiosInstance()\n    .get(\n      `${APPROVAL_API_BASE}/workflows?filter[name][contains]=${filterValue}&${initialLookupQuery ||\n        ''}`\n    )\n    .then(({ data }) =>\n      data.map(({ id, name }: Workflow) => ({ label: name, value: id }))\n    );\n};\n\nexport const updateWorkflows = (\n  unlinkIds: string[],\n  linkIds: string[],\n  resourceObject: ResourceObject\n): Promise<void[]> => {\n  const unlinkPromises = unlinkIds\n    ? unlinkIds.map((wf) => getWorkflowApi().unlinkWorkflow(wf, resourceObject))\n    : [];\n  const linkPromises = linkIds\n    ? linkIds.map((wf) => getWorkflowApi().linkWorkflow(wf, resourceObject))\n    : [];\n  return (Promise.all([\n    ...unlinkPromises,\n    ...linkPromises\n  ]) as unknown) as Promise<void[]>;\n};\n\nexport const listWorkflowsForObject = (\n  resourceObject: InternalResourceObject,\n  pagination: PaginationConfiguration = {\n    limit: defaultSettings.limit,\n    offset: defaultSettings.offset\n  },\n  filter = ''\n): Promise<ApiCollectionResponse<Workflow>> => {\n  const objectQuery = `app_name=${resourceObject.appName}&object_type=${resourceObject.objectType}&object_id=${resourceObject.objectId}`;\n  const paginationQuery = `&limit=${pagination.limit}&offset=${pagination.offset}`;\n  const filterQuery = `&filter[name][contains]=${filter}`;\n  return getAxiosInstance().get(\n    `${APPROVAL_API_BASE}/workflows?${objectQuery}${filterQuery}${paginationQuery}`\n  );\n};\n","import { I18nFormatMessage } from '../redux/reducers/i18n-reducer';\nimport { GetReduxState } from '../types/redux';\n\nconst extractFormatMessage = (getState: GetReduxState): I18nFormatMessage =>\n  getState().i18nReducer.formatMessage!;\n\nexport default extractFormatMessage;\n","import { defineMessages } from 'react-intl';\n\nconst approvalMessages = defineMessages({\n  unlinkNotification: {\n    id: 'approval.notifications.unlink',\n    defaultMessage: 'Approval processes were unlinked successfully.'\n  },\n  linkNotification: {\n    id: 'approval.notifications.link',\n    defaultMessage: 'Approval processes were linked successfully.'\n  },\n  setWorkflow: {\n    id: 'approval.workflows.set',\n    defaultMessage:\n      'Select approval processes for <strong>{objectName}</strong>'\n  },\n  currentWorkflows: {\n    id: 'approval.workflows.current',\n    defaultMessage: 'Current approval processes'\n  }\n});\n\nexport default approvalMessages;\n","import { Dispatch } from 'redux';\nimport {\n  ApiCollectionResponse,\n  ApiMetadata,\n  InternalResourceObject\n} from '../../types/common-types';\nimport { ASYNC_ACTIONS } from '../action-types/approval-action-types';\nimport * as ApprovalHelper from '../../helpers/approval/approval-helper';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport extractFormatMessage from '../../utilities/extract-format-message';\nimport approvalMessages from '../../messages/approval.messages';\nimport { AsyncMiddlewareAction, GetReduxState } from '../../types/redux';\nimport {\n  ResourceObject,\n  Workflow\n} from '@redhat-cloud-services/approval-client';\n\nexport const fetchWorkflows = (): AsyncMiddlewareAction<{\n  value?: string;\n  label?: string;\n}[]> => ({\n  type: ASYNC_ACTIONS.FETCH_WORKFLOWS,\n  payload: ApprovalHelper.getApprovalWorkflows().then(({ data }) =>\n    data.map(({ id, name }) => ({ value: id, label: name }))\n  )\n});\n\nexport const updateWorkflows = (\n  toLinkIds: string[],\n  toUnlinkIds: string[],\n  resourceObject: ResourceObject\n) => (dispatch: Dispatch, getState: GetReduxState): AsyncMiddlewareAction => {\n  const formatMessage = extractFormatMessage(getState);\n  return dispatch({\n    type: ASYNC_ACTIONS.UPDATE_WORKFLOWS,\n    payload: ApprovalHelper.updateWorkflows(\n      toUnlinkIds,\n      toLinkIds,\n      resourceObject\n    ).then(() =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Success updating approval process',\n          dismissable: true,\n          description: `${\n            toUnlinkIds.length > 0\n              ? formatMessage &&\n                formatMessage(approvalMessages.unlinkNotification, {\n                  count: toUnlinkIds.length\n                })\n              : ''\n          }\n          ${\n            toLinkIds.length > 0\n              ? formatMessage(approvalMessages.linkNotification, {\n                  count: toLinkIds.length\n                })\n              : ''\n          }`\n        })\n      )\n    )\n  });\n};\n\nexport const listWorkflowsForObject = (\n  resourceObject: InternalResourceObject,\n  meta: ApiMetadata = {\n    limit: defaultSettings.limit,\n    offset: defaultSettings.offset\n  },\n  filter = ''\n): AsyncMiddlewareAction<ApiCollectionResponse<Workflow>> => ({\n  type: ASYNC_ACTIONS.RESOLVE_WORKFLOWS,\n  payload: ApprovalHelper.listWorkflowsForObject(resourceObject, meta, filter)\n});\n","import {\n  Workflow,\n  ResourceObject\n} from '@redhat-cloud-services/approval-client';\nimport { getWorkflowApi, getAxiosInstance } from '../shared/user-login';\nimport { APPROVAL_API_BASE } from '../../utilities/constants';\nimport { defaultSettings, PaginationConfiguration } from '../shared/pagination';\nimport {\n  ApiCollectionResponse,\n  SelectOptions,\n  InternalResourceObject\n} from '../../types/common-types';\n\nexport const getApprovalWorkflows = (): Promise<ApiCollectionResponse<\n  Workflow\n>> => getAxiosInstance().get(`${APPROVAL_API_BASE}/workflows/`);\n\nexport const loadWorkflowOptions = (\n  filterValue = '',\n  initialLookup: string[] = []\n): Promise<SelectOptions> => {\n  const initialLookupQuery = initialLookup\n    .map((workflow) => `id=${workflow}`)\n    .join('&');\n\n  return getAxiosInstance()\n    .get(\n      `${APPROVAL_API_BASE}/workflows?name=${filterValue}&${initialLookupQuery ||\n        ''}`\n    )\n    .then(({ results }) =>\n      results.map(({ id, name }: Workflow) => ({ label: name, value: id }))\n    );\n};\n\nexport const linkWorkflow = (wf: string, resourceObject: ResourceObject) =>\n  getAxiosInstance().post(\n    `${APPROVAL_API_BASE}/workflows/${wf}/link/`,\n    resourceObject\n  );\n\nexport const unlinkWorkflow = (wf: string, resourceObject: ResourceObject) =>\n  getAxiosInstance().post(\n    `${APPROVAL_API_BASE}/workflows/${wf}/unlink/`,\n    resourceObject\n  );\n\nexport const updateWorkflows = (\n  unlinkIds: string[],\n  linkIds: string[],\n  resourceObject: ResourceObject\n): Promise<void[]> => {\n  const unlinkPromises = unlinkIds\n    ? unlinkIds.map((wf) => unlinkWorkflow(wf, resourceObject))\n    : [];\n  const linkPromises = linkIds\n    ? linkIds.map((wf) => linkWorkflow(wf, resourceObject))\n    : [];\n  return (Promise.all([\n    ...unlinkPromises,\n    ...linkPromises\n  ]) as unknown) as Promise<void[]>;\n};\n\nexport const listWorkflowsForObject = (\n  resourceObject: InternalResourceObject,\n  pagination: PaginationConfiguration = {\n    limit: defaultSettings.limit,\n    offset: defaultSettings.offset\n  },\n  filter = ''\n): Promise<ApiCollectionResponse<Workflow>> => {\n  const objectQuery = `app_name=${resourceObject.appName}&object_type=${resourceObject.objectType}&object_id=${resourceObject.objectId}`;\n  const paginationQuery = `&page_size=${\n    pagination.limit\n  }&page=${pagination.offset || 1}`;\n  const filterQuery = `&filter[name][contains]=${filter}`;\n  return getAxiosInstance().get(\n    `${APPROVAL_API_BASE}/workflows?${objectQuery}${filterQuery}${paginationQuery}`\n  );\n};\n","/* eslint-disable react/prop-types */\nimport React, { ReactNode, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateWorkflows } from '../../redux/actions/approval-actions';\nimport { updateWorkflows as updateWorkflowsS } from '../../redux/actions/approval-actions-s';\nimport { APP_NAME } from '../../utilities/constants';\nimport {\n  loadWorkflowOptions,\n  listWorkflowsForObject\n} from '../../helpers/approval/approval-helper';\nimport {\n  loadWorkflowOptions as loadWorkflowOptionsS,\n  listWorkflowsForObject as listWorkflowsForObjectS\n} from '../../helpers/approval/approval-helper-s';\nimport useQuery from '../../utilities/use-query';\nimport useEnhancedHistory from '../../utilities/use-enhanced-history';\nimport { defineMessage } from 'react-intl';\nimport approvalMessages from '../../messages/approval.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport TaggingModal, { Tag } from './tagging-modal';\nimport { Bold } from '../../presentational-components/shared/intl-rich-text-components';\nimport { CatalogLinkTo } from '../common/catalog-link';\nimport { isStandalone } from '../../helpers/shared/helpers';\n\nexport interface EditApprovalWorkflowProps {\n  pushParam: CatalogLinkTo;\n  objectType: keyof typeof APP_NAME;\n  objectName: (node: string) => ReactNode;\n  removeSearch?: boolean;\n  querySelector: 'portfolio' | 'platform' | 'inventory' | 'portfolio-item';\n  keepHash?: boolean;\n  postMethod?: () => any;\n  onClose?: () => any;\n}\nconst EditApprovalWorkflow: React.ComponentType<EditApprovalWorkflowProps> = ({\n  objectType,\n  removeSearch,\n  keepHash = false,\n  querySelector,\n  pushParam,\n  objectName = () => objectType,\n  postMethod,\n  onClose\n}) => {\n  const formatMessage = useFormatMessage();\n  const { current: modalTitle } = useRef(\n    formatMessage(\n      defineMessage({\n        id: 'workflows.modal.title',\n        defaultMessage: 'Set approval process'\n      })\n    )\n  );\n  const dispatch = useDispatch();\n  const history = useEnhancedHistory({ removeSearch, keepHash });\n  const [query] = useQuery([querySelector]);\n\n  const close = () => {\n    onClose && onClose();\n    history.push(pushParam);\n  };\n\n  const onSubmit = (toLink: string[], toUnlink: string[]) => {\n    close();\n    const t = dispatch(\n      isStandalone()\n        ? updateWorkflowsS(toLink, toUnlink, {\n            object_type: objectType,\n            app_name: APP_NAME[objectType],\n            object_id: query[querySelector]\n          })\n        : updateWorkflows(toLink, toUnlink, {\n            object_type: objectType,\n            app_name: APP_NAME[objectType],\n            object_id: query[querySelector]\n          })\n    );\n    ((t as unknown) as Promise<any>).then(() => {\n      if (postMethod) {\n        dispatch(postMethod());\n      }\n    });\n  };\n\n  return (\n    <TaggingModal\n      title={modalTitle as string}\n      onClose={close}\n      onSubmit={onSubmit}\n      getInitialTags={() => {\n        return isStandalone()\n          ? (listWorkflowsForObjectS({\n              objectType,\n              appName: APP_NAME[objectType],\n              objectId: query[querySelector]\n            }).then(({ results }) => results) as Promise<Tag[]>)\n          : (listWorkflowsForObject({\n              objectType,\n              appName: APP_NAME[objectType],\n              objectId: query[querySelector]\n            }).then(({ data }) => data) as Promise<Tag[]>);\n      }}\n      loadTags={isStandalone() ? loadWorkflowOptionsS : loadWorkflowOptions}\n      subTitle={formatMessage(approvalMessages.setWorkflow, {\n        strong: Bold,\n        objectName: objectName(query[querySelector])\n      })}\n      existingTagsMessage={formatMessage(approvalMessages.currentWorkflows)}\n    />\n  );\n};\n\nexport default EditApprovalWorkflow;\n","import { Dispatch } from 'redux';\nimport {\n  ApiCollectionResponse,\n  ApiMetadata,\n  InternalResourceObject\n} from '../../types/common-types';\nimport { ASYNC_ACTIONS } from '../action-types/approval-action-types';\nimport * as ApprovalHelper from '../../helpers/approval/approval-helper-s';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport extractFormatMessage from '../../utilities/extract-format-message';\nimport approvalMessages from '../../messages/approval.messages';\nimport { AsyncMiddlewareAction, GetReduxState } from '../../types/redux';\nimport {\n  ResourceObject,\n  Workflow\n} from '@redhat-cloud-services/approval-client';\n\nexport const fetchWorkflows = (): AsyncMiddlewareAction<{\n  value?: string;\n  label?: string;\n}[]> => ({\n  type: ASYNC_ACTIONS.FETCH_WORKFLOWS,\n  payload: ApprovalHelper.getApprovalWorkflows().then(({ results }) =>\n    results.map(({ id, name }) => ({ value: id, label: name }))\n  )\n});\n\nexport const updateWorkflows = (\n  toLinkIds: string[],\n  toUnlinkIds: string[],\n  resourceObject: ResourceObject\n) => (dispatch: Dispatch, getState: GetReduxState): AsyncMiddlewareAction => {\n  const formatMessage = extractFormatMessage(getState);\n  return dispatch({\n    type: ASYNC_ACTIONS.UPDATE_WORKFLOWS,\n    payload: ApprovalHelper.updateWorkflows(\n      toUnlinkIds,\n      toLinkIds,\n      resourceObject\n    ).then(() =>\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'Success updating approval process',\n          dismissable: true,\n          description: `${\n            toUnlinkIds.length > 0\n              ? formatMessage &&\n                formatMessage(approvalMessages.unlinkNotification, {\n                  count: toUnlinkIds.length\n                })\n              : ''\n          }\n          ${\n            toLinkIds.length > 0\n              ? formatMessage(approvalMessages.linkNotification, {\n                  count: toLinkIds.length\n                })\n              : ''\n          }`\n        })\n      )\n    )\n  });\n};\n\nexport const listWorkflowsForObject = (\n  resourceObject: InternalResourceObject,\n  meta: ApiMetadata = {\n    limit: defaultSettings.limit,\n    offset: defaultSettings.offset\n  },\n  filter = ''\n): AsyncMiddlewareAction<ApiCollectionResponse<Workflow>> => ({\n  type: ASYNC_ACTIONS.RESOLVE_WORKFLOWS,\n  payload: ApprovalHelper.listWorkflowsForObject(resourceObject, meta, filter)\n});\n"],"names":["DetailToolbarActions","copyUrl","orderUrl","editUrl","workflowUrl","editSurveyUrl","isOpen","setOpen","isFetching","availability","orderable","userCapabilities","canLinkOrderProcesses","formatMessage","useFormatMessage","dropdownItems","update","push","DropdownItem","key","id","component","pathname","preserveSearch","actionMessages","role","copy","set_approval","orderProcessAction","orderProcessesMessages","PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE","portfolioMessages","Fragment","LevelItem","isDisabled","showSpinner","variant","ouiaId","style","marginLeft","length","Dropdown","isPlain","onToggle","onSelect","position","DropdownPosition","toggle","KebabToggle","propTypes","PropTypes","isRequired","defaultProps","PortfolioItemIconItem","product","src","isStandalone","icon_url","CATALOG_API_BASE","sourceId","service_offering_source_ref","height","PortfolioItemDetailToolbar","url","fromProducts","breadcrumbfragments","useLocation","paddingBottom","PORTFOLIO_ITEM_ROUTE_EDIT","breadcrumbs","Level","className","Switch","Route","path","exact","title","noData","grow","alignStart","TextContent","Text","TextVariants","name","minHeight","open","distributor","metadata","SurveyEditorDropdown","handleResetSurvey","useState","setIsOpen","onClick","SurveyEditingToolbar","handleSaveSurvey","closeUrl","search","isValid","modified","Flex","Link","to","Button","messages","defaultMessage","ItemDetailInfoBar","source","portfolio","DateFormat","date","created_at","updated_at","fields","label","validate","type","changeIcon","resetIcon","UploadButton","styled","UploadIconWrapper","ImagePreview","StyledDropdown","IconUpload","uploadIcon","enableReset","children","inputRef","useRef","image","setImage","isUploading","setIsUploading","dispatch","useDispatch","current","click","iconMessages","undefined","then","accept","onChange","event","target","files","error","addNotification","description","data","errors","detail","dismissable","ref","hidden","disabled","DropdownToggle","toggleIndicator","stopPropagation","Spinner","size","URL","createObjectURL","EditPortfolioItem","cancelUrl","owner","useHistory","icon_id","icon_src","Stack","hasGutter","StackItem","initialValues","onSubmit","values","updatePortfolioItemS","user_capabilities","updatePortfolioItem","schema","editPortfolioItemSchema","templateProps","disableSubmit","onCancel","ItemDetailDescription","detailPaths","pushParam","objectType","PORTFOLIO_ITEM_RESOURCE_TYPE","objectId","objectName","querySelector","render","long_description","support_url","href","rel","documentation_url","requiredCapabilities","SurveyEditor","lazy","SurveyEditorS","requiredParams","setIsFetching","useQuery","queryValues","useRouteMatch","PORTFOLIO_ITEM_ROUTE","portfolioItemData","useSelector","portfolioReducer","portfolioItem","selectedPortfolio","userPermissions","useContext","UserContext","permissions","hasPermission","fetchData","skipLoading","getPortfolioItemDetailS","getPortfolioItemDetail","useEffect","Object","keys","Section","availability_status","unavailable","filter","notFound","map","object","Alert","isInline","file","uploadPortfolioItemIconS","portfolioItemId","uploadPortfolioItemIcon","SurveyEditorComponent","Suspense","fallback","USER_CAPABILITIES_PLACEHOLDER","Grid","GridItem","md","lg","resetPortfolioItemIconS","resetPortfolioItemIcon","SpinnerButton","SpinnerLabel","ButtonWithSpinner","forwardRef","props","displayName","LazyLoadImage","CardIconContainer","isLoaded","setLoaded","isUnknown","setUnknown","platformIconMapping","defaultIconI","defaultIcon","threshold","delayTime","onError","onLoad","loadWorkflowOptions","filterValue","initialLookup","initialLookupQuery","workflow","join","get","value","updateWorkflows","unlinkIds","linkIds","resourceObject","unlinkPromises","wf","unlinkWorkflow","linkPromises","linkWorkflow","Promise","all","getState","i18nReducer","unlinkNotification","linkNotification","setWorkflow","currentWorkflows","post","removeSearch","keepHash","postMethod","onClose","modalTitle","history","query","close","toLink","toUnlink","toLinkIds","toUnlinkIds","object_type","app_name","object_id","payload","count","getInitialTags","pagination","limit","offset","objectQuery","appName","paginationQuery","filterQuery","listWorkflowsForObject","loadTags","subTitle","strong","existingTagsMessage"],"sourceRoot":""}