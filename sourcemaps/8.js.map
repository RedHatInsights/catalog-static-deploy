{"version":3,"sources":["webpack:///./src/PresentationalComponents/Platform/PlatformToolbar.js","webpack:///./src/assets/images/platform-default.svg","webpack:///./src/assets/images/platform-openshift.svg","webpack:///./src/assets/images/platform-amazon.png","webpack:///./src/PresentationalComponents/Platform/PlatformCard.js","webpack:///./src/SmartComponents/Platform/Platforms.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_2__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_3__","_Shared_top_toolbar__WEBPACK_IMPORTED_MODULE_4__","_Shared_FilterToolbarItem__WEBPACK_IMPORTED_MODULE_5__","_Shared_OrderToolbarItem__WEBPACK_IMPORTED_MODULE_6__","PlatformToolbar","_ref","searchValue","onFilterChange","a","createElement","placeholder","propTypes","PropTypes","string","func","isRequired","module","exports","p","TO_DISPLAY","platformTypeImg","sourceTypeId","OpenshiftPlatformImg","AmazonPlatformImg","DefaultPlatformImg","PlatformCard","name","id","props","objectWithoutProperties_default","react_default","GridItem","sm","md","lg","xl","Link","to","concat","className","Card","key","CardHeader","ImageWithDefault","src","source_type_id","defaultSrc","width","height","CardBody","CardCommon","extends_default","objectSpread_default","toDisplay","CardFooter","history","object","imageUrl","Platforms","filterValue","isOpen","_this","fetchPlatforms","setState","this","fetchData","scrollToTop","Level","LevelItem","TextContent","Text","component","TextVariants","h2","_this2","filteredItems","items","platforms","filter","toLowerCase","includes","state","map","item","Platform_PlatformCard","isLoading","insights_frontend_components","handleFilterChange","renderToolbar","ContentGallery","MainModal","Component","array","bool","searchFilter","showModal","hideModal","withRouter","connect","_ref2","_ref2$platformReducer","platformReducer","dispatch","apiProps"],"mappings":"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","file":"js/8.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Level, LevelItem } from '@patternfly/react-core';\nimport TopToolbar from '../Shared/top-toolbar';\nimport FilterToolbarItem from '../Shared/FilterToolbarItem';\nimport OrderToolbarItem from '../Shared/OrderToolbarItem';\n\nconst PlatformToolbar = ({ searchValue, onFilterChange }) => (\n  <TopToolbar>\n    <Level>\n      <LevelItem>\n        <FilterToolbarItem searchValue={ searchValue } onFilterChange={ onFilterChange } placeholder=\"Find a product\" />\n      </LevelItem>\n      <LevelItem>\n        <OrderToolbarItem />\n      </LevelItem>\n    </Level>\n  </TopToolbar>\n);\n\nPlatformToolbar.propTypes = {\n  searchValue: PropTypes.string,\n  onFilterChange: PropTypes.func.isRequired\n};\n\nexport default PlatformToolbar;\n","module.exports = __webpack_public_path__ + \"fonts/platform-default.svg\";","module.exports = __webpack_public_path__ + \"fonts/platform-openshift.svg\";","module.exports = __webpack_public_path__ + \"fonts/platform-amazon.png\";","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { GridItem, Card, CardHeader, CardBody, CardFooter } from '@patternfly/react-core';\nimport DefaultPlatformImg from '../../assets/images/platform-default.svg';\nimport OpenshiftPlatformImg from '../../assets/images/platform-openshift.svg';\nimport AmazonPlatformImg from '../../assets/images/platform-amazon.png';\nimport ImageWithDefault from '../Shared/ImageWithDefault';\nimport ItemDetails from '../Shared/CardCommon';\nimport './platformcard.scss';\n\nconst TO_DISPLAY = [ 'description', 'modified' ];\n\n// TO DO - use webpack to load all images\nconst platformTypeImg = (sourceTypeId) => {\n  switch (sourceTypeId) {\n    case '1':\n      return OpenshiftPlatformImg;\n    case '2':\n      return AmazonPlatformImg;\n    default:\n      return DefaultPlatformImg;\n  }\n};\n\nconst PlatformCard = ({ name, id, ...props }) => (\n  <GridItem sm={ 6 } md={ 4 } lg={ 4 } xl={ 3 }>\n    <Link to={ `/platform/${id}` } className=\"card-link\">\n      <Card key={ id }>\n        <CardHeader className=\"pcard_header\">\n          <ImageWithDefault src={ platformTypeImg(props.source_type_id || '0') } defaultSrc={ DefaultPlatformImg } width=\"80\" height=\"40\"/>\n        </CardHeader>\n        <CardBody className=\"pcard_body\">\n          <h4>{ name }</h4>\n          <ItemDetails { ...{ name, ...props } } toDisplay={ TO_DISPLAY } />\n        </CardBody>\n        <CardFooter/>\n      </Card>\n    </Link>\n  </GridItem>\n);\n\nPlatformCard.propTypes = {\n  history: propTypes.object,\n  imageUrl: propTypes.string,\n  name: propTypes.string,\n  source_type_id: propTypes.string,\n  id: propTypes.string\n};\n\nexport default PlatformCard;\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Section } from '@red-hat-insights/insights-frontend-components';\nimport { Text, TextContent, TextVariants, Level, LevelItem } from '@patternfly/react-core';\nimport ContentGallery from '../../SmartComponents/ContentGallery/ContentGallery';\nimport PlatformCard from '../../PresentationalComponents/Platform/PlatformCard';\nimport PlatformToolbar from '../../PresentationalComponents/Platform/PlatformToolbar';\nimport { fetchPlatforms } from '../../redux/Actions/PlatformActions';\nimport MainModal from '../Common/MainModal';\nimport { scrollToTop } from '../../Helpers/Shared/helpers';\n\nclass Platforms extends Component {\n    state = {\n      filterValue: '',\n      isOpen: false\n    };\n\n    fetchData = () => this.props.fetchPlatforms();\n\n    componentDidMount() {\n      this.fetchData();\n      scrollToTop();\n    }\n\n    handleFilterChange = filterValue => this.setState({ filterValue })\n\n    renderToolbar() {\n      return (\n        <Level className=\"pf-u-pt-md pf-u-pr-xl pf-u-pl-xl\">\n          <LevelItem>\n            <TextContent>\n              <Text component={ TextVariants.h2 }>All Platforms </Text>\n            </TextContent>\n          </LevelItem>\n        </Level>\n      );\n    }\n\n    render() {\n      let filteredItems = {\n        items: this.props.platforms\n        .filter(({ name }) => name.toLowerCase().includes(this.state.filterValue.toLowerCase()))\n        .map((item) => <PlatformCard key={ item.id } { ...item } />),\n        isLoading: this.props.isLoading\n      };\n\n      return (\n        <Section>\n          <PlatformToolbar onFilterChange={ this.handleFilterChange } searchValue={ this.state.filterValue } />\n          { this.renderToolbar() }\n          <ContentGallery { ...filteredItems } />\n          <MainModal />\n        </Section>\n      );\n    }\n}\n\nconst mapStateToProps = ({ platformReducer: { platforms, isLoading, filterValue }}) => ({\n  platforms,\n  isLoading,\n  searchFilter: filterValue\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchPlatforms: apiProps => dispatch(fetchPlatforms(apiProps))\n  };\n};\n\nPlatforms.propTypes = {\n  filteredItems: propTypes.array,\n  platforms: propTypes.array,\n  isLoading: propTypes.bool,\n  searchFilter: propTypes.string,\n  showModal: propTypes.func,\n  hideModal: propTypes.func,\n  history: propTypes.object,\n  fetchPlatforms: propTypes.func\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Platforms)\n);\n"],"sourceRoot":""}