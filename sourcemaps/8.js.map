{"version":3,"sources":["webpack:///./src/Helpers/Order/OrderHelper.js","webpack:///./src/redux/Actions/OrderActions.js","webpack:///./src/SmartComponents/ContentGallery/ContentList.js","webpack:///./src/SmartComponents/Order/Orders.js"],"names":["api","ServicePortalApi","_callee","parameters","order","orderItem","regenerator_default","a","wrap","_context","prev","next","newOrder","sent","count","provider_control_parameters","namespace","portfolio_item_id","service_plan_ref","service_parameters","addToOrder","id","abrupt","submitOrder","then","result","error","console","stop","this","instance","basePath","SERVICE_PORTAL_API_BASE","__webpack_require__","d","__webpack_exports__","OrderActions_fetchServicePlans","OrderActions_fetchOrderList","OrderActions_sendSubmitOrder","fetchServicePlans","portfolioItemId","type","ActionTypes","payload","fetchPlansWithPortfolioItemId","data","OrderHelper","fetchOrderList","listOrders","sendSubmitOrder","apiProps","Promise","resolve","_x","_sendSubmitOrder","apply","arguments","ContentList","_ref","isLoading","items","length","sort","b","dateA","Date","created_at","react_default","createElement","Fragment","Bullseye","color","insights_frontend_components","header","Object","keys","rows","map","item","row","cells","values","val","undefined","toString","title","propTypes","bool","array","Orders","props","fetchOrders","orderList","objectSpread_default","className","ContentGallery_ContentList","Component","object","searchFilter","string","func","connect","_ref$orderReducer","orderReducer","orders","dispatch"],"mappings":"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","file":"js/8.js","sourcesContent":["/* eslint camelcase: 0 */\nimport * as ServicePortalApi from '@manageiq/service-portal-api';\nimport { SERVICE_PORTAL_API_BASE } from '../../Utilities/Constants';\n\nlet api = new ServicePortalApi.AdminsApi();\n\nconst sspDefaultClient = ServicePortalApi.ApiClient.instance;\nsspDefaultClient.basePath = SERVICE_PORTAL_API_BASE;\n\nexport function getServicePlans(portfolioItemId) {\n  return api.fetchPlansWithPortfolioItemId(portfolioItemId).then(data => data, error => console.error(error));\n}\n\nexport function listOrders() {\n  return api.listOrders().then(data => data, error => console.error(error));\n}\n\nexport async function sendSubmitOrder(parameters) {\n  let order = await api.newOrder();\n  let orderItem = new ServicePortalApi.OrderItem;\n  orderItem.count = 1;\n  orderItem.provider_control_parameters =  { namespace: 'default' };\n  orderItem.portfolio_item_id = parameters.portfolio_item_id;\n  orderItem.service_plan_ref = parameters.service_plan_ref;\n  orderItem.service_parameters = parameters.service_parameters;\n  await api.addToOrder(order.id, orderItem);\n  return api.submitOrder(order.id).then(result => result, error => console.error(error));\n}\n","import * as ActionTypes from '../ActionTypes';\nimport * as OrderHelper from '../../Helpers/Order/OrderHelper';\n\nexport const fetchServicePlans = (portfolioItemId) => ({\n  type: ActionTypes.FETCH_SERVICE_PLANS,\n  payload: OrderHelper.getServicePlans(portfolioItemId)\n});\n\nexport const fetchOrderList = () => ({\n  type: ActionTypes.LIST_ORDERS,\n  payload: OrderHelper.listOrders()\n});\n\nexport const updateServiceData = (data) => ({\n  type: ActionTypes.UPDATE_SERVICE_DATA,\n  payload: { serviceData: data }\n});\n\nexport const setSelectedPlan = (data) => ({\n  type: ActionTypes.SET_SELECTED_PLAN,\n  payload: data\n});\n\nexport const sendSubmitOrder = apiProps => ({\n  type: ActionTypes.SUBMIT_SERVICE_ORDER,\n  payload: new Promise(resolve => {\n    resolve(OrderHelper.sendSubmitOrder(apiProps));\n  })\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { PageHeader, PageHeaderTitle, Table, Section } from '@red-hat-insights/insights-frontend-components';\nimport { Bullseye } from '@patternfly/react-core';\n\nconst ContentList = ({ isLoading, items }) => {\n  if (isLoading || (items && items.length > 0)) {\n    if (items && items.length > 0)\n    {\n      items.sort(function (a, b) {\n        let dateA = new Date(a.created_at);\n        let dateB = new Date(b.created_at);\n        return dateB - dateA; //sort by date descending\n      });\n    };\n\n    return (\n      <React.Fragment>\n        <br />\n        <Bullseye>\n          <div>\n            { isLoading && (<span color={ '#00b9e4' }> Loading...</span>) }\n          </div>\n        </Bullseye>\n        <Section type='content'>\n          { (items && items.length > 0) && (\n            <Table\n              header={ Object.keys(items[0]) }\n              rows={ items.map(item => {\n                let row = {};\n                row.cells = (Object.values(item)).map(val => val === undefined ? '' : val.toString());\n                return row;\n              }) }\n            />)\n          }\n        </Section>\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <PageHeader>\n      <PageHeaderTitle title={ 'No Orders' }/>\n    </PageHeader>\n  );\n};\n\nContentList.propTypes = {\n  isLoading: propTypes.bool,\n  items: propTypes.array\n};\nexport default ContentList;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchOrderList } from '../../redux/Actions/OrderActions';\nimport ContentList from '../ContentGallery/ContentList';\nimport propTypes from 'prop-types';\n\nclass Orders extends Component {\n\n  componentDidMount() {\n    this.props.fetchOrders();\n  }\n\n  render() {\n    let orderList = {\n      ...this.props.orderList,\n      isLoading: this.props.isLoading\n    };\n    return (\n      <div className=\"pf-l-stack__item pf-m-secondary \">\n        <ContentList { ...orderList } />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ orderReducer: { orders, isLoading }}) => ({\n  orderList: {\n    items: orders\n  },\n  isLoading\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchOrders: () => dispatch(fetchOrderList())\n});\n\nOrders.propTypes = {\n  orderList: propTypes.object,\n  isLoading: propTypes.bool,\n  searchFilter: propTypes.string,\n  fetchOrders: propTypes.func\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Orders);\n"],"sourceRoot":""}