{"version":3,"file":"js/portfolio-item-detail.20891e5fc3f5b7cbd7bb.js","mappings":"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","sources":["webpack:///./src/smart-components/portfolio/portfolio-item-detail/detail-toolbar-actions.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/portfolio-item-detail-toolbar.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/item-detail-info-bar.js","webpack:///./src/forms/edit-portfolio-item-form.schema.ts","webpack:///./src/messages/icon.messages.ts","webpack:///./src/smart-components/portfolio/portfolio-item-detail/icon-upload.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/edit-portfolio-item.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/item-detail-description.js","webpack:///./src/smart-components/portfolio/portfolio-item-detail/portfolio-item-detail.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  KebabToggle,\n  LevelItem\n} from '@patternfly/react-core';\nimport ButtonWithSpinner from '../../../presentational-components/shared/button-with-spinner';\nimport CatalogLink from '../../common/catalog-link';\nimport actionMessages from '../../../messages/actions.messages';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport orderProcessesMessages from '../../../messages/order-processes.messages';\nimport { PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE } from '../../../constants/routes';\n\nconst DetailToolbarActions = ({\n  copyUrl,\n  orderUrl,\n  editUrl,\n  workflowUrl,\n  editSurveyUrl,\n  isOpen,\n  setOpen,\n  isFetching,\n  availability,\n  orderable,\n  userCapabilities: { update, copy, set_approval },\n  canLinkOrderProcesses\n}) => {\n  const formatMessage = useFormatMessage();\n  const dropdownItems = [];\n\n  if (update) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Edit Portfolio\"\n        key=\"edit-portfolio-item\"\n        id=\"edit-portfolio-item\"\n        component={\n          <CatalogLink pathname={editUrl} preserveSearch>\n            {formatMessage(actionMessages.edit)}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (copy) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Copy Portfolio\"\n        key=\"copy-portfolio-item\"\n        id=\"copy-portfolio-item\"\n        component={\n          <CatalogLink pathname={copyUrl} preserveSearch>\n            {formatMessage(actionMessages.copy)}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (set_approval) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Set approval\"\n        key=\"set-approval_workflow\"\n        id=\"set-approval_workflow\"\n        component={\n          <CatalogLink pathname={workflowUrl} preserveSearch>\n            {formatMessage(actionMessages.setApproval)}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (update && canLinkOrderProcesses) {\n    const orderProcessAction = formatMessage(\n      orderProcessesMessages.setOrderProcess\n    );\n    dropdownItems.push(\n      <DropdownItem\n        aria-label={orderProcessAction}\n        key=\"attach-order-processes\"\n        id=\"attach-order-processes\"\n        component={\n          <CatalogLink\n            preserveSearch\n            pathname={PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE}\n          >\n            {orderProcessAction}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  if (update) {\n    dropdownItems.push(\n      <DropdownItem\n        aria-label=\"Edit survey\"\n        key=\"edit-survey\"\n        id=\"edit-survey\"\n        component={\n          <CatalogLink pathname={editSurveyUrl} preserveSearch>\n            {formatMessage(portfolioMessages.portfolioItemSurvey)}\n          </CatalogLink>\n        }\n        role=\"link\"\n      />\n    );\n  }\n\n  return (\n    <Fragment>\n      <LevelItem>\n        <CatalogLink\n          isDisabled={\n            isFetching || availability === 'unavailable' || !orderable\n          }\n          pathname={orderUrl}\n          preserveSearch\n        >\n          <ButtonWithSpinner\n            isDisabled={\n              isFetching || availability === 'unavailable' || !orderable\n            }\n            showSpinner={isFetching}\n            variant=\"primary\"\n            id=\"order-portfolio-item\"\n            ouiaId=\"order-portfolio-item\"\n          >\n            {formatMessage(portfolioMessages.portfolioItemOrder)}\n          </ButtonWithSpinner>\n        </CatalogLink>\n      </LevelItem>\n      <LevelItem style={{ marginLeft: 16 }}>\n        {availability !== 'unavailable' && dropdownItems.length > 0 && (\n          <Dropdown\n            isPlain\n            onToggle={setOpen}\n            onSelect={() => setOpen(false)}\n            position={DropdownPosition.right}\n            toggle={\n              <KebabToggle\n                id=\"portfolio-item-actions-toggle\"\n                onToggle={(isOpen) => setOpen(isOpen)}\n              />\n            }\n            isOpen={isOpen}\n            dropdownItems={dropdownItems}\n          />\n        )}\n      </LevelItem>\n    </Fragment>\n  );\n};\n\nDetailToolbarActions.propTypes = {\n  orderUrl: PropTypes.string.isRequired,\n  editUrl: PropTypes.string.isRequired,\n  copyUrl: PropTypes.string.isRequired,\n  editSurveyUrl: PropTypes.string.isRequired,\n  workflowUrl: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool,\n  setOpen: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool,\n  availability: PropTypes.oneOf(['available', 'unavailable']).isRequired,\n  orderable: PropTypes.bool,\n  userCapabilities: PropTypes.shape({\n    update: PropTypes.bool,\n    copy: PropTypes.bool,\n    set_approval: PropTypes.bool\n  }).isRequired,\n  canLinkOrderProcesses: PropTypes.bool\n};\n\nDetailToolbarActions.defaultProps = {\n  isFetching: false,\n  orderable: true,\n  canLinkOrderProcesses: false\n};\n\nexport default DetailToolbarActions;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Link, Switch, useLocation } from 'react-router-dom';\nimport {\n  Level,\n  LevelItem,\n  Text,\n  TextContent,\n  TextVariants,\n  Button,\n  Flex,\n  Dropdown,\n  KebabToggle,\n  DropdownItem\n} from '@patternfly/react-core';\n\nimport DetailToolbarActions from './detail-toolbar-actions';\nimport { CATALOG_API_BASE } from '../../../utilities/constants';\nimport CardIcon from '../../../presentational-components/shared/card-icon';\nimport TopToolbar, {\n  TopToolbarTitle\n} from '../../../presentational-components/shared/top-toolbar';\nimport ButtonWithSpinner from '../../../presentational-components/shared/button-with-spinner';\nimport { StyledLevelItem } from '../../../presentational-components/styled-components/level';\nimport actionMessages from '../../../messages/actions.messages';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport BackToProducts from '../../../presentational-components/portfolio/back-to-products';\nimport { PORTFOLIO_ITEM_ROUTE_EDIT } from '../../../constants/routes';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport { useSelector } from 'react-redux';\n\nconst PortfolioItemIconItem = ({ id, sourceId }) => (\n  <CardIcon\n    src={`${CATALOG_API_BASE}/portfolio_items/${id}/icon`}\n    sourceId={sourceId}\n    height={64}\n  />\n);\n\nPortfolioItemIconItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  sourceId: PropTypes.string.isRequired\n};\n\nexport const PortfolioItemDetailToolbar = ({\n  url,\n  isOpen,\n  product,\n  setOpen,\n  isFetching,\n  availability,\n  userCapabilities,\n  orderable,\n  fromProducts,\n  canLinkOrderProcesses,\n  breadcrumbfragments\n}) => {\n  const formatMessage = useFormatMessage();\n  const { pathname } = useLocation();\n  return (\n    <TopToolbar\n      paddingBottom={pathname !== PORTFOLIO_ITEM_ROUTE_EDIT}\n      breadcrumbs={!fromProducts}\n      breadcrumbfragments={breadcrumbfragments}\n    >\n      {fromProducts && <BackToProducts />}\n      <Level className=\"flex-no-wrap\">\n        <Switch>\n          <Route path={PORTFOLIO_ITEM_ROUTE_EDIT} exact>\n            <TopToolbarTitle\n              title={formatMessage(portfolioMessages.editProduct)}\n              noData\n            />\n          </Route>\n          <Route>\n            <StyledLevelItem grow alignStart className=\"pf-l-flex\">\n              {userCapabilities.update ? (\n                <PortfolioItemIconItem\n                  id={product.id}\n                  sourceId={product.service_offering_source_ref}\n                />\n              ) : (\n                <CardIcon\n                  src={`${CATALOG_API_BASE}/portfolio_items/${product.id}/icon`}\n                  sourceId={product.service_offering_source_ref}\n                  height={64}\n                />\n              )}\n              <TextContent className=\"pf-u-ml-md\">\n                <Text component={TextVariants.h1}>{product.name}</Text>\n              </TextContent>\n            </StyledLevelItem>\n            <LevelItem style={{ minHeight: 36 }} className=\"flex-item-no-wrap\">\n              <Level className=\"flex-no-wrap\">\n                <DetailToolbarActions\n                  isOpen={isOpen}\n                  setOpen={(open) => setOpen(open)}\n                  orderUrl={`${url}/order`}\n                  editUrl={`${url}/edit`}\n                  copyUrl={`${url}/copy`}\n                  editSurveyUrl={`${url}/edit-survey`}\n                  workflowUrl={`${url}/edit-workflow`}\n                  isFetching={isFetching}\n                  availability={availability}\n                  orderable={orderable}\n                  userCapabilities={userCapabilities}\n                  canLinkOrderProcesses={canLinkOrderProcesses}\n                />\n              </Level>\n            </LevelItem>\n          </Route>\n        </Switch>\n      </Level>\n    </TopToolbar>\n  );\n};\n\nPortfolioItemDetailToolbar.propTypes = {\n  url: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool,\n  product: PropTypes.shape({\n    distributor: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    service_offering_source_ref: PropTypes.string.isRequired,\n    metadata: PropTypes.shape({ orderable: PropTypes.bool })\n  }).isRequired,\n  setOpen: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool,\n  availability: PropTypes.oneOf(['available', 'unavailable']).isRequired,\n  userCapabilities: PropTypes.object,\n  fromProducts: PropTypes.bool,\n  orderable: PropTypes.bool,\n  canLinkOrderProcesses: PropTypes.bool\n};\n\nPortfolioItemDetailToolbar.defaultProps = {\n  isFetching: false,\n  orderable: true\n};\n\nconst SurveyEditorDropdown = ({ handleResetSurvey }) => {\n  const formatMessage = useFormatMessage();\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <Dropdown\n      isOpen={isOpen}\n      isPlain\n      onSelect={() => setIsOpen(false)}\n      position=\"right\"\n      toggle={<KebabToggle onToggle={(isOpen) => setIsOpen(isOpen)} />}\n      dropdownItems={[\n        <DropdownItem\n          onClick={handleResetSurvey}\n          component=\"button\"\n          key=\"synchronize\"\n        >\n          {formatMessage(portfolioMessages.restoreSurvey)}\n        </DropdownItem>\n      ]}\n    />\n  );\n};\n\nSurveyEditorDropdown.propTypes = {\n  handleResetSurvey: PropTypes.func.isRequired\n};\n\nexport const SurveyEditingToolbar = ({\n  handleSaveSurvey,\n  breadcrumbfragments,\n  closeUrl,\n  search,\n  isFetching,\n  isValid,\n  modified,\n  breadcrumbs,\n  handleResetSurvey\n}) => {\n  const formatMessage = useFormatMessage();\n  return (\n    <TopToolbar\n      breadcrumbs={breadcrumbs}\n      breadcrumbfragments={breadcrumbfragments}\n    >\n      <Level>\n        <StyledLevelItem grow alignStart className=\"pf-l-flex\">\n          <TextContent>\n            <Text component={TextVariants.h1}>\n              {formatMessage(portfolioMessages.portfolioItemSurvey)}\n            </Text>\n          </TextContent>\n        </StyledLevelItem>\n        <LevelItem>\n          <Flex className=\"align-items-center\">\n            <ButtonWithSpinner\n              variant=\"primary\"\n              ouiaId={'save-survey'}\n              showSpinner={isFetching}\n              isDisabled={isFetching || !isValid}\n              onClick={handleSaveSurvey}\n            >\n              {formatMessage(actionMessages.save)}\n            </ButtonWithSpinner>\n            <Link\n              to={{\n                pathname: closeUrl,\n                search\n              }}\n            >\n              <Button ouiaId={'cancel'} variant=\"link\">\n                Cancel\n              </Button>\n            </Link>\n            {modified && (\n              <SurveyEditorDropdown handleResetSurvey={handleResetSurvey} />\n            )}\n          </Flex>\n        </LevelItem>\n      </Level>\n    </TopToolbar>\n  );\n};\n\nSurveyEditingToolbar.propTypes = {\n  handleSaveSurvey: PropTypes.func.isRequired,\n  closeUrl: PropTypes.string.isRequired,\n  search: PropTypes.string.isRequired,\n  isFetching: PropTypes.bool,\n  isValid: PropTypes.bool,\n  modified: PropTypes.bool,\n  handleResetSurvey: PropTypes.func,\n  fromProducts: PropTypes.bool,\n  canLinkOrderProcesses: PropTypes.bool\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport useFormatMessage from '../../../utilities/use-format-message';\n\nconst messages = {\n  platform: {\n    id: 'portfolio.item.detail.info.platform',\n    defaultMessage: 'Platform'\n  },\n  portfolio: {\n    id: 'portfolio.item.detail.info.portfolio',\n    defaultMessage: 'Portfolio'\n  },\n  vendor: {\n    id: 'portfolio.item.detail.info.vendor',\n    defaultMessage: 'Vendor'\n  },\n  created: {\n    id: 'portfolio.item.detail.info.created',\n    defaultMessage: 'Created'\n  }\n};\n\nconst ItemDetailInfoBar = ({ product, source, portfolio }) => {\n  const formatMessage = useFormatMessage();\n  return (\n    <TextContent className=\"pf-u-mb-md\">\n      <Text className=\"font-14\">{formatMessage(messages.platform)}</Text>\n      <Text\n        id=\"source-name\"\n        className=\"overflow-wrap\"\n        component={TextVariants.p}\n      >\n        {source.name}\n      </Text>\n      <Text className=\"font-14\">{formatMessage(messages.portfolio)}</Text>\n      <Text\n        id=\"portfolio-name\"\n        className=\"overflow-wrap\"\n        component={TextVariants.p}\n      >\n        {portfolio.name}\n      </Text>\n      {product.distributor && (\n        <span id=\"distributor\">\n          <Text className=\"font-14\">{formatMessage(messages.vendor)}</Text>\n          <Text className=\"overflow-wrap\" component={TextVariants.p}>\n            {product.distributor}\n          </Text>\n        </span>\n      )}\n      <Text className=\"font-14\">{formatMessage(messages.created)}</Text>\n      <Text id=\"created_at\" component={TextVariants.p}>\n        <DateFormat variant=\"relative\" date={product.created_at} />\n      </Text>\n    </TextContent>\n  );\n};\n\nItemDetailInfoBar.propTypes = {\n  product: PropTypes.shape({\n    distributor: PropTypes.string,\n    updated_at: PropTypes.string,\n    created_at: PropTypes.string.isRequired\n  }).isRequired,\n  source: PropTypes.shape({\n    name: PropTypes.string\n  }).isRequired,\n  portfolio: PropTypes.shape({\n    name: PropTypes.string\n  }).isRequired\n};\n\nexport default ItemDetailInfoBar;\n","import Schema from '@data-driven-forms/react-form-renderer/common-types/schema';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nconst editPortfolioItemSchema: Schema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'schemas.portfolio-item.name',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }]\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'description',\n      label: 'schemas.portfolio-item.description'\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'long_description',\n      label: 'schemas.portfolio-item.long_description'\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'distributor',\n      label: 'schemas.portfolio-item.vendor'\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'documentation_url',\n      label: 'schemas.portfolio-item.documentation_url',\n      validate: [\n        {\n          type: validatorTypes.URL\n        }\n      ]\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'support_url',\n      label: 'schemas.portfolio-item.support_url',\n      validate: [\n        {\n          type: validatorTypes.URL\n        }\n      ]\n    }\n  ]\n};\n\nexport default editPortfolioItemSchema;\n","import { defineMessages } from 'react-intl';\n\nconst iconMessages = defineMessages({\n  changeIcon: {\n    id: 'icons.actions.change',\n    defaultMessage: 'Upload image'\n  },\n  resetIcon: {\n    id: 'icons.actions.reset',\n    defaultMessage: 'Reset image'\n  }\n});\n\nexport default iconMessages;\n","import React, { useState, useRef } from 'react';\nimport { PencilAltIcon } from '@patternfly/react-icons';\nimport {\n  Spinner,\n  Dropdown,\n  DropdownToggle,\n  DropdownItem\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport styled from 'styled-components';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport iconMessages from '../../../messages/icon.messages';\n\nconst UploadButton = styled.span`\n  border: none;\n  position: absolute;\n  top: 0;\n  left: 0;\n  padding-left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: transparent;\n  &::after {\n    content: ' ';\n    position: absolute;\n    display: block;\n    top: -0.3em;\n    right: -0.3em;\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    background-color: rgba(255, 255, 255, 0.8);\n    z-index: 0;\n  }\n  svg,\n  .pf-c-spinner {\n    z-index: 1;\n    position: absolute;\n    top: 0;\n    right: 0;\n  }\n`;\n\nconst UploadIconWrapper = styled.div`\n  position: relative;\n  display: inline-block;\n`;\n\nconst ImagePreview = styled.img`\n  height: 64px;\n  max-width: 300px;\n  object-fit: cover;\n`;\n\nconst StyledDropdown = styled(Dropdown)`\n  .pf-c-dropdown__menu {\n    top: 24px;\n    left: calc(100% - 24px);\n  }\n`;\n\nconst IconUpload = ({ uploadIcon, resetIcon, enableReset, children }) => {\n  const formatMessage = useFormatMessage();\n  const inputRef = useRef();\n  const [image, setImage] = useState();\n  const [isUploading, setIsUploading] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const handleClick = () => {\n    setIsOpen(false);\n    return inputRef.current.click();\n  };\n\n  const handleReset = () => {\n    setImage(undefined);\n    setIsUploading(true);\n    return resetIcon().then(() => setIsUploading(false));\n  };\n\n  const dispatch = useDispatch();\n\n  const dropdownItems = [\n    <DropdownItem onClick={handleClick} key=\"change-icon\">\n      {formatMessage(iconMessages.changeIcon)}\n    </DropdownItem>,\n    <DropdownItem\n      isDisabled={!enableReset}\n      onClick={handleReset}\n      key=\"reset-icon\"\n    >\n      {formatMessage(iconMessages.resetIcon)}\n    </DropdownItem>\n  ];\n\n  return (\n    <UploadIconWrapper>\n      <input\n        accept=\".png,.svg,.jpeg\"\n        onChange={(event) => {\n          setImage(event.target.files[0]);\n          setIsUploading(true);\n          uploadIcon(event.target.files[0])\n            .then(() => setIsUploading(false))\n            .catch((error) => {\n              dispatch(\n                addNotification({\n                  variant: 'danger',\n                  title: formatMessage(\n                    portfolioMessages.portfolioItemIconTitle\n                  ),\n                  description: error.data.errors[0].detail,\n                  dismissable: true\n                })\n              );\n              setImage(undefined);\n              setIsUploading(false);\n            });\n        }}\n        ref={inputRef}\n        type=\"file\"\n        id=\"icon-upload\"\n        hidden\n      />\n      <StyledDropdown\n        onSelect={() => setIsOpen(false)}\n        isOpen={isOpen}\n        isPlain\n        disabled={isUploading}\n        dropdownItems={dropdownItems}\n        toggle={\n          <DropdownToggle\n            disabled={isUploading}\n            toggleIndicator={null}\n            onToggle={(isOpen, event) => {\n              event.stopPropagation();\n              setIsOpen(isOpen);\n            }}\n          >\n            <UploadButton ouiaId={'upload-icon'}>\n              {isUploading ? (\n                <Spinner size=\"md\" />\n              ) : (\n                <PencilAltIcon size=\"sm\" />\n              )}\n            </UploadButton>\n            {!image && children}\n            {image && (\n              <ImagePreview\n                style={{ height: 64 }}\n                src={URL.createObjectURL(image)}\n                id={image.name}\n              />\n            )}\n          </DropdownToggle>\n        }\n      />\n    </UploadIconWrapper>\n  );\n};\n\nIconUpload.propTypes = {\n  uploadIcon: PropTypes.func.isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node)\n  ]),\n  resetIcon: PropTypes.func.isRequired,\n  enableReset: PropTypes.bool\n};\n\nexport default IconUpload;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nimport FormRenderer from '../../common/form-renderer';\nimport editPortfolioItemSchema from '../../../forms/edit-portfolio-item-form.schema';\nimport { updatePortfolioItem } from '../../../redux/actions/portfolio-actions';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport IconUpload from './icon-upload';\nimport { CATALOG_API_BASE } from '../../../utilities/constants';\nimport CardIcon from '../../../presentational-components/shared/card-icon';\n\nconst EditPortfolioItem = ({\n  cancelUrl,\n  uploadIcon,\n  resetIcon,\n  product: { owner, created_at, updated_at, ...product },\n  userCapabilities\n}) => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const { search } = useLocation();\n  return (\n    <Stack hasGutter>\n      <StackItem key={product.icon_id || 'default'}>\n        <IconUpload\n          uploadIcon={uploadIcon}\n          resetIcon={resetIcon}\n          enableReset={!!product.icon_id}\n        >\n          <CardIcon\n            src={`${CATALOG_API_BASE}/portfolio_items/${\n              product.id\n            }/icon?cache_id=${product.icon_id || 'default'}`} // we need ho add the query to prevent the browser caching when reseting the image\n            sourceId={product.service_offering_source_ref}\n            height={64}\n          />\n        </IconUpload>\n      </StackItem>\n      <StackItem>\n        <FormRenderer\n          initialValues={{ ...product }}\n          onSubmit={(values) => {\n            push({\n              pathname: cancelUrl,\n              search\n            });\n            return dispatch(\n              updatePortfolioItem({\n                ...values,\n                metadata: { user_capabilities: userCapabilities }\n              })\n            );\n          }}\n          schema={editPortfolioItemSchema}\n          templateProps={{\n            disableSubmit: ['pristine']\n          }}\n          onCancel={() =>\n            push({\n              pathname: cancelUrl,\n              search\n            })\n          }\n        />\n      </StackItem>\n    </Stack>\n  );\n};\n\nEditPortfolioItem.propTypes = {\n  cancelUrl: PropTypes.string.isRequired,\n  product: PropTypes.object.isRequired,\n  userCapabilities: PropTypes.object.isRequired,\n  uploadIcon: PropTypes.func.isRequired,\n  resetIcon: PropTypes.func.isRequired\n};\n\nexport default EditPortfolioItem;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Switch } from 'react-router-dom';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\n\nimport EditPortfolioItem from './edit-portfolio-item';\nimport EditApprovalWorkflow from '../../../smart-components/common/edit-approval-workflow';\nimport { PORTFOLIO_ITEM_RESOURCE_TYPE } from '../../../utilities/constants';\nimport CatalogRoute from '../../../routing/catalog-route';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport SetOrderProcessModal from '../../order-process/set-order-process-modal';\nimport { PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE } from '../../../constants/routes';\n\nconst ItemDetailDescription = ({\n  userCapabilities,\n  product,\n  url,\n  search,\n  detailPaths,\n  uploadIcon,\n  resetIcon\n}) => {\n  const formatMessage = useFormatMessage();\n  return (\n    <Switch>\n      <Route path={`${url}/edit-workflow`}>\n        <EditApprovalWorkflow\n          pushParam={{ pathname: url, search }}\n          objectType={PORTFOLIO_ITEM_RESOURCE_TYPE}\n          objectId={product.id}\n          objectName={() => product.name}\n          querySelector=\"portfolio-item\"\n        />\n      </Route>\n      <Route path={PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE}>\n        <SetOrderProcessModal\n          querySelector=\"portfolio-item\"\n          objectType={PORTFOLIO_ITEM_RESOURCE_TYPE}\n          objectName={() => product.name}\n          pushParam={{ pathname: url, search }}\n        />\n      </Route>\n      <Route\n        exact\n        path={detailPaths}\n        render={() => (\n          <TextContent>\n            {(product.description || product.long_description) && (\n              <Text component={TextVariants.h6}>\n                {formatMessage(portfolioMessages.portfolioItemOverview)}\n              </Text>\n            )}\n            {product.description && (\n              <Text id=\"description\" component={TextVariants.p}>\n                {product.description}\n              </Text>\n            )}\n            {product.long_description && (\n              <Text id=\"long_description\" component={TextVariants.p}>\n                {product.long_description}\n              </Text>\n            )}\n            {product.support_url && (\n              <Text id=\"support_url\" component={TextVariants.p}>\n                <a\n                  href={product.support_url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {formatMessage(portfolioMessages.portfolioItemSupport)}\n                </a>\n              </Text>\n            )}\n            {product.documentation_url && (\n              <Fragment>\n                <Text component={TextVariants.h6}>\n                  {formatMessage(portfolioMessages.portfolioItemDocumentation)}\n                </Text>\n                <Text id=\"documentation_url\" component={TextVariants.p}>\n                  <a\n                    href={product.documentation_url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {formatMessage(portfolioMessages.portfolioItemDocLink)}\n                  </a>\n                </Text>\n              </Fragment>\n            )}\n          </TextContent>\n        )}\n      />\n      <CatalogRoute\n        exact\n        path={`${url}/edit`}\n        requiredCapabilities=\"update\"\n        userCapabilities={userCapabilities}\n      >\n        <EditPortfolioItem\n          cancelUrl={url}\n          product={product}\n          userCapabilities={userCapabilities}\n          uploadIcon={uploadIcon}\n          resetIcon={resetIcon}\n        />\n      </CatalogRoute>\n    </Switch>\n  );\n};\n\nItemDetailDescription.propTypes = {\n  product: PropTypes.shape({\n    name: PropTypes.string,\n    long_description: PropTypes.string,\n    support_url: PropTypes.string,\n    documentation_url: PropTypes.string,\n    description: PropTypes.string,\n    id: PropTypes.string.isRequired\n  }).isRequired,\n  url: PropTypes.string.isRequired,\n  search: PropTypes.string.isRequired,\n  userCapabilities: PropTypes.object.isRequired,\n  detailPaths: PropTypes.arrayOf(PropTypes.string),\n  uploadIcon: PropTypes.func.isRequired,\n  resetIcon: PropTypes.func.isRequired\n};\n\nexport default ItemDetailDescription;\n","import React, {\n  useEffect,\n  useState,\n  Fragment,\n  lazy,\n  Suspense,\n  useContext\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Route, Switch, useRouteMatch, useLocation } from 'react-router-dom';\nimport { Grid, GridItem, Alert } from '@patternfly/react-core';\nimport { Section } from '@redhat-cloud-services/frontend-components/Section';\n\nimport ItemDetailInfoBar from './item-detail-info-bar';\nimport ItemDetailDescription from './item-detail-description';\nimport { PortfolioItemDetailToolbar } from './portfolio-item-detail-toolbar';\nimport TopToolbar from '../../../presentational-components/shared/top-toolbar';\nimport { getPortfolioItemDetail } from '../../../redux/actions/portfolio-actions';\nimport {\n  ProductLoaderPlaceholder,\n  AppPlaceholder\n} from '../../../presentational-components/shared/loader-placeholders';\nimport {\n  uploadPortfolioItemIcon,\n  resetPortfolioItemIcon\n} from '../../../helpers/portfolio/portfolio-helper';\nimport useQuery from '../../../utilities/use-query';\nimport {\n  PORTFOLIO_ITEM_ROUTE,\n  PORTFOLIO_ITEM_ROUTE_EDIT,\n  PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE\n} from '../../../constants/routes';\nimport CatalogRoute from '../../../routing/catalog-route';\nimport portfolioMessages from '../../../messages/portfolio.messages';\nimport BackToProducts from '../../../presentational-components/portfolio/back-to-products';\nimport useFormatMessage from '../../../utilities/use-format-message';\nimport { hasPermission } from '../../../helpers/shared/helpers';\nimport UserContext from '../../../user-context';\n\nconst SurveyEditor = lazy(() =>\n  import(\n    /* webpackChunkName: \"survey-editor\" */ '../../survey-editing/survey-editor'\n  )\n);\n\nconst requiredParams = [\n  'portfolio',\n  'source',\n  'portfolio-item',\n  'from-products'\n];\n\nconst PortfolioItemDetail = () => {\n  const formatMessage = useFormatMessage();\n  const [isOpen, setOpen] = useState(false);\n  const [isFetching, setIsFetching] = useState(true);\n  const dispatch = useDispatch();\n  const [queryValues, search] = useQuery(requiredParams);\n  const { pathname } = useLocation();\n  const { url } = useRouteMatch(PORTFOLIO_ITEM_ROUTE);\n  const portfolioItemData = useSelector(\n    ({ portfolioReducer: { portfolioItem } }) => portfolioItem\n  );\n  const portfolio = useSelector(\n    ({ portfolioReducer: { selectedPortfolio } }) => selectedPortfolio\n  );\n  const fromProducts = queryValues['from-products'] === 'true';\n  const { permissions: userPermissions } = useContext(UserContext);\n  const canLinkOrderProcesses = hasPermission(userPermissions, [\n    'catalog:order_processes:link'\n  ]);\n\n  const fetchData = (skipLoading) => {\n    if (!skipLoading) {\n      setIsFetching(true);\n    }\n\n    dispatch(\n      getPortfolioItemDetail({\n        portfolioItem: queryValues['portfolio-item'],\n        ...queryValues\n      })\n    )\n      .then(() => setIsFetching(false))\n      .catch(() => setIsFetching(false));\n  };\n\n  useEffect(() => {\n    insights.chrome.appNavClick({\n      id: fromProducts ? 'products' : 'portfolios',\n      secondaryNav: true\n    });\n    fetchData(false);\n  }, [queryValues['portfolio-item']]);\n\n  if (isFetching || Object.keys(portfolioItemData).length === 0) {\n    return (\n      <Section className=\"global-primary-background full-height\">\n        <TopToolbar breadcrumbs={!fromProducts}>\n          {fromProducts && <BackToProducts />}\n          <ProductLoaderPlaceholder />\n        </TopToolbar>\n      </Section>\n    );\n  }\n\n  const availability =\n    portfolioItemData?.source?.availability_status || 'unavailable';\n  let unavailable = [];\n\n  if (portfolioItemData?.source) {\n    unavailable = [portfolioItemData?.source]\n      .filter(({ notFound }) => notFound)\n      .map(({ object }) => (\n        <Alert\n          className=\"pf-u-mb-sm\"\n          key={object}\n          variant=\"warning\"\n          isInline\n          title={formatMessage(portfolioMessages.objectUnavaiable, {\n            object\n          })}\n        />\n      ));\n  }\n\n  const uploadIcon = (file) =>\n    uploadPortfolioItemIcon(\n      portfolioItemData?.portfolioItem?.id,\n      file\n    ).then(() => fetchData(true));\n  const resetIcon = () =>\n    resetPortfolioItemIcon(portfolioItemData?.portfolioItem?.icon_id).then(\n      fetchData\n    );\n  const detailPaths = [\n    PORTFOLIO_ITEM_ROUTE,\n    `${url}/order`,\n    `${url}/copy`,\n    `${url}/edit-workflow`,\n    PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE\n  ];\n  return (\n    <Fragment>\n      <Switch>\n        <CatalogRoute\n          requiredCapabilities=\"update\"\n          userCapabilities={\n            portfolioItemData?.portfolioItem?.metadata.user_capabilities\n          }\n          path={`${url}/edit-survey`}\n        >\n          <Suspense fallback={<AppPlaceholder />}>\n            <SurveyEditor\n              closeUrl={url}\n              search={search}\n              uploadIcon={uploadIcon}\n              portfolioItem={portfolioItemData.portfolioItem}\n              portfolio={portfolio}\n            />\n          </Suspense>\n        </CatalogRoute>\n        <Route>\n          <Section className=\"full-height global-primary-background\">\n            <PortfolioItemDetailToolbar\n              fromProducts={fromProducts}\n              url={url}\n              isOpen={isOpen}\n              product={portfolioItemData.portfolioItem}\n              setOpen={setOpen}\n              isFetching={isFetching}\n              availability={availability}\n              userCapabilities={\n                portfolioItemData?.portfolioItem?.metadata.user_capabilities\n              }\n              orderable={portfolioItemData?.portfolioItem.metadata?.orderable}\n              canLinkOrderProcesses={canLinkOrderProcesses}\n            />\n            {unavailable.length > 0 && (\n              <div className=\"pf-u-mr-lg pf-u-ml-lg\">{unavailable}</div>\n            )}\n            {portfolioItemData?.source?.availability_status ===\n              'unavailable' && (\n              <Alert\n                className=\"pf-u-ml-lg pf-u-mr-lg\"\n                id=\"unavailable-alert-info\"\n                variant=\"info\"\n                isInline\n                title={formatMessage(portfolioMessages.sourceUnavaiable)}\n              />\n            )}\n            <Grid hasGutter className=\"pf-u-p-lg\">\n              <Route path={detailPaths} exact>\n                <GridItem md={3} lg={2}>\n                  <ItemDetailInfoBar\n                    product={portfolioItemData.portfolioItem}\n                    portfolio={portfolio}\n                    source={portfolioItemData.source}\n                  />\n                </GridItem>\n              </Route>\n              <GridItem\n                md={pathname === PORTFOLIO_ITEM_ROUTE_EDIT ? 12 : 9}\n                lg={pathname === PORTFOLIO_ITEM_ROUTE_EDIT ? 12 : 10}\n              >\n                <ItemDetailDescription\n                  resetIcon={resetIcon}\n                  uploadIcon={uploadIcon}\n                  product={portfolioItemData.portfolioItem}\n                  userCapabilities={\n                    portfolioItemData?.portfolioItem?.metadata.user_capabilities\n                  }\n                  url={url}\n                  detailPaths={detailPaths}\n                  search={search}\n                />\n              </GridItem>\n            </Grid>\n          </Section>\n        </Route>\n      </Switch>\n    </Fragment>\n  );\n};\n\nexport default PortfolioItemDetail;\n"],"names":["DetailToolbarActions","copyUrl","orderUrl","editUrl","workflowUrl","editSurveyUrl","isOpen","setOpen","isFetching","availability","orderable","userCapabilities","update","copy","set_approval","canLinkOrderProcesses","formatMessage","useFormatMessage","dropdownItems","push","DropdownItem","key","id","component","pathname","preserveSearch","actionMessages","role","orderProcessAction","orderProcessesMessages","PORTFOLIO_ITEM_EDIT_ORDER_PROCESS_ROUTE","portfolioMessages","Fragment","LevelItem","isDisabled","showSpinner","variant","ouiaId","style","marginLeft","length","Dropdown","isPlain","onToggle","onSelect","position","DropdownPosition","toggle","KebabToggle","propTypes","PropTypes","isRequired","defaultProps","PortfolioItemIconItem","sourceId","src","CATALOG_API_BASE","height","PortfolioItemDetailToolbar","url","product","fromProducts","breadcrumbfragments","useLocation","paddingBottom","PORTFOLIO_ITEM_ROUTE_EDIT","breadcrumbs","Level","className","Switch","Route","path","exact","title","noData","grow","alignStart","service_offering_source_ref","TextContent","Text","TextVariants","name","minHeight","open","distributor","metadata","SurveyEditorDropdown","handleResetSurvey","useState","setIsOpen","onClick","SurveyEditingToolbar","handleSaveSurvey","closeUrl","search","isValid","modified","Flex","Link","to","Button","messages","defaultMessage","ItemDetailInfoBar","source","portfolio","DateFormat","date","created_at","updated_at","fields","label","validate","type","changeIcon","resetIcon","UploadButton","styled","UploadIconWrapper","ImagePreview","StyledDropdown","IconUpload","uploadIcon","enableReset","children","inputRef","useRef","image","setImage","isUploading","setIsUploading","dispatch","useDispatch","current","click","iconMessages","undefined","then","accept","onChange","event","target","files","error","addNotification","description","data","errors","detail","dismissable","ref","hidden","disabled","DropdownToggle","toggleIndicator","stopPropagation","Spinner","size","URL","createObjectURL","EditPortfolioItem","cancelUrl","owner","useHistory","Stack","hasGutter","StackItem","icon_id","initialValues","onSubmit","values","updatePortfolioItem","user_capabilities","schema","editPortfolioItemSchema","templateProps","disableSubmit","onCancel","ItemDetailDescription","detailPaths","pushParam","objectType","PORTFOLIO_ITEM_RESOURCE_TYPE","objectId","objectName","querySelector","render","long_description","support_url","href","rel","documentation_url","requiredCapabilities","SurveyEditor","lazy","requiredParams","setIsFetching","useQuery","queryValues","useRouteMatch","PORTFOLIO_ITEM_ROUTE","portfolioItemData","useSelector","portfolioReducer","portfolioItem","selectedPortfolio","userPermissions","useContext","UserContext","permissions","hasPermission","fetchData","skipLoading","getPortfolioItemDetail","useEffect","insights","chrome","appNavClick","secondaryNav","Object","keys","Section","availability_status","unavailable","filter","notFound","map","object","Alert","isInline","file","uploadPortfolioItemIcon","Suspense","fallback","Grid","GridItem","md","lg","resetPortfolioItemIcon"],"sourceRoot":""}