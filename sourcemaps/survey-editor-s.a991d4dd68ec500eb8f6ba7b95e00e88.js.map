{"version":3,"file":"js/survey-editor-s.9c6d59e65e6bb25e9ad3.js","mappings":"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","sources":["webpack:///./src/helpers/order/service-plan-helper-s.ts","webpack:///./src/smart-components/survey-editing/survey-editor-s.js"],"sourcesContent":["/* eslint camelcase: 0 */\nimport { getAxiosInstance } from '../shared/user-login';\nimport { CATALOG_API_BASE } from '../../utilities/constants';\nimport { ApiCollectionResponse } from '../../types/common-types-s';\nimport { AxiosInstance, AxiosPromise } from 'axios';\nconst axiosInstance = getAxiosInstance();\n\nexport interface ImportServicePlan {\n  /**\n   * The Portfolio Item to import the service plans for.\n   * @type {string}\n   * @memberof ImportServicePlan\n   */\n  portfolio_item_id?: string;\n}\n\nexport interface ServicePlan {\n  /**\n   * The name of the service plan.\n   * @type {string}\n   * @memberof ServicePlan\n   */\n  name?: string;\n  /**\n   * The service plan description.\n   * @type {string}\n   * @memberof ServicePlan\n   */\n  description?: string;\n  /**\n   * JSON schema for the object.\n   * @type {object}\n   * @memberof ServicePlan\n   */\n  create_json_schema?: any;\n  /**\n   * The reference ID of the Portfolio Item\n   * @type {string}\n   * @memberof ServicePlan\n   */\n  portfolio_item_id?: string;\n  /**\n   * The unique identifier for this service plan.\n   * @type {string}\n   * @memberof ServicePlan\n   */\n  id?: string;\n  /**\n   * Whether or not the ServicePlan has been imported for editing\n   * @type {boolean}\n   * @memberof ServicePlan\n   */\n  imported?: boolean;\n  /**\n   * Whether or not the ServicePlan has a modified schema\n   * @type {boolean}\n   * @memberof ServicePlan\n   */\n  modified?: boolean;\n}\n\nexport interface PatchModifiedServicePlan {\n  /**\n   * the new modified schema for the service plan\n   * @type {object}\n   * @memberof PatchModifiedServicePlan\n   */\n  modified?: any;\n}\n\nexport const getServicePlans = (\n  portfolioItemId: string\n): Promise<ApiCollectionResponse<ServicePlan>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}${portfolioItemId}/service_plans/`\n  ) as Promise<ApiCollectionResponse<ServicePlan>>;\n\nexport const patchServicePlanModified = (\n  servicePlanId: string,\n  patchModifiedServicePlan?: PatchModifiedServicePlan\n): Promise<ApiCollectionResponse<ServicePlan>> =>\n  axiosInstance.patch(\n    `${CATALOG_API_BASE}/catalog_service_plans/${servicePlanId}/modified/`,\n    patchModifiedServicePlan\n  ) as Promise<ApiCollectionResponse<ServicePlan>>;\n\nexport const showServicePlanModified = (\n  servicePlanId: string\n): Promise<ApiCollectionResponse<ServicePlan>> =>\n  axiosInstance.get(\n    `${CATALOG_API_BASE}/catalog_service_plans/${servicePlanId}/modified/`\n  );\n\nexport const createServicePlan = (\n  importServicePlan?: ImportServicePlan,\n  options: any = {}\n) =>\n  axiosInstance.post(\n    `${CATALOG_API_BASE}/catalog_service_plans/`,\n    importServicePlan\n  );\n\nexport const resetServicePlanModified = (\n  id: string,\n  options?: any\n): AxiosPromise<Array<ServicePlan>> =>\n  axiosInstance.post(`${CATALOG_API_BASE}$/catalog_service_plans/${id}/reset/`);\n","import React, { useEffect, useState, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport FormBuilder from '@data-driven-forms/form-builder/form-builder';\nimport {\n  builderMapper,\n  fieldProperties,\n  pickerMapper,\n  propertiesMapper,\n  BuilderTemplate\n} from '@data-driven-forms/form-builder/pf4-builder-mappers';\nimport { Spinner } from '@patternfly/react-core';\n\nimport { getAxiosInstance } from '../../helpers/shared/user-login';\nimport { CATALOG_API_BASE } from '../../utilities/constants';\nimport {\n  Bullseye,\n  FormGroup,\n  Select,\n  SelectOption,\n  TextInput\n} from '@patternfly/react-core';\nimport { SurveyEditingToolbar } from '../portfolio/portfolio-item-detail/portfolio-item-detail-toolbar';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport {\n  catalogValidatorAlias,\n  catalogComponentMapper\n} from '../common/form-renderer';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nconst isSubstitution = {\n  ...fieldProperties.IS_DISABLED,\n  propertyName: 'isSubstitution',\n  label: 'Substitution'\n};\nimport * as ServicePlanHelper from '../../helpers/order/service-plan-helper-s';\n\nconst FormGroupWrapper = ({\n  propertyValidation: { message },\n  children,\n  ...props\n}) => (\n  <FormGroup\n    helperTextInvalid={message}\n    validated={message ? 'error' : 'default'}\n    {...props}\n  >\n    {children}\n  </FormGroup>\n);\n\nFormGroupWrapper.propTypes = {\n  propertyValidation: PropTypes.shape({ message: PropTypes.string }),\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node)\n  ])\n};\n\nFormGroupWrapper.defaultProps = {\n  propertyValidation: {}\n};\n\nconst Input = ({\n  label,\n  initialValueOptions,\n  value,\n  fieldId,\n  innerProps: { propertyValidation },\n  onChange,\n  ...rest\n}) => {\n  const [options, setOptions] = useState([...initialValueOptions]);\n  const [isOpen, setisOpen] = useState(false);\n  if (options.length > 0) {\n    return (\n      <FormGroupWrapper\n        label={label}\n        fieldId={fieldId}\n        propertyValidation={propertyValidation}\n      >\n        <Select\n          variant=\"typeahead\"\n          onToggle={setisOpen}\n          isOpen={isOpen}\n          typeAheadAriaLabel=\"Select initial value\"\n          onSelect={(_event, value) => {\n            onChange(value);\n            setisOpen(false);\n          }}\n          placeholderText=\"Select initial value\"\n          isCreatable\n          onCreateOption={(newValue) =>\n            setOptions((prev) => [...prev, newValue])\n          }\n          selections={[value]}\n        >\n          {options.map((option) => (\n            <SelectOption key={option} value={option} />\n          ))}\n        </Select>\n      </FormGroupWrapper>\n    );\n  }\n\n  return (\n    <Fragment>\n      <FormGroupWrapper\n        label={label}\n        fieldId={fieldId}\n        propertyValidation={propertyValidation}\n      >\n        <TextInput\n          id={fieldId}\n          value={typeof value === undefined ? '' : value.toString()}\n          onChange={onChange}\n          {...rest}\n        />\n      </FormGroupWrapper>\n    </Fragment>\n  );\n};\n\nInput.propTypes = {\n  label: PropTypes.oneOfType([PropTypes.string]).isRequired,\n  value: PropTypes.any,\n  fieldId: PropTypes.string.isRequired,\n  innerProps: PropTypes.shape({\n    propertyValidation: PropTypes.shape({ message: PropTypes.string })\n  }).isRequired,\n  onChange: PropTypes.func,\n  initialValueOptions: PropTypes.arrayOf(PropTypes.string)\n};\n\nInput.defaultProps = {\n  onChange: () => undefined,\n  value: '',\n  initialValueOptions: []\n};\n\nconst newPropertiesMapper = {\n  ...propertiesMapper,\n  input: Input\n};\n\nconst componentProperties = {\n  [componentTypes.TEXT_FIELD]: {\n    attributes: [\n      fieldProperties.LABEL,\n      fieldProperties.HELPER_TEXT,\n      fieldProperties.PLACEHOLDER,\n      fieldProperties.IS_DISABLED,\n      fieldProperties.IS_READ_ONLY,\n      fieldProperties.HIDE_FIELD,\n      isSubstitution\n    ]\n  },\n  [componentTypes.CHECKBOX]: {\n    attributes: [\n      fieldProperties.LABEL,\n      fieldProperties.IS_DISABLED,\n      fieldProperties.OPTIONS,\n      fieldProperties.HIDE_FIELD\n    ]\n  },\n  [componentTypes.SELECT]: {\n    attributes: [\n      fieldProperties.OPTIONS,\n      fieldProperties.LABEL,\n      fieldProperties.IS_DISABLED,\n      fieldProperties.PLACEHOLDER,\n      fieldProperties.HELPER_TEXT,\n      fieldProperties.HIDE_FIELD,\n      isSubstitution\n    ]\n  },\n  [componentTypes.DATE_PICKER]: {\n    attributes: [\n      fieldProperties.LABEL,\n      fieldProperties.TODAY_BUTTON_LABEL,\n      fieldProperties.IS_CLEARABLE,\n      fieldProperties.CLOSE_ON_DAY_SELECT,\n      fieldProperties.SHOW_TODAY_BUTTON,\n      fieldProperties.HIDE_FIELD,\n      isSubstitution\n    ]\n  },\n  [componentTypes.PLAIN_TEXT]: {\n    attributes: [fieldProperties.MULTI_LINE_LABEL, isSubstitution]\n  },\n  [componentTypes.RADIO]: {\n    attributes: [\n      fieldProperties.LABEL,\n      fieldProperties.IS_DISABLED,\n      fieldProperties.OPTIONS,\n      fieldProperties.HIDE_FIELD\n    ]\n  },\n  [componentTypes.SWITCH]: {\n    attributes: [\n      fieldProperties.LABEL,\n      fieldProperties.IS_READ_ONLY,\n      fieldProperties.IS_DISABLED,\n      fieldProperties.HIDE_FIELD\n    ]\n  },\n  [componentTypes.TEXTAREA]: {\n    attributes: [\n      fieldProperties.LABEL,\n      fieldProperties.HELPER_TEXT,\n      fieldProperties.IS_READ_ONLY,\n      fieldProperties.IS_DISABLED,\n      fieldProperties.HIDE_FIELD,\n      isSubstitution\n    ]\n  }\n};\n\ncomponentProperties['select-field'] =\n  componentProperties[componentTypes.SELECT];\ncomponentProperties['textarea-field'] =\n  componentProperties[componentTypes.TEXTAREA];\nconst pf4Skin = {\n  componentMapper: {\n    ...catalogComponentMapper\n  },\n  builderMapper: {\n    ...builderMapper\n  },\n  pickerMapper: {\n    ...pickerMapper,\n    'select-field': pickerMapper[componentTypes.SELECT],\n    'textarea-field': pickerMapper[componentTypes.TEXTAREA]\n  },\n  propertiesMapper: newPropertiesMapper,\n  componentProperties\n};\n\nconst changeValidators = (schema) => {\n  const result = { ...schema };\n  result.fields = result.fields.map(({ validate, ...rest }) => {\n    return validate\n      ? {\n          ...rest,\n          validate: validate.map(({ type, ...rest }) => ({\n            ...rest,\n            type: catalogValidatorAlias[type] || type\n          }))\n        }\n      : rest;\n  });\n  return result;\n};\n\n// remove after API full migration to v2\nconst appendValidator = (schema) => {\n  const result = { ...schema };\n  result.fields = result.fields.map(({ validate, ...rest }) => {\n    return validate\n      ? {\n          ...rest,\n          validate: validate.map(({ type, ...rest }) => ({\n            ...rest,\n            type:\n              type !== validatorTypes.MAX_NUMBER_VALUE &&\n              type !== validatorTypes.MIN_NUMBER_VALUE\n                ? `${type}-validator`\n                : type\n          }))\n        }\n      : rest;\n  });\n  return result;\n};\n\nconst BuilderWrapper = (props) => <FormBuilder {...props} />;\n\nconst SurveyEditor = ({ closeUrl, search, portfolioItem }) => {\n  const [schema, setSchema] = useState();\n  const [isFetching, setIsFetching] = useState(false);\n  const [baseSchema, setBaseSchema] = useState();\n  const [servicePlan, setServicePlan] = useState();\n  /**\n   * There is an issues with later versions react final form, that it ignores parent props changes and caches\n   * itself to increase performance. This had an unfortunate side effect of ignoring the outside schema changes\n   * which are not propagated to the component tree. We use this counter to destroy the old and create a new instance\n   * when the key (updateHack) counter is changed. There is currently no better sollution due to the fact that the\n   * react final form is an outside dependency.\n   * We will make an effort to fix it inside the library but until then we need this workaround.\n   */\n  const [updateHack, setUpdateHack] = useState(0);\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const fragments = useSelector(\n    ({ breadcrumbsReducer: { fragments } }) => fragments\n  );\n\n  const getServicePlan = () =>\n    getAxiosInstance()\n      .get(\n        `${CATALOG_API_BASE}/portfolio_items/${portfolioItem.id}/service_plans/`\n      )\n      .then((data) => {\n        const servicePlan = data.results;\n        setServicePlan(servicePlan[0]);\n        const schema = servicePlan[0].create_json_schema.schema;\n        //TODO - use true here until the backend is fixed\n        // eslint-disable-next-line no-constant-condition\n        if (servicePlan[0].imported || true) {\n          return getAxiosInstance()\n            .get(\n              `${CATALOG_API_BASE}/catalog_service_plans/${servicePlan[0].id}/base/`\n            )\n            .then((baseSchema) => {\n              const new_schema = changeValidators(\n                JSON.parse(baseSchema.create_json_schema.replace('\\\\\"', '\"'))\n                  .schema\n              );\n              setBaseSchema(new_schema);\n              return new_schema;\n            });\n        }\n\n        return changeValidators(schema);\n      })\n      .then((schema) => {\n        setSchema(schema);\n        setIsFetching(false);\n      });\n  useEffect(() => {\n    getServicePlan();\n  }, []);\n\n  const modifySurvey = (editedTemplate) =>\n    ServicePlanHelper.patchServicePlanModified(`${servicePlan.id}`, {\n      modified: { schema: editedTemplate }\n    });\n  const createSurvey = (editedTemplate) =>\n    ServicePlanHelper.createServicePlan({ portfolio_item_id: portfolioItem.id })\n      .then(([{ id }]) => id)\n      .then((id) =>\n        ServicePlanHelper.patchServicePlanModified(`${id}`, {\n          modified: { schema: editedTemplate }\n        })\n      );\n  const updateSubstitutionFields = (editedTemplate) => {\n    const updatedFields = editedTemplate.fields.map((field) => {\n      let updatedField = field;\n      if (updatedField.isSubstitution) {\n        updatedField.isDisabled = true;\n        updatedField.placeholder = field.initialValue;\n      }\n\n      return updatedField;\n    });\n    return { ...editedTemplate, fields: updatedFields };\n  };\n\n  const handleSaveSurvey = (editedTemplate) => {\n    setIsFetching(true);\n    const submitCall = servicePlan.imported ? modifySurvey : createSurvey;\n    return submitCall(appendValidator(updateSubstitutionFields(editedTemplate)))\n      .then(() => {\n        setIsFetching(false);\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: `Survey of ${portfolioItem.name} has been modified.`,\n            dismissable: true\n          })\n        );\n        return push({ pathname: closeUrl, search });\n      })\n      .catch((error) => {\n        setIsFetching(false);\n        dispatch({ type: 'EDIT_SURVEY_REJECTED', payload: error });\n      });\n  };\n\n  const handleResetSurvey = (id) => {\n    setSchema(undefined);\n    ServicePlanHelper.resetServicePlanModified(id)\n      .then(getServicePlan)\n      .then(() => {\n        /**\n         * Counter has to updated again after the update was successful\n         * This mutation makes sure that new instance will be created after the data was returned\n         * from the API.\n         */\n        setUpdateHack((prevCount) => prevCount + 1);\n        return dispatch(\n          addNotification({\n            variant: 'success',\n            title: `Survey of ${portfolioItem.name} has been restored.`,\n            dismissable: true\n          })\n        );\n      });\n  };\n\n  return (\n    <Fragment>\n      {schema ? (\n        [\n          <BuilderWrapper\n            {...pf4Skin}\n            // this key is required to destroy outdated instances of the form builder\n            key={updateHack}\n            schema={schema}\n            disableDrag\n            disableAdd\n            schemaTemplate={baseSchema}\n            mode=\"subset\"\n            openEditor\n          >\n            {({ getSchema, isValid, ...props }) => (\n              <Fragment>\n                <SurveyEditingToolbar\n                  key=\"survey-editor-toolbar\"\n                  handleSaveSurvey={() => handleSaveSurvey(getSchema())}\n                  isValid={isValid}\n                  closeUrl={closeUrl}\n                  search={search}\n                  isFetching={isFetching || !schema}\n                  modified={servicePlan?.modified}\n                  breadcrumbfragments={fragments}\n                  handleResetSurvey={() => handleResetSurvey(servicePlan.id)}\n                />\n                <BuilderTemplate {...props} />;\n              </Fragment>\n            )}\n          </BuilderWrapper>\n        ]\n      ) : (\n        <Fragment>\n          <SurveyEditingToolbar\n            handleSaveSurvey={handleSaveSurvey}\n            closeUrl={closeUrl}\n            search={search}\n            isFetching={!schema || isFetching}\n          />\n          <Bullseye>\n            <Spinner />\n          </Bullseye>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nSurveyEditor.propTypes = {\n  closeUrl: PropTypes.string.isRequired,\n  search: PropTypes.string,\n  portfolioItem: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired\n  }).isRequired,\n  portfolio: PropTypes.object.isRequired\n};\n\nexport default SurveyEditor;\n"],"names":["axiosInstance","patchServicePlanModified","servicePlanId","patchModifiedServicePlan","patch","isSubstitution","fieldProperties","propertyName","label","FormGroupWrapper","message","propertyValidation","children","props","FormGroup","helperTextInvalid","validated","propTypes","PropTypes","defaultProps","Input","initialValueOptions","value","fieldId","innerProps","onChange","rest","useState","options","setOptions","isOpen","setisOpen","length","Select","variant","onToggle","typeAheadAriaLabel","onSelect","_event","placeholderText","isCreatable","onCreateOption","newValue","prev","selections","map","option","SelectOption","key","Fragment","TextInput","id","undefined","toString","isRequired","newPropertiesMapper","propertiesMapper","input","componentProperties","componentTypes","attributes","pf4Skin","componentMapper","catalogComponentMapper","builderMapper","pickerMapper","BuilderWrapper","SurveyEditor","closeUrl","search","portfolioItem","schema","setSchema","isFetching","setIsFetching","baseSchema","setBaseSchema","servicePlan","setServicePlan","updateHack","setUpdateHack","dispatch","useDispatch","push","useHistory","fragments","useSelector","breadcrumbsReducer","getServicePlan","getAxiosInstance","get","CATALOG_API_BASE","then","data","results","create_json_schema","imported","new_schema","result","fields","validate","type","catalogValidatorAlias","changeValidators","JSON","parse","replace","useEffect","modifySurvey","editedTemplate","ServicePlanHelper","modified","createSurvey","importServicePlan","portfolio_item_id","post","handleSaveSurvey","validatorTypes","appendValidator","updatedFields","field","updatedField","isDisabled","placeholder","initialValue","updateSubstitutionFields","addNotification","title","name","dismissable","pathname","error","payload","disableDrag","disableAdd","schemaTemplate","mode","openEditor","getSchema","isValid","breadcrumbfragments","handleResetSurvey","prevCount","Bullseye","Spinner","portfolio"],"sourceRoot":""}