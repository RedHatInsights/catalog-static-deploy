{"version":3,"sources":["webpack:///./src/PresentationalComponents/Platform/PlatformToolbar.js","webpack:///./src/assets/images/platform-default.svg","webpack:///./src/assets/images/platform-openshift.svg","webpack:///./src/assets/images/platform-amazon.png","webpack:///./src/PresentationalComponents/Platform/PlatformCard.js","webpack:///./src/SmartComponents/Platform/Platforms.js"],"names":["PlatformToolbar","searchValue","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_8__","style","backgroundColor","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_9__","className","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_10__","input","type","id","name","placeholder","aria-label","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_11__","variant","aria-hidden","Component","module","exports","__webpack_require__","p","TO_DISPLAY","platformTypeImg","sourceTypeId","OpenshiftPlatformImg","AmazonPlatformImg","DefaultPlatformImg","PlatformCard","_ref","props","objectWithoutProperties_default","react_default","GridItem","sm","md","lg","xl","Card","key","CardHeader","ImageWithDefault","src","source_type_id","defaultSrc","width","height","CardBody","CardCommon","extends_default","objectSpread_default","toDisplay","CardFooter","propTypes","history","object","imageUrl","string","Platforms","filteredItems","isOpen","_this","fetchPlatforms","this","fetchData","scrollToTop","Toolbar","ToolbarGroup","ToolbarItem","Title","size","items","platforms","map","item","Platform_PlatformCard","isLoading","insights_frontend_components","renderToolbar","ContentGallery","MainModal","array","bool","searchFilter","showModal","func","hideModal","withRouter","connect","_ref$platformReducer","platformReducer","filterValue","dispatch","apiProps"],"mappings":"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","file":"js/7.js","sourcesContent":["import React, { Component } from 'react';\nimport { Toolbar, ToolbarGroup, ToolbarItem, Button } from '@patternfly/react-core';\n\n/**\n * TODO Use PF4 input components\n */\nclass PlatformToolbar extends Component {\n    state = {\n      searchValue: ''\n    };\n\n    render() {\n      return (\n        <Toolbar style={ { backgroundColor: '#FFFFFF' } }>\n          <ToolbarGroup className={ 'pf-u-ml-on-md' }>\n            <ToolbarItem className={ 'pf-u-ml-sm pf-u-my-sm' }>\n              <div className=\"pf-c-input-group\">\n                <input className=\"pf-c-form-control\"\n                  input=\"true\" type=\"text\" id=\"searchItem\"\n                  name=\"searchPlatformItems\"\n                  placeholder=\"Filter...\"\n                  aria-label=\"filter input with platform button\"\n                />\n                <Button variant=\"tertiary\" id=\"filterPlatformButton\">\n                  <i className=\"fas fa-search\" aria-hidden=\"true\"></i>\n                </Button>\n              </div>\n            </ToolbarItem>\n          </ToolbarGroup>\n        </Toolbar>);\n    };\n};\n\nexport default PlatformToolbar;\n","module.exports = __webpack_public_path__ + \"fonts/platform-default.svg\";","module.exports = __webpack_public_path__ + \"fonts/platform-openshift.svg\";","module.exports = __webpack_public_path__ + \"fonts/platform-amazon.png\";","import React from 'react';\nimport './platformcard.scss';\nimport propTypes from 'prop-types';\nimport DefaultPlatformImg from '../../assets/images/platform-default.svg';\nimport OpenshiftPlatformImg from '../../assets/images/platform-openshift.svg';\nimport AmazonPlatformImg from '../../assets/images/platform-amazon.png';\nimport ImageWithDefault from '../Shared/ImageWithDefault';\nimport ItemDetails from '../Shared/CardCommon';\nimport { GridItem, Card, CardHeader, CardBody, CardFooter } from '@patternfly/react-core';\n\nconst TO_DISPLAY = [ 'description', 'modified' ];\n\n// TO DO - use webpack to load all images\nconst platformTypeImg = (sourceTypeId) => {\n  switch (sourceTypeId) {\n    case '1':\n      return OpenshiftPlatformImg;\n    case '2':\n      return AmazonPlatformImg;\n    default:\n      return DefaultPlatformImg;\n  }\n};\n\nconst PlatformCard = ({ name, id, ...props }) => (\n  <GridItem sm={ 6 } md={ 4 } lg={ 4 } xl={ 3 }>\n    <Card className=\"card_style\" key={ id }>\n      <CardHeader className=\"pcard_header\">\n        <ImageWithDefault src={ platformTypeImg(props.source_type_id || '0') } defaultSrc={ DefaultPlatformImg } width=\"80\" height=\"40\"/>\n      </CardHeader>\n      <CardBody className=\"pcard_body\">\n        <h4>{ name }</h4>\n        <ItemDetails { ...{ name, ...props } } toDisplay={ TO_DISPLAY } />\n      </CardBody>\n      <CardFooter/>\n    </Card>\n  </GridItem>\n);\n\nPlatformCard.propTypes = {\n  history: propTypes.object,\n  imageUrl: propTypes.string,\n  name: propTypes.string,\n  source_type_id: propTypes.string,\n  id: propTypes.string\n};\n\nexport default PlatformCard;\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Section } from '@red-hat-insights/insights-frontend-components';\nimport { Toolbar, ToolbarGroup, ToolbarItem, Title } from '@patternfly/react-core';\nimport ContentGallery from '../../SmartComponents/ContentGallery/ContentGallery';\nimport PlatformCard from '../../PresentationalComponents/Platform/PlatformCard';\nimport PlatformToolbar from '../../PresentationalComponents/Platform/PlatformToolbar';\nimport { fetchPlatforms } from '../../redux/Actions/PlatformActions';\nimport MainModal from '../Common/MainModal';\nimport './platform.scss';\nimport { scrollToTop } from '../../Helpers/Shared/helpers';\n\nclass Platforms extends Component {\n    state = {\n      filteredItems: [],\n      isOpen: false\n    };\n\n    fetchData = () => {\n      this.props.fetchPlatforms();\n    };\n\n    componentDidMount() {\n      this.fetchData();\n      scrollToTop();\n    }\n\n    renderToolbar() {\n      return (\n        <Toolbar>\n          <ToolbarGroup>\n            <ToolbarItem className={ 'pf-u-ml-sm pf-u-my-sm' } >\n              <Title size={ '2xl' }>  All Platforms  </Title>\n            </ToolbarItem>\n          </ToolbarGroup>\n        </Toolbar>\n      );\n    }\n\n    render() {\n      let filteredItems = {\n        items: this.props.platforms.map((item) => <PlatformCard key={ item.id } { ...item } />),\n        isLoading: this.props.isLoading\n      };\n\n      return (\n        <Section>\n          <PlatformToolbar/>\n          <div className=\"action_toolbar\">\n            { this.renderToolbar() }\n          </div>\n          <ContentGallery { ...filteredItems } />\n          <MainModal />\n        </Section>\n      );\n    }\n}\n\nconst mapStateToProps = ({ platformReducer: { platforms, isLoading, filterValue }}) => ({\n  platforms,\n  isLoading,\n  searchFilter: filterValue\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchPlatforms: apiProps => dispatch(fetchPlatforms(apiProps))\n  };\n};\n\nPlatforms.propTypes = {\n  filteredItems: propTypes.array,\n  platforms: propTypes.array,\n  isLoading: propTypes.bool,\n  searchFilter: propTypes.string,\n  showModal: propTypes.func,\n  hideModal: propTypes.func,\n  history: propTypes.object,\n  fetchPlatforms: propTypes.func\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Platforms)\n);\n"],"sourceRoot":""}