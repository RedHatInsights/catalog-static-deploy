{"version":3,"sources":["webpack:///./src/assets/images/platform-default.svg","webpack:///./src/assets/images/platform-openshift.svg","webpack:///./src/assets/images/platform-amazon.png","webpack:///./src/PresentationalComponents/Platform/PlatformCard.js","webpack:///./src/PresentationalComponents/Platform/PlatformToolbar.js","webpack:///./src/SmartComponents/Platform/Platform.js","webpack:///./src/SmartComponents/Platform/Platforms.js"],"names":["module","exports","__webpack_require__","p","TO_DISPLAY","platformTypeImg","1","OpenshiftPlatformImg","2","AmazonPlatformImg","PlatformCard","_ref","name","id","props","objectWithoutProperties_default","react_default","a","createElement","GalleryItem","Link","to","concat","className","Card","key","CardHeader","ImageWithDefault","src","source_type_id","DefaultPlatformImg","width","height","CardBody","CardCommon","extends_default","objectSpread_default","toDisplay","CardFooter","propTypes","history","object","imageUrl","string","PlatformToolbar","searchValue","onFilterChange","top_toolbar","Level","LevelItem","FilterToolbarItem","placeholder","OrderToolbarItem","PropTypes","func","isRequired","Platform","filterValue","_this","setState","apiProps","this","fetchSelectedPlatform","fetchPlatformItems","fetchData","match","params","scrollToTop","prevProps","_this2","filteredItems","items","platformItems","filter","item","filterServiceOffering","state","map","data","PlatformItem","isLoading","isPlatformDataLoading","title","platform","react","Platform_PlatformToolbar","handleFilterChange","Title","size","ContentGallery","Component","bool","shape","array","defaultProps","connect","_ref$platformReducer","platformReducer","selectedPlatform","dispatch","bindActionCreators","platformsRoutes","Platforms","isOpen","fetchPlatforms","platforms","toLowerCase","includes","Platform_PlatformCard","renderToolbar","TextContent","Text","component","TextVariants","h2","insights_frontend_components","Switch","Route","path","render","renderPlatforms","searchFilter","showModal","hideModal","_ref2","_ref2$platformReducer"],"mappings":"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","file":"js/6.js","sourcesContent":["module.exports = __webpack_public_path__ + \"fonts/platform-default.svg\";","module.exports = __webpack_public_path__ + \"fonts/platform-openshift.svg\";","module.exports = __webpack_public_path__ + \"fonts/platform-amazon.png\";","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Card, CardHeader, CardBody, CardFooter, GalleryItem } from '@patternfly/react-core';\nimport DefaultPlatformImg from '../../assets/images/platform-default.svg';\nimport OpenshiftPlatformImg from '../../assets/images/platform-openshift.svg';\nimport AmazonPlatformImg from '../../assets/images/platform-amazon.png';\nimport ImageWithDefault from '../Shared/ImageWithDefault';\nimport ItemDetails from '../Shared/CardCommon';\nimport './platformcard.scss';\n\nconst TO_DISPLAY = [ 'description', 'modified' ];\n\n// TO DO - use webpack to load all images\nconst platformTypeImg = {\n  1: OpenshiftPlatformImg,\n  2: AmazonPlatformImg\n};\n\nconst PlatformCard = ({ name, id, ...props }) => (\n  <GalleryItem>\n    <Link to={ `/platforms/detail/${id}` } className=\"card-link\">\n      <Card key={ id } className=\"content-gallery-card\">\n        <CardHeader className=\"pcard_header\">\n          <ImageWithDefault src={ platformTypeImg[props.source_type_id] || DefaultPlatformImg } width=\"80\" height=\"40\"/>\n        </CardHeader>\n        <CardBody className=\"pcard_body\">\n          <h4>{ name }</h4>\n          <ItemDetails { ...{ name, ...props } } toDisplay={ TO_DISPLAY } />\n        </CardBody>\n        <CardFooter/>\n      </Card>\n    </Link>\n  </GalleryItem>\n);\n\nPlatformCard.propTypes = {\n  history: propTypes.object,\n  imageUrl: propTypes.string,\n  name: propTypes.string,\n  source_type_id: propTypes.string,\n  id: propTypes.string\n};\n\nexport default PlatformCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Level, LevelItem } from '@patternfly/react-core';\nimport TopToolbar from '../Shared/top-toolbar';\nimport FilterToolbarItem from '../Shared/FilterToolbarItem';\nimport OrderToolbarItem from '../Shared/OrderToolbarItem';\n\nconst PlatformToolbar = ({ searchValue, onFilterChange }) => (\n  <TopToolbar>\n    <Level>\n      <LevelItem>\n        <FilterToolbarItem searchValue={ searchValue } onFilterChange={ onFilterChange } placeholder=\"Find a product\" />\n      </LevelItem>\n      <LevelItem>\n        <OrderToolbarItem />\n      </LevelItem>\n    </Level>\n  </TopToolbar>\n);\n\nPlatformToolbar.propTypes = {\n  searchValue: PropTypes.string,\n  onFilterChange: PropTypes.func.isRequired\n};\n\nexport default PlatformToolbar;\n","import React, { Component, Fragment } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Title } from '@patternfly/react-core';\nimport { fetchSelectedPlatform, fetchPlatformItems } from '../../redux/Actions/PlatformActions';\nimport ContentGallery from '../../SmartComponents/ContentGallery/ContentGallery';\nimport PlatformToolbar from '../../PresentationalComponents/Platform/PlatformToolbar';\nimport PlatformItem from '../../PresentationalComponents/Platform/PlatformItem';\nimport { scrollToTop, filterServiceOffering } from '../../Helpers/Shared/helpers';\nimport './platform.scss';\n\nclass Platform extends Component {\n  state = {\n    filterValue: ''\n  };\n\n  fetchData(apiProps) {\n    this.props.fetchSelectedPlatform(apiProps);\n    this.props.fetchPlatformItems(apiProps);\n  }\n\n  componentDidMount() {\n    this.fetchData(this.props.match.params.id);\n    scrollToTop();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.match.params.id !== this.props.match.params.id) {\n      this.fetchData(this.props.match.params.id);\n      scrollToTop();\n    }\n  }\n\n  handleFilterChange = filterValue => this.setState({ filterValue });\n\n  render() {\n    let filteredItems = {\n      items: this.props.platformItems\n      .filter(item => filterServiceOffering(item, this.state.filterValue))\n      .map(data => <PlatformItem key={ data.id } { ...data } />),\n      isLoading: this.props.isPlatformDataLoading\n    };\n\n    let title = this.props.platform ? this.props.platform.name : '';\n\n    return (\n      <Fragment>\n        <PlatformToolbar searchValue={ this.state.filterValue } onFilterChange={ this.handleFilterChange }/>\n        <div className=\"toolbar-padding\">\n          { title &&  (<Title size={ '2xl' } > { title }</Title>) }\n        </div>\n        <ContentGallery { ...filteredItems }/>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({ platformReducer: { selectedPlatform, platformItems, isPlatformDataLoading }}) => ({\n  platform: selectedPlatform,\n  platformItems: selectedPlatform && platformItems[selectedPlatform.id],\n  isPlatformDataLoading: !selectedPlatform || isPlatformDataLoading\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  fetchSelectedPlatform,\n  fetchPlatformItems\n}, dispatch);\n\nPlatform.propTypes = {\n  filteredItems: PropTypes.object,\n  isPlatformDataLoading: PropTypes.bool,\n  match: PropTypes.object,\n  fetchPlatformItems: PropTypes.func.isRequired,\n  fetchSelectedPlatform: PropTypes.func,\n  platform: PropTypes.shape({\n    name: PropTypes.string\n  }),\n  platformItems: PropTypes.array\n};\n\nPlatform.defaultProps = {\n  platformItems: []\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Platform);\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Route, Switch } from 'react-router-dom';\nimport { Section } from '@red-hat-insights/insights-frontend-components';\nimport { Text, TextContent, TextVariants, Level, LevelItem } from '@patternfly/react-core';\nimport ContentGallery from '../../SmartComponents/ContentGallery/ContentGallery';\nimport PlatformCard from '../../PresentationalComponents/Platform/PlatformCard';\nimport PlatformToolbar from '../../PresentationalComponents/Platform/PlatformToolbar';\nimport { fetchPlatforms } from '../../redux/Actions/PlatformActions';\nimport { scrollToTop } from '../../Helpers/Shared/helpers';\nimport Platform from './Platform';\n\nconst platformsRoutes = {\n  platforms: '',\n  detail: '/detail/:id'\n};\n\nclass Platforms extends Component {\n    state = {\n      filterValue: '',\n      isOpen: false\n    };\n\n    fetchData = () => this.props.fetchPlatforms();\n\n    componentDidMount() {\n      this.fetchData();\n      scrollToTop();\n    }\n\n    handleFilterChange = filterValue => this.setState({ filterValue })\n\n    renderToolbar() {\n      return (\n        <Level className=\"pf-u-pt-md pf-u-pr-xl pf-u-pl-xl\">\n          <LevelItem>\n            <TextContent>\n              <Text component={ TextVariants.h2 }>All Platforms </Text>\n            </TextContent>\n          </LevelItem>\n        </Level>\n      );\n    }\n\n    renderPlatforms = () => {\n      const filteredItems = {\n        items: this.props.platforms\n        .filter(({ name }) => name.toLowerCase().includes(this.state.filterValue.toLowerCase()))\n        .map((item) => <PlatformCard key={ item.id } { ...item } />),\n        isLoading: this.props.isLoading\n      };\n      return (\n        <Fragment>\n          <PlatformToolbar onFilterChange={ this.handleFilterChange } searchValue={ this.state.filterValue } />\n          { this.renderToolbar() }\n          <ContentGallery { ...filteredItems } />\n        </Fragment>\n      );\n    }\n\n    render() {\n      return (\n        <Section>\n          <Switch>\n            <Route path={ `/platforms${platformsRoutes.detail}` } component={ Platform } />\n            <Route path={ `/platforms${platformsRoutes.platforms}` } render={ () => this.renderPlatforms() } />\n          </Switch>\n        </Section>\n      );\n    }\n}\n\nconst mapStateToProps = ({ platformReducer: { platforms, isLoading, filterValue }}) => ({\n  platforms,\n  isLoading,\n  searchFilter: filterValue\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchPlatforms: apiProps => dispatch(fetchPlatforms(apiProps))\n  };\n};\n\nPlatforms.propTypes = {\n  filteredItems: propTypes.array,\n  platforms: propTypes.array,\n  isLoading: propTypes.bool,\n  searchFilter: propTypes.string,\n  showModal: propTypes.func,\n  hideModal: propTypes.func,\n  history: propTypes.object,\n  fetchPlatforms: propTypes.func\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Platforms);\n"],"sourceRoot":""}