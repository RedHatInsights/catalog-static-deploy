{"version":3,"file":"js/platforms.18d3894b00850aa4d227.js","mappings":"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","sources":["webpack:///./src/presentational-components/platform/platform-card.tsx","webpack:///./src/smart-components/platform/platforms.js"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { useReducer } from 'react';\nimport {\n  CardHeader,\n  CardFooter,\n  GalleryItem,\n  Text,\n  TextVariants,\n  TextContent,\n  Label,\n  Button,\n  Tooltip\n} from '@patternfly/react-core';\nimport ItemDetails, {\n  HeaderLevel,\n  HeaderTitle,\n  ItemDetailsProps\n} from '../shared/card-common';\n\nimport { PLATFORM_TEMPLATES_ROUTE } from '../../constants/routes';\nimport EllipsisTextContainer from '../styled-components/ellipsis-text-container';\nimport CatalogLink from '../../smart-components/common/catalog-link';\nimport { StyledCard } from '../styled-components/styled-gallery';\nimport { StyledCardBody } from '../styled-components/card';\nimport CardIcon from '../shared/card-icon';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport { SyncAltIcon } from '@patternfly/react-icons';\nimport { refreshPlatform } from '../../redux/actions/platform-actions';\nimport { refreshPlatform as refreshPlatformS } from '../../redux/actions/platform-actions-s';\nimport platformsMessages from '../../messages/platforms.messages';\nimport { useDispatch } from 'react-redux';\nimport { delay } from '../../helpers/shared/helpers';\n\nconst TO_DISPLAY = ['description', 'modified'];\n\nexport interface PlatformInfo {\n  version?: string;\n  ansible_version?: string;\n}\n\nexport interface PlatformCardProps extends ItemDetailsProps {\n  name: string;\n  id: string;\n  availability_status?: string;\n  last_successful_refresh_at?: string;\n  refresh_started_at?: string;\n  refresh_finished_at?: string;\n  info?: PlatformInfo;\n  source_type_id: string;\n  imageUrl: string;\n}\n\nconst initialState = {\n  isFetching: false\n};\n\nconst platformCardState = (state: any, action: { type: any; payload: any }) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n  }\n\n  return state;\n};\n\nconst PlatformCard: React.ComponentType<PlatformCardProps> = ({\n  name,\n  id,\n  updateData,\n  ...props\n}) => {\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n\n  const [{ isFetching }, stateDispatch] = useReducer(\n    platformCardState,\n    initialState\n  );\n  const handleRefreshPlatform = (platformId: string) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    Promise.resolve(\n      dispatch(\n        window.catalog?.standalone\n          ? refreshPlatformS(platformId)\n          : refreshPlatform(platformId)\n      )\n    ).then(async () => {\n      await delay(10000);\n      stateDispatch({ type: 'setFetching', payload: false });\n      updateData();\n    });\n  };\n\n  return (\n    <GalleryItem>\n      <StyledCard key={id} ouiaId={`platform-${id}`}>\n        <CardHeader>\n          <HeaderLevel>\n            <HeaderTitle>\n              <CardIcon height={40} sourceId={id} />\n            </HeaderTitle>\n            <Tooltip\n              content={\n                <Text>{formatMessage(platformsMessages.refreshTooltip)}</Text>\n              }\n            >\n              <Button\n                id={`refresh-platform-${id}`}\n                ouiaId={`refresh-platform-${id}`}\n                variant=\"link\"\n                onClick={() => handleRefreshPlatform(id)}\n                isDisabled={isFetching}\n              >\n                {isFetching ? (\n                  <SyncAltIcon key={`refresh-${id}`} color=\"grey\" />\n                ) : (\n                  <SyncAltIcon key={`refresh-${id}`} color=\"blue\" />\n                )}\n              </Button>\n            </Tooltip>\n          </HeaderLevel>\n        </CardHeader>\n        <StyledCardBody>\n          <TextContent>\n            <CatalogLink\n              pathname={PLATFORM_TEMPLATES_ROUTE}\n              searchParams={{ platform: id }}\n            >\n              <Text\n                title={name}\n                className=\"pf-u-mb-0\"\n                component={TextVariants.h3}\n              >\n                <EllipsisTextContainer>{name}</EllipsisTextContainer>\n              </Text>\n            </CatalogLink>\n            {isFetching ? (\n              <TextContent className=\"pf-u-mb-md\">\n                <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                  Retrieving data.... &nbsp;\n                </Text>\n              </TextContent>\n            ) : (\n              props.last_successful_refresh_at && (\n                <TextContent className=\"pf-u-mb-md\">\n                  <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                    Last refreshed &nbsp;\n                    <DateFormat\n                      date={props.last_successful_refresh_at}\n                      type=\"relative\"\n                    />\n                  </Text>\n                </TextContent>\n              )\n            )}\n            {props.info && (\n              <TextContent className=\"pf-u-mb-md\">\n                <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                  {formatMessage(platformsMessages.platformVersion)}\n                </Text>\n                <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                  {props?.info?.version}\n                </Text>\n                <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                  {formatMessage(platformsMessages.ansibleVersion)}\n                </Text>\n                <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                  {props?.info?.ansible_version}\n                </Text>\n              </TextContent>\n            )}\n          </TextContent>\n          <ItemDetails {...{ name, ...props }} toDisplay={TO_DISPLAY} />\n        </StyledCardBody>\n        <CardFooter>\n          <Label\n            variant=\"filled\"\n            color={props.availability_status === 'available' ? 'green' : 'red'}\n          >\n            {props.availability_status === 'available'\n              ? formatMessage(labelMessages.available)\n              : formatMessage(labelMessages.notAvailable)}\n          </Label>\n        </CardFooter>\n      </StyledCard>\n    </GalleryItem>\n  );\n};\n\nexport default PlatformCard;\n","import React, {\n  Fragment,\n  useEffect,\n  useState,\n  useContext,\n  ReactNode\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, Text, TextVariants } from '@patternfly/react-core';\nimport { SearchIcon, CogIcon } from '@patternfly/react-icons';\n\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport ToolbarRenderer from '../../toolbar/toolbar-renderer';\nimport ContentGallery from '../content-gallery/content-gallery';\nimport { fetchPlatforms } from '../../redux/actions/platform-actions';\nimport { fetchPlatforms as fetchPlatformsS } from '../../redux/actions/platform-actions-s';\nimport PlatformCard from '../../presentational-components/platform/platform-card';\nimport { createPlatformsToolbarSchema } from '../../toolbar/schemas/platforms-toolbar.schema';\nimport ContentGalleryEmptyState from '../../presentational-components/shared/content-gallery-empty-state';\nimport UserContext from '../../user-context';\nimport platformsMessages from '../../messages/platforms.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport filteringMessages from '../../messages/filtering.messages';\nimport { PLATFORMS_DOC_URL } from '../../utilities/constants';\n\nconst Platforms = () => {\n  const formatMessage = useFormatMessage();\n  const [filterValue, setFilterValue] = useState('');\n  const { platforms, isLoading } = useSelector(\n    ({ platformReducer: { platforms, isPlatformDataLoading } }) => ({\n      platforms,\n      isLoading: isPlatformDataLoading\n    })\n  );\n  const dispatch = useDispatch();\n  const {\n    userIdentity: {\n      identity: {\n        user: { is_org_admin }\n      }\n    }\n  } = useContext(UserContext);\n\n  useEffect(() => {\n    dispatch(window.catalog?.standalone ? fetchPlatformsS() : fetchPlatforms());\n    scrollToTop();\n  }, []);\n  const items = window.catalog?.standalone ? platforms.results : platforms;\n  const filteredItems = items\n    ? {\n        items: items?.map((item) => (\n          <PlatformCard\n            ouiaId={`platform-${item.id}`}\n            key={item.id}\n            {...item}\n            updateData={() =>\n              dispatch(\n                window.catalog?.standalone\n                  ? fetchPlatformsS()\n                  : fetchPlatforms()\n              )\n            }\n          />\n        )),\n        isLoading: isLoading && items.length === 0\n      }\n    : {};\n\n  const FilterAction = () => (\n    <Button\n      ouiaId={'clear-filter'}\n      variant=\"link\"\n      onClick={() => setFilterValue('')}\n    >\n      {formatMessage(filteringMessages.clearFilters)}\n    </Button>\n  );\n\n  const emptyStateProps = {\n    PrimaryAction: filterValue && filterValue !== '' ? FilterAction : undefined,\n    title:\n      filterValue && filterValue !== ''\n        ? formatMessage(filteringMessages.noResults)\n        : formatMessage(platformsMessages.noPlatforms),\n    description:\n      filterValue && filterValue !== '' ? (\n        formatMessage(filteringMessages.noResultsDescription)\n      ) : (\n        <Text id=\"platform_doc_url\" component={TextVariants.p}>\n          {formatMessage(platformsMessages.platformsNoDataDescription)} &nbsp;\n          <a href={PLATFORMS_DOC_URL} target=\"_blank\" rel=\"noopener noreferrer\">\n            {formatMessage(platformsMessages.platformsDocTitle)}\n          </a>\n        </Text>\n      ),\n    Icon: filterValue && filterValue !== '' ? SearchIcon : CogIcon\n  };\n  return (\n    <Fragment>\n      <ToolbarRenderer\n        schema={createPlatformsToolbarSchema({\n          onFilterChange: (value) => setFilterValue(value),\n          searchValue: filterValue,\n          title: formatMessage(platformsMessages.title)\n        })}\n      />\n      <ContentGallery\n        {...filteredItems}\n        renderEmptyState={() => {\n          return <ContentGalleryEmptyState {...emptyStateProps} />;\n        }}\n      />\n    </Fragment>\n  );\n};\n\nexport default Platforms;\n"],"names":["TO_DISPLAY","initialState","isFetching","platformCardState","state","action","type","payload","name","id","updateData","props","formatMessage","dispatch","useDispatch","useReducer","stateDispatch","GalleryItem","key","ouiaId","CardHeader","height","sourceId","Tooltip","content","Text","Button","variant","onClick","platformId","Promise","resolve","window","catalog","standalone","then","handleRefreshPlatform","isDisabled","SyncAltIcon","color","TextContent","pathname","searchParams","platform","title","className","component","TextVariants","last_successful_refresh_at","DateFormat","date","info","version","ansible_version","toDisplay","CardFooter","Label","availability_status","useFormatMessage","useState","filterValue","setFilterValue","useSelector","platformReducer","platforms","isLoading","isPlatformDataLoading","useContext","UserContext","userIdentity","identity","user","is_org_admin","useEffect","fetchPlatformsS","fetchPlatforms","scrollToTop","items","results","filteredItems","map","item","length","emptyStateProps","PrimaryAction","filteringMessages","undefined","platformsMessages","description","href","PLATFORMS_DOC_URL","target","rel","Icon","SearchIcon","CogIcon","Fragment","schema","createPlatformsToolbarSchema","onFilterChange","value","searchValue","renderEmptyState"],"sourceRoot":""}