{"version":3,"file":"js/order-modal.1644480955869.438e3b4ff18519873915.js","mappings":"yeAqKA,QAxHyD,SAAC,G,IAAEA,EAAQ,WAC5D,GAA4B,IAAAC,WAAS,GAApCC,EAAU,KAAEC,EAAW,KACtBC,GAAW,IAAAC,eAAa,OACxBC,GAAS,IAAAC,cAAY,KACvBC,GAAW,UAEXC,GADiB,OAAS,CAAC,mBAAkB,GACd,kBAC7BC,GAAkB,SAGxB,SAAC,GAA4C,OAAT,oCAAuB,cAEvDC,GAAgB,SAEhBC,GAAe,SACnB,SAAC,GAAuC,OAAT,gCAGjC,IAAAC,YAAU,WACRL,GACE,WACK,QAAmBC,IAGnB,QAAkBA,IAGvBK,MAAK,WAAM,OAAAX,GAAY,QACxB,IAEH,IAAMY,EAAc,WAClB,OAAAT,EAAK,CACHU,SAAUhB,EACVI,OAAM,KAwBJa,EAAkC,SAACC,G,MACjCC,EAA8B,QAAd,EAAAD,MAAAA,OAAM,EAANA,EAAQE,cAAM,eAAEC,KAAI,SAACC,GAMzC,OALIA,EAAMC,wBACDD,EAAME,gBACNF,EAAMG,UAGRH,KAET,OAAO,EAAP,KAAYJ,GAAM,CAAEE,OAAQD,KAG1BD,EAAS,KAcb,OAZIN,EAAa,KACfM,GAAS,UACLD,EACIL,EAAa,GAAoBM,OAChCA,QAELD,EACIL,EAAa,GAAGc,mBACfR,SAKT,kBAAC,EAAAS,MAAK,CACJC,QAAM,EACNC,QAASd,EACTe,MAAM,mBACNC,QAAQ,SAER,kBAAC,EAAAC,MAAK,CAACC,UAAU,cACf,kBAAC,EAAAC,UAAS,KACR,kBAAC,EAAAC,YAAW,KACV,kBAAC,EAAAC,KAAI,KACH,gCAAS1B,EAAc2B,UAM9BnC,EACC,kBAAC,IAAc,CAAC+B,UAAU,aACxB,kBAAC,EAAAK,QAAO,OAGVpB,GACE,kBAAC,KAAY,CACXA,OAAQA,EACRqB,SAxEO,SAACC,GAChBhC,GACE,WACI,QACE,CACEiC,kBAAmB/B,EAAcgC,GACjCC,mBAAoBH,GAEtB9B,IAEF,QACE,CACE+B,kBAAmB/B,EAAcgC,GACjCC,mBAAoBH,GAEtB9B,IAGRK,KAuDQ6B,SAAU7B,EACV8B,cAAe,CACbC,YAAanC,EAAc","sources":["webpack:///./src/smart-components/common/order-modal.tsx"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport {\n  Modal,\n  Level,\n  LevelItem,\n  TextContent,\n  Text\n} from '@patternfly/react-core';\nimport { Spinner } from '@patternfly/react-core/dist/js/components/Spinner/Spinner';\nimport FormRenderer from './form-renderer';\nimport {\n  fetchServicePlans,\n  sendSubmitOrder\n} from '../../redux/actions/order-actions';\nimport {\n  fetchServicePlans as fetchServicePlansS,\n  sendSubmitOrder as sendSubmitOrderS\n} from '../../redux/actions/order-actions-s';\nimport { PortfolioItem as PortfolioItemS } from '../../helpers/order/new-order-helper-s';\nimport { ServicePlan as ServicePlanS } from '../../helpers/order/service-plan-helper-s';\nimport SpinnerWrapper from '../../presentational-components/styled-components/spinner-wrapper';\nimport useQuery from '../../utilities/use-query';\nimport { AsyncMiddlewareAction, CatalogRootState } from '../../types/redux';\nimport {\n  PortfolioItem,\n  ServicePlan\n} from '@redhat-cloud-services/catalog-client';\nimport {\n  AnyObject,\n  ApiCollectionResponse,\n  Full\n} from '../../types/common-types';\nimport { ApiCollectionResponse as ApiCollectionResponseS } from '../../types/common-types-s';\n\nimport { Schema } from '@data-driven-forms/react-form-renderer';\nimport labelMessages from '../../messages/labels.messages';\nimport useFormatMessage from '../../utilities/use-format-message';\nimport { isStandalone } from '../../helpers/shared/helpers';\n\nexport interface OrderModalProps {\n  closeUrl: string;\n}\nconst OrderModal: React.ComponentType<OrderModalProps> = ({ closeUrl }) => {\n  const [isFetching, setFetching] = useState(true);\n  const { search } = useLocation();\n  const { push } = useHistory();\n  const dispatch = useDispatch();\n  const [searchParams] = useQuery(['portfolio-item']);\n  const portfolioItemId = searchParams['portfolio-item'];\n  const { portfolioItem } = useSelector<\n    CatalogRootState,\n    { portfolioItem: PortfolioItem }\n  >(({ portfolioReducer: { portfolioItem } }) => portfolioItem);\n\n  const formatMessage = useFormatMessage();\n\n  const servicePlans = useSelector<CatalogRootState, Full<ServicePlan[]>>(\n    ({ orderReducer: { servicePlans } }) => servicePlans\n  );\n\n  useEffect(() => {\n    dispatch(\n      isStandalone()\n        ? (fetchServicePlansS(portfolioItemId) as Promise<\n            AsyncMiddlewareAction<ApiCollectionResponseS<ServicePlanS[]>>\n          >)\n        : (fetchServicePlans(portfolioItemId) as Promise<\n            AsyncMiddlewareAction<ApiCollectionResponse<ServicePlan[]>>\n          >)\n    ).then(() => setFetching(false));\n  }, []);\n\n  const handleClose = () =>\n    push({\n      pathname: closeUrl,\n      search\n    });\n\n  const onSubmit = (data: ServicePlan) => {\n    dispatch(\n      isStandalone()\n        ? sendSubmitOrderS(\n            {\n              portfolio_item_id: portfolioItem.id,\n              service_parameters: data\n            },\n            portfolioItem as Full<PortfolioItemS>\n          )\n        : sendSubmitOrder(\n            {\n              portfolio_item_id: portfolioItem.id,\n              service_parameters: data\n            },\n            portfolioItem as Full<PortfolioItem>\n          )\n    );\n    handleClose();\n  };\n\n  const updateValidatorsForSubstitution = (schema: Schema) => {\n    const updatedFields = schema?.fields?.map((field) => {\n      if (field.isSubstitution) {\n        delete field.validate;\n        delete field.dataType;\n      }\n\n      return field;\n    });\n    return { ...schema, fields: updatedFields };\n  };\n\n  let schema = null;\n\n  if (servicePlans[0]) {\n    schema = isStandalone()\n      ? updateValidatorsForSubstitution(\n          ((servicePlans[0] as ServicePlanS).schema as AnyObject)\n            .schema as Schema\n        )\n      : updateValidatorsForSubstitution(\n          ((servicePlans[0].create_json_schema! as AnyObject)\n            .schema as unknown) as Schema\n        );\n  }\n\n  return (\n    <Modal\n      isOpen\n      onClose={handleClose}\n      title=\"Order submission\"\n      variant=\"small\"\n    >\n      <Level className=\"pf-u-mb-md\">\n        <LevelItem>\n          <TextContent>\n            <Text>\n              <strong>{portfolioItem.name}</strong>\n            </Text>\n          </TextContent>\n        </LevelItem>\n      </Level>\n\n      {isFetching ? (\n        <SpinnerWrapper className=\"pf-u-m-sm\">\n          <Spinner />\n        </SpinnerWrapper>\n      ) : (\n        schema && (\n          <FormRenderer\n            schema={schema}\n            onSubmit={onSubmit}\n            onCancel={handleClose}\n            templateProps={{\n              submitLabel: formatMessage(labelMessages.confirm)\n            }}\n          />\n        )\n      )}\n    </Modal>\n  );\n};\n\nexport default OrderModal;\n"],"names":["closeUrl","useState","isFetching","setFetching","search","useLocation","push","useHistory","dispatch","portfolioItemId","portfolioItem","formatMessage","servicePlans","useEffect","then","handleClose","pathname","updateValidatorsForSubstitution","schema","updatedFields","fields","map","field","isSubstitution","validate","dataType","create_json_schema","Modal","isOpen","onClose","title","variant","Level","className","LevelItem","TextContent","Text","name","Spinner","onSubmit","data","portfolio_item_id","id","service_parameters","onCancel","templateProps","submitLabel"],"sourceRoot":""}