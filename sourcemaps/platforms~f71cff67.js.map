{"version":3,"sources":["webpack:///./src/smart-components/common/async-pagination.js","webpack:///./src/helpers/platform/platform-helper.js","webpack:///./src/redux/actions/platform-actions.js","webpack:///./src/presentational-components/shared/content-gallery-empty-state.js","webpack:///./src/presentational-components/shared/card-common.js","webpack:///./src/presentational-components/styled-components/ellipsis-text-container.js","webpack:///./src/presentational-components/styled-components/card.js","webpack:///./src/presentational-components/styled-components/styled-gallery.js","webpack:///./src/smart-components/content-gallery/content-gallery.js","webpack:///./src/toolbar/schemas/platforms-toolbar.schema.js","webpack:///./src/assets/images/platform-default.svg","webpack:///./src/assets/images/platform-openshift.svg","webpack:///./src/assets/images/platform-amazon.png","webpack:///./src/assets/images/platform-tower.png","webpack:///./src/presentational-components/shared/image-with-default.js","webpack:///./src/presentational-components/platform/platform-card.js","webpack:///./src/smart-components/platform/platforms.js"],"names":["AsyncPagination","meta","limit","count","offset","apiProps","apiRequest","className","isCompact","props","perPage","itemCount","onPerPageSelect","_event","page","getCurrentPage","onSetPage","number","debounce","options","getNewPage","request","debouncePromise","direction","propTypes","PropTypes","shape","isRequired","func","any","string","bool","defaultProps","axiosInstance","getAxiosInstance","graphqlInstance","getGraphqlInstance","getPlatforms","post","SOURCES_API_BASE","query","then","data","application_types","sources","getPlatform","platformId","get","getPlatformItems","filter","filterQuery","TOPOLOGICAL_INVENTORY_API_BASE","getPlatformInventories","defaultSettings","getServiceOffering","serviceOfferingId","sourceId","Promise","all","source","source_type_id","icon_url","service","fetchPlatforms","dispatch","type","ActionTypes","PlatformHelper","payload","error","fetchPlatformItems","fetchSelectedPlatform","id","fetchPlatformInventories","fetchServiceOffering","ContentGalleryEmptyState","title","Icon","description","PrimaryAction","renderDescription","icon","component","TextVariants","h1","EmptyStatePrimaryAction","url","label","hasPermission","pathname","preserveSearch","variant","CardPropText","styled","div","ItemDetails","toDisplay","item","map","prop","key","arrayOf","oneOfType","node","EllipsisTextContainer","StyledCardBody","CardBody","StyledCard","Card","StyledGalleryItem","isDisabled","NoItems","ContentGallery","isLoading","items","renderEmptyState","length","hasGutter","array","createPlatformsToolbarSchema","searchValue","onFilterChange","fields","toolbarComponentTypes","TOP_TOOLBAR","TOP_TOOLBAR_TITLE","LEVEL","LEVEL_ITEM","FILTER_TOOLBAR_ITEM","placeholder","createPlatformsTopToolbarSchema","paddingBottom","tabItems","AppTabs","createPlatformsFilterToolbarSchema","filterPlaceholder","TOOLBAR","module","exports","ImageWithDefault","src","TO_DISPLAY","platformTypeImg","1","OpenshiftPlatformImg","2","AmazonPlatformImg","3","TowerPlatformImg","PlatformCard","name","GalleryItem","CardHeader","DefaultPlatformImg","width","height","TextContent","PLATFORM_TEMPLATES_ROUTE","searchParams","platform","Text","h3","CardFooter","history","object","imageUrl","Platforms","useState","filterValue","setFilterValue","useSelector","platformReducer","platforms","isPlatformDataLoading","useDispatch","is_org_admin","useContext","UserContext","userIdentity","identity","user","useEffect","scrollToTop","insights","chrome","appNavClick","secondaryNav","renderEmptyStateDescription","p","href","document","baseURI","filteredItems","toLowerCase","includes","schema","value","SearchIcon"],"mappings":"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","file":"js/platforms~f71cff67.b283a85aafb05d0e3794.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport debouncePromise from 'awesome-debounce-promise';\n\nimport { Pagination } from '@patternfly/react-core';\n\nimport { getCurrentPage, getNewPage } from '../../helpers/shared/pagination';\n\nconst AsyncPagination = ({\n  meta: { limit, count, offset },\n  apiProps,\n  apiRequest,\n  className,\n  isCompact,\n  ...props\n}) => {\n  const handleOnPerPageSelect = (_event, limit) =>\n    apiRequest(apiProps, {\n      offset,\n      limit\n    });\n\n  const handleSetPage = (_event, number, debounce) => {\n    const options = {\n      offset: getNewPage(number, limit),\n      limit\n    };\n\n    const request = () => apiRequest(apiProps, options);\n    if (debounce) {\n      return debouncePromise(request, 250)();\n    }\n\n    return request();\n  };\n\n  return (\n    <div className={className}>\n      <Pagination\n        perPage={limit || 50}\n        itemCount={count || 0}\n        onPerPageSelect={handleOnPerPageSelect}\n        page={getCurrentPage(limit, offset)}\n        onSetPage={handleSetPage}\n        direction=\"down\"\n        isCompact={isCompact}\n        {...props}\n      />\n    </div>\n  );\n};\n\nAsyncPagination.propTypes = {\n  meta: PropTypes.shape({\n    count: PropTypes.number,\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number.isRequired\n  }),\n  apiRequest: PropTypes.func.isRequired,\n  apiProps: PropTypes.any,\n  className: PropTypes.string,\n  isCompact: PropTypes.bool\n};\n\nAsyncPagination.defaultProps = {\n  meta: {\n    count: 0,\n    limit: 50,\n    offset: 0\n  },\n  className: '',\n  isCompact: false\n};\n\nexport default AsyncPagination;\n","import { getAxiosInstance, getGraphqlInstance } from '../shared/user-login';\nimport {\n  TOPOLOGICAL_INVENTORY_API_BASE,\n  SOURCES_API_BASE\n} from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\nconst axiosInstance = getAxiosInstance();\nconst graphqlInstance = getGraphqlInstance();\n\nconst sourcesQuery = `\nquery {\n  application_types (filter: { name: \"/insights/platform/catalog\" }) {\n    id\n    name\n    sources {\n      id\n      name\n      source_type_id\n    }\n  }\n}`;\n\nexport const getPlatforms = () => {\n  return graphqlInstance\n    .post(`${SOURCES_API_BASE}/graphql`, { query: sourcesQuery })\n    .then(({ data: { application_types } }) => application_types)\n    .then(([{ sources }]) => sources);\n};\n\nexport const getPlatform = (platformId) => {\n  return axiosInstance.get(`${SOURCES_API_BASE}/sources/${platformId}`);\n};\n\nexport const getPlatformItems = (platformId, filter, options) => {\n  const filterQuery = filter ? `&filter[name][contains_i]=${filter}` : '';\n  if (platformId) {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/sources/${platformId}/service_offerings?filter[archived_at][nil]${filterQuery}${\n        options ? `&limit=${options.limit}&offset=${options.offset}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/service_offerings`\n    );\n  }\n};\n\nexport const getPlatformInventories = (\n  platformId,\n  filter = '',\n  options = defaultSettings\n) => {\n  if (platformId) {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/sources/${platformId}/service_inventories?filter[name][contains_i]=${filter}${\n        options ? `&limit=${options.limit}&offset=${options.offset}` : ''\n      }`\n    );\n  } else {\n    return axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/service_inventories?limit=${options.limit}&offset=${options.offset}`\n    );\n  }\n};\n\nexport const getServiceOffering = (serviceOfferingId, sourceId) =>\n  Promise.all([\n    axiosInstance.get(\n      `${TOPOLOGICAL_INVENTORY_API_BASE}/service_offerings/${serviceOfferingId}`\n    ),\n    axiosInstance\n      .get(`${SOURCES_API_BASE}/sources/${sourceId}`)\n      .then((source) => {\n        return axiosInstance\n          .get(`${SOURCES_API_BASE}/source_types/${source.source_type_id}`)\n          .then(({ icon_url }) => ({\n            ...source,\n            icon_url\n          }));\n      })\n  ]).then(([service, source]) => ({\n    service,\n    source\n  }));\n","import * as ActionTypes from '../action-types';\nimport * as PlatformHelper from '../../helpers/platform/platform-helper';\n\nexport const fetchPlatforms = () => (dispatch) => {\n  dispatch({ type: `${ActionTypes.FETCH_PLATFORMS}_PENDING` });\n  return PlatformHelper.getPlatforms()\n    .then((data) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_FULFILLED`,\n        payload: data\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: `${ActionTypes.FETCH_PLATFORMS}_REJECTED`,\n        payload: error\n      })\n    );\n};\n\nexport const fetchPlatformItems = (platformId, filter, options) => ({\n  type: ActionTypes.FETCH_PLATFORM_ITEMS,\n  payload: PlatformHelper.getPlatformItems(platformId, filter, options),\n  meta: {\n    platformId,\n    filter,\n    ...options\n  }\n});\n\nexport const fetchMultiplePlatformItems = (platformsId) => {\n  const platformPromisses = platformsId.map((platformId) =>\n    PlatformHelper.getPlatformItems(platformId).then((data) => ({\n      [platformId]: data\n    }))\n  );\n  return {\n    type: ActionTypes.FETCH_MULTIPLE_PLATFORM_ITEMS,\n    payload: Promise.all(platformPromisses).then((data) =>\n      data.reduce(\n        (acc, curr) => ({\n          ...acc,\n          ...curr\n        }),\n        {}\n      )\n    )\n  };\n};\n\nexport const fetchSelectedPlatform = (id) => ({\n  type: ActionTypes.FETCH_PLATFORM,\n  payload: PlatformHelper.getPlatform(id)\n});\n\nexport const searchPlatformItems = (value) => ({\n  type: ActionTypes.FILTER_PLATFORM_ITEMS,\n  payload: new Promise((resolve) => {\n    resolve(value);\n  })\n});\n\nexport const fetchPlatformInventories = (platformId, filter, options) => ({\n  type: ActionTypes.FETCH_PLATFORM_INVENTORIES,\n  payload: PlatformHelper.getPlatformInventories(platformId, filter, options)\n});\n\nexport const fetchServiceOffering = (...args) => ({\n  type: ActionTypes.FETCH_SERVICE_OFFERING,\n  payload: PlatformHelper.getServiceOffering(...args)\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  Text,\n  TextContent,\n  TextVariants\n} from '@patternfly/react-core';\nimport CatalogLink from '../../smart-components/common/catalog-link';\n\nconst ContentGalleryEmptyState = ({\n  title,\n  Icon,\n  description,\n  PrimaryAction,\n  renderDescription\n}) => (\n  <div className=\"pf-u-mt-xl\">\n    <EmptyState className=\"pf-u-ml-auto pf-u-mr-auto\">\n      <EmptyStateIcon icon={Icon} />\n      <TextContent>\n        <Text component={TextVariants.h1}>{title}</Text>\n      </TextContent>\n      <EmptyStateBody>\n        {description}\n        {renderDescription()}\n      </EmptyStateBody>\n      <EmptyStateSecondaryActions>\n        {PrimaryAction && <PrimaryAction />}\n      </EmptyStateSecondaryActions>\n    </EmptyState>\n  </div>\n);\n\nContentGalleryEmptyState.defaultProps = {\n  renderDescription: () => null\n};\n\nContentGalleryEmptyState.propTypes = {\n  title: PropTypes.string.isRequired,\n  Icon: PropTypes.any.isRequired,\n  description: PropTypes.string,\n  PrimaryAction: PropTypes.any,\n  renderDescription: PropTypes.func\n};\n\nexport default ContentGalleryEmptyState;\n\nexport const EmptyStatePrimaryAction = ({\n  url,\n  label,\n  hasPermission = false,\n  id\n}) =>\n  hasPermission && (\n    <CatalogLink id={id} pathname={url} preserveSearch>\n      <Button variant=\"primary\">{label}</Button>\n    </CatalogLink>\n  );\n\nEmptyStatePrimaryAction.propTypes = {\n  url: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  id: PropTypes.string,\n  hasPermission: PropTypes.bool\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst CardPropText = styled.div`\n  overflow: hidden;\n`;\n\nconst ItemDetails = ({ toDisplay = [], ...item }) =>\n  toDisplay.map((prop) => (\n    <CardPropText key={`card-prop-${prop}`}>{item[prop]}</CardPropText>\n  ));\n\nItemDetails.propTypes = {\n  toDisplay: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.node,\n      PropTypes.arrayOf(PropTypes.node)\n    ])\n  )\n};\n\nItemDetails.defaultProps = {\n  toDisplay: []\n};\n\nexport default ItemDetails;\n","import styled from 'styled-components';\n\nconst EllipsisTextContainer = styled.div`\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n`;\n\nexport default EllipsisTextContainer;\n","import styled from 'styled-components';\nimport { CardBody } from '@patternfly/react-core';\n\nexport const StyledCardBody = styled(CardBody)`\n  height: 230px;\n  overflow: hidden;\n  padding: 0 !important;\n  margin: 0 24px 24px;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Card, GalleryItem } from '@patternfly/react-core';\n\nexport const StyledCard = styled(Card)`\n  height: 330px;\n  position: relative;\n`;\n\nexport const StyledGalleryItem = styled(({ isDisabled, ...props }) => (\n  <GalleryItem {...props} />\n))`\n  position: relative;\n  ::after {\n    display: ${({ isDisabled }) => (isDisabled ? 'block' : 'none')};\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    content: '';\n    background-color: rgba(210, 210, 210, 0.5);\n    z-index: 1;\n    cursor: progress;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Section } from '@redhat-cloud-services/frontend-components/components/cjs/Section';\nimport { Text, TextVariants, Gallery } from '@patternfly/react-core';\n\nimport { CardLoader } from '../../presentational-components/shared/loader-placeholders';\n\nconst NoItems = () => (\n  <div>\n    <Text component={TextVariants.h1}>No items found</Text>\n  </div>\n);\n\nconst ContentGallery = ({ isLoading, items, renderEmptyState }) =>\n  isLoading ? (\n    <CardLoader />\n  ) : items.length === 0 ? (\n    renderEmptyState ? (\n      renderEmptyState()\n    ) : (\n      <NoItems />\n    )\n  ) : (\n    <Section type=\"content\">\n      <Gallery hasGutter className=\"content-gallery\">\n        {items}\n      </Gallery>\n    </Section>\n  );\n\nContentGallery.propTypes = {\n  isLoading: PropTypes.bool,\n  items: PropTypes.array,\n  renderEmptyState: PropTypes.func\n};\nexport default ContentGallery;\n","import AppTabs from '../../presentational-components/shared/app-tabs';\nimport { toolbarComponentTypes } from '../toolbar-mapper';\nimport AsyncPagination from '../../smart-components/common/async-pagination';\n\nexport const createPlatformsToolbarSchema = ({\n  searchValue,\n  onFilterChange,\n  title\n}) => ({\n  fields: [\n    {\n      component: toolbarComponentTypes.TOP_TOOLBAR,\n      key: 'platforms-toolbar',\n      fields: [\n        {\n          component: toolbarComponentTypes.TOP_TOOLBAR_TITLE,\n          key: 'platforms-toolbar-title',\n          title\n        },\n        {\n          component: toolbarComponentTypes.LEVEL,\n          key: 'platforms-toolbar-actions',\n          fields: [\n            {\n              component: toolbarComponentTypes.LEVEL_ITEM,\n              key: 'input-level-item',\n              fields: [\n                {\n                  component: toolbarComponentTypes.FILTER_TOOLBAR_ITEM,\n                  key: 'platforms-toolbar-filter-input',\n                  searchValue,\n                  onFilterChange,\n                  placeholder: 'Filter by platform'\n                }\n              ]\n            },\n            {\n              component: toolbarComponentTypes.LEVEL_ITEM,\n              key: 'pagination-level-item',\n              fields: []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n});\n\nexport const createPlatformsTopToolbarSchema = ({\n  title,\n  paddingBottom,\n  tabItems\n}) => ({\n  fields: [\n    {\n      component: toolbarComponentTypes.TOP_TOOLBAR,\n      key: 'platforms-toolbar',\n      paddingBottom,\n      fields: [\n        {\n          component: toolbarComponentTypes.TOP_TOOLBAR_TITLE,\n          key: 'platforms-toolbar-title',\n          title\n        },\n        {\n          component: toolbarComponentTypes.LEVEL_ITEM,\n          key: 'tabs-level-item',\n          fields: tabItems\n            ? [\n                {\n                  component: AppTabs,\n                  key: 'platform-tabs',\n                  tabItems\n                }\n              ]\n            : []\n        }\n      ]\n    }\n  ]\n});\n\nexport const createPlatformsFilterToolbarSchema = ({\n  searchValue,\n  onFilterChange,\n  meta,\n  apiRequest,\n  filterPlaceholder\n}) => ({\n  fields: [\n    {\n      component: toolbarComponentTypes.TOOLBAR,\n      key: 'platforms-filter-toolbar',\n      className: 'pf-u-pt-md pf-u-pb-md pf-u-pr-lg pf-u-pl-lg',\n      fields: [\n        {\n          component: toolbarComponentTypes.LEVEL,\n          key: 'platforms-toolbar-actions',\n          className: 'pf-m-grow',\n          fields: [\n            {\n              component: toolbarComponentTypes.LEVEL_ITEM,\n              key: 'input-level-item',\n              fields: [\n                {\n                  component: toolbarComponentTypes.FILTER_TOOLBAR_ITEM,\n                  key: 'platforms-toolbar-filter-input',\n                  searchValue,\n                  onFilterChange,\n                  placeholder: filterPlaceholder\n                }\n              ]\n            },\n            {\n              component: toolbarComponentTypes.LEVEL_ITEM,\n              key: 'pagination-level-item',\n              fields:\n                meta.count > 0\n                  ? [\n                      {\n                        component: AsyncPagination,\n                        key: 'platform-pagination',\n                        apiRequest,\n                        meta,\n                        isCompact: true\n                      }\n                    ]\n                  : []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n});\n","module.exports = __webpack_public_path__ + \"fonts/platform-default.svg\";","module.exports = __webpack_public_path__ + \"fonts/platform-openshift.svg\";","module.exports = __webpack_public_path__ + \"fonts/platform-amazon.png\";","module.exports = __webpack_public_path__ + \"fonts/platform-tower.png\";","import React from 'react';\nimport propTypes from 'prop-types';\n\nconst ImageWithDefault = ({ src, ...props }) => <img src={src} {...props} />;\n\nImageWithDefault.propTypes = {\n  src: propTypes.string.isRequired\n};\n\nexport default ImageWithDefault;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  CardHeader,\n  CardFooter,\n  GalleryItem,\n  Text,\n  TextVariants,\n  TextContent\n} from '@patternfly/react-core';\nimport DefaultPlatformImg from '../../assets/images/platform-default.svg';\nimport OpenshiftPlatformImg from '../../assets/images/platform-openshift.svg';\nimport AmazonPlatformImg from '../../assets/images/platform-amazon.png';\nimport TowerPlatformImg from '../../assets/images/platform-tower.png';\nimport ImageWithDefault from '../shared/image-with-default';\nimport ItemDetails from '../shared/card-common';\n\nimport { PLATFORM_TEMPLATES_ROUTE } from '../../constants/routes';\nimport EllipsisTextContainer from '../styled-components/ellipsis-text-container';\nimport CatalogLink from '../../smart-components/common/catalog-link';\nimport { StyledCard } from '../styled-components/styled-gallery';\nimport { StyledCardBody } from '../styled-components/card';\n\nconst TO_DISPLAY = ['description', 'modified'];\n\nconst platformTypeImg = {\n  1: OpenshiftPlatformImg,\n  2: AmazonPlatformImg,\n  3: TowerPlatformImg\n};\n\nconst PlatformCard = ({ name, id, ...props }) => (\n  <GalleryItem>\n    <StyledCard key={id}>\n      <CardHeader>\n        <ImageWithDefault\n          src={platformTypeImg[props.source_type_id] || DefaultPlatformImg}\n          width=\"80\"\n          height=\"40\"\n        />\n      </CardHeader>\n      <StyledCardBody>\n        <TextContent>\n          <CatalogLink\n            pathname={PLATFORM_TEMPLATES_ROUTE}\n            searchParams={{ platform: id }}\n          >\n            <Text\n              title={name}\n              className=\"pf-u-mb-0\"\n              component={TextVariants.h3}\n            >\n              <EllipsisTextContainer>{name}</EllipsisTextContainer>\n            </Text>\n          </CatalogLink>\n        </TextContent>\n        <ItemDetails {...{ name, ...props }} toDisplay={TO_DISPLAY} />\n      </StyledCardBody>\n      <CardFooter />\n    </StyledCard>\n  </GalleryItem>\n);\n\nPlatformCard.propTypes = {\n  history: propTypes.object,\n  imageUrl: propTypes.string,\n  name: propTypes.string,\n  source_type_id: propTypes.string,\n  id: propTypes.string\n};\n\nexport default PlatformCard;\n","import React, { Fragment, useEffect, useState, useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\n\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport ToolbarRenderer from '../../toolbar/toolbar-renderer';\nimport ContentGallery from '../content-gallery/content-gallery';\nimport { fetchPlatforms } from '../../redux/actions/platform-actions';\nimport PlatformCard from '../../presentational-components/platform/platform-card';\nimport { createPlatformsToolbarSchema } from '../../toolbar/schemas/platforms-toolbar.schema';\nimport ContentGalleryEmptyState from '../../presentational-components/shared/content-gallery-empty-state';\nimport UserContext from '../../user-context';\n\nconst Platforms = () => {\n  const [filterValue, setFilterValue] = useState('');\n  const { platforms, isLoading } = useSelector(\n    ({ platformReducer: { platforms, isPlatformDataLoading } }) => ({\n      platforms,\n      isLoading: isPlatformDataLoading\n    })\n  );\n  const dispatch = useDispatch();\n  const {\n    userIdentity: {\n      identity: {\n        user: { is_org_admin }\n      }\n    }\n  } = useContext(UserContext);\n\n  useEffect(() => {\n    dispatch(fetchPlatforms());\n    scrollToTop();\n    insights.chrome.appNavClick({ id: 'platforms', secondaryNav: true });\n  }, []);\n\n  const renderEmptyStateDescription = () => (\n    <Fragment>\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Configure a source in order to add products to portfolios.\n        </Text>\n        {is_org_admin ? (\n          <Text component={TextVariants.p}>\n            To connect to a source, go to{' '}\n            <a href={`${document.baseURI}settings/sources`}>Sources</a>\n            &nbsp;under Settings.\n          </Text>\n        ) : (\n          <Text>\n            Contact your organization administrator to setup sources for\n            Catalog.\n          </Text>\n        )}\n      </TextContent>\n    </Fragment>\n  );\n  const filteredItems = {\n    items: platforms\n      .filter(({ name }) =>\n        name.toLowerCase().includes(filterValue.toLowerCase())\n      )\n      .map((item) => <PlatformCard key={item.id} {...item} />),\n    isLoading: isLoading && platforms.length === 0\n  };\n  return (\n    <Fragment>\n      <ToolbarRenderer\n        schema={createPlatformsToolbarSchema({\n          onFilterChange: (value) => setFilterValue(value),\n          searchValue: filterValue,\n          title: 'Platforms'\n        })}\n      />\n      <ContentGallery\n        {...filteredItems}\n        renderEmptyState={() => (\n          <ContentGalleryEmptyState\n            title=\"No platforms yet\"\n            renderDescription={renderEmptyStateDescription}\n            Icon={SearchIcon}\n          />\n        )}\n      />\n    </Fragment>\n  );\n};\n\nexport default Platforms;\n"],"sourceRoot":""}